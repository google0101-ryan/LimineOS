
hdd_root/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <malloc>:
ffffffff80000000:	f3 0f 1e fa          	endbr64 
ffffffff80000004:	55                   	push   rbp
ffffffff80000005:	8b 05 75 79 00 00    	mov    eax,DWORD PTR [rip+0x7975]        # ffffffff80007980 <l_initialized>
ffffffff8000000b:	48 89 e5             	mov    rbp,rsp
ffffffff8000000e:	41 54                	push   r12
ffffffff80000010:	53                   	push   rbx
ffffffff80000011:	48 89 fb             	mov    rbx,rdi
ffffffff80000014:	85 c0                	test   eax,eax
ffffffff80000016:	0f 85 68 01 00 00    	jne    ffffffff80000184 <malloc+0x184>
ffffffff8000001c:	48 8b 05 6d 57 00 00 	mov    rax,QWORD PTR [rip+0x576d]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80000023:	48 8b 15 66 57 00 00 	mov    rdx,QWORD PTR [rip+0x5766]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff8000002a:	48 89 05 4f 78 00 00 	mov    QWORD PTR [rip+0x784f],rax        # ffffffff80007880 <l_freePages>
ffffffff80000031:	48 89 05 50 78 00 00 	mov    QWORD PTR [rip+0x7850],rax        # ffffffff80007888 <l_freePages+0x8>
ffffffff80000038:	48 89 15 c1 77 00 00 	mov    QWORD PTR [rip+0x77c1],rdx        # ffffffff80007800 <l_completePages>
ffffffff8000003f:	48 89 05 4a 78 00 00 	mov    QWORD PTR [rip+0x784a],rax        # ffffffff80007890 <l_freePages+0x10>
ffffffff80000046:	48 89 05 4b 78 00 00 	mov    QWORD PTR [rip+0x784b],rax        # ffffffff80007898 <l_freePages+0x18>
ffffffff8000004d:	48 89 15 b4 77 00 00 	mov    QWORD PTR [rip+0x77b4],rdx        # ffffffff80007808 <l_completePages+0x8>
ffffffff80000054:	48 89 05 45 78 00 00 	mov    QWORD PTR [rip+0x7845],rax        # ffffffff800078a0 <l_freePages+0x20>
ffffffff8000005b:	48 89 05 46 78 00 00 	mov    QWORD PTR [rip+0x7846],rax        # ffffffff800078a8 <l_freePages+0x28>
ffffffff80000062:	48 89 15 a7 77 00 00 	mov    QWORD PTR [rip+0x77a7],rdx        # ffffffff80007810 <l_completePages+0x10>
ffffffff80000069:	48 89 05 40 78 00 00 	mov    QWORD PTR [rip+0x7840],rax        # ffffffff800078b0 <l_freePages+0x30>
ffffffff80000070:	48 89 05 41 78 00 00 	mov    QWORD PTR [rip+0x7841],rax        # ffffffff800078b8 <l_freePages+0x38>
ffffffff80000077:	48 89 15 9a 77 00 00 	mov    QWORD PTR [rip+0x779a],rdx        # ffffffff80007818 <l_completePages+0x18>
ffffffff8000007e:	48 89 05 3b 78 00 00 	mov    QWORD PTR [rip+0x783b],rax        # ffffffff800078c0 <l_freePages+0x40>
ffffffff80000085:	48 89 05 3c 78 00 00 	mov    QWORD PTR [rip+0x783c],rax        # ffffffff800078c8 <l_freePages+0x48>
ffffffff8000008c:	48 89 15 8d 77 00 00 	mov    QWORD PTR [rip+0x778d],rdx        # ffffffff80007820 <l_completePages+0x20>
ffffffff80000093:	48 89 05 36 78 00 00 	mov    QWORD PTR [rip+0x7836],rax        # ffffffff800078d0 <l_freePages+0x50>
ffffffff8000009a:	48 89 05 37 78 00 00 	mov    QWORD PTR [rip+0x7837],rax        # ffffffff800078d8 <l_freePages+0x58>
ffffffff800000a1:	48 89 15 80 77 00 00 	mov    QWORD PTR [rip+0x7780],rdx        # ffffffff80007828 <l_completePages+0x28>
ffffffff800000a8:	48 89 05 31 78 00 00 	mov    QWORD PTR [rip+0x7831],rax        # ffffffff800078e0 <l_freePages+0x60>
ffffffff800000af:	48 89 05 32 78 00 00 	mov    QWORD PTR [rip+0x7832],rax        # ffffffff800078e8 <l_freePages+0x68>
ffffffff800000b6:	48 89 15 73 77 00 00 	mov    QWORD PTR [rip+0x7773],rdx        # ffffffff80007830 <l_completePages+0x30>
ffffffff800000bd:	48 89 05 2c 78 00 00 	mov    QWORD PTR [rip+0x782c],rax        # ffffffff800078f0 <l_freePages+0x70>
ffffffff800000c4:	48 89 05 2d 78 00 00 	mov    QWORD PTR [rip+0x782d],rax        # ffffffff800078f8 <l_freePages+0x78>
ffffffff800000cb:	48 89 15 66 77 00 00 	mov    QWORD PTR [rip+0x7766],rdx        # ffffffff80007838 <l_completePages+0x38>
ffffffff800000d2:	48 89 05 27 78 00 00 	mov    QWORD PTR [rip+0x7827],rax        # ffffffff80007900 <l_freePages+0x80>
ffffffff800000d9:	48 89 05 28 78 00 00 	mov    QWORD PTR [rip+0x7828],rax        # ffffffff80007908 <l_freePages+0x88>
ffffffff800000e0:	48 89 15 59 77 00 00 	mov    QWORD PTR [rip+0x7759],rdx        # ffffffff80007840 <l_completePages+0x40>
ffffffff800000e7:	48 89 05 22 78 00 00 	mov    QWORD PTR [rip+0x7822],rax        # ffffffff80007910 <l_freePages+0x90>
ffffffff800000ee:	48 89 05 23 78 00 00 	mov    QWORD PTR [rip+0x7823],rax        # ffffffff80007918 <l_freePages+0x98>
ffffffff800000f5:	48 89 15 4c 77 00 00 	mov    QWORD PTR [rip+0x774c],rdx        # ffffffff80007848 <l_completePages+0x48>
ffffffff800000fc:	48 89 05 1d 78 00 00 	mov    QWORD PTR [rip+0x781d],rax        # ffffffff80007920 <l_freePages+0xa0>
ffffffff80000103:	48 89 05 1e 78 00 00 	mov    QWORD PTR [rip+0x781e],rax        # ffffffff80007928 <l_freePages+0xa8>
ffffffff8000010a:	48 89 15 3f 77 00 00 	mov    QWORD PTR [rip+0x773f],rdx        # ffffffff80007850 <l_completePages+0x50>
ffffffff80000111:	48 89 05 18 78 00 00 	mov    QWORD PTR [rip+0x7818],rax        # ffffffff80007930 <l_freePages+0xb0>
ffffffff80000118:	48 89 05 19 78 00 00 	mov    QWORD PTR [rip+0x7819],rax        # ffffffff80007938 <l_freePages+0xb8>
ffffffff8000011f:	48 89 15 32 77 00 00 	mov    QWORD PTR [rip+0x7732],rdx        # ffffffff80007858 <l_completePages+0x58>
ffffffff80000126:	48 89 05 13 78 00 00 	mov    QWORD PTR [rip+0x7813],rax        # ffffffff80007940 <l_freePages+0xc0>
ffffffff8000012d:	48 89 05 14 78 00 00 	mov    QWORD PTR [rip+0x7814],rax        # ffffffff80007948 <l_freePages+0xc8>
ffffffff80000134:	48 89 15 25 77 00 00 	mov    QWORD PTR [rip+0x7725],rdx        # ffffffff80007860 <l_completePages+0x60>
ffffffff8000013b:	48 89 05 0e 78 00 00 	mov    QWORD PTR [rip+0x780e],rax        # ffffffff80007950 <l_freePages+0xd0>
ffffffff80000142:	48 89 05 0f 78 00 00 	mov    QWORD PTR [rip+0x780f],rax        # ffffffff80007958 <l_freePages+0xd8>
ffffffff80000149:	48 89 15 18 77 00 00 	mov    QWORD PTR [rip+0x7718],rdx        # ffffffff80007868 <l_completePages+0x68>
ffffffff80000150:	48 89 05 09 78 00 00 	mov    QWORD PTR [rip+0x7809],rax        # ffffffff80007960 <l_freePages+0xe0>
ffffffff80000157:	48 89 05 0a 78 00 00 	mov    QWORD PTR [rip+0x780a],rax        # ffffffff80007968 <l_freePages+0xe8>
ffffffff8000015e:	48 89 15 0b 77 00 00 	mov    QWORD PTR [rip+0x770b],rdx        # ffffffff80007870 <l_completePages+0x70>
ffffffff80000165:	48 89 05 04 78 00 00 	mov    QWORD PTR [rip+0x7804],rax        # ffffffff80007970 <l_freePages+0xf0>
ffffffff8000016c:	48 89 05 05 78 00 00 	mov    QWORD PTR [rip+0x7805],rax        # ffffffff80007978 <l_freePages+0xf8>
ffffffff80000173:	48 89 15 fe 76 00 00 	mov    QWORD PTR [rip+0x76fe],rdx        # ffffffff80007878 <l_completePages+0x78>
ffffffff8000017a:	c7 05 fc 77 00 00 01 	mov    DWORD PTR [rip+0x77fc],0x1        # ffffffff80007980 <l_initialized>
ffffffff80000181:	00 00 00 
ffffffff80000184:	89 df                	mov    edi,ebx
ffffffff80000186:	81 fb ff 00 00 00    	cmp    ebx,0xff
ffffffff8000018c:	0f 86 28 02 00 00    	jbe    ffffffff800003ba <malloc+0x3ba>
ffffffff80000192:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80000197:	be 01 00 00 00       	mov    esi,0x1
ffffffff8000019c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff800001a0:	89 c8                	mov    eax,ecx
ffffffff800001a2:	8d 49 01             	lea    ecx,[rcx+0x1]
ffffffff800001a5:	83 f8 1f             	cmp    eax,0x1f
ffffffff800001a8:	74 08                	je     ffffffff800001b2 <malloc+0x1b2>
ffffffff800001aa:	89 f2                	mov    edx,esi
ffffffff800001ac:	d3 e2                	shl    edx,cl
ffffffff800001ae:	39 d7                	cmp    edi,edx
ffffffff800001b0:	73 ee                	jae    ffffffff800001a0 <malloc+0x1a0>
ffffffff800001b2:	48 63 c8             	movsxd rcx,eax
ffffffff800001b5:	48 8b 04 cd 80 78 00 	mov    rax,QWORD PTR [rcx*8-0x7fff8780]
ffffffff800001bc:	80 
ffffffff800001bd:	48 85 c0             	test   rax,rax
ffffffff800001c0:	0f 84 7a 01 00 00    	je     ffffffff80000340 <malloc+0x340>
ffffffff800001c6:	48 8d 7b 30          	lea    rdi,[rbx+0x30]
ffffffff800001ca:	eb 0d                	jmp    ffffffff800001d9 <malloc+0x1d9>
ffffffff800001cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff800001d0:	48 85 c0             	test   rax,rax
ffffffff800001d3:	0f 84 67 01 00 00    	je     ffffffff80000340 <malloc+0x340>
ffffffff800001d9:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800001dc:	49 89 c0             	mov    r8,rax
ffffffff800001df:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff800001e3:	48 89 d6             	mov    rsi,rdx
ffffffff800001e6:	48 83 ea 30          	sub    rdx,0x30
ffffffff800001ea:	48 39 fa             	cmp    rdx,rdi
ffffffff800001ed:	72 e1                	jb     ffffffff800001d0 <malloc+0x1d0>
ffffffff800001ef:	49 63 50 0c          	movsxd rdx,DWORD PTR [r8+0xc]
ffffffff800001f3:	4c 39 04 d5 80 78 00 	cmp    QWORD PTR [rdx*8-0x7fff8780],r8
ffffffff800001fa:	80 
ffffffff800001fb:	0f 84 2f 01 00 00    	je     ffffffff80000330 <malloc+0x330>
ffffffff80000201:	49 8b 40 28          	mov    rax,QWORD PTR [r8+0x28]
ffffffff80000205:	48 85 c0             	test   rax,rax
ffffffff80000208:	74 08                	je     ffffffff80000212 <malloc+0x212>
ffffffff8000020a:	49 8b 50 20          	mov    rdx,QWORD PTR [r8+0x20]
ffffffff8000020e:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff80000212:	49 8b 50 20          	mov    rdx,QWORD PTR [r8+0x20]
ffffffff80000216:	48 85 d2             	test   rdx,rdx
ffffffff80000219:	74 04                	je     ffffffff8000021f <malloc+0x21f>
ffffffff8000021b:	48 89 42 28          	mov    QWORD PTR [rdx+0x28],rax
ffffffff8000021f:	49 83 78 10 00       	cmp    QWORD PTR [r8+0x10],0x0
ffffffff80000224:	49 c7 40 20 00 00 00 	mov    QWORD PTR [r8+0x20],0x0
ffffffff8000022b:	00 
ffffffff8000022c:	49 c7 40 28 00 00 00 	mov    QWORD PTR [r8+0x28],0x0
ffffffff80000233:	00 
ffffffff80000234:	41 c7 40 0c ff ff ff 	mov    DWORD PTR [r8+0xc],0xffffffff
ffffffff8000023b:	ff 
ffffffff8000023c:	0f 84 ce 00 00 00    	je     ffffffff80000310 <malloc+0x310>
ffffffff80000242:	29 de                	sub    esi,ebx
ffffffff80000244:	41 89 58 04          	mov    DWORD PTR [r8+0x4],ebx
ffffffff80000248:	8d 86 a0 fe ff ff    	lea    eax,[rsi-0x160]
ffffffff8000024e:	3d ff fe ff 7f       	cmp    eax,0x7ffffeff
ffffffff80000253:	0f 87 a3 00 00 00    	ja     ffffffff800002fc <malloc+0x2fc>
ffffffff80000259:	49 8b 40 18          	mov    rax,QWORD PTR [r8+0x18]
ffffffff8000025d:	89 db                	mov    ebx,ebx
ffffffff8000025f:	83 ee 30             	sub    esi,0x30
ffffffff80000262:	49 8d 7c 18 30       	lea    rdi,[r8+rbx*1+0x30]
ffffffff80000267:	c7 07 de c0 01 c0    	mov    DWORD PTR [rdi],0xc001c0de
ffffffff8000026d:	89 77 08             	mov    DWORD PTR [rdi+0x8],esi
ffffffff80000270:	48 c7 47 20 00 00 00 	mov    QWORD PTR [rdi+0x20],0x0
ffffffff80000277:	00 
ffffffff80000278:	48 c7 47 28 00 00 00 	mov    QWORD PTR [rdi+0x28],0x0
ffffffff8000027f:	00 
ffffffff80000280:	4c 89 47 10          	mov    QWORD PTR [rdi+0x10],r8
ffffffff80000284:	48 89 47 18          	mov    QWORD PTR [rdi+0x18],rax
ffffffff80000288:	48 85 c0             	test   rax,rax
ffffffff8000028b:	74 04                	je     ffffffff80000291 <malloc+0x291>
ffffffff8000028d:	48 89 78 10          	mov    QWORD PTR [rax+0x10],rdi
ffffffff80000291:	41 29 70 08          	sub    DWORD PTR [r8+0x8],esi
ffffffff80000295:	8b 47 08             	mov    eax,DWORD PTR [rdi+0x8]
ffffffff80000298:	49 89 78 18          	mov    QWORD PTR [r8+0x18],rdi
ffffffff8000029c:	8d 70 d0             	lea    esi,[rax-0x30]
ffffffff8000029f:	81 fe ff 00 00 00    	cmp    esi,0xff
ffffffff800002a5:	0f 86 19 01 00 00    	jbe    ffffffff800003c4 <malloc+0x3c4>
ffffffff800002ab:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff800002b0:	41 b9 01 00 00 00    	mov    r9d,0x1
ffffffff800002b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800002bd:	00 00 00 
ffffffff800002c0:	48 63 c1             	movsxd rax,ecx
ffffffff800002c3:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff800002c6:	83 f8 1f             	cmp    eax,0x1f
ffffffff800002c9:	74 09                	je     ffffffff800002d4 <malloc+0x2d4>
ffffffff800002cb:	44 89 ca             	mov    edx,r9d
ffffffff800002ce:	d3 e2                	shl    edx,cl
ffffffff800002d0:	39 d6                	cmp    esi,edx
ffffffff800002d2:	73 ec                	jae    ffffffff800002c0 <malloc+0x2c0>
ffffffff800002d4:	48 8b 14 c5 80 78 00 	mov    rdx,QWORD PTR [rax*8-0x7fff8780]
ffffffff800002db:	80 
ffffffff800002dc:	89 47 0c             	mov    DWORD PTR [rdi+0xc],eax
ffffffff800002df:	48 85 d2             	test   rdx,rdx
ffffffff800002e2:	74 10                	je     ffffffff800002f4 <malloc+0x2f4>
ffffffff800002e4:	48 89 7a 28          	mov    QWORD PTR [rdx+0x28],rdi
ffffffff800002e8:	48 8b 14 c5 80 78 00 	mov    rdx,QWORD PTR [rax*8-0x7fff8780]
ffffffff800002ef:	80 
ffffffff800002f0:	48 89 57 20          	mov    QWORD PTR [rdi+0x20],rdx
ffffffff800002f4:	48 89 3c c5 80 78 00 	mov    QWORD PTR [rax*8-0x7fff8780],rdi
ffffffff800002fb:	80 
ffffffff800002fc:	49 83 c0 30          	add    r8,0x30
ffffffff80000300:	5b                   	pop    rbx
ffffffff80000301:	4c 89 c0             	mov    rax,r8
ffffffff80000304:	41 5c                	pop    r12
ffffffff80000306:	5d                   	pop    rbp
ffffffff80000307:	c3                   	ret    
ffffffff80000308:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000030f:	00 
ffffffff80000310:	49 83 78 18 00       	cmp    QWORD PTR [r8+0x18],0x0
ffffffff80000315:	0f 85 27 ff ff ff    	jne    ffffffff80000242 <malloc+0x242>
ffffffff8000031b:	83 2c 8d 00 78 00 80 	sub    DWORD PTR [rcx*4-0x7fff8800],0x1
ffffffff80000322:	01 
ffffffff80000323:	41 8b 70 08          	mov    esi,DWORD PTR [r8+0x8]
ffffffff80000327:	e9 16 ff ff ff       	jmp    ffffffff80000242 <malloc+0x242>
ffffffff8000032c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80000330:	48 89 04 d5 80 78 00 	mov    QWORD PTR [rdx*8-0x7fff8780],rax
ffffffff80000337:	80 
ffffffff80000338:	e9 c4 fe ff ff       	jmp    ffffffff80000201 <malloc+0x201>
ffffffff8000033d:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff80000340:	8d 53 30             	lea    edx,[rbx+0x30]
ffffffff80000343:	89 d0                	mov    eax,edx
ffffffff80000345:	81 e2 ff 0f 00 00    	and    edx,0xfff
ffffffff8000034b:	c1 e8 0c             	shr    eax,0xc
ffffffff8000034e:	83 fa 01             	cmp    edx,0x1
ffffffff80000351:	ba 10 00 00 00       	mov    edx,0x10
ffffffff80000356:	83 d8 ff             	sbb    eax,0xffffffff
ffffffff80000359:	39 d0                	cmp    eax,edx
ffffffff8000035b:	0f 43 d0             	cmovae edx,eax
ffffffff8000035e:	89 d7                	mov    edi,edx
ffffffff80000360:	49 89 fc             	mov    r12,rdi
ffffffff80000363:	e8 b8 08 00 00       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80000368:	48 8b 15 59 6e 00 00 	mov    rdx,QWORD PTR [rip+0x6e59]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff8000036f:	48 03 42 08          	add    rax,QWORD PTR [rdx+0x8]
ffffffff80000373:	49 89 c0             	mov    r8,rax
ffffffff80000376:	74 88                	je     ffffffff80000300 <malloc+0x300>
ffffffff80000378:	44 89 e6             	mov    esi,r12d
ffffffff8000037b:	41 c7 00 de c0 01 c0 	mov    DWORD PTR [r8],0xc001c0de
ffffffff80000382:	c1 e6 0c             	shl    esi,0xc
ffffffff80000385:	41 89 58 04          	mov    DWORD PTR [r8+0x4],ebx
ffffffff80000389:	41 89 70 08          	mov    DWORD PTR [r8+0x8],esi
ffffffff8000038d:	41 c7 40 0c ff ff ff 	mov    DWORD PTR [r8+0xc],0xffffffff
ffffffff80000394:	ff 
ffffffff80000395:	49 c7 40 20 00 00 00 	mov    QWORD PTR [r8+0x20],0x0
ffffffff8000039c:	00 
ffffffff8000039d:	49 c7 40 28 00 00 00 	mov    QWORD PTR [r8+0x28],0x0
ffffffff800003a4:	00 
ffffffff800003a5:	49 c7 40 10 00 00 00 	mov    QWORD PTR [r8+0x10],0x0
ffffffff800003ac:	00 
ffffffff800003ad:	49 c7 40 18 00 00 00 	mov    QWORD PTR [r8+0x18],0x0
ffffffff800003b4:	00 
ffffffff800003b5:	e9 88 fe ff ff       	jmp    ffffffff80000242 <malloc+0x242>
ffffffff800003ba:	b8 08 00 00 00       	mov    eax,0x8
ffffffff800003bf:	e9 ee fd ff ff       	jmp    ffffffff800001b2 <malloc+0x1b2>
ffffffff800003c4:	b8 08 00 00 00       	mov    eax,0x8
ffffffff800003c9:	e9 06 ff ff ff       	jmp    ffffffff800002d4 <malloc+0x2d4>
ffffffff800003ce:	66 90                	xchg   ax,ax

ffffffff800003d0 <free>:
ffffffff800003d0:	f3 0f 1e fa          	endbr64 
ffffffff800003d4:	48 85 ff             	test   rdi,rdi
ffffffff800003d7:	0f 84 bb 00 00 00    	je     ffffffff80000498 <free+0xc8>
ffffffff800003dd:	81 7f d0 de c0 01 c0 	cmp    DWORD PTR [rdi-0x30],0xc001c0de
ffffffff800003e4:	4c 8d 47 d0          	lea    r8,[rdi-0x30]
ffffffff800003e8:	0f 85 aa 00 00 00    	jne    ffffffff80000498 <free+0xc8>
ffffffff800003ee:	49 8b 40 10          	mov    rax,QWORD PTR [r8+0x10]
ffffffff800003f2:	49 8b 50 18          	mov    rdx,QWORD PTR [r8+0x18]
ffffffff800003f6:	41 8b 70 08          	mov    esi,DWORD PTR [r8+0x8]
ffffffff800003fa:	48 85 c0             	test   rax,rax
ffffffff800003fd:	75 51                	jne    ffffffff80000450 <free+0x80>
ffffffff800003ff:	e9 fc 00 00 00       	jmp    ffffffff80000500 <free+0x130>
ffffffff80000404:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80000408:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffffffff8000040c:	48 85 c9             	test   rcx,rcx
ffffffff8000040f:	74 08                	je     ffffffff80000419 <free+0x49>
ffffffff80000411:	48 8b 78 20          	mov    rdi,QWORD PTR [rax+0x20]
ffffffff80000415:	48 89 79 20          	mov    QWORD PTR [rcx+0x20],rdi
ffffffff80000419:	48 8b 78 20          	mov    rdi,QWORD PTR [rax+0x20]
ffffffff8000041d:	48 85 ff             	test   rdi,rdi
ffffffff80000420:	74 0c                	je     ffffffff8000042e <free+0x5e>
ffffffff80000422:	48 89 4f 28          	mov    QWORD PTR [rdi+0x28],rcx
ffffffff80000426:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff8000042d:	00 
ffffffff8000042e:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff80000432:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffffffff80000439:	00 
ffffffff8000043a:	49 89 c0             	mov    r8,rax
ffffffff8000043d:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [rax+0xc],0xffffffff
ffffffff80000444:	48 85 c9             	test   rcx,rcx
ffffffff80000447:	0f 84 b3 00 00 00    	je     ffffffff80000500 <free+0x130>
ffffffff8000044d:	48 89 c8             	mov    rax,rcx
ffffffff80000450:	48 63 48 0c          	movsxd rcx,DWORD PTR [rax+0xc]
ffffffff80000454:	85 c9                	test   ecx,ecx
ffffffff80000456:	0f 88 a4 00 00 00    	js     ffffffff80000500 <free+0x130>
ffffffff8000045c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff80000460:	49 8b 78 18          	mov    rdi,QWORD PTR [r8+0x18]
ffffffff80000464:	03 70 08             	add    esi,DWORD PTR [rax+0x8]
ffffffff80000467:	89 70 08             	mov    DWORD PTR [rax+0x8],esi
ffffffff8000046a:	48 85 ff             	test   rdi,rdi
ffffffff8000046d:	74 04                	je     ffffffff80000473 <free+0xa3>
ffffffff8000046f:	48 89 47 10          	mov    QWORD PTR [rdi+0x10],rax
ffffffff80000473:	48 3b 04 cd 80 78 00 	cmp    rax,QWORD PTR [rcx*8-0x7fff8780]
ffffffff8000047a:	80 
ffffffff8000047b:	75 8b                	jne    ffffffff80000408 <free+0x38>
ffffffff8000047d:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffffffff80000481:	48 89 14 cd 80 78 00 	mov    QWORD PTR [rcx*8-0x7fff8780],rdx
ffffffff80000488:	80 
ffffffff80000489:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff8000048d:	e9 76 ff ff ff       	jmp    ffffffff80000408 <free+0x38>
ffffffff80000492:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80000498:	c3                   	ret    
ffffffff80000499:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800004a0:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
ffffffff800004a4:	48 89 0c c5 80 78 00 	mov    QWORD PTR [rax*8-0x7fff8780],rcx
ffffffff800004ab:	80 
ffffffff800004ac:	48 8b 42 28          	mov    rax,QWORD PTR [rdx+0x28]
ffffffff800004b0:	48 85 c0             	test   rax,rax
ffffffff800004b3:	74 08                	je     ffffffff800004bd <free+0xed>
ffffffff800004b5:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
ffffffff800004b9:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
ffffffff800004bd:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
ffffffff800004c1:	48 85 c9             	test   rcx,rcx
ffffffff800004c4:	74 0c                	je     ffffffff800004d2 <free+0x102>
ffffffff800004c6:	48 89 41 28          	mov    QWORD PTR [rcx+0x28],rax
ffffffff800004ca:	48 c7 42 20 00 00 00 	mov    QWORD PTR [rdx+0x20],0x0
ffffffff800004d1:	00 
ffffffff800004d2:	48 8b 42 18          	mov    rax,QWORD PTR [rdx+0x18]
ffffffff800004d6:	03 72 08             	add    esi,DWORD PTR [rdx+0x8]
ffffffff800004d9:	48 c7 42 28 00 00 00 	mov    QWORD PTR [rdx+0x28],0x0
ffffffff800004e0:	00 
ffffffff800004e1:	c7 42 0c ff ff ff ff 	mov    DWORD PTR [rdx+0xc],0xffffffff
ffffffff800004e8:	49 89 40 18          	mov    QWORD PTR [r8+0x18],rax
ffffffff800004ec:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffffffff800004f0:	41 89 70 08          	mov    DWORD PTR [r8+0x8],esi
ffffffff800004f4:	48 85 d2             	test   rdx,rdx
ffffffff800004f7:	74 04                	je     ffffffff800004fd <free+0x12d>
ffffffff800004f9:	4c 89 42 10          	mov    QWORD PTR [rdx+0x10],r8
ffffffff800004fd:	48 89 c2             	mov    rdx,rax
ffffffff80000500:	48 85 d2             	test   rdx,rdx
ffffffff80000503:	74 1b                	je     ffffffff80000520 <free+0x150>
ffffffff80000505:	48 63 42 0c          	movsxd rax,DWORD PTR [rdx+0xc]
ffffffff80000509:	85 c0                	test   eax,eax
ffffffff8000050b:	0f 88 7f 00 00 00    	js     ffffffff80000590 <free+0x1c0>
ffffffff80000511:	48 3b 14 c5 80 78 00 	cmp    rdx,QWORD PTR [rax*8-0x7fff8780]
ffffffff80000518:	80 
ffffffff80000519:	75 91                	jne    ffffffff800004ac <free+0xdc>
ffffffff8000051b:	eb 83                	jmp    ffffffff800004a0 <free+0xd0>
ffffffff8000051d:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff80000520:	44 8d 4e d0          	lea    r9d,[rsi-0x30]
ffffffff80000524:	41 81 f9 ff 00 00 00 	cmp    r9d,0xff
ffffffff8000052b:	0f 86 c7 00 00 00    	jbe    ffffffff800005f8 <free+0x228>
ffffffff80000531:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80000536:	41 ba 01 00 00 00    	mov    r10d,0x1
ffffffff8000053c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80000540:	89 c8                	mov    eax,ecx
ffffffff80000542:	8d 49 01             	lea    ecx,[rcx+0x1]
ffffffff80000545:	83 f8 1f             	cmp    eax,0x1f
ffffffff80000548:	74 0a                	je     ffffffff80000554 <free+0x184>
ffffffff8000054a:	44 89 d7             	mov    edi,r10d
ffffffff8000054d:	d3 e7                	shl    edi,cl
ffffffff8000054f:	44 39 cf             	cmp    edi,r9d
ffffffff80000552:	76 ec                	jbe    ffffffff80000540 <free+0x170>
ffffffff80000554:	49 0b 50 10          	or     rdx,QWORD PTR [r8+0x10]
ffffffff80000558:	48 63 c8             	movsxd rcx,eax
ffffffff8000055b:	74 53                	je     ffffffff800005b0 <free+0x1e0>
ffffffff8000055d:	41 89 40 0c          	mov    DWORD PTR [r8+0xc],eax
ffffffff80000561:	48 8b 04 cd 80 78 00 	mov    rax,QWORD PTR [rcx*8-0x7fff8780]
ffffffff80000568:	80 
ffffffff80000569:	48 85 c0             	test   rax,rax
ffffffff8000056c:	74 10                	je     ffffffff8000057e <free+0x1ae>
ffffffff8000056e:	4c 89 40 28          	mov    QWORD PTR [rax+0x28],r8
ffffffff80000572:	48 8b 04 cd 80 78 00 	mov    rax,QWORD PTR [rcx*8-0x7fff8780]
ffffffff80000579:	80 
ffffffff8000057a:	49 89 40 20          	mov    QWORD PTR [r8+0x20],rax
ffffffff8000057e:	4c 89 04 cd 80 78 00 	mov    QWORD PTR [rcx*8-0x7fff8780],r8
ffffffff80000585:	80 
ffffffff80000586:	c3                   	ret    
ffffffff80000587:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000058e:	00 00 
ffffffff80000590:	44 8d 4e d0          	lea    r9d,[rsi-0x30]
ffffffff80000594:	41 81 f9 ff 00 00 00 	cmp    r9d,0xff
ffffffff8000059b:	77 94                	ja     ffffffff80000531 <free+0x161>
ffffffff8000059d:	b8 08 00 00 00       	mov    eax,0x8
ffffffff800005a2:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff800005a7:	eb b4                	jmp    ffffffff8000055d <free+0x18d>
ffffffff800005a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800005b0:	8b 14 8d 00 78 00 80 	mov    edx,DWORD PTR [rcx*4-0x7fff8800]
ffffffff800005b7:	83 fa 05             	cmp    edx,0x5
ffffffff800005ba:	74 0c                	je     ffffffff800005c8 <free+0x1f8>
ffffffff800005bc:	83 c2 01             	add    edx,0x1
ffffffff800005bf:	89 14 8d 00 78 00 80 	mov    DWORD PTR [rcx*4-0x7fff8800],edx
ffffffff800005c6:	eb 95                	jmp    ffffffff8000055d <free+0x18d>
ffffffff800005c8:	89 f0                	mov    eax,esi
ffffffff800005ca:	81 e6 ff 0f 00 00    	and    esi,0xfff
ffffffff800005d0:	ba 10 00 00 00       	mov    edx,0x10
ffffffff800005d5:	4c 89 c7             	mov    rdi,r8
ffffffff800005d8:	c1 e8 0c             	shr    eax,0xc
ffffffff800005db:	83 fe 01             	cmp    esi,0x1
ffffffff800005de:	83 d8 ff             	sbb    eax,0xffffffff
ffffffff800005e1:	39 d0                	cmp    eax,edx
ffffffff800005e3:	0f 42 c2             	cmovb  eax,edx
ffffffff800005e6:	89 c6                	mov    esi,eax
ffffffff800005e8:	48 8b 05 d9 6b 00 00 	mov    rax,QWORD PTR [rip+0x6bd9]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff800005ef:	48 2b 78 08          	sub    rdi,QWORD PTR [rax+0x8]
ffffffff800005f3:	e9 c8 06 00 00       	jmp    ffffffff80000cc0 <PhysicalMemory::free(void*, unsigned long)>
ffffffff800005f8:	b8 08 00 00 00       	mov    eax,0x8
ffffffff800005fd:	e9 52 ff ff ff       	jmp    ffffffff80000554 <free+0x184>
ffffffff80000602:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000609:	00 00 00 00 
ffffffff8000060d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80000610 <calloc>:
ffffffff80000610:	f3 0f 1e fa          	endbr64 
ffffffff80000614:	55                   	push   rbp
ffffffff80000615:	0f af fe             	imul   edi,esi
ffffffff80000618:	48 89 e5             	mov    rbp,rsp
ffffffff8000061b:	53                   	push   rbx
ffffffff8000061c:	48 63 df             	movsxd rbx,edi
ffffffff8000061f:	48 89 df             	mov    rdi,rbx
ffffffff80000622:	48 83 ec 08          	sub    rsp,0x8
ffffffff80000626:	e8 d5 f9 ff ff       	call   ffffffff80000000 <malloc>
ffffffff8000062b:	49 89 c0             	mov    r8,rax
ffffffff8000062e:	48 85 db             	test   rbx,rbx
ffffffff80000631:	0f 84 a7 00 00 00    	je     ffffffff800006de <calloc+0xce>
ffffffff80000637:	48 8d 43 ff          	lea    rax,[rbx-0x1]
ffffffff8000063b:	48 83 f8 06          	cmp    rax,0x6
ffffffff8000063f:	0f 86 a2 00 00 00    	jbe    ffffffff800006e7 <calloc+0xd7>
ffffffff80000645:	48 89 da             	mov    rdx,rbx
ffffffff80000648:	48 8b 0d 41 51 00 00 	mov    rcx,QWORD PTR [rip+0x5141]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff8000064f:	4c 89 c0             	mov    rax,r8
ffffffff80000652:	48 83 e2 f8          	and    rdx,0xfffffffffffffff8
ffffffff80000656:	4c 01 c2             	add    rdx,r8
ffffffff80000659:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80000660:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80000663:	48 83 c0 08          	add    rax,0x8
ffffffff80000667:	48 39 d0             	cmp    rax,rdx
ffffffff8000066a:	75 f4                	jne    ffffffff80000660 <calloc+0x50>
ffffffff8000066c:	48 89 da             	mov    rdx,rbx
ffffffff8000066f:	48 83 e2 f8          	and    rdx,0xfffffffffffffff8
ffffffff80000673:	89 d0                	mov    eax,edx
ffffffff80000675:	48 39 d3             	cmp    rbx,rdx
ffffffff80000678:	74 64                	je     ffffffff800006de <calloc+0xce>
ffffffff8000067a:	41 c6 04 10 00       	mov    BYTE PTR [r8+rdx*1],0x0
ffffffff8000067f:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80000682:	48 63 d2             	movsxd rdx,edx
ffffffff80000685:	48 39 d3             	cmp    rbx,rdx
ffffffff80000688:	76 54                	jbe    ffffffff800006de <calloc+0xce>
ffffffff8000068a:	41 c6 04 10 00       	mov    BYTE PTR [r8+rdx*1],0x0
ffffffff8000068f:	8d 50 02             	lea    edx,[rax+0x2]
ffffffff80000692:	48 63 d2             	movsxd rdx,edx
ffffffff80000695:	48 39 d3             	cmp    rbx,rdx
ffffffff80000698:	76 44                	jbe    ffffffff800006de <calloc+0xce>
ffffffff8000069a:	41 c6 04 10 00       	mov    BYTE PTR [r8+rdx*1],0x0
ffffffff8000069f:	8d 50 03             	lea    edx,[rax+0x3]
ffffffff800006a2:	48 63 d2             	movsxd rdx,edx
ffffffff800006a5:	48 39 d3             	cmp    rbx,rdx
ffffffff800006a8:	76 34                	jbe    ffffffff800006de <calloc+0xce>
ffffffff800006aa:	41 c6 04 10 00       	mov    BYTE PTR [r8+rdx*1],0x0
ffffffff800006af:	8d 50 04             	lea    edx,[rax+0x4]
ffffffff800006b2:	48 63 d2             	movsxd rdx,edx
ffffffff800006b5:	48 39 d3             	cmp    rbx,rdx
ffffffff800006b8:	76 24                	jbe    ffffffff800006de <calloc+0xce>
ffffffff800006ba:	41 c6 04 10 00       	mov    BYTE PTR [r8+rdx*1],0x0
ffffffff800006bf:	8d 50 05             	lea    edx,[rax+0x5]
ffffffff800006c2:	48 63 d2             	movsxd rdx,edx
ffffffff800006c5:	48 39 d3             	cmp    rbx,rdx
ffffffff800006c8:	76 14                	jbe    ffffffff800006de <calloc+0xce>
ffffffff800006ca:	83 c0 06             	add    eax,0x6
ffffffff800006cd:	41 c6 04 10 00       	mov    BYTE PTR [r8+rdx*1],0x0
ffffffff800006d2:	48 98                	cdqe   
ffffffff800006d4:	48 39 c3             	cmp    rbx,rax
ffffffff800006d7:	76 05                	jbe    ffffffff800006de <calloc+0xce>
ffffffff800006d9:	41 c6 04 00 00       	mov    BYTE PTR [r8+rax*1],0x0
ffffffff800006de:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800006e2:	4c 89 c0             	mov    rax,r8
ffffffff800006e5:	c9                   	leave  
ffffffff800006e6:	c3                   	ret    
ffffffff800006e7:	31 c0                	xor    eax,eax
ffffffff800006e9:	31 d2                	xor    edx,edx
ffffffff800006eb:	eb 8d                	jmp    ffffffff8000067a <calloc+0x6a>
ffffffff800006ed:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800006f0 <realloc>:
ffffffff800006f0:	f3 0f 1e fa          	endbr64 
ffffffff800006f4:	55                   	push   rbp
ffffffff800006f5:	48 89 e5             	mov    rbp,rsp
ffffffff800006f8:	41 55                	push   r13
ffffffff800006fa:	41 54                	push   r12
ffffffff800006fc:	49 89 fc             	mov    r12,rdi
ffffffff800006ff:	53                   	push   rbx
ffffffff80000700:	48 83 ec 08          	sub    rsp,0x8
ffffffff80000704:	48 85 f6             	test   rsi,rsi
ffffffff80000707:	0f 84 33 01 00 00    	je     ffffffff80000840 <realloc+0x150>
ffffffff8000070d:	48 89 f7             	mov    rdi,rsi
ffffffff80000710:	4d 85 e4             	test   r12,r12
ffffffff80000713:	0f 84 df 00 00 00    	je     ffffffff800007f8 <realloc+0x108>
ffffffff80000719:	49 63 5c 24 d4       	movsxd rbx,DWORD PTR [r12-0x2c]
ffffffff8000071e:	48 63 c6             	movsxd rax,esi
ffffffff80000721:	48 39 f3             	cmp    rbx,rsi
ffffffff80000724:	48 0f 47 d8          	cmova  rbx,rax
ffffffff80000728:	e8 d3 f8 ff ff       	call   ffffffff80000000 <malloc>
ffffffff8000072d:	49 89 c5             	mov    r13,rax
ffffffff80000730:	48 83 fb 03          	cmp    rbx,0x3
ffffffff80000734:	0f 86 16 01 00 00    	jbe    ffffffff80000850 <realloc+0x160>
ffffffff8000073a:	49 8d 44 24 04       	lea    rax,[r12+0x4]
ffffffff8000073f:	48 8d 73 fc          	lea    rsi,[rbx-0x4]
ffffffff80000743:	49 39 c5             	cmp    r13,rax
ffffffff80000746:	0f 84 c4 00 00 00    	je     ffffffff80000810 <realloc+0x120>
ffffffff8000074c:	48 83 fe 0b          	cmp    rsi,0xb
ffffffff80000750:	0f 86 ba 00 00 00    	jbe    ffffffff80000810 <realloc+0x120>
ffffffff80000756:	48 89 f7             	mov    rdi,rsi
ffffffff80000759:	31 c0                	xor    eax,eax
ffffffff8000075b:	48 c1 ef 02          	shr    rdi,0x2
ffffffff8000075f:	48 83 c7 01          	add    rdi,0x1
ffffffff80000763:	48 89 f9             	mov    rcx,rdi
ffffffff80000766:	48 d1 e9             	shr    rcx,1
ffffffff80000769:	48 c1 e1 03          	shl    rcx,0x3
ffffffff8000076d:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff80000770:	49 8b 14 04          	mov    rdx,QWORD PTR [r12+rax*1]
ffffffff80000774:	49 89 54 05 00       	mov    QWORD PTR [r13+rax*1+0x0],rdx
ffffffff80000779:	48 83 c0 08          	add    rax,0x8
ffffffff8000077d:	48 39 c1             	cmp    rcx,rax
ffffffff80000780:	75 ee                	jne    ffffffff80000770 <realloc+0x80>
ffffffff80000782:	48 89 f9             	mov    rcx,rdi
ffffffff80000785:	48 83 e1 fe          	and    rcx,0xfffffffffffffffe
ffffffff80000789:	48 8d 14 8d 00 00 00 	lea    rdx,[rcx*4+0x0]
ffffffff80000790:	00 
ffffffff80000791:	49 8d 04 14          	lea    rax,[r12+rdx*1]
ffffffff80000795:	4c 01 ea             	add    rdx,r13
ffffffff80000798:	48 39 cf             	cmp    rdi,rcx
ffffffff8000079b:	74 04                	je     ffffffff800007a1 <realloc+0xb1>
ffffffff8000079d:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000079f:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff800007a1:	48 c1 ee 02          	shr    rsi,0x2
ffffffff800007a5:	83 e3 03             	and    ebx,0x3
ffffffff800007a8:	48 8d 04 b5 04 00 00 	lea    rax,[rsi*4+0x4]
ffffffff800007af:	00 
ffffffff800007b0:	49 8d 14 04          	lea    rdx,[r12+rax*1]
ffffffff800007b4:	4c 01 e8             	add    rax,r13
ffffffff800007b7:	48 85 db             	test   rbx,rbx
ffffffff800007ba:	74 1f                	je     ffffffff800007db <realloc+0xeb>
ffffffff800007bc:	0f b6 0a             	movzx  ecx,BYTE PTR [rdx]
ffffffff800007bf:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800007c1:	48 83 eb 01          	sub    rbx,0x1
ffffffff800007c5:	74 14                	je     ffffffff800007db <realloc+0xeb>
ffffffff800007c7:	0f b6 4a 01          	movzx  ecx,BYTE PTR [rdx+0x1]
ffffffff800007cb:	88 48 01             	mov    BYTE PTR [rax+0x1],cl
ffffffff800007ce:	48 83 fb 01          	cmp    rbx,0x1
ffffffff800007d2:	74 07                	je     ffffffff800007db <realloc+0xeb>
ffffffff800007d4:	0f b6 52 02          	movzx  edx,BYTE PTR [rdx+0x2]
ffffffff800007d8:	88 50 02             	mov    BYTE PTR [rax+0x2],dl
ffffffff800007db:	4c 89 e7             	mov    rdi,r12
ffffffff800007de:	e8 ed fb ff ff       	call   ffffffff800003d0 <free>
ffffffff800007e3:	48 83 c4 08          	add    rsp,0x8
ffffffff800007e7:	4c 89 e8             	mov    rax,r13
ffffffff800007ea:	5b                   	pop    rbx
ffffffff800007eb:	41 5c                	pop    r12
ffffffff800007ed:	41 5d                	pop    r13
ffffffff800007ef:	5d                   	pop    rbp
ffffffff800007f0:	c3                   	ret    
ffffffff800007f1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800007f8:	48 83 c4 08          	add    rsp,0x8
ffffffff800007fc:	5b                   	pop    rbx
ffffffff800007fd:	41 5c                	pop    r12
ffffffff800007ff:	41 5d                	pop    r13
ffffffff80000801:	5d                   	pop    rbp
ffffffff80000802:	e9 f9 f7 ff ff       	jmp    ffffffff80000000 <malloc>
ffffffff80000807:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000080e:	00 00 
ffffffff80000810:	48 89 f0             	mov    rax,rsi
ffffffff80000813:	48 c1 e8 02          	shr    rax,0x2
ffffffff80000817:	48 8d 0c 85 04 00 00 	lea    rcx,[rax*4+0x4]
ffffffff8000081e:	00 
ffffffff8000081f:	31 c0                	xor    eax,eax
ffffffff80000821:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80000828:	41 8b 14 04          	mov    edx,DWORD PTR [r12+rax*1]
ffffffff8000082c:	41 89 54 05 00       	mov    DWORD PTR [r13+rax*1+0x0],edx
ffffffff80000831:	48 83 c0 04          	add    rax,0x4
ffffffff80000835:	48 39 c8             	cmp    rax,rcx
ffffffff80000838:	75 ee                	jne    ffffffff80000828 <realloc+0x138>
ffffffff8000083a:	e9 62 ff ff ff       	jmp    ffffffff800007a1 <realloc+0xb1>
ffffffff8000083f:	90                   	nop
ffffffff80000840:	e8 8b fb ff ff       	call   ffffffff800003d0 <free>
ffffffff80000845:	45 31 ed             	xor    r13d,r13d
ffffffff80000848:	eb 99                	jmp    ffffffff800007e3 <realloc+0xf3>
ffffffff8000084a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80000850:	4c 89 e2             	mov    rdx,r12
ffffffff80000853:	e9 5f ff ff ff       	jmp    ffffffff800007b7 <realloc+0xc7>
ffffffff80000858:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000085f:	00 

ffffffff80000860 <operator new(unsigned long)>:
ffffffff80000860:	f3 0f 1e fa          	endbr64 
ffffffff80000864:	e9 97 f7 ff ff       	jmp    ffffffff80000000 <malloc>
ffffffff80000869:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80000870 <operator new[](unsigned long)>:
ffffffff80000870:	f3 0f 1e fa          	endbr64 
ffffffff80000874:	e9 87 f7 ff ff       	jmp    ffffffff80000000 <malloc>
ffffffff80000879:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80000880 <operator delete(void*)>:
ffffffff80000880:	f3 0f 1e fa          	endbr64 
ffffffff80000884:	e9 47 fb ff ff       	jmp    ffffffff800003d0 <free>
ffffffff80000889:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80000890 <operator delete(void*, unsigned long)>:
ffffffff80000890:	f3 0f 1e fa          	endbr64 
ffffffff80000894:	e9 37 fb ff ff       	jmp    ffffffff800003d0 <free>
ffffffff80000899:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800008a0 <inner_alloc(unsigned long, unsigned long)>:
ffffffff800008a0:	4c 8b 05 f9 70 00 00 	mov    r8,QWORD PTR [rip+0x70f9]        # ffffffff800079a0 <lastI>
ffffffff800008a7:	4c 39 c6             	cmp    rsi,r8
ffffffff800008aa:	0f 86 f3 00 00 00    	jbe    ffffffff800009a3 <inner_alloc(unsigned long, unsigned long)+0x103>
ffffffff800008b0:	55                   	push   rbp
ffffffff800008b1:	45 31 c9             	xor    r9d,r9d
ffffffff800008b4:	41 bb 80 00 00 00    	mov    r11d,0x80
ffffffff800008ba:	48 89 e5             	mov    rbp,rsp
ffffffff800008bd:	53                   	push   rbx
ffffffff800008be:	48 8b 1d c3 70 00 00 	mov    rbx,QWORD PTR [rip+0x70c3]        # ffffffff80007988 <bitmap>
ffffffff800008c5:	eb 17                	jmp    ffffffff800008de <inner_alloc(unsigned long, unsigned long)+0x3e>
ffffffff800008c7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800008ce:	00 00 
ffffffff800008d0:	49 83 c1 01          	add    r9,0x1
ffffffff800008d4:	49 39 f9             	cmp    r9,rdi
ffffffff800008d7:	74 3f                	je     ffffffff80000918 <inner_alloc(unsigned long, unsigned long)+0x78>
ffffffff800008d9:	49 39 f0             	cmp    r8,rsi
ffffffff800008dc:	74 26                	je     ffffffff80000904 <inner_alloc(unsigned long, unsigned long)+0x64>
ffffffff800008de:	4c 89 c2             	mov    rdx,r8
ffffffff800008e1:	44 89 d8             	mov    eax,r11d
ffffffff800008e4:	4d 8d 40 01          	lea    r8,[r8+0x1]
ffffffff800008e8:	49 89 d2             	mov    r10,rdx
ffffffff800008eb:	89 d1                	mov    ecx,edx
ffffffff800008ed:	83 e1 07             	and    ecx,0x7
ffffffff800008f0:	49 c1 ea 03          	shr    r10,0x3
ffffffff800008f4:	d3 f8                	sar    eax,cl
ffffffff800008f6:	42 84 04 13          	test   BYTE PTR [rbx+r10*1],al
ffffffff800008fa:	74 d4                	je     ffffffff800008d0 <inner_alloc(unsigned long, unsigned long)+0x30>
ffffffff800008fc:	45 31 c9             	xor    r9d,r9d
ffffffff800008ff:	49 39 f0             	cmp    r8,rsi
ffffffff80000902:	75 da                	jne    ffffffff800008de <inner_alloc(unsigned long, unsigned long)+0x3e>
ffffffff80000904:	4c 89 05 95 70 00 00 	mov    QWORD PTR [rip+0x7095],r8        # ffffffff800079a0 <lastI>
ffffffff8000090b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000090f:	31 c0                	xor    eax,eax
ffffffff80000911:	c9                   	leave  
ffffffff80000912:	c3                   	ret    
ffffffff80000913:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80000918:	4c 89 c0             	mov    rax,r8
ffffffff8000091b:	4c 89 05 7e 70 00 00 	mov    QWORD PTR [rip+0x707e],r8        # ffffffff800079a0 <lastI>
ffffffff80000922:	4c 29 c8             	sub    rax,r9
ffffffff80000925:	49 39 c0             	cmp    r8,rax
ffffffff80000928:	76 6f                	jbe    ffffffff80000999 <inner_alloc(unsigned long, unsigned long)+0xf9>
ffffffff8000092a:	89 c1                	mov    ecx,eax
ffffffff8000092c:	48 89 c6             	mov    rsi,rax
ffffffff8000092f:	48 8d 78 01          	lea    rdi,[rax+0x1]
ffffffff80000933:	41 ba 80 00 00 00    	mov    r10d,0x80
ffffffff80000939:	83 e1 07             	and    ecx,0x7
ffffffff8000093c:	48 c1 ee 03          	shr    rsi,0x3
ffffffff80000940:	41 d3 fb             	sar    r11d,cl
ffffffff80000943:	44 89 d9             	mov    ecx,r11d
ffffffff80000946:	f7 d1                	not    ecx
ffffffff80000948:	20 0c 33             	and    BYTE PTR [rbx+rsi*1],cl
ffffffff8000094b:	48 03 35 36 70 00 00 	add    rsi,QWORD PTR [rip+0x7036]        # ffffffff80007988 <bitmap>
ffffffff80000952:	44 08 1e             	or     BYTE PTR [rsi],r11b
ffffffff80000955:	49 39 f8             	cmp    r8,rdi
ffffffff80000958:	76 3f                	jbe    ffffffff80000999 <inner_alloc(unsigned long, unsigned long)+0xf9>
ffffffff8000095a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80000960:	89 f9                	mov    ecx,edi
ffffffff80000962:	4c 8b 05 1f 70 00 00 	mov    r8,QWORD PTR [rip+0x701f]        # ffffffff80007988 <bitmap>
ffffffff80000969:	48 89 fe             	mov    rsi,rdi
ffffffff8000096c:	44 89 d3             	mov    ebx,r10d
ffffffff8000096f:	83 e1 07             	and    ecx,0x7
ffffffff80000972:	48 c1 ee 03          	shr    rsi,0x3
ffffffff80000976:	d3 fb                	sar    ebx,cl
ffffffff80000978:	49 01 f0             	add    r8,rsi
ffffffff8000097b:	48 89 f9             	mov    rcx,rdi
ffffffff8000097e:	48 83 c7 01          	add    rdi,0x1
ffffffff80000982:	41 89 d9             	mov    r9d,ebx
ffffffff80000985:	41 f7 d1             	not    r9d
ffffffff80000988:	45 20 08             	and    BYTE PTR [r8],r9b
ffffffff8000098b:	48 03 35 f6 6f 00 00 	add    rsi,QWORD PTR [rip+0x6ff6]        # ffffffff80007988 <bitmap>
ffffffff80000992:	08 1e                	or     BYTE PTR [rsi],bl
ffffffff80000994:	48 39 d1             	cmp    rcx,rdx
ffffffff80000997:	75 c7                	jne    ffffffff80000960 <inner_alloc(unsigned long, unsigned long)+0xc0>
ffffffff80000999:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000099d:	48 c1 e0 0c          	shl    rax,0xc
ffffffff800009a1:	c9                   	leave  
ffffffff800009a2:	c3                   	ret    
ffffffff800009a3:	31 c0                	xor    eax,eax
ffffffff800009a5:	c3                   	ret    
ffffffff800009a6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800009ad:	00 00 00 

ffffffff800009b0 <PhysicalMemory::Initialize()>:
ffffffff800009b0:	f3 0f 1e fa          	endbr64 
ffffffff800009b4:	55                   	push   rbp
ffffffff800009b5:	48 c7 c7 98 57 00 80 	mov    rdi,0xffffffff80005798
ffffffff800009bc:	48 89 e5             	mov    rbp,rsp
ffffffff800009bf:	41 54                	push   r12
ffffffff800009c1:	48 83 ec 08          	sub    rsp,0x8
ffffffff800009c5:	48 8b 05 3c 67 00 00 	mov    rax,QWORD PTR [rip+0x673c]        # ffffffff80007108 <mmap_req+0x28>
ffffffff800009cc:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
ffffffff800009d0:	31 c0                	xor    eax,eax
ffffffff800009d2:	e8 e9 1b 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800009d7:	48 8b 05 2a 67 00 00 	mov    rax,QWORD PTR [rip+0x672a]        # ffffffff80007108 <mmap_req+0x28>
ffffffff800009de:	4c 8b 58 08          	mov    r11,QWORD PTR [rax+0x8]
ffffffff800009e2:	48 8b 78 10          	mov    rdi,QWORD PTR [rax+0x10]
ffffffff800009e6:	4d 85 db             	test   r11,r11
ffffffff800009e9:	0f 84 f1 01 00 00    	je     ffffffff80000be0 <PhysicalMemory::Initialize()+0x230>
ffffffff800009ef:	4c 8b 15 9a 6f 00 00 	mov    r10,QWORD PTR [rip+0x6f9a]        # ffffffff80007990 <freeRam>
ffffffff800009f6:	48 89 fa             	mov    rdx,rdi
ffffffff800009f9:	4e 8d 0c df          	lea    r9,[rdi+r11*8]
ffffffff800009fd:	48 89 f8             	mov    rax,rdi
ffffffff80000a00:	4c 8b 05 a1 6f 00 00 	mov    r8,QWORD PTR [rip+0x6fa1]        # ffffffff800079a8 <highest_addr>
ffffffff80000a07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80000a0e:	00 00 
ffffffff80000a10:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff80000a13:	48 83 7e 10 00       	cmp    QWORD PTR [rsi+0x10],0x0
ffffffff80000a18:	75 11                	jne    ffffffff80000a2b <PhysicalMemory::Initialize()+0x7b>
ffffffff80000a1a:	48 8b 4e 08          	mov    rcx,QWORD PTR [rsi+0x8]
ffffffff80000a1e:	49 01 ca             	add    r10,rcx
ffffffff80000a21:	48 03 0e             	add    rcx,QWORD PTR [rsi]
ffffffff80000a24:	49 39 c8             	cmp    r8,rcx
ffffffff80000a27:	4c 0f 42 c1          	cmovb  r8,rcx
ffffffff80000a2b:	48 83 c0 08          	add    rax,0x8
ffffffff80000a2f:	49 39 c1             	cmp    r9,rax
ffffffff80000a32:	75 dc                	jne    ffffffff80000a10 <PhysicalMemory::Initialize()+0x60>
ffffffff80000a34:	4c 89 05 6d 6f 00 00 	mov    QWORD PTR [rip+0x6f6d],r8        # ffffffff800079a8 <highest_addr>
ffffffff80000a3b:	49 c1 e8 0f          	shr    r8,0xf
ffffffff80000a3f:	31 c0                	xor    eax,eax
ffffffff80000a41:	4c 89 15 48 6f 00 00 	mov    QWORD PTR [rip+0x6f48],r10        # ffffffff80007990 <freeRam>
ffffffff80000a48:	49 81 c0 ff 0f 00 00 	add    r8,0xfff
ffffffff80000a4f:	49 81 e0 00 f0 ff ff 	and    r8,0xfffffffffffff000
ffffffff80000a56:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000a5d:	00 00 00 
ffffffff80000a60:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffffffff80000a63:	48 83 79 10 00       	cmp    QWORD PTR [rcx+0x10],0x0
ffffffff80000a68:	75 0a                	jne    ffffffff80000a74 <PhysicalMemory::Initialize()+0xc4>
ffffffff80000a6a:	4c 39 41 08          	cmp    QWORD PTR [rcx+0x8],r8
ffffffff80000a6e:	0f 83 fc 00 00 00    	jae    ffffffff80000b70 <PhysicalMemory::Initialize()+0x1c0>
ffffffff80000a74:	48 83 c0 01          	add    rax,0x1
ffffffff80000a78:	48 83 c2 08          	add    rdx,0x8
ffffffff80000a7c:	4c 39 d8             	cmp    rax,r11
ffffffff80000a7f:	75 df                	jne    ffffffff80000a60 <PhysicalMemory::Initialize()+0xb0>
ffffffff80000a81:	4c 8b 25 00 6f 00 00 	mov    r12,QWORD PTR [rip+0x6f00]        # ffffffff80007988 <bitmap>
ffffffff80000a88:	31 f6                	xor    esi,esi
ffffffff80000a8a:	41 b9 80 00 00 00    	mov    r9d,0x80
ffffffff80000a90:	eb 13                	jmp    ffffffff80000aa5 <PhysicalMemory::Initialize()+0xf5>
ffffffff80000a92:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80000a98:	48 83 c6 01          	add    rsi,0x1
ffffffff80000a9c:	4c 39 de             	cmp    rsi,r11
ffffffff80000a9f:	0f 83 a3 00 00 00    	jae    ffffffff80000b48 <PhysicalMemory::Initialize()+0x198>
ffffffff80000aa5:	48 8b 04 f7          	mov    rax,QWORD PTR [rdi+rsi*8]
ffffffff80000aa9:	48 83 78 10 00       	cmp    QWORD PTR [rax+0x10],0x0
ffffffff80000aae:	75 e8                	jne    ffffffff80000a98 <PhysicalMemory::Initialize()+0xe8>
ffffffff80000ab0:	48 83 78 08 00       	cmp    QWORD PTR [rax+0x8],0x0
ffffffff80000ab5:	74 e1                	je     ffffffff80000a98 <PhysicalMemory::Initialize()+0xe8>
ffffffff80000ab7:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000aba:	44 89 c8             	mov    eax,r9d
ffffffff80000abd:	48 89 ca             	mov    rdx,rcx
ffffffff80000ac0:	48 c1 e9 0c          	shr    rcx,0xc
ffffffff80000ac4:	83 e1 07             	and    ecx,0x7
ffffffff80000ac7:	48 c1 ea 0f          	shr    rdx,0xf
ffffffff80000acb:	d3 f8                	sar    eax,cl
ffffffff80000acd:	f7 d0                	not    eax
ffffffff80000acf:	41 20 04 14          	and    BYTE PTR [r12+rdx*1],al
ffffffff80000ad3:	48 8b 04 f7          	mov    rax,QWORD PTR [rdi+rsi*8]
ffffffff80000ad7:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80000adc:	48 81 78 08 00 10 00 	cmp    QWORD PTR [rax+0x8],0x1000
ffffffff80000ae3:	00 
ffffffff80000ae4:	76 43                	jbe    ffffffff80000b29 <PhysicalMemory::Initialize()+0x179>
ffffffff80000ae6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000aed:	00 00 00 
ffffffff80000af0:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000af3:	45 89 cb             	mov    r11d,r9d
ffffffff80000af6:	48 01 d1             	add    rcx,rdx
ffffffff80000af9:	48 81 c2 00 10 00 00 	add    rdx,0x1000
ffffffff80000b00:	48 89 c8             	mov    rax,rcx
ffffffff80000b03:	48 c1 e9 0c          	shr    rcx,0xc
ffffffff80000b07:	83 e1 07             	and    ecx,0x7
ffffffff80000b0a:	48 c1 e8 0f          	shr    rax,0xf
ffffffff80000b0e:	48 03 05 73 6e 00 00 	add    rax,QWORD PTR [rip+0x6e73]        # ffffffff80007988 <bitmap>
ffffffff80000b15:	41 d3 fb             	sar    r11d,cl
ffffffff80000b18:	44 89 d9             	mov    ecx,r11d
ffffffff80000b1b:	f7 d1                	not    ecx
ffffffff80000b1d:	20 08                	and    BYTE PTR [rax],cl
ffffffff80000b1f:	48 8b 04 f7          	mov    rax,QWORD PTR [rdi+rsi*8]
ffffffff80000b23:	48 39 50 08          	cmp    QWORD PTR [rax+0x8],rdx
ffffffff80000b27:	77 c7                	ja     ffffffff80000af0 <PhysicalMemory::Initialize()+0x140>
ffffffff80000b29:	48 8b 05 d8 65 00 00 	mov    rax,QWORD PTR [rip+0x65d8]        # ffffffff80007108 <mmap_req+0x28>
ffffffff80000b30:	48 83 c6 01          	add    rsi,0x1
ffffffff80000b34:	4c 8b 25 4d 6e 00 00 	mov    r12,QWORD PTR [rip+0x6e4d]        # ffffffff80007988 <bitmap>
ffffffff80000b3b:	4c 8b 58 08          	mov    r11,QWORD PTR [rax+0x8]
ffffffff80000b3f:	4c 39 de             	cmp    rsi,r11
ffffffff80000b42:	0f 82 5d ff ff ff    	jb     ffffffff80000aa5 <PhysicalMemory::Initialize()+0xf5>
ffffffff80000b48:	4c 89 e1             	mov    rcx,r12
ffffffff80000b4b:	4c 8b 65 f8          	mov    r12,QWORD PTR [rbp-0x8]
ffffffff80000b4f:	4c 89 d6             	mov    rsi,r10
ffffffff80000b52:	4c 89 c2             	mov    rdx,r8
ffffffff80000b55:	c9                   	leave  
ffffffff80000b56:	48 c1 ee 14          	shr    rsi,0x14
ffffffff80000b5a:	48 c7 c7 c0 57 00 80 	mov    rdi,0xffffffff800057c0
ffffffff80000b61:	31 c0                	xor    eax,eax
ffffffff80000b63:	e9 58 1a 00 00       	jmp    ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80000b68:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80000b6f:	00 
ffffffff80000b70:	48 8b 05 51 66 00 00 	mov    rax,QWORD PTR [rip+0x6651]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000b77:	48 8b 31             	mov    rsi,QWORD PTR [rcx]
ffffffff80000b7a:	4c 8b 48 08          	mov    r9,QWORD PTR [rax+0x8]
ffffffff80000b7e:	49 01 f1             	add    r9,rsi
ffffffff80000b81:	4c 89 0d 00 6e 00 00 	mov    QWORD PTR [rip+0x6e00],r9        # ffffffff80007988 <bitmap>
ffffffff80000b88:	4c 89 c8             	mov    rax,r9
ffffffff80000b8b:	4d 89 cc             	mov    r12,r9
ffffffff80000b8e:	4d 85 c0             	test   r8,r8
ffffffff80000b91:	74 79                	je     ffffffff80000c0c <PhysicalMemory::Initialize()+0x25c>
ffffffff80000b93:	48 8b 0d 7e 4c 00 00 	mov    rcx,QWORD PTR [rip+0x4c7e]        # ffffffff80005818 <LoadGdt.trampoline+0x108c>
ffffffff80000b9a:	4b 8d 34 08          	lea    rsi,[r8+r9*1]
ffffffff80000b9e:	66 90                	xchg   ax,ax
ffffffff80000ba0:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80000ba3:	48 83 c0 08          	add    rax,0x8
ffffffff80000ba7:	48 39 f0             	cmp    rax,rsi
ffffffff80000baa:	75 f4                	jne    ffffffff80000ba0 <PhysicalMemory::Initialize()+0x1f0>
ffffffff80000bac:	48 8b 02             	mov    rax,QWORD PTR [rdx]
ffffffff80000baf:	48 8b 15 52 65 00 00 	mov    rdx,QWORD PTR [rip+0x6552]        # ffffffff80007108 <mmap_req+0x28>
ffffffff80000bb6:	4d 29 c2             	sub    r10,r8
ffffffff80000bb9:	4c 8b 25 c8 6d 00 00 	mov    r12,QWORD PTR [rip+0x6dc8]        # ffffffff80007988 <bitmap>
ffffffff80000bc0:	4c 89 15 c9 6d 00 00 	mov    QWORD PTR [rip+0x6dc9],r10        # ffffffff80007990 <freeRam>
ffffffff80000bc7:	4c 8b 5a 08          	mov    r11,QWORD PTR [rdx+0x8]
ffffffff80000bcb:	4c 29 40 08          	sub    QWORD PTR [rax+0x8],r8
ffffffff80000bcf:	4c 01 00             	add    QWORD PTR [rax],r8
ffffffff80000bd2:	4d 85 db             	test   r11,r11
ffffffff80000bd5:	0f 85 ad fe ff ff    	jne    ffffffff80000a88 <PhysicalMemory::Initialize()+0xd8>
ffffffff80000bdb:	e9 68 ff ff ff       	jmp    ffffffff80000b48 <PhysicalMemory::Initialize()+0x198>
ffffffff80000be0:	4c 8b 05 c1 6d 00 00 	mov    r8,QWORD PTR [rip+0x6dc1]        # ffffffff800079a8 <highest_addr>
ffffffff80000be7:	4c 8b 15 a2 6d 00 00 	mov    r10,QWORD PTR [rip+0x6da2]        # ffffffff80007990 <freeRam>
ffffffff80000bee:	4c 8b 25 93 6d 00 00 	mov    r12,QWORD PTR [rip+0x6d93]        # ffffffff80007988 <bitmap>
ffffffff80000bf5:	49 c1 e8 0f          	shr    r8,0xf
ffffffff80000bf9:	49 81 c0 ff 0f 00 00 	add    r8,0xfff
ffffffff80000c00:	49 81 e0 00 f0 ff ff 	and    r8,0xfffffffffffff000
ffffffff80000c07:	e9 3c ff ff ff       	jmp    ffffffff80000b48 <PhysicalMemory::Initialize()+0x198>
ffffffff80000c0c:	48 89 31             	mov    QWORD PTR [rcx],rsi
ffffffff80000c0f:	4c 89 15 7a 6d 00 00 	mov    QWORD PTR [rip+0x6d7a],r10        # ffffffff80007990 <freeRam>
ffffffff80000c16:	e9 6d fe ff ff       	jmp    ffffffff80000a88 <PhysicalMemory::Initialize()+0xd8>
ffffffff80000c1b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>:
ffffffff80000c20:	f3 0f 1e fa          	endbr64 
ffffffff80000c24:	55                   	push   rbp
ffffffff80000c25:	48 8b 35 7c 6d 00 00 	mov    rsi,QWORD PTR [rip+0x6d7c]        # ffffffff800079a8 <highest_addr>
ffffffff80000c2c:	48 c1 ee 0c          	shr    rsi,0xc
ffffffff80000c30:	48 89 e5             	mov    rbp,rsp
ffffffff80000c33:	41 54                	push   r12
ffffffff80000c35:	4c 8b 25 64 6d 00 00 	mov    r12,QWORD PTR [rip+0x6d64]        # ffffffff800079a0 <lastI>
ffffffff80000c3c:	53                   	push   rbx
ffffffff80000c3d:	48 89 fb             	mov    rbx,rdi
ffffffff80000c40:	e8 5b fc ff ff       	call   ffffffff800008a0 <inner_alloc(unsigned long, unsigned long)>
ffffffff80000c45:	48 85 c0             	test   rax,rax
ffffffff80000c48:	74 06                	je     ffffffff80000c50 <PhysicalMemory::alloc(unsigned long)+0x30>
ffffffff80000c4a:	5b                   	pop    rbx
ffffffff80000c4b:	41 5c                	pop    r12
ffffffff80000c4d:	5d                   	pop    rbp
ffffffff80000c4e:	c3                   	ret    
ffffffff80000c4f:	90                   	nop
ffffffff80000c50:	4c 89 e6             	mov    rsi,r12
ffffffff80000c53:	48 89 df             	mov    rdi,rbx
ffffffff80000c56:	48 c7 05 3f 6d 00 00 	mov    QWORD PTR [rip+0x6d3f],0x0        # ffffffff800079a0 <lastI>
ffffffff80000c5d:	00 00 00 00 
ffffffff80000c61:	e8 3a fc ff ff       	call   ffffffff800008a0 <inner_alloc(unsigned long, unsigned long)>
ffffffff80000c66:	48 85 c0             	test   rax,rax
ffffffff80000c69:	74 44                	je     ffffffff80000caf <PhysicalMemory::alloc(unsigned long)+0x8f>
ffffffff80000c6b:	48 8b 15 56 65 00 00 	mov    rdx,QWORD PTR [rip+0x6556]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000c72:	48 c1 e3 0c          	shl    rbx,0xc
ffffffff80000c76:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80000c7a:	74 20                	je     ffffffff80000c9c <PhysicalMemory::alloc(unsigned long)+0x7c>
ffffffff80000c7c:	48 01 c2             	add    rdx,rax
ffffffff80000c7f:	48 8b 0d 0a 4b 00 00 	mov    rcx,QWORD PTR [rip+0x4b0a]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80000c86:	48 8d 34 13          	lea    rsi,[rbx+rdx*1]
ffffffff80000c8a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80000c90:	48 89 0a             	mov    QWORD PTR [rdx],rcx
ffffffff80000c93:	48 83 c2 08          	add    rdx,0x8
ffffffff80000c97:	48 39 f2             	cmp    rdx,rsi
ffffffff80000c9a:	75 f4                	jne    ffffffff80000c90 <PhysicalMemory::alloc(unsigned long)+0x70>
ffffffff80000c9c:	48 01 1d f5 6c 00 00 	add    QWORD PTR [rip+0x6cf5],rbx        # ffffffff80007998 <usedRam>
ffffffff80000ca3:	48 29 1d e6 6c 00 00 	sub    QWORD PTR [rip+0x6ce6],rbx        # ffffffff80007990 <freeRam>
ffffffff80000caa:	5b                   	pop    rbx
ffffffff80000cab:	41 5c                	pop    r12
ffffffff80000cad:	5d                   	pop    rbp
ffffffff80000cae:	c3                   	ret    
ffffffff80000caf:	48 c7 c7 fd 57 00 80 	mov    rdi,0xffffffff800057fd
ffffffff80000cb6:	e8 05 19 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80000cbb:	fa                   	cli    
ffffffff80000cbc:	f4                   	hlt    
ffffffff80000cbd:	eb fd                	jmp    ffffffff80000cbc <PhysicalMemory::alloc(unsigned long)+0x9c>
ffffffff80000cbf:	90                   	nop

ffffffff80000cc0 <PhysicalMemory::free(void*, unsigned long)>:
ffffffff80000cc0:	f3 0f 1e fa          	endbr64 
ffffffff80000cc4:	48 c1 ef 0c          	shr    rdi,0xc
ffffffff80000cc8:	4c 8d 04 37          	lea    r8,[rdi+rsi*1]
ffffffff80000ccc:	4c 39 c7             	cmp    rdi,r8
ffffffff80000ccf:	73 38                	jae    ffffffff80000d09 <PhysicalMemory::free(void*, unsigned long)+0x49>
ffffffff80000cd1:	48 89 f8             	mov    rax,rdi
ffffffff80000cd4:	41 b9 80 00 00 00    	mov    r9d,0x80
ffffffff80000cda:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80000ce0:	89 c1                	mov    ecx,eax
ffffffff80000ce2:	45 89 ca             	mov    r10d,r9d
ffffffff80000ce5:	48 89 c2             	mov    rdx,rax
ffffffff80000ce8:	48 83 c0 01          	add    rax,0x1
ffffffff80000cec:	83 e1 07             	and    ecx,0x7
ffffffff80000cef:	48 c1 ea 03          	shr    rdx,0x3
ffffffff80000cf3:	48 03 15 8e 6c 00 00 	add    rdx,QWORD PTR [rip+0x6c8e]        # ffffffff80007988 <bitmap>
ffffffff80000cfa:	41 d3 fa             	sar    r10d,cl
ffffffff80000cfd:	44 89 d1             	mov    ecx,r10d
ffffffff80000d00:	f7 d1                	not    ecx
ffffffff80000d02:	20 0a                	and    BYTE PTR [rdx],cl
ffffffff80000d04:	4c 39 c0             	cmp    rax,r8
ffffffff80000d07:	75 d7                	jne    ffffffff80000ce0 <PhysicalMemory::free(void*, unsigned long)+0x20>
ffffffff80000d09:	48 39 3d 90 6c 00 00 	cmp    QWORD PTR [rip+0x6c90],rdi        # ffffffff800079a0 <lastI>
ffffffff80000d10:	76 07                	jbe    ffffffff80000d19 <PhysicalMemory::free(void*, unsigned long)+0x59>
ffffffff80000d12:	48 89 3d 87 6c 00 00 	mov    QWORD PTR [rip+0x6c87],rdi        # ffffffff800079a0 <lastI>
ffffffff80000d19:	48 c1 e6 0c          	shl    rsi,0xc
ffffffff80000d1d:	48 29 35 74 6c 00 00 	sub    QWORD PTR [rip+0x6c74],rsi        # ffffffff80007998 <usedRam>
ffffffff80000d24:	48 01 35 65 6c 00 00 	add    QWORD PTR [rip+0x6c65],rsi        # ffffffff80007990 <freeRam>
ffffffff80000d2b:	c3                   	ret    
ffffffff80000d2c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80000d30 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]>:
ffffffff80000d30:	55                   	push   rbp
ffffffff80000d31:	48 89 e5             	mov    rbp,rsp
ffffffff80000d34:	41 57                	push   r15
ffffffff80000d36:	41 56                	push   r14
ffffffff80000d38:	41 55                	push   r13
ffffffff80000d3a:	49 89 d5             	mov    r13,rdx
ffffffff80000d3d:	41 54                	push   r12
ffffffff80000d3f:	53                   	push   rbx
ffffffff80000d40:	48 89 f3             	mov    rbx,rsi
ffffffff80000d43:	48 c1 ee 27          	shr    rsi,0x27
ffffffff80000d47:	81 e6 ff 01 00 00    	and    esi,0x1ff
ffffffff80000d4d:	49 89 dc             	mov    r12,rbx
ffffffff80000d50:	49 89 de             	mov    r14,rbx
ffffffff80000d53:	48 c1 eb 0c          	shr    rbx,0xc
ffffffff80000d57:	49 c1 ec 1e          	shr    r12,0x1e
ffffffff80000d5b:	49 c1 ee 15          	shr    r14,0x15
ffffffff80000d5f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
ffffffff80000d65:	48 83 ec 18          	sub    rsp,0x18
ffffffff80000d69:	48 8b 05 58 64 00 00 	mov    rax,QWORD PTR [rip+0x6458]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000d70:	41 81 e4 ff 01 00 00 	and    r12d,0x1ff
ffffffff80000d77:	41 81 e6 ff 01 00 00 	and    r14d,0x1ff
ffffffff80000d7e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80000d82:	4c 8d 3c 17          	lea    r15,[rdi+rdx*1]
ffffffff80000d86:	49 8b 04 f7          	mov    rax,QWORD PTR [r15+rsi*8]
ffffffff80000d8a:	48 85 c0             	test   rax,rax
ffffffff80000d8d:	74 69                	je     ffffffff80000df8 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0xc8>
ffffffff80000d8f:	48 b9 80 ff ff ff ff 	movabs rcx,0x7fffffffffffff80
ffffffff80000d96:	ff ff 7f 
ffffffff80000d99:	48 21 c8             	and    rax,rcx
ffffffff80000d9c:	4c 8d 3c 10          	lea    r15,[rax+rdx*1]
ffffffff80000da0:	4b 8b 04 e7          	mov    rax,QWORD PTR [r15+r12*8]
ffffffff80000da4:	48 85 c0             	test   rax,rax
ffffffff80000da7:	0f 84 03 01 00 00    	je     ffffffff80000eb0 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x180>
ffffffff80000dad:	48 b9 80 ff ff ff ff 	movabs rcx,0x7fffffffffffff80
ffffffff80000db4:	ff ff 7f 
ffffffff80000db7:	48 21 c8             	and    rax,rcx
ffffffff80000dba:	4c 8d 24 10          	lea    r12,[rax+rdx*1]
ffffffff80000dbe:	4b 8b 04 f4          	mov    rax,QWORD PTR [r12+r14*8]
ffffffff80000dc2:	48 85 c0             	test   rax,rax
ffffffff80000dc5:	0f 84 8d 00 00 00    	je     ffffffff80000e58 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x128>
ffffffff80000dcb:	48 b9 80 ff ff ff ff 	movabs rcx,0x7fffffffffffff80
ffffffff80000dd2:	ff ff 7f 
ffffffff80000dd5:	49 83 cd 03          	or     r13,0x3
ffffffff80000dd9:	48 21 c8             	and    rax,rcx
ffffffff80000ddc:	48 8d 04 d8          	lea    rax,[rax+rbx*8]
ffffffff80000de0:	4c 89 2c 10          	mov    QWORD PTR [rax+rdx*1],r13
ffffffff80000de4:	48 83 c4 18          	add    rsp,0x18
ffffffff80000de8:	5b                   	pop    rbx
ffffffff80000de9:	41 5c                	pop    r12
ffffffff80000deb:	41 5d                	pop    r13
ffffffff80000ded:	41 5e                	pop    r14
ffffffff80000def:	41 5f                	pop    r15
ffffffff80000df1:	5d                   	pop    rbp
ffffffff80000df2:	c3                   	ret    
ffffffff80000df3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80000df8:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80000dfd:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff80000e01:	e8 1a fe ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80000e06:	48 8b 15 bb 63 00 00 	mov    rdx,QWORD PTR [rip+0x63bb]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000e0d:	48 8b 0d 7c 49 00 00 	mov    rcx,QWORD PTR [rip+0x497c]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80000e14:	48 8b 75 c8          	mov    rsi,QWORD PTR [rbp-0x38]
ffffffff80000e18:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffffffff80000e1c:	48 01 c7             	add    rdi,rax
ffffffff80000e1f:	48 89 fa             	mov    rdx,rdi
ffffffff80000e22:	48 8d bf 00 10 00 00 	lea    rdi,[rdi+0x1000]
ffffffff80000e29:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80000e30:	48 89 0a             	mov    QWORD PTR [rdx],rcx
ffffffff80000e33:	48 83 c2 08          	add    rdx,0x8
ffffffff80000e37:	48 39 d7             	cmp    rdi,rdx
ffffffff80000e3a:	75 f4                	jne    ffffffff80000e30 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x100>
ffffffff80000e3c:	48 8b 15 85 63 00 00 	mov    rdx,QWORD PTR [rip+0x6385]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000e43:	48 83 c8 07          	or     rax,0x7
ffffffff80000e47:	49 89 04 f7          	mov    QWORD PTR [r15+rsi*8],rax
ffffffff80000e4b:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80000e4f:	e9 3b ff ff ff       	jmp    ffffffff80000d8f <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x5f>
ffffffff80000e54:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80000e58:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80000e5d:	e8 be fd ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80000e62:	48 8b 15 5f 63 00 00 	mov    rdx,QWORD PTR [rip+0x635f]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000e69:	48 8b 0d 20 49 00 00 	mov    rcx,QWORD PTR [rip+0x4920]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80000e70:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffffffff80000e74:	48 01 c7             	add    rdi,rax
ffffffff80000e77:	48 89 fa             	mov    rdx,rdi
ffffffff80000e7a:	48 8d b7 00 10 00 00 	lea    rsi,[rdi+0x1000]
ffffffff80000e81:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80000e88:	48 89 0a             	mov    QWORD PTR [rdx],rcx
ffffffff80000e8b:	48 83 c2 08          	add    rdx,0x8
ffffffff80000e8f:	48 39 f2             	cmp    rdx,rsi
ffffffff80000e92:	75 f4                	jne    ffffffff80000e88 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x158>
ffffffff80000e94:	48 8b 15 2d 63 00 00 	mov    rdx,QWORD PTR [rip+0x632d]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000e9b:	48 83 c8 07          	or     rax,0x7
ffffffff80000e9f:	4b 89 04 f4          	mov    QWORD PTR [r12+r14*8],rax
ffffffff80000ea3:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80000ea7:	e9 1f ff ff ff       	jmp    ffffffff80000dcb <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x9b>
ffffffff80000eac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80000eb0:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80000eb5:	e8 66 fd ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80000eba:	48 8b 15 07 63 00 00 	mov    rdx,QWORD PTR [rip+0x6307]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000ec1:	48 8b 0d c8 48 00 00 	mov    rcx,QWORD PTR [rip+0x48c8]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80000ec8:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffffffff80000ecc:	48 01 c7             	add    rdi,rax
ffffffff80000ecf:	48 89 fa             	mov    rdx,rdi
ffffffff80000ed2:	48 8d b7 00 10 00 00 	lea    rsi,[rdi+0x1000]
ffffffff80000ed9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80000ee0:	48 89 0a             	mov    QWORD PTR [rdx],rcx
ffffffff80000ee3:	48 83 c2 08          	add    rdx,0x8
ffffffff80000ee7:	48 39 d6             	cmp    rsi,rdx
ffffffff80000eea:	75 f4                	jne    ffffffff80000ee0 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x1b0>
ffffffff80000eec:	48 8b 15 d5 62 00 00 	mov    rdx,QWORD PTR [rip+0x62d5]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000ef3:	48 83 c8 07          	or     rax,0x7
ffffffff80000ef7:	4b 89 04 e7          	mov    QWORD PTR [r15+r12*8],rax
ffffffff80000efb:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80000eff:	e9 a9 fe ff ff       	jmp    ffffffff80000dad <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]+0x7d>
ffffffff80000f04:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80000f0b:	00 00 00 00 
ffffffff80000f0f:	90                   	nop

ffffffff80000f10 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>:
ffffffff80000f10:	f3 0f 1e fa          	endbr64 
ffffffff80000f14:	55                   	push   rbp
ffffffff80000f15:	49 89 f0             	mov    r8,rsi
ffffffff80000f18:	49 c1 e8 27          	shr    r8,0x27
ffffffff80000f1c:	41 81 e0 ff 01 00 00 	and    r8d,0x1ff
ffffffff80000f23:	48 89 e5             	mov    rbp,rsp
ffffffff80000f26:	41 57                	push   r15
ffffffff80000f28:	49 89 f7             	mov    r15,rsi
ffffffff80000f2b:	41 56                	push   r14
ffffffff80000f2d:	49 89 f6             	mov    r14,rsi
ffffffff80000f30:	49 c1 ef 15          	shr    r15,0x15
ffffffff80000f34:	41 55                	push   r13
ffffffff80000f36:	49 89 cd             	mov    r13,rcx
ffffffff80000f39:	49 c1 ee 1e          	shr    r14,0x1e
ffffffff80000f3d:	41 81 e7 ff 01 00 00 	and    r15d,0x1ff
ffffffff80000f44:	41 54                	push   r12
ffffffff80000f46:	49 89 d4             	mov    r12,rdx
ffffffff80000f49:	41 81 e6 ff 01 00 00 	and    r14d,0x1ff
ffffffff80000f50:	53                   	push   rbx
ffffffff80000f51:	48 89 f3             	mov    rbx,rsi
ffffffff80000f54:	48 c1 eb 0c          	shr    rbx,0xc
ffffffff80000f58:	81 e3 ff 01 00 00    	and    ebx,0x1ff
ffffffff80000f5e:	48 83 ec 18          	sub    rsp,0x18
ffffffff80000f62:	48 8b 05 5f 62 00 00 	mov    rax,QWORD PTR [rip+0x625f]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000f69:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80000f6d:	48 8d 0c 17          	lea    rcx,[rdi+rdx*1]
ffffffff80000f71:	4a 8b 04 c1          	mov    rax,QWORD PTR [rcx+r8*8]
ffffffff80000f75:	48 85 c0             	test   rax,rax
ffffffff80000f78:	74 66                	je     ffffffff80000fe0 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0xd0>
ffffffff80000f7a:	48 b9 80 ff ff ff ff 	movabs rcx,0x7fffffffffffff80
ffffffff80000f81:	ff ff 7f 
ffffffff80000f84:	48 21 c8             	and    rax,rcx
ffffffff80000f87:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
ffffffff80000f8b:	4a 8b 04 f1          	mov    rax,QWORD PTR [rcx+r14*8]
ffffffff80000f8f:	48 85 c0             	test   rax,rax
ffffffff80000f92:	0f 84 08 01 00 00    	je     ffffffff800010a0 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x190>
ffffffff80000f98:	48 b9 80 ff ff ff ff 	movabs rcx,0x7fffffffffffff80
ffffffff80000f9f:	ff ff 7f 
ffffffff80000fa2:	48 21 c8             	and    rax,rcx
ffffffff80000fa5:	4c 8d 34 10          	lea    r14,[rax+rdx*1]
ffffffff80000fa9:	4b 8b 04 fe          	mov    rax,QWORD PTR [r14+r15*8]
ffffffff80000fad:	48 85 c0             	test   rax,rax
ffffffff80000fb0:	0f 84 92 00 00 00    	je     ffffffff80001048 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x138>
ffffffff80000fb6:	48 b9 80 ff ff ff ff 	movabs rcx,0x7fffffffffffff80
ffffffff80000fbd:	ff ff 7f 
ffffffff80000fc0:	4d 09 ec             	or     r12,r13
ffffffff80000fc3:	48 21 c8             	and    rax,rcx
ffffffff80000fc6:	48 8d 04 d8          	lea    rax,[rax+rbx*8]
ffffffff80000fca:	4c 89 24 10          	mov    QWORD PTR [rax+rdx*1],r12
ffffffff80000fce:	48 83 c4 18          	add    rsp,0x18
ffffffff80000fd2:	5b                   	pop    rbx
ffffffff80000fd3:	41 5c                	pop    r12
ffffffff80000fd5:	41 5d                	pop    r13
ffffffff80000fd7:	41 5e                	pop    r14
ffffffff80000fd9:	41 5f                	pop    r15
ffffffff80000fdb:	5d                   	pop    rbp
ffffffff80000fdc:	c3                   	ret    
ffffffff80000fdd:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff80000fe0:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80000fe5:	4c 89 45 c0          	mov    QWORD PTR [rbp-0x40],r8
ffffffff80000fe9:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff80000fed:	e8 2e fc ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80000ff2:	48 8b 15 cf 61 00 00 	mov    rdx,QWORD PTR [rip+0x61cf]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80000ff9:	48 8b 35 90 47 00 00 	mov    rsi,QWORD PTR [rip+0x4790]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80001000:	4c 8b 45 c0          	mov    r8,QWORD PTR [rbp-0x40]
ffffffff80001004:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff80001008:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffffffff8000100c:	48 01 c7             	add    rdi,rax
ffffffff8000100f:	48 89 fa             	mov    rdx,rdi
ffffffff80001012:	48 8d bf 00 10 00 00 	lea    rdi,[rdi+0x1000]
ffffffff80001019:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80001020:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffffffff80001023:	48 83 c2 08          	add    rdx,0x8
ffffffff80001027:	48 39 d7             	cmp    rdi,rdx
ffffffff8000102a:	75 f4                	jne    ffffffff80001020 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x110>
ffffffff8000102c:	48 8b 15 95 61 00 00 	mov    rdx,QWORD PTR [rip+0x6195]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80001033:	48 83 c8 07          	or     rax,0x7
ffffffff80001037:	4a 89 04 c1          	mov    QWORD PTR [rcx+r8*8],rax
ffffffff8000103b:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff8000103f:	e9 36 ff ff ff       	jmp    ffffffff80000f7a <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x6a>
ffffffff80001044:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80001048:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000104d:	e8 ce fb ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80001052:	48 8b 15 6f 61 00 00 	mov    rdx,QWORD PTR [rip+0x616f]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80001059:	48 8b 72 08          	mov    rsi,QWORD PTR [rdx+0x8]
ffffffff8000105d:	48 01 c6             	add    rsi,rax
ffffffff80001060:	48 89 f2             	mov    rdx,rsi
ffffffff80001063:	48 8d 8e 00 10 00 00 	lea    rcx,[rsi+0x1000]
ffffffff8000106a:	48 8b 35 1f 47 00 00 	mov    rsi,QWORD PTR [rip+0x471f]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80001071:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80001078:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffffffff8000107b:	48 83 c2 08          	add    rdx,0x8
ffffffff8000107f:	48 39 ca             	cmp    rdx,rcx
ffffffff80001082:	75 f4                	jne    ffffffff80001078 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x168>
ffffffff80001084:	48 8b 15 3d 61 00 00 	mov    rdx,QWORD PTR [rip+0x613d]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff8000108b:	48 83 c8 07          	or     rax,0x7
ffffffff8000108f:	4b 89 04 fe          	mov    QWORD PTR [r14+r15*8],rax
ffffffff80001093:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80001097:	e9 1a ff ff ff       	jmp    ffffffff80000fb6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0xa6>
ffffffff8000109c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff800010a0:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800010a5:	48 89 4d c8          	mov    QWORD PTR [rbp-0x38],rcx
ffffffff800010a9:	e8 72 fb ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff800010ae:	48 8b 15 13 61 00 00 	mov    rdx,QWORD PTR [rip+0x6113]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff800010b5:	48 8b 35 d4 46 00 00 	mov    rsi,QWORD PTR [rip+0x46d4]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff800010bc:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff800010c0:	48 8b 7a 08          	mov    rdi,QWORD PTR [rdx+0x8]
ffffffff800010c4:	48 01 c7             	add    rdi,rax
ffffffff800010c7:	48 89 fa             	mov    rdx,rdi
ffffffff800010ca:	48 8d bf 00 10 00 00 	lea    rdi,[rdi+0x1000]
ffffffff800010d1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800010d8:	48 89 32             	mov    QWORD PTR [rdx],rsi
ffffffff800010db:	48 83 c2 08          	add    rdx,0x8
ffffffff800010df:	48 39 d7             	cmp    rdi,rdx
ffffffff800010e2:	75 f4                	jne    ffffffff800010d8 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x1c8>
ffffffff800010e4:	48 8b 15 dd 60 00 00 	mov    rdx,QWORD PTR [rip+0x60dd]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff800010eb:	48 83 c8 07          	or     rax,0x7
ffffffff800010ef:	4a 89 04 f1          	mov    QWORD PTR [rcx+r14*8],rax
ffffffff800010f3:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff800010f7:	e9 9c fe ff ff       	jmp    ffffffff80000f98 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x88>
ffffffff800010fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80001100 <VirtualMemory::Initialize()>:
ffffffff80001100:	f3 0f 1e fa          	endbr64 
ffffffff80001104:	55                   	push   rbp
ffffffff80001105:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000110a:	48 89 e5             	mov    rbp,rsp
ffffffff8000110d:	41 56                	push   r14
ffffffff8000110f:	41 55                	push   r13
ffffffff80001111:	41 54                	push   r12
ffffffff80001113:	53                   	push   rbx
ffffffff80001114:	e8 07 fb ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80001119:	48 8b 15 70 46 00 00 	mov    rdx,QWORD PTR [rip+0x4670]        # ffffffff80005790 <LoadGdt.trampoline+0x1004>
ffffffff80001120:	48 89 05 89 68 00 00 	mov    QWORD PTR [rip+0x6889],rax        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff80001127:	48 8d 88 00 10 00 00 	lea    rcx,[rax+0x1000]
ffffffff8000112e:	66 90                	xchg   ax,ax
ffffffff80001130:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80001133:	48 83 c0 08          	add    rax,0x8
ffffffff80001137:	48 39 c1             	cmp    rcx,rax
ffffffff8000113a:	75 f4                	jne    ffffffff80001130 <VirtualMemory::Initialize()+0x30>
ffffffff8000113c:	48 8b 35 6d 68 00 00 	mov    rsi,QWORD PTR [rip+0x686d]        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff80001143:	48 c7 c7 20 58 00 80 	mov    rdi,0xffffffff80005820
ffffffff8000114a:	31 c0                	xor    eax,eax
ffffffff8000114c:	e8 6f 14 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001151:	48 8b 05 f0 5f 00 00 	mov    rax,QWORD PTR [rip+0x5ff0]        # ffffffff80007148 <kernel_file+0x28>
ffffffff80001158:	48 8b 15 29 60 00 00 	mov    rdx,QWORD PTR [rip+0x6029]        # ffffffff80007188 <kernel_addr+0x28>
ffffffff8000115f:	48 c7 c7 48 58 00 80 	mov    rdi,0xffffffff80005848
ffffffff80001166:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000116a:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
ffffffff8000116e:	48 8b 72 08          	mov    rsi,QWORD PTR [rdx+0x8]
ffffffff80001172:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80001176:	48 8d 14 30          	lea    rdx,[rax+rsi*1]
ffffffff8000117a:	4c 8d 04 01          	lea    r8,[rcx+rax*1]
ffffffff8000117e:	31 c0                	xor    eax,eax
ffffffff80001180:	e8 3b 14 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001185:	48 8b 05 bc 5f 00 00 	mov    rax,QWORD PTR [rip+0x5fbc]        # ffffffff80007148 <kernel_file+0x28>
ffffffff8000118c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001190:	48 83 78 10 00       	cmp    QWORD PTR [rax+0x10],0x0
ffffffff80001195:	74 42                	je     ffffffff800011d9 <VirtualMemory::Initialize()+0xd9>
ffffffff80001197:	31 db                	xor    ebx,ebx
ffffffff80001199:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800011a0:	48 8b 05 e1 5f 00 00 	mov    rax,QWORD PTR [rip+0x5fe1]        # ffffffff80007188 <kernel_addr+0x28>
ffffffff800011a7:	48 8b 3d 02 68 00 00 	mov    rdi,QWORD PTR [rip+0x6802]        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff800011ae:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff800011b2:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffffffff800011b6:	48 01 da             	add    rdx,rbx
ffffffff800011b9:	48 01 de             	add    rsi,rbx
ffffffff800011bc:	48 81 c3 00 10 00 00 	add    rbx,0x1000
ffffffff800011c3:	e8 68 fb ff ff       	call   ffffffff80000d30 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]>
ffffffff800011c8:	48 8b 05 79 5f 00 00 	mov    rax,QWORD PTR [rip+0x5f79]        # ffffffff80007148 <kernel_file+0x28>
ffffffff800011cf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800011d3:	48 39 58 10          	cmp    QWORD PTR [rax+0x10],rbx
ffffffff800011d7:	77 c7                	ja     ffffffff800011a0 <VirtualMemory::Initialize()+0xa0>
ffffffff800011d9:	49 bc 00 00 00 00 01 	movabs r12,0x100000000
ffffffff800011e0:	00 00 00 
ffffffff800011e3:	31 db                	xor    ebx,ebx
ffffffff800011e5:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff800011e8:	48 8b 05 d9 5f 00 00 	mov    rax,QWORD PTR [rip+0x5fd9]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff800011ef:	48 8b 3d ba 67 00 00 	mov    rdi,QWORD PTR [rip+0x67ba]        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff800011f6:	48 89 da             	mov    rdx,rbx
ffffffff800011f9:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
ffffffff800011fd:	48 01 de             	add    rsi,rbx
ffffffff80001200:	48 81 c3 00 10 00 00 	add    rbx,0x1000
ffffffff80001207:	e8 24 fb ff ff       	call   ffffffff80000d30 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]>
ffffffff8000120c:	4c 39 e3             	cmp    rbx,r12
ffffffff8000120f:	75 d7                	jne    ffffffff800011e8 <VirtualMemory::Initialize()+0xe8>
ffffffff80001211:	48 8b 05 f0 5e 00 00 	mov    rax,QWORD PTR [rip+0x5ef0]        # ffffffff80007108 <mmap_req+0x28>
ffffffff80001218:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff8000121c:	48 8b 70 10          	mov    rsi,QWORD PTR [rax+0x10]
ffffffff80001220:	48 85 c9             	test   rcx,rcx
ffffffff80001223:	74 16                	je     ffffffff8000123b <VirtualMemory::Initialize()+0x13b>
ffffffff80001225:	31 d2                	xor    edx,edx
ffffffff80001227:	48 8b 04 d6          	mov    rax,QWORD PTR [rsi+rdx*8]
ffffffff8000122b:	48 83 78 10 07       	cmp    QWORD PTR [rax+0x10],0x7
ffffffff80001230:	74 1e                	je     ffffffff80001250 <VirtualMemory::Initialize()+0x150>
ffffffff80001232:	48 83 c2 01          	add    rdx,0x1
ffffffff80001236:	48 39 ca             	cmp    rdx,rcx
ffffffff80001239:	75 ec                	jne    ffffffff80001227 <VirtualMemory::Initialize()+0x127>
ffffffff8000123b:	48 c7 c7 78 58 00 80 	mov    rdi,0xffffffff80005878
ffffffff80001242:	31 c0                	xor    eax,eax
ffffffff80001244:	e8 77 13 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001249:	fa                   	cli    
ffffffff8000124a:	f4                   	hlt    
ffffffff8000124b:	eb fd                	jmp    ffffffff8000124a <VirtualMemory::Initialize()+0x14a>
ffffffff8000124d:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff80001250:	4c 8b 28             	mov    r13,QWORD PTR [rax]
ffffffff80001253:	4c 8b 60 08          	mov    r12,QWORD PTR [rax+0x8]
ffffffff80001257:	4d 85 ed             	test   r13,r13
ffffffff8000125a:	74 df                	je     ffffffff8000123b <VirtualMemory::Initialize()+0x13b>
ffffffff8000125c:	31 db                	xor    ebx,ebx
ffffffff8000125e:	4d 85 e4             	test   r12,r12
ffffffff80001261:	74 2e                	je     ffffffff80001291 <VirtualMemory::Initialize()+0x191>
ffffffff80001263:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80001268:	e8 63 10 00 00       	call   ffffffff800022d0 <Screen::GetFramebuffer()>
ffffffff8000126d:	4d 8d 74 1d 00       	lea    r14,[r13+rbx*1+0x0]
ffffffff80001272:	48 8b 3d 37 67 00 00 	mov    rdi,QWORD PTR [rip+0x6737]        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff80001279:	48 8d 34 18          	lea    rsi,[rax+rbx*1]
ffffffff8000127d:	4c 89 f2             	mov    rdx,r14
ffffffff80001280:	48 81 c3 00 10 00 00 	add    rbx,0x1000
ffffffff80001287:	e8 a4 fa ff ff       	call   ffffffff80000d30 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long) [clone .constprop.0]>
ffffffff8000128c:	49 39 dc             	cmp    r12,rbx
ffffffff8000128f:	77 d7                	ja     ffffffff80001268 <VirtualMemory::Initialize()+0x168>
ffffffff80001291:	48 8b 05 18 67 00 00 	mov    rax,QWORD PTR [rip+0x6718]        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff80001298:	0f 22 d8             	mov    cr3,rax
ffffffff8000129b:	5b                   	pop    rbx
ffffffff8000129c:	41 5c                	pop    r12
ffffffff8000129e:	41 5d                	pop    r13
ffffffff800012a0:	41 5e                	pop    r14
ffffffff800012a2:	5d                   	pop    rbp
ffffffff800012a3:	c3                   	ret    
ffffffff800012a4:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800012ab:	00 00 00 00 
ffffffff800012af:	90                   	nop

ffffffff800012b0 <VirtualMemory::SwapToKernelPT()>:
ffffffff800012b0:	f3 0f 1e fa          	endbr64 
ffffffff800012b4:	48 8b 05 f5 66 00 00 	mov    rax,QWORD PTR [rip+0x66f5]        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff800012bb:	0f 22 d8             	mov    cr3,rax
ffffffff800012be:	c3                   	ret    
ffffffff800012bf:	90                   	nop

ffffffff800012c0 <VirtualMemory::SwapToPageTable(PML4Table*)>:
ffffffff800012c0:	f3 0f 1e fa          	endbr64 
ffffffff800012c4:	0f 22 df             	mov    cr3,rdi
ffffffff800012c7:	c3                   	ret    
ffffffff800012c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800012cf:	00 

ffffffff800012d0 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>:
ffffffff800012d0:	f3 0f 1e fa          	endbr64 
ffffffff800012d4:	49 89 f8             	mov    r8,rdi
ffffffff800012d7:	41 b9 e8 03 00 00    	mov    r9d,0x3e8
ffffffff800012dd:	89 d7                	mov    edi,edx
ffffffff800012df:	eb 0d                	jmp    ffffffff800012ee <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x1e>
ffffffff800012e1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800012e8:	48 83 e9 01          	sub    rcx,0x1
ffffffff800012ec:	74 22                	je     ffffffff80001310 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x40>
ffffffff800012ee:	49 8b 00             	mov    rax,QWORD PTR [r8]
ffffffff800012f1:	0f b7 10             	movzx  edx,WORD PTR [rax]
ffffffff800012f4:	83 c2 07             	add    edx,0x7
ffffffff800012f7:	ec                   	in     al,dx
ffffffff800012f8:	89 c2                	mov    edx,eax
ffffffff800012fa:	4c 89 c8             	mov    rax,r9
ffffffff800012fd:	ff c8                	dec    eax
ffffffff800012ff:	75 fc                	jne    ffffffff800012fd <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x2d>
ffffffff80001301:	21 f2                	and    edx,esi
ffffffff80001303:	40 38 fa             	cmp    dl,dil
ffffffff80001306:	75 e0                	jne    ffffffff800012e8 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x18>
ffffffff80001308:	48 85 c9             	test   rcx,rcx
ffffffff8000130b:	0f 95 c0             	setne  al
ffffffff8000130e:	c3                   	ret    
ffffffff8000130f:	90                   	nop
ffffffff80001310:	31 c0                	xor    eax,eax
ffffffff80001312:	c3                   	ret    
ffffffff80001313:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000131a:	00 00 00 00 
ffffffff8000131e:	66 90                	xchg   ax,ax

ffffffff80001320 <ResetController(IDEDevice*)>:
ffffffff80001320:	f3 0f 1e fa          	endbr64 
ffffffff80001324:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80001327:	48 89 f9             	mov    rcx,rdi
ffffffff8000132a:	0f b7 30             	movzx  esi,WORD PTR [rax]
ffffffff8000132d:	b8 04 00 00 00       	mov    eax,0x4
ffffffff80001332:	66 81 c6 06 02       	add    si,0x206
ffffffff80001337:	89 f2                	mov    edx,esi
ffffffff80001339:	ee                   	out    dx,al
ffffffff8000133a:	b8 40 42 0f 00       	mov    eax,0xf4240
ffffffff8000133f:	ff c8                	dec    eax
ffffffff80001341:	75 fc                	jne    ffffffff8000133f <ResetController(IDEDevice*)+0x1f>
ffffffff80001343:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80001346:	0f b7 10             	movzx  edx,WORD PTR [rax]
ffffffff80001349:	83 c2 07             	add    edx,0x7
ffffffff8000134c:	ec                   	in     al,dx
ffffffff8000134d:	89 c2                	mov    edx,eax
ffffffff8000134f:	b8 e8 03 00 00       	mov    eax,0x3e8
ffffffff80001354:	ff c8                	dec    eax
ffffffff80001356:	75 fc                	jne    ffffffff80001354 <ResetController(IDEDevice*)+0x34>
ffffffff80001358:	84 d2                	test   dl,dl
ffffffff8000135a:	78 03                	js     ffffffff8000135f <ResetController(IDEDevice*)+0x3f>
ffffffff8000135c:	31 c0                	xor    eax,eax
ffffffff8000135e:	c3                   	ret    
ffffffff8000135f:	31 c0                	xor    eax,eax
ffffffff80001361:	89 f2                	mov    edx,esi
ffffffff80001363:	ee                   	out    dx,al
ffffffff80001364:	be 80 c3 c9 01       	mov    esi,0x1c9c380
ffffffff80001369:	bf e8 03 00 00       	mov    edi,0x3e8
ffffffff8000136e:	66 90                	xchg   ax,ax
ffffffff80001370:	48 8b 01             	mov    rax,QWORD PTR [rcx]
ffffffff80001373:	0f b7 10             	movzx  edx,WORD PTR [rax]
ffffffff80001376:	83 c2 07             	add    edx,0x7
ffffffff80001379:	ec                   	in     al,dx
ffffffff8000137a:	48 89 f8             	mov    rax,rdi
ffffffff8000137d:	ff c8                	dec    eax
ffffffff8000137f:	75 fc                	jne    ffffffff8000137d <ResetController(IDEDevice*)+0x5d>
ffffffff80001381:	48 83 ee 01          	sub    rsi,0x1
ffffffff80001385:	75 e9                	jne    ffffffff80001370 <ResetController(IDEDevice*)+0x50>
ffffffff80001387:	eb d3                	jmp    ffffffff8000135c <ResetController(IDEDevice*)+0x3c>
ffffffff80001389:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff80001390 <SelectDevice(IDEDevice*)>:
ffffffff80001390:	f3 0f 1e fa          	endbr64 
ffffffff80001394:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff80001397:	0f b7 08             	movzx  ecx,WORD PTR [rax]
ffffffff8000139a:	8d 71 07             	lea    esi,[rcx+0x7]
ffffffff8000139d:	89 f2                	mov    edx,esi
ffffffff8000139f:	ec                   	in     al,dx
ffffffff800013a0:	45 31 c0             	xor    r8d,r8d
ffffffff800013a3:	a8 88                	test   al,0x88
ffffffff800013a5:	75 20                	jne    ffffffff800013c7 <SelectDevice(IDEDevice*)+0x37>
ffffffff800013a7:	0f b6 47 09          	movzx  eax,BYTE PTR [rdi+0x9]
ffffffff800013ab:	8d 51 06             	lea    edx,[rcx+0x6]
ffffffff800013ae:	c1 e0 04             	shl    eax,0x4
ffffffff800013b1:	83 c8 a0             	or     eax,0xffffffa0
ffffffff800013b4:	ee                   	out    dx,al
ffffffff800013b5:	b8 e8 03 00 00       	mov    eax,0x3e8
ffffffff800013ba:	ff c8                	dec    eax
ffffffff800013bc:	75 fc                	jne    ffffffff800013ba <SelectDevice(IDEDevice*)+0x2a>
ffffffff800013be:	89 f2                	mov    edx,esi
ffffffff800013c0:	ec                   	in     al,dx
ffffffff800013c1:	a8 88                	test   al,0x88
ffffffff800013c3:	41 0f 94 c0          	sete   r8b
ffffffff800013c7:	44 89 c0             	mov    eax,r8d
ffffffff800013ca:	c3                   	ret    
ffffffff800013cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff800013d0 <IdentifyAtaDevice(IDEDevice*)>:
ffffffff800013d0:	f3 0f 1e fa          	endbr64 
ffffffff800013d4:	55                   	push   rbp
ffffffff800013d5:	48 c7 c2 9c 58 00 80 	mov    rdx,0xffffffff8000589c
ffffffff800013dc:	48 89 e5             	mov    rbp,rsp
ffffffff800013df:	41 54                	push   r12
ffffffff800013e1:	48 81 ec 18 02 00 00 	sub    rsp,0x218
ffffffff800013e8:	48 8b 07             	mov    rax,QWORD PTR [rdi]
ffffffff800013eb:	80 7f 09 00          	cmp    BYTE PTR [rdi+0x9],0x0
ffffffff800013ef:	44 0f b7 20          	movzx  r12d,WORD PTR [rax]
ffffffff800013f3:	48 c7 c0 a2 58 00 80 	mov    rax,0xffffffff800058a2
ffffffff800013fa:	c6 47 08 00          	mov    BYTE PTR [rdi+0x8],0x0
ffffffff800013fe:	48 0f 45 c2          	cmovne rax,rdx
ffffffff80001402:	45 8d 5c 24 02       	lea    r11d,[r12+0x2]
ffffffff80001407:	49 89 c2             	mov    r10,rax
ffffffff8000140a:	44 89 da             	mov    edx,r11d
ffffffff8000140d:	b8 ab ff ff ff       	mov    eax,0xffffffab
ffffffff80001412:	ee                   	out    dx,al
ffffffff80001413:	ec                   	in     al,dx
ffffffff80001414:	3c ab                	cmp    al,0xab
ffffffff80001416:	74 20                	je     ffffffff80001438 <IdentifyAtaDevice(IDEDevice*)+0x68>
ffffffff80001418:	44 89 e2             	mov    edx,r12d
ffffffff8000141b:	4c 8b 65 f8          	mov    r12,QWORD PTR [rbp-0x8]
ffffffff8000141f:	4c 89 d6             	mov    rsi,r10
ffffffff80001422:	31 c0                	xor    eax,eax
ffffffff80001424:	c9                   	leave  
ffffffff80001425:	48 c7 c7 b8 58 00 80 	mov    rdi,0xffffffff800058b8
ffffffff8000142c:	e9 8f 11 00 00       	jmp    ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001431:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80001438:	49 89 f9             	mov    r9,rdi
ffffffff8000143b:	e8 e0 fe ff ff       	call   ffffffff80001320 <ResetController(IDEDevice*)>
ffffffff80001440:	49 8b 01             	mov    rax,QWORD PTR [r9]
ffffffff80001443:	0f b7 08             	movzx  ecx,WORD PTR [rax]
ffffffff80001446:	8d 71 07             	lea    esi,[rcx+0x7]
ffffffff80001449:	89 f2                	mov    edx,esi
ffffffff8000144b:	ec                   	in     al,dx
ffffffff8000144c:	a8 88                	test   al,0x88
ffffffff8000144e:	74 20                	je     ffffffff80001470 <IdentifyAtaDevice(IDEDevice*)+0xa0>
ffffffff80001450:	44 89 e2             	mov    edx,r12d
ffffffff80001453:	4c 8b 65 f8          	mov    r12,QWORD PTR [rbp-0x8]
ffffffff80001457:	4c 89 d6             	mov    rsi,r10
ffffffff8000145a:	31 c0                	xor    eax,eax
ffffffff8000145c:	c9                   	leave  
ffffffff8000145d:	48 c7 c7 00 59 00 80 	mov    rdi,0xffffffff80005900
ffffffff80001464:	e9 57 11 00 00       	jmp    ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001469:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80001470:	41 0f b6 41 09       	movzx  eax,BYTE PTR [r9+0x9]
ffffffff80001475:	8d 51 06             	lea    edx,[rcx+0x6]
ffffffff80001478:	c1 e0 04             	shl    eax,0x4
ffffffff8000147b:	83 c8 a0             	or     eax,0xffffffa0
ffffffff8000147e:	ee                   	out    dx,al
ffffffff8000147f:	b8 e8 03 00 00       	mov    eax,0x3e8
ffffffff80001484:	ff c8                	dec    eax
ffffffff80001486:	75 fc                	jne    ffffffff80001484 <IdentifyAtaDevice(IDEDevice*)+0xb4>
ffffffff80001488:	89 f2                	mov    edx,esi
ffffffff8000148a:	ec                   	in     al,dx
ffffffff8000148b:	a8 88                	test   al,0x88
ffffffff8000148d:	75 c1                	jne    ffffffff80001450 <IdentifyAtaDevice(IDEDevice*)+0x80>
ffffffff8000148f:	45 89 e0             	mov    r8d,r12d
ffffffff80001492:	44 89 da             	mov    edx,r11d
ffffffff80001495:	ec                   	in     al,dx
ffffffff80001496:	3c 01                	cmp    al,0x1
ffffffff80001498:	0f 84 e6 00 00 00    	je     ffffffff80001584 <IdentifyAtaDevice(IDEDevice*)+0x1b4>
ffffffff8000149e:	41 80 79 08 00       	cmp    BYTE PTR [r9+0x8],0x0
ffffffff800014a3:	0f 84 d5 00 00 00    	je     ffffffff8000157e <IdentifyAtaDevice(IDEDevice*)+0x1ae>
ffffffff800014a9:	41 0f b6 49 0a       	movzx  ecx,BYTE PTR [r9+0xa]
ffffffff800014ae:	41 8d 50 07          	lea    edx,[r8+0x7]
ffffffff800014b2:	b8 ec ff ff ff       	mov    eax,0xffffffec
ffffffff800014b7:	84 c9                	test   cl,cl
ffffffff800014b9:	0f 85 fe 00 00 00    	jne    ffffffff800015bd <IdentifyAtaDevice(IDEDevice*)+0x1ed>
ffffffff800014bf:	ee                   	out    dx,al
ffffffff800014c0:	b8 e8 03 00 00       	mov    eax,0x3e8
ffffffff800014c5:	ff c8                	dec    eax
ffffffff800014c7:	75 fc                	jne    ffffffff800014c5 <IdentifyAtaDevice(IDEDevice*)+0xf5>
ffffffff800014c9:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff800014ce:	be e8 03 00 00       	mov    esi,0x3e8
ffffffff800014d3:	eb 0d                	jmp    ffffffff800014e2 <IdentifyAtaDevice(IDEDevice*)+0x112>
ffffffff800014d5:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff800014d8:	48 83 e9 01          	sub    rcx,0x1
ffffffff800014dc:	0f 84 e5 00 00 00    	je     ffffffff800015c7 <IdentifyAtaDevice(IDEDevice*)+0x1f7>
ffffffff800014e2:	49 8b 01             	mov    rax,QWORD PTR [r9]
ffffffff800014e5:	0f b7 10             	movzx  edx,WORD PTR [rax]
ffffffff800014e8:	83 c2 07             	add    edx,0x7
ffffffff800014eb:	ec                   	in     al,dx
ffffffff800014ec:	89 c2                	mov    edx,eax
ffffffff800014ee:	48 89 f0             	mov    rax,rsi
ffffffff800014f1:	ff c8                	dec    eax
ffffffff800014f3:	75 fc                	jne    ffffffff800014f1 <IdentifyAtaDevice(IDEDevice*)+0x121>
ffffffff800014f5:	83 e2 89             	and    edx,0xffffff89
ffffffff800014f8:	80 fa 08             	cmp    dl,0x8
ffffffff800014fb:	75 db                	jne    ffffffff800014d8 <IdentifyAtaDevice(IDEDevice*)+0x108>
ffffffff800014fd:	48 8d 8d f0 fd ff ff 	lea    rcx,[rbp-0x210]
ffffffff80001504:	48 8d 75 f0          	lea    rsi,[rbp-0x10]
ffffffff80001508:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000150f:	00 
ffffffff80001510:	44 89 c2             	mov    edx,r8d
ffffffff80001513:	66 ed                	in     ax,dx
ffffffff80001515:	66 89 01             	mov    WORD PTR [rcx],ax
ffffffff80001518:	48 83 c1 02          	add    rcx,0x2
ffffffff8000151c:	48 39 ce             	cmp    rsi,rcx
ffffffff8000151f:	75 ef                	jne    ffffffff80001510 <IdentifyAtaDevice(IDEDevice*)+0x140>
ffffffff80001521:	0f b7 85 f2 fd ff ff 	movzx  eax,WORD PTR [rbp-0x20e]
ffffffff80001528:	0f b7 8d f6 fd ff ff 	movzx  ecx,WORD PTR [rbp-0x20a]
ffffffff8000152f:	48 c7 85 e8 fd ff ff 	mov    QWORD PTR [rbp-0x218],0x0
ffffffff80001536:	00 00 00 00 
ffffffff8000153a:	89 85 e8 fd ff ff    	mov    DWORD PTR [rbp-0x218],eax
ffffffff80001540:	48 8b 95 e8 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x218]
ffffffff80001547:	48 89 95 e0 fd ff ff 	mov    QWORD PTR [rbp-0x220],rdx
ffffffff8000154e:	89 8d e4 fd ff ff    	mov    DWORD PTR [rbp-0x21c],ecx
ffffffff80001554:	48 8b 95 e0 fd ff ff 	mov    rdx,QWORD PTR [rbp-0x220]
ffffffff8000155b:	49 89 51 0c          	mov    QWORD PTR [r9+0xc],rdx
ffffffff8000155f:	0f b7 95 fc fd ff ff 	movzx  edx,WORD PTR [rbp-0x204]
ffffffff80001566:	41 89 51 14          	mov    DWORD PTR [r9+0x14],edx
ffffffff8000156a:	f6 85 53 fe ff ff 02 	test   BYTE PTR [rbp-0x1ad],0x2
ffffffff80001571:	74 5b                	je     ffffffff800015ce <IdentifyAtaDevice(IDEDevice*)+0x1fe>
ffffffff80001573:	0f b7 85 68 fe ff ff 	movzx  eax,WORD PTR [rbp-0x198]
ffffffff8000157a:	41 89 41 18          	mov    DWORD PTR [r9+0x18],eax
ffffffff8000157e:	4c 8b 65 f8          	mov    r12,QWORD PTR [rbp-0x8]
ffffffff80001582:	c9                   	leave  
ffffffff80001583:	c3                   	ret    
ffffffff80001584:	41 8d 54 24 03       	lea    edx,[r12+0x3]
ffffffff80001589:	ec                   	in     al,dx
ffffffff8000158a:	3c 01                	cmp    al,0x1
ffffffff8000158c:	0f 85 0c ff ff ff    	jne    ffffffff8000149e <IdentifyAtaDevice(IDEDevice*)+0xce>
ffffffff80001592:	41 8d 54 24 04       	lea    edx,[r12+0x4]
ffffffff80001597:	ec                   	in     al,dx
ffffffff80001598:	89 c6                	mov    esi,eax
ffffffff8000159a:	41 8d 54 24 05       	lea    edx,[r12+0x5]
ffffffff8000159f:	ec                   	in     al,dx
ffffffff800015a0:	89 c1                	mov    ecx,eax
ffffffff800015a2:	41 8d 54 24 07       	lea    edx,[r12+0x7]
ffffffff800015a7:	ec                   	in     al,dx
ffffffff800015a8:	40 80 fe 14          	cmp    sil,0x14
ffffffff800015ac:	75 28                	jne    ffffffff800015d6 <IdentifyAtaDevice(IDEDevice*)+0x206>
ffffffff800015ae:	80 f9 eb             	cmp    cl,0xeb
ffffffff800015b1:	75 23                	jne    ffffffff800015d6 <IdentifyAtaDevice(IDEDevice*)+0x206>
ffffffff800015b3:	41 c6 41 0a 01       	mov    BYTE PTR [r9+0xa],0x1
ffffffff800015b8:	41 c6 41 08 01       	mov    BYTE PTR [r9+0x8],0x1
ffffffff800015bd:	b8 a1 ff ff ff       	mov    eax,0xffffffa1
ffffffff800015c2:	e9 f8 fe ff ff       	jmp    ffffffff800014bf <IdentifyAtaDevice(IDEDevice*)+0xef>
ffffffff800015c7:	41 c6 41 08 00       	mov    BYTE PTR [r9+0x8],0x0
ffffffff800015cc:	eb b0                	jmp    ffffffff8000157e <IdentifyAtaDevice(IDEDevice*)+0x1ae>
ffffffff800015ce:	0f af c1             	imul   eax,ecx
ffffffff800015d1:	0f af c2             	imul   eax,edx
ffffffff800015d4:	eb a4                	jmp    ffffffff8000157a <IdentifyAtaDevice(IDEDevice*)+0x1aa>
ffffffff800015d6:	40 08 f1             	or     cl,sil
ffffffff800015d9:	0f 85 bf fe ff ff    	jne    ffffffff8000149e <IdentifyAtaDevice(IDEDevice*)+0xce>
ffffffff800015df:	84 c0                	test   al,al
ffffffff800015e1:	0f 84 b7 fe ff ff    	je     ffffffff8000149e <IdentifyAtaDevice(IDEDevice*)+0xce>
ffffffff800015e7:	41 c6 41 08 01       	mov    BYTE PTR [r9+0x8],0x1
ffffffff800015ec:	41 0f b6 49 0a       	movzx  ecx,BYTE PTR [r9+0xa]
ffffffff800015f1:	e9 bc fe ff ff       	jmp    ffffffff800014b2 <IdentifyAtaDevice(IDEDevice*)+0xe2>
ffffffff800015f6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800015fd:	00 00 00 

ffffffff80001600 <PATA::PATA()>:
ffffffff80001600:	f3 0f 1e fa          	endbr64 
ffffffff80001604:	55                   	push   rbp
ffffffff80001605:	b9 f0 01 00 00       	mov    ecx,0x1f0
ffffffff8000160a:	be 70 01 00 00       	mov    esi,0x170
ffffffff8000160f:	48 89 e5             	mov    rbp,rsp
ffffffff80001612:	41 57                	push   r15
ffffffff80001614:	45 31 ff             	xor    r15d,r15d
ffffffff80001617:	41 56                	push   r14
ffffffff80001619:	41 55                	push   r13
ffffffff8000161b:	41 54                	push   r12
ffffffff8000161d:	49 c7 c4 c0 79 00 80 	mov    r12,0xffffffff800079c0
ffffffff80001624:	53                   	push   rbx
ffffffff80001625:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001629:	66 89 0d 90 63 00 00 	mov    WORD PTR [rip+0x6390],cx        # ffffffff800079c0 <controllers>
ffffffff80001630:	c6 05 9a 63 00 00 00 	mov    BYTE PTR [rip+0x639a],0x0        # ffffffff800079d1 <controllers+0x11>
ffffffff80001637:	c6 05 b3 63 00 00 01 	mov    BYTE PTR [rip+0x63b3],0x1        # ffffffff800079f1 <controllers+0x31>
ffffffff8000163e:	66 89 35 c3 63 00 00 	mov    WORD PTR [rip+0x63c3],si        # ffffffff80007a08 <controllers+0x48>
ffffffff80001645:	c6 05 cd 63 00 00 00 	mov    BYTE PTR [rip+0x63cd],0x0        # ffffffff80007a19 <controllers+0x59>
ffffffff8000164c:	c6 05 e6 63 00 00 01 	mov    BYTE PTR [rip+0x63e6],0x1        # ffffffff80007a39 <controllers+0x79>
ffffffff80001653:	4d 8d 6c 24 08       	lea    r13,[r12+0x8]
ffffffff80001658:	4c 89 e3             	mov    rbx,r12
ffffffff8000165b:	4d 8d 74 24 40       	lea    r14,[r12+0x40]
ffffffff80001660:	4c 89 63 08          	mov    QWORD PTR [rbx+0x8],r12
ffffffff80001664:	4c 89 ef             	mov    rdi,r13
ffffffff80001667:	e8 64 fd ff ff       	call   ffffffff800013d0 <IdentifyAtaDevice(IDEDevice*)>
ffffffff8000166c:	80 7b 10 00          	cmp    BYTE PTR [rbx+0x10],0x0
ffffffff80001670:	74 34                	je     ffffffff800016a6 <PATA::PATA()+0xa6>
ffffffff80001672:	80 7b 12 00          	cmp    BYTE PTR [rbx+0x12],0x0
ffffffff80001676:	75 2e                	jne    ffffffff800016a6 <PATA::PATA()+0xa6>
ffffffff80001678:	8b 43 20             	mov    eax,DWORD PTR [rbx+0x20]
ffffffff8000167b:	0f b6 4b 11          	movzx  ecx,BYTE PTR [rbx+0x11]
ffffffff8000167f:	44 89 fa             	mov    edx,r15d
ffffffff80001682:	48 c7 c6 a9 58 00 80 	mov    rsi,0xffffffff800058a9
ffffffff80001689:	48 c7 c7 30 59 00 80 	mov    rdi,0xffffffff80005930
ffffffff80001690:	50                   	push   rax
ffffffff80001691:	8b 43 1c             	mov    eax,DWORD PTR [rbx+0x1c]
ffffffff80001694:	50                   	push   rax
ffffffff80001695:	44 8b 4b 18          	mov    r9d,DWORD PTR [rbx+0x18]
ffffffff80001699:	31 c0                	xor    eax,eax
ffffffff8000169b:	44 8b 43 14          	mov    r8d,DWORD PTR [rbx+0x14]
ffffffff8000169f:	e8 1c 0f 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800016a4:	58                   	pop    rax
ffffffff800016a5:	5a                   	pop    rdx
ffffffff800016a6:	48 83 c3 20          	add    rbx,0x20
ffffffff800016aa:	49 83 c5 20          	add    r13,0x20
ffffffff800016ae:	4c 39 f3             	cmp    rbx,r14
ffffffff800016b1:	75 ad                	jne    ffffffff80001660 <PATA::PATA()+0x60>
ffffffff800016b3:	49 83 c4 48          	add    r12,0x48
ffffffff800016b7:	41 83 ff 01          	cmp    r15d,0x1
ffffffff800016bb:	75 13                	jne    ffffffff800016d0 <PATA::PATA()+0xd0>
ffffffff800016bd:	48 8d 65 d8          	lea    rsp,[rbp-0x28]
ffffffff800016c1:	5b                   	pop    rbx
ffffffff800016c2:	41 5c                	pop    r12
ffffffff800016c4:	41 5d                	pop    r13
ffffffff800016c6:	41 5e                	pop    r14
ffffffff800016c8:	41 5f                	pop    r15
ffffffff800016ca:	5d                   	pop    rbp
ffffffff800016cb:	c3                   	ret    
ffffffff800016cc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff800016d0:	41 bf 01 00 00 00    	mov    r15d,0x1
ffffffff800016d6:	e9 78 ff ff ff       	jmp    ffffffff80001653 <PATA::PATA()+0x53>
ffffffff800016db:	90                   	nop
ffffffff800016dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800016e0 <PATA::Read(unsigned long, unsigned int, void*)>:
ffffffff800016e0:	f3 0f 1e fa          	endbr64 
ffffffff800016e4:	48 89 cf             	mov    rdi,rcx
ffffffff800016e7:	48 8b 0d da 62 00 00 	mov    rcx,QWORD PTR [rip+0x62da]        # ffffffff800079c8 <controllers+0x8>
ffffffff800016ee:	85 d2                	test   edx,edx
ffffffff800016f0:	74 1d                	je     ffffffff8000170f <PATA::Read(unsigned long, unsigned int, void*)+0x2f>
ffffffff800016f2:	b8 00 01 00 00       	mov    eax,0x100
ffffffff800016f7:	39 c2                	cmp    edx,eax
ffffffff800016f9:	0f 46 c2             	cmovbe eax,edx
ffffffff800016fc:	8b 15 de 62 00 00    	mov    edx,DWORD PTR [rip+0x62de]        # ffffffff800079e0 <controllers+0x20>
ffffffff80001702:	41 89 c0             	mov    r8d,eax
ffffffff80001705:	89 c0                	mov    eax,eax
ffffffff80001707:	48 01 f0             	add    rax,rsi
ffffffff8000170a:	48 39 d0             	cmp    rax,rdx
ffffffff8000170d:	76 11                	jbe    ffffffff80001720 <PATA::Read(unsigned long, unsigned int, void*)+0x40>
ffffffff8000170f:	45 31 c0             	xor    r8d,r8d
ffffffff80001712:	44 89 c0             	mov    eax,r8d
ffffffff80001715:	c3                   	ret    
ffffffff80001716:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000171d:	00 00 00 
ffffffff80001720:	44 0f b7 09          	movzx  r9d,WORD PTR [rcx]
ffffffff80001724:	45 8d 51 07          	lea    r10d,[r9+0x7]
ffffffff80001728:	44 89 d2             	mov    edx,r10d
ffffffff8000172b:	ec                   	in     al,dx
ffffffff8000172c:	a8 88                	test   al,0x88
ffffffff8000172e:	75 df                	jne    ffffffff8000170f <PATA::Read(unsigned long, unsigned int, void*)+0x2f>
ffffffff80001730:	0f b6 05 9a 62 00 00 	movzx  eax,BYTE PTR [rip+0x629a]        # ffffffff800079d1 <controllers+0x11>
ffffffff80001737:	41 8d 49 06          	lea    ecx,[r9+0x6]
ffffffff8000173b:	89 ca                	mov    edx,ecx
ffffffff8000173d:	c1 e0 04             	shl    eax,0x4
ffffffff80001740:	83 c8 a0             	or     eax,0xffffffa0
ffffffff80001743:	ee                   	out    dx,al
ffffffff80001744:	41 bb e8 03 00 00    	mov    r11d,0x3e8
ffffffff8000174a:	4c 89 d8             	mov    rax,r11
ffffffff8000174d:	ff c8                	dec    eax
ffffffff8000174f:	75 fc                	jne    ffffffff8000174d <PATA::Read(unsigned long, unsigned int, void*)+0x6d>
ffffffff80001751:	44 89 d2             	mov    edx,r10d
ffffffff80001754:	ec                   	in     al,dx
ffffffff80001755:	a8 88                	test   al,0x88
ffffffff80001757:	75 b6                	jne    ffffffff8000170f <PATA::Read(unsigned long, unsigned int, void*)+0x2f>
ffffffff80001759:	41 8d 51 02          	lea    edx,[r9+0x2]
ffffffff8000175d:	44 89 c0             	mov    eax,r8d
ffffffff80001760:	ee                   	out    dx,al
ffffffff80001761:	41 8d 51 03          	lea    edx,[r9+0x3]
ffffffff80001765:	89 f0                	mov    eax,esi
ffffffff80001767:	ee                   	out    dx,al
ffffffff80001768:	48 89 f0             	mov    rax,rsi
ffffffff8000176b:	41 8d 51 04          	lea    edx,[r9+0x4]
ffffffff8000176f:	48 c1 e8 08          	shr    rax,0x8
ffffffff80001773:	ee                   	out    dx,al
ffffffff80001774:	48 89 f0             	mov    rax,rsi
ffffffff80001777:	41 8d 51 05          	lea    edx,[r9+0x5]
ffffffff8000177b:	48 c1 e8 10          	shr    rax,0x10
ffffffff8000177f:	ee                   	out    dx,al
ffffffff80001780:	0f b6 15 4a 62 00 00 	movzx  edx,BYTE PTR [rip+0x624a]        # ffffffff800079d1 <controllers+0x11>
ffffffff80001787:	48 89 f0             	mov    rax,rsi
ffffffff8000178a:	48 c1 e8 18          	shr    rax,0x18
ffffffff8000178e:	c1 e2 04             	shl    edx,0x4
ffffffff80001791:	83 e0 0f             	and    eax,0xf
ffffffff80001794:	09 d0                	or     eax,edx
ffffffff80001796:	89 ca                	mov    edx,ecx
ffffffff80001798:	83 c8 40             	or     eax,0x40
ffffffff8000179b:	ee                   	out    dx,al
ffffffff8000179c:	b8 20 00 00 00       	mov    eax,0x20
ffffffff800017a1:	44 89 d2             	mov    edx,r10d
ffffffff800017a4:	ee                   	out    dx,al
ffffffff800017a5:	4c 89 d8             	mov    rax,r11
ffffffff800017a8:	ff c8                	dec    eax
ffffffff800017aa:	75 fc                	jne    ffffffff800017a8 <PATA::Read(unsigned long, unsigned int, void*)+0xc8>
ffffffff800017ac:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff800017b1:	be e8 03 00 00       	mov    esi,0x3e8
ffffffff800017b6:	eb 12                	jmp    ffffffff800017ca <PATA::Read(unsigned long, unsigned int, void*)+0xea>
ffffffff800017b8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800017bf:	00 
ffffffff800017c0:	48 83 e9 01          	sub    rcx,0x1
ffffffff800017c4:	0f 84 45 ff ff ff    	je     ffffffff8000170f <PATA::Read(unsigned long, unsigned int, void*)+0x2f>
ffffffff800017ca:	48 8b 05 f7 61 00 00 	mov    rax,QWORD PTR [rip+0x61f7]        # ffffffff800079c8 <controllers+0x8>
ffffffff800017d1:	0f b7 10             	movzx  edx,WORD PTR [rax]
ffffffff800017d4:	83 c2 07             	add    edx,0x7
ffffffff800017d7:	ec                   	in     al,dx
ffffffff800017d8:	89 c2                	mov    edx,eax
ffffffff800017da:	48 89 f0             	mov    rax,rsi
ffffffff800017dd:	ff c8                	dec    eax
ffffffff800017df:	75 fc                	jne    ffffffff800017dd <PATA::Read(unsigned long, unsigned int, void*)+0xfd>
ffffffff800017e1:	84 d2                	test   dl,dl
ffffffff800017e3:	78 db                	js     ffffffff800017c0 <PATA::Read(unsigned long, unsigned int, void*)+0xe0>
ffffffff800017e5:	44 89 d2             	mov    edx,r10d
ffffffff800017e8:	ec                   	in     al,dx
ffffffff800017e9:	a8 01                	test   al,0x1
ffffffff800017eb:	0f 85 1e ff ff ff    	jne    ffffffff8000170f <PATA::Read(unsigned long, unsigned int, void*)+0x2f>
ffffffff800017f1:	44 89 c0             	mov    eax,r8d
ffffffff800017f4:	c1 e0 08             	shl    eax,0x8
ffffffff800017f7:	48 8d 0c 47          	lea    rcx,[rdi+rax*2]
ffffffff800017fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80001800:	44 89 ca             	mov    edx,r9d
ffffffff80001803:	66 ed                	in     ax,dx
ffffffff80001805:	48 83 c7 02          	add    rdi,0x2
ffffffff80001809:	66 89 47 fe          	mov    WORD PTR [rdi-0x2],ax
ffffffff8000180d:	48 39 f9             	cmp    rcx,rdi
ffffffff80001810:	75 ee                	jne    ffffffff80001800 <PATA::Read(unsigned long, unsigned int, void*)+0x120>
ffffffff80001812:	e9 fb fe ff ff       	jmp    ffffffff80001712 <PATA::Read(unsigned long, unsigned int, void*)+0x32>
ffffffff80001817:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000181e:	00 00 

ffffffff80001820 <_GLOBAL__sub_I_controllers>:
ffffffff80001820:	f3 0f 1e fa          	endbr64 
ffffffff80001824:	48 c7 c6 c0 79 00 80 	mov    rsi,0xffffffff800079c0
ffffffff8000182b:	31 c0                	xor    eax,eax
ffffffff8000182d:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff80001832:	48 89 f7             	mov    rdi,rsi
ffffffff80001835:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffffffff80001838:	b9 09 00 00 00       	mov    ecx,0x9
ffffffff8000183d:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffffffff80001840:	c3                   	ret    

ffffffff80001841 <Utils::inw(unsigned short)>:
ffffffff80001841:	55                   	push   rbp
ffffffff80001842:	48 89 e5             	mov    rbp,rsp
ffffffff80001845:	48 83 ec 18          	sub    rsp,0x18
ffffffff80001849:	89 f8                	mov    eax,edi
ffffffff8000184b:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff8000184f:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff80001853:	89 c2                	mov    edx,eax
ffffffff80001855:	66 ed                	in     ax,dx
ffffffff80001857:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff8000185b:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
ffffffff8000185f:	c9                   	leave  
ffffffff80001860:	c3                   	ret    

ffffffff80001861 <Utils::ind(unsigned short)>:
ffffffff80001861:	55                   	push   rbp
ffffffff80001862:	48 89 e5             	mov    rbp,rsp
ffffffff80001865:	48 83 ec 18          	sub    rsp,0x18
ffffffff80001869:	89 f8                	mov    eax,edi
ffffffff8000186b:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff8000186f:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff80001873:	89 c2                	mov    edx,eax
ffffffff80001875:	ed                   	in     eax,dx
ffffffff80001876:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80001879:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000187c:	c9                   	leave  
ffffffff8000187d:	c3                   	ret    

ffffffff8000187e <ReadPciRegister16(int, int, int, unsigned char)>:
ffffffff8000187e:	f3 0f 1e fa          	endbr64 
ffffffff80001882:	55                   	push   rbp
ffffffff80001883:	48 89 e5             	mov    rbp,rsp
ffffffff80001886:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000188a:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff8000188d:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80001890:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff80001893:	89 c8                	mov    eax,ecx
ffffffff80001895:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff80001898:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000189b:	c1 e0 10             	shl    eax,0x10
ffffffff8000189e:	89 c2                	mov    edx,eax
ffffffff800018a0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800018a3:	c1 e0 0b             	shl    eax,0xb
ffffffff800018a6:	09 c2                	or     edx,eax
ffffffff800018a8:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800018ab:	c1 e0 08             	shl    eax,0x8
ffffffff800018ae:	09 c2                	or     edx,eax
ffffffff800018b0:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff800018b4:	09 d0                	or     eax,edx
ffffffff800018b6:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff800018bb:	89 c6                	mov    esi,eax
ffffffff800018bd:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff800018c2:	e8 e3 05 00 00       	call   ffffffff80001eaa <Utils::outd(unsigned short, unsigned int)>
ffffffff800018c7:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff800018cc:	e8 70 ff ff ff       	call   ffffffff80001841 <Utils::inw(unsigned short)>
ffffffff800018d1:	c9                   	leave  
ffffffff800018d2:	c3                   	ret    

ffffffff800018d3 <ReadPciRegister32(int, int, int, unsigned char)>:
ffffffff800018d3:	f3 0f 1e fa          	endbr64 
ffffffff800018d7:	55                   	push   rbp
ffffffff800018d8:	48 89 e5             	mov    rbp,rsp
ffffffff800018db:	48 83 ec 10          	sub    rsp,0x10
ffffffff800018df:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800018e2:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff800018e5:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff800018e8:	89 c8                	mov    eax,ecx
ffffffff800018ea:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff800018ed:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800018f0:	c1 e0 10             	shl    eax,0x10
ffffffff800018f3:	89 c2                	mov    edx,eax
ffffffff800018f5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800018f8:	c1 e0 0b             	shl    eax,0xb
ffffffff800018fb:	09 c2                	or     edx,eax
ffffffff800018fd:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80001900:	c1 e0 08             	shl    eax,0x8
ffffffff80001903:	09 c2                	or     edx,eax
ffffffff80001905:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff80001909:	09 d0                	or     eax,edx
ffffffff8000190b:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff80001910:	89 c6                	mov    esi,eax
ffffffff80001912:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff80001917:	e8 8e 05 00 00       	call   ffffffff80001eaa <Utils::outd(unsigned short, unsigned int)>
ffffffff8000191c:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff80001921:	e8 3b ff ff ff       	call   ffffffff80001861 <Utils::ind(unsigned short)>
ffffffff80001926:	c9                   	leave  
ffffffff80001927:	c3                   	ret    

ffffffff80001928 <ReadPciRegister64(int, int, int, unsigned char)>:
ffffffff80001928:	f3 0f 1e fa          	endbr64 
ffffffff8000192c:	55                   	push   rbp
ffffffff8000192d:	48 89 e5             	mov    rbp,rsp
ffffffff80001930:	53                   	push   rbx
ffffffff80001931:	48 83 ec 18          	sub    rsp,0x18
ffffffff80001935:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80001938:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff8000193b:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffffffff8000193e:	89 c8                	mov    eax,ecx
ffffffff80001940:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
ffffffff80001943:	0f b6 45 e0          	movzx  eax,BYTE PTR [rbp-0x20]
ffffffff80001947:	83 c0 04             	add    eax,0x4
ffffffff8000194a:	0f b6 c8             	movzx  ecx,al
ffffffff8000194d:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80001950:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff80001953:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80001956:	89 c7                	mov    edi,eax
ffffffff80001958:	e8 76 ff ff ff       	call   ffffffff800018d3 <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff8000195d:	89 c0                	mov    eax,eax
ffffffff8000195f:	48 c1 e0 20          	shl    rax,0x20
ffffffff80001963:	48 89 c3             	mov    rbx,rax
ffffffff80001966:	0f b6 4d e0          	movzx  ecx,BYTE PTR [rbp-0x20]
ffffffff8000196a:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff8000196d:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff80001970:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80001973:	89 c7                	mov    edi,eax
ffffffff80001975:	e8 59 ff ff ff       	call   ffffffff800018d3 <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff8000197a:	89 c0                	mov    eax,eax
ffffffff8000197c:	48 09 d8             	or     rax,rbx
ffffffff8000197f:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff80001983:	c9                   	leave  
ffffffff80001984:	c3                   	ret    

ffffffff80001985 <WritePciRegister16(int, int, int, unsigned char, unsigned short)>:
ffffffff80001985:	f3 0f 1e fa          	endbr64 
ffffffff80001989:	55                   	push   rbp
ffffffff8000198a:	48 89 e5             	mov    rbp,rsp
ffffffff8000198d:	48 83 ec 20          	sub    rsp,0x20
ffffffff80001991:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80001994:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80001997:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff8000199a:	89 ca                	mov    edx,ecx
ffffffff8000199c:	44 89 c0             	mov    eax,r8d
ffffffff8000199f:	88 55 f0             	mov    BYTE PTR [rbp-0x10],dl
ffffffff800019a2:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff800019a6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800019a9:	c1 e0 10             	shl    eax,0x10
ffffffff800019ac:	89 c2                	mov    edx,eax
ffffffff800019ae:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800019b1:	c1 e0 0b             	shl    eax,0xb
ffffffff800019b4:	09 c2                	or     edx,eax
ffffffff800019b6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800019b9:	c1 e0 08             	shl    eax,0x8
ffffffff800019bc:	09 c2                	or     edx,eax
ffffffff800019be:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff800019c2:	09 d0                	or     eax,edx
ffffffff800019c4:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff800019c9:	89 c6                	mov    esi,eax
ffffffff800019cb:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff800019d0:	e8 d5 04 00 00       	call   ffffffff80001eaa <Utils::outd(unsigned short, unsigned int)>
ffffffff800019d5:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff800019d9:	89 c6                	mov    esi,eax
ffffffff800019db:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff800019e0:	e8 a0 04 00 00       	call   ffffffff80001e85 <Utils::outw(unsigned short, unsigned short)>
ffffffff800019e5:	90                   	nop
ffffffff800019e6:	c9                   	leave  
ffffffff800019e7:	c3                   	ret    

ffffffff800019e8 <WritePciRegister32(int, int, int, unsigned char, unsigned int)>:
ffffffff800019e8:	f3 0f 1e fa          	endbr64 
ffffffff800019ec:	55                   	push   rbp
ffffffff800019ed:	48 89 e5             	mov    rbp,rsp
ffffffff800019f0:	48 83 ec 20          	sub    rsp,0x20
ffffffff800019f4:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800019f7:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff800019fa:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff800019fd:	89 c8                	mov    eax,ecx
ffffffff800019ff:	44 89 45 ec          	mov    DWORD PTR [rbp-0x14],r8d
ffffffff80001a03:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff80001a06:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001a09:	c1 e0 10             	shl    eax,0x10
ffffffff80001a0c:	89 c2                	mov    edx,eax
ffffffff80001a0e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001a11:	c1 e0 0b             	shl    eax,0xb
ffffffff80001a14:	09 c2                	or     edx,eax
ffffffff80001a16:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80001a19:	c1 e0 08             	shl    eax,0x8
ffffffff80001a1c:	09 c2                	or     edx,eax
ffffffff80001a1e:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff80001a22:	09 d0                	or     eax,edx
ffffffff80001a24:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff80001a29:	89 c6                	mov    esi,eax
ffffffff80001a2b:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff80001a30:	e8 75 04 00 00       	call   ffffffff80001eaa <Utils::outd(unsigned short, unsigned int)>
ffffffff80001a35:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80001a38:	89 c6                	mov    esi,eax
ffffffff80001a3a:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff80001a3f:	e8 66 04 00 00       	call   ffffffff80001eaa <Utils::outd(unsigned short, unsigned int)>
ffffffff80001a44:	90                   	nop
ffffffff80001a45:	c9                   	leave  
ffffffff80001a46:	c3                   	ret    

ffffffff80001a47 <ReadIgpu32(unsigned int)>:
ffffffff80001a47:	f3 0f 1e fa          	endbr64 
ffffffff80001a4b:	55                   	push   rbp
ffffffff80001a4c:	48 89 e5             	mov    rbp,rsp
ffffffff80001a4f:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001a53:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80001a56:	48 8b 15 f3 5f 00 00 	mov    rdx,QWORD PTR [rip+0x5ff3]        # ffffffff80007a50 <iobase>
ffffffff80001a5d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001a60:	c1 e8 02             	shr    eax,0x2
ffffffff80001a63:	89 c0                	mov    eax,eax
ffffffff80001a65:	48 c1 e0 02          	shl    rax,0x2
ffffffff80001a69:	48 01 d0             	add    rax,rdx
ffffffff80001a6c:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80001a6e:	c9                   	leave  
ffffffff80001a6f:	c3                   	ret    

ffffffff80001a70 <GetDisplayType(int)>:
ffffffff80001a70:	f3 0f 1e fa          	endbr64 
ffffffff80001a74:	55                   	push   rbp
ffffffff80001a75:	48 89 e5             	mov    rbp,rsp
ffffffff80001a78:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001a7c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80001a7f:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80001a83:	7f 08                	jg     ffffffff80001a8d <GetDisplayType(int)+0x1d>
ffffffff80001a85:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffffffff80001a89:	79 0a                	jns    ffffffff80001a95 <GetDisplayType(int)+0x25>
ffffffff80001a8b:	eb 16                	jmp    ffffffff80001aa3 <GetDisplayType(int)+0x33>
ffffffff80001a8d:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
ffffffff80001a91:	74 09                	je     ffffffff80001a9c <GetDisplayType(int)+0x2c>
ffffffff80001a93:	eb 0e                	jmp    ffffffff80001aa3 <GetDisplayType(int)+0x33>
ffffffff80001a95:	b8 03 00 00 00       	mov    eax,0x3
ffffffff80001a9a:	eb 0c                	jmp    ffffffff80001aa8 <GetDisplayType(int)+0x38>
ffffffff80001a9c:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80001aa1:	eb 05                	jmp    ffffffff80001aa8 <GetDisplayType(int)+0x38>
ffffffff80001aa3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001aa8:	c9                   	leave  
ffffffff80001aa9:	c3                   	ret    

ffffffff80001aaa <WaitForGmBusStatus()>:
ffffffff80001aaa:	f3 0f 1e fa          	endbr64 
ffffffff80001aae:	55                   	push   rbp
ffffffff80001aaf:	48 89 e5             	mov    rbp,rsp
ffffffff80001ab2:	48 83 ec 10          	sub    rsp,0x10
ffffffff80001ab6:	bf 08 51 0c 00       	mov    edi,0xc5108
ffffffff80001abb:	e8 87 ff ff ff       	call   ffffffff80001a47 <ReadIgpu32(unsigned int)>
ffffffff80001ac0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80001ac3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001ac6:	25 00 04 00 00       	and    eax,0x400
ffffffff80001acb:	85 c0                	test   eax,eax
ffffffff80001acd:	74 16                	je     ffffffff80001ae5 <WaitForGmBusStatus()+0x3b>
ffffffff80001acf:	48 c7 c7 60 59 00 80 	mov    rdi,0xffffffff80005960
ffffffff80001ad6:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001adb:	e8 e0 0a 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001ae0:	e8 90 03 00 00       	call   ffffffff80001e75 <Utils::HaltCatchFire()>
ffffffff80001ae5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001ae8:	25 00 08 00 00       	and    eax,0x800
ffffffff80001aed:	85 c0                	test   eax,eax
ffffffff80001aef:	75 02                	jne    ffffffff80001af3 <WaitForGmBusStatus()+0x49>
ffffffff80001af1:	eb c3                	jmp    ffffffff80001ab6 <WaitForGmBusStatus()+0xc>
ffffffff80001af3:	90                   	nop
ffffffff80001af4:	90                   	nop
ffffffff80001af5:	c9                   	leave  
ffffffff80001af6:	c3                   	ret    

ffffffff80001af7 <WaitForGmbusComplete()>:
ffffffff80001af7:	f3 0f 1e fa          	endbr64 
ffffffff80001afb:	55                   	push   rbp
ffffffff80001afc:	48 89 e5             	mov    rbp,rsp
ffffffff80001aff:	48 83 ec 10          	sub    rsp,0x10
ffffffff80001b03:	bf 08 51 0c 00       	mov    edi,0xc5108
ffffffff80001b08:	e8 3a ff ff ff       	call   ffffffff80001a47 <ReadIgpu32(unsigned int)>
ffffffff80001b0d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80001b10:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001b13:	25 00 04 00 00       	and    eax,0x400
ffffffff80001b18:	85 c0                	test   eax,eax
ffffffff80001b1a:	74 16                	je     ffffffff80001b32 <WaitForGmbusComplete()+0x3b>
ffffffff80001b1c:	48 c7 c7 60 59 00 80 	mov    rdi,0xffffffff80005960
ffffffff80001b23:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001b28:	e8 93 0a 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001b2d:	e8 43 03 00 00       	call   ffffffff80001e75 <Utils::HaltCatchFire()>
ffffffff80001b32:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001b35:	25 00 40 00 00       	and    eax,0x4000
ffffffff80001b3a:	85 c0                	test   eax,eax
ffffffff80001b3c:	75 02                	jne    ffffffff80001b40 <WaitForGmbusComplete()+0x49>
ffffffff80001b3e:	eb c3                	jmp    ffffffff80001b03 <WaitForGmbusComplete()+0xc>
ffffffff80001b40:	90                   	nop
ffffffff80001b41:	90                   	nop
ffffffff80001b42:	c9                   	leave  
ffffffff80001b43:	c3                   	ret    

ffffffff80001b44 <GmbusRead(unsigned int, unsigned int, unsigned char*)>:
ffffffff80001b44:	f3 0f 1e fa          	endbr64 
ffffffff80001b48:	55                   	push   rbp
ffffffff80001b49:	48 89 e5             	mov    rbp,rsp
ffffffff80001b4c:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001b50:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffffffff80001b53:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffffffff80001b56:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff80001b5a:	be 00 00 00 00       	mov    esi,0x0
ffffffff80001b5f:	bf 04 51 0c 00       	mov    edi,0xc5104
ffffffff80001b64:	e8 61 03 00 00       	call   ffffffff80001eca <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80001b69:	bf 04 51 0c 00       	mov    edi,0xc5104
ffffffff80001b6e:	e8 d4 fe ff ff       	call   ffffffff80001a47 <ReadIgpu32(unsigned int)>
ffffffff80001b73:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80001b76:	81 4d f0 00 00 00 80 	or     DWORD PTR [rbp-0x10],0x80000000
ffffffff80001b7d:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffffffff80001b80:	89 c6                	mov    esi,eax
ffffffff80001b82:	bf 04 51 0c 00       	mov    edi,0xc5104
ffffffff80001b87:	e8 3e 03 00 00       	call   ffffffff80001eca <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80001b8c:	bf 04 51 0c 00       	mov    edi,0xc5104
ffffffff80001b91:	e8 b1 fe ff ff       	call   ffffffff80001a47 <ReadIgpu32(unsigned int)>
ffffffff80001b96:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80001b99:	81 65 f0 ff ff ff 7f 	and    DWORD PTR [rbp-0x10],0x7fffffff
ffffffff80001ba0:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffffffff80001ba3:	89 c6                	mov    esi,eax
ffffffff80001ba5:	bf 04 51 0c 00       	mov    edi,0xc5104
ffffffff80001baa:	e8 1b 03 00 00       	call   ffffffff80001eca <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80001baf:	be 03 00 00 00       	mov    esi,0x3
ffffffff80001bb4:	bf 00 51 0c 00       	mov    edi,0xc5100
ffffffff80001bb9:	e8 0c 03 00 00       	call   ffffffff80001eca <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80001bbe:	be a1 00 80 46       	mov    esi,0x468000a1
ffffffff80001bc3:	bf 04 51 0c 00       	mov    edi,0xc5104
ffffffff80001bc8:	e8 fd 02 00 00       	call   ffffffff80001eca <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80001bcd:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80001bd4:	00 
ffffffff80001bd5:	e9 81 00 00 00       	jmp    ffffffff80001c5b <GmbusRead(unsigned int, unsigned int, unsigned char*)+0x117>
ffffffff80001bda:	e8 cb fe ff ff       	call   ffffffff80001aaa <WaitForGmBusStatus()>
ffffffff80001bdf:	bf 0c 51 0c 00       	mov    edi,0xc510c
ffffffff80001be4:	e8 5e fe ff ff       	call   ffffffff80001a47 <ReadIgpu32(unsigned int)>
ffffffff80001be9:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff80001bec:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffffffff80001bf3:	eb 60                	jmp    ffffffff80001c55 <GmbusRead(unsigned int, unsigned int, unsigned char*)+0x111>
ffffffff80001bf5:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff80001bf8:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80001bfc:	75 02                	jne    ffffffff80001c00 <GmbusRead(unsigned int, unsigned int, unsigned char*)+0xbc>
ffffffff80001bfe:	eb 5b                	jmp    ffffffff80001c5b <GmbusRead(unsigned int, unsigned int, unsigned char*)+0x117>
ffffffff80001c00:	48 8b 4d d0          	mov    rcx,QWORD PTR [rbp-0x30]
ffffffff80001c04:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001c08:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80001c0c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80001c10:	48 01 c8             	add    rax,rcx
ffffffff80001c13:	0f b6 38             	movzx  edi,BYTE PTR [rax]
ffffffff80001c16:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80001c19:	c1 e2 03             	shl    edx,0x3
ffffffff80001c1c:	8b 75 ec             	mov    esi,DWORD PTR [rbp-0x14]
ffffffff80001c1f:	89 d1                	mov    ecx,edx
ffffffff80001c21:	d3 ee                	shr    esi,cl
ffffffff80001c23:	89 f2                	mov    edx,esi
ffffffff80001c25:	09 fa                	or     edx,edi
ffffffff80001c27:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80001c29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001c2d:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80001c31:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80001c35:	48 01 d0             	add    rax,rdx
ffffffff80001c38:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001c3b:	0f b6 c0             	movzx  eax,al
ffffffff80001c3e:	89 c6                	mov    esi,eax
ffffffff80001c40:	48 c7 c7 74 59 00 80 	mov    rdi,0xffffffff80005974
ffffffff80001c47:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001c4c:	e8 6f 09 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001c51:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
ffffffff80001c55:	83 7d f4 03          	cmp    DWORD PTR [rbp-0xc],0x3
ffffffff80001c59:	7e 9a                	jle    ffffffff80001bf5 <GmbusRead(unsigned int, unsigned int, unsigned char*)+0xb1>
ffffffff80001c5b:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff80001c5e:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80001c62:	0f 82 72 ff ff ff    	jb     ffffffff80001bda <GmbusRead(unsigned int, unsigned int, unsigned char*)+0x96>
ffffffff80001c68:	48 c7 c7 7a 59 00 80 	mov    rdi,0xffffffff8000597a
ffffffff80001c6f:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001c74:	e8 47 09 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001c79:	e8 79 fe ff ff       	call   ffffffff80001af7 <WaitForGmbusComplete()>
ffffffff80001c7e:	90                   	nop
ffffffff80001c7f:	c9                   	leave  
ffffffff80001c80:	c3                   	ret    

ffffffff80001c81 <ReadEdid(DisplayInfo*)>:
ffffffff80001c81:	f3 0f 1e fa          	endbr64 
ffffffff80001c85:	55                   	push   rbp
ffffffff80001c86:	48 89 e5             	mov    rbp,rsp
ffffffff80001c89:	48 83 ec 10          	sub    rsp,0x10
ffffffff80001c8d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80001c91:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001c95:	48 83 c0 05          	add    rax,0x5
ffffffff80001c99:	48 89 c2             	mov    rdx,rax
ffffffff80001c9c:	be 80 00 00 00       	mov    esi,0x80
ffffffff80001ca1:	bf 50 00 00 00       	mov    edi,0x50
ffffffff80001ca6:	e8 99 fe ff ff       	call   ffffffff80001b44 <GmbusRead(unsigned int, unsigned int, unsigned char*)>
ffffffff80001cab:	90                   	nop
ffffffff80001cac:	c9                   	leave  
ffffffff80001cad:	c3                   	ret    

ffffffff80001cae <IntelGpu::Initialize()>:
ffffffff80001cae:	f3 0f 1e fa          	endbr64 
ffffffff80001cb2:	55                   	push   rbp
ffffffff80001cb3:	48 89 e5             	mov    rbp,rsp
ffffffff80001cb6:	48 81 ec a0 00 00 00 	sub    rsp,0xa0
ffffffff80001cbd:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80001cc2:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001cc7:	be 02 00 00 00       	mov    esi,0x2
ffffffff80001ccc:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80001cd1:	e8 a8 fb ff ff       	call   ffffffff8000187e <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff80001cd6:	0f b7 c0             	movzx  eax,ax
ffffffff80001cd9:	89 c6                	mov    esi,eax
ffffffff80001cdb:	48 c7 c7 7c 59 00 80 	mov    rdi,0xffffffff8000597c
ffffffff80001ce2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001ce7:	e8 d4 08 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001cec:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80001cf1:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001cf6:	be 02 00 00 00       	mov    esi,0x2
ffffffff80001cfb:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80001d00:	e8 79 fb ff ff       	call   ffffffff8000187e <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff80001d05:	83 c8 04             	or     eax,0x4
ffffffff80001d08:	0f b7 c0             	movzx  eax,ax
ffffffff80001d0b:	41 89 c0             	mov    r8d,eax
ffffffff80001d0e:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80001d13:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001d18:	be 02 00 00 00       	mov    esi,0x2
ffffffff80001d1d:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80001d22:	e8 5e fc ff ff       	call   ffffffff80001985 <WritePciRegister16(int, int, int, unsigned char, unsigned short)>
ffffffff80001d27:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80001d2c:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001d31:	be 02 00 00 00       	mov    esi,0x2
ffffffff80001d36:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80001d3b:	e8 3e fb ff ff       	call   ffffffff8000187e <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff80001d40:	0f b7 c0             	movzx  eax,ax
ffffffff80001d43:	89 c6                	mov    esi,eax
ffffffff80001d45:	48 c7 c7 7c 59 00 80 	mov    rdi,0xffffffff8000597c
ffffffff80001d4c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001d51:	e8 6a 08 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001d56:	b9 10 00 00 00       	mov    ecx,0x10
ffffffff80001d5b:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001d60:	be 02 00 00 00       	mov    esi,0x2
ffffffff80001d65:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80001d6a:	e8 b9 fb ff ff       	call   ffffffff80001928 <ReadPciRegister64(int, int, int, unsigned char)>
ffffffff80001d6f:	48 83 e0 f8          	and    rax,0xfffffffffffffff8
ffffffff80001d73:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001d77:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80001d7e:	eb 3e                	jmp    ffffffff80001dbe <IntelGpu::Initialize()+0x110>
ffffffff80001d80:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001d83:	c1 e0 0c             	shl    eax,0xc
ffffffff80001d86:	48 63 d0             	movsxd rdx,eax
ffffffff80001d89:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001d8d:	48 01 c2             	add    rdx,rax
ffffffff80001d90:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001d93:	c1 e0 0c             	shl    eax,0xc
ffffffff80001d96:	48 98                	cdqe   
ffffffff80001d98:	48 b9 00 00 00 00 00 	movabs rcx,0xffffc00000000000
ffffffff80001d9f:	c0 ff ff 
ffffffff80001da2:	48 8d 34 08          	lea    rsi,[rax+rcx*1]
ffffffff80001da6:	48 8b 05 03 5c 00 00 	mov    rax,QWORD PTR [rip+0x5c03]        # ffffffff800079b0 <VirtualMemory::kernelDir>
ffffffff80001dad:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001db2:	48 89 c7             	mov    rdi,rax
ffffffff80001db5:	e8 56 f1 ff ff       	call   ffffffff80000f10 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80001dba:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80001dbe:	81 7d fc ff 03 00 00 	cmp    DWORD PTR [rbp-0x4],0x3ff
ffffffff80001dc5:	7e b9                	jle    ffffffff80001d80 <IntelGpu::Initialize()+0xd2>
ffffffff80001dc7:	b9 10 00 00 00       	mov    ecx,0x10
ffffffff80001dcc:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001dd1:	be 02 00 00 00       	mov    esi,0x2
ffffffff80001dd6:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80001ddb:	e8 48 fb ff ff       	call   ffffffff80001928 <ReadPciRegister64(int, int, int, unsigned char)>
ffffffff80001de0:	48 89 c6             	mov    rsi,rax
ffffffff80001de3:	48 c7 c7 98 59 00 80 	mov    rdi,0xffffffff80005998
ffffffff80001dea:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001def:	e8 cc 07 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001df4:	48 b8 00 00 00 00 00 	movabs rax,0xffffc00000000000
ffffffff80001dfb:	c0 ff ff 
ffffffff80001dfe:	48 89 05 4b 5c 00 00 	mov    QWORD PTR [rip+0x5c4b],rax        # ffffffff80007a50 <iobase>
ffffffff80001e05:	bf 80 11 0e 00       	mov    edi,0xe1180
ffffffff80001e0a:	e8 38 fc ff ff       	call   ffffffff80001a47 <ReadIgpu32(unsigned int)>
ffffffff80001e0f:	83 e0 02             	and    eax,0x2
ffffffff80001e12:	85 c0                	test   eax,eax
ffffffff80001e14:	0f 95 c0             	setne  al
ffffffff80001e17:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff80001e1a:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffffffff80001e1e:	83 f0 01             	xor    eax,0x1
ffffffff80001e21:	84 c0                	test   al,al
ffffffff80001e23:	74 13                	je     ffffffff80001e38 <IntelGpu::Initialize()+0x18a>
ffffffff80001e25:	48 c7 c7 be 59 00 80 	mov    rdi,0xffffffff800059be
ffffffff80001e2c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001e31:	e8 8a 07 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001e36:	eb 2f                	jmp    ffffffff80001e67 <IntelGpu::Initialize()+0x1b9>
ffffffff80001e38:	48 8d 85 64 ff ff ff 	lea    rax,[rbp-0x9c]
ffffffff80001e3f:	48 89 c7             	mov    rdi,rax
ffffffff80001e42:	e8 b3 00 00 00       	call   ffffffff80001efa <DisplayInfo::DisplayInfo()>
ffffffff80001e47:	c7 85 64 ff ff ff 01 	mov    DWORD PTR [rbp-0x9c],0x1
ffffffff80001e4e:	00 00 00 
ffffffff80001e51:	c6 85 68 ff ff ff 01 	mov    BYTE PTR [rbp-0x98],0x1
ffffffff80001e58:	48 8d 85 64 ff ff ff 	lea    rax,[rbp-0x9c]
ffffffff80001e5f:	48 89 c7             	mov    rdi,rax
ffffffff80001e62:	e8 1a fe ff ff       	call   ffffffff80001c81 <ReadEdid(DisplayInfo*)>
ffffffff80001e67:	c9                   	leave  
ffffffff80001e68:	c3                   	ret    

ffffffff80001e69 <Utils::DisableInts()>:
ffffffff80001e69:	f3 0f 1e fa          	endbr64 
ffffffff80001e6d:	55                   	push   rbp
ffffffff80001e6e:	48 89 e5             	mov    rbp,rsp
ffffffff80001e71:	fa                   	cli    
ffffffff80001e72:	90                   	nop
ffffffff80001e73:	5d                   	pop    rbp
ffffffff80001e74:	c3                   	ret    

ffffffff80001e75 <Utils::HaltCatchFire()>:
ffffffff80001e75:	f3 0f 1e fa          	endbr64 
ffffffff80001e79:	55                   	push   rbp
ffffffff80001e7a:	48 89 e5             	mov    rbp,rsp
ffffffff80001e7d:	e8 e7 ff ff ff       	call   ffffffff80001e69 <Utils::DisableInts()>
ffffffff80001e82:	f4                   	hlt    
ffffffff80001e83:	eb fd                	jmp    ffffffff80001e82 <Utils::HaltCatchFire()+0xd>

ffffffff80001e85 <Utils::outw(unsigned short, unsigned short)>:
ffffffff80001e85:	f3 0f 1e fa          	endbr64 
ffffffff80001e89:	55                   	push   rbp
ffffffff80001e8a:	48 89 e5             	mov    rbp,rsp
ffffffff80001e8d:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001e91:	89 fa                	mov    edx,edi
ffffffff80001e93:	89 f0                	mov    eax,esi
ffffffff80001e95:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
ffffffff80001e99:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
ffffffff80001e9d:	0f b7 45 f8          	movzx  eax,WORD PTR [rbp-0x8]
ffffffff80001ea1:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80001ea5:	66 ef                	out    dx,ax
ffffffff80001ea7:	90                   	nop
ffffffff80001ea8:	c9                   	leave  
ffffffff80001ea9:	c3                   	ret    

ffffffff80001eaa <Utils::outd(unsigned short, unsigned int)>:
ffffffff80001eaa:	f3 0f 1e fa          	endbr64 
ffffffff80001eae:	55                   	push   rbp
ffffffff80001eaf:	48 89 e5             	mov    rbp,rsp
ffffffff80001eb2:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001eb6:	89 f8                	mov    eax,edi
ffffffff80001eb8:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80001ebb:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff80001ebf:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001ec2:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80001ec6:	ef                   	out    dx,eax
ffffffff80001ec7:	90                   	nop
ffffffff80001ec8:	c9                   	leave  
ffffffff80001ec9:	c3                   	ret    

ffffffff80001eca <WriteIgpu32(unsigned int, unsigned int)>:
ffffffff80001eca:	f3 0f 1e fa          	endbr64 
ffffffff80001ece:	55                   	push   rbp
ffffffff80001ecf:	48 89 e5             	mov    rbp,rsp
ffffffff80001ed2:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001ed6:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80001ed9:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80001edc:	48 8b 15 6d 5b 00 00 	mov    rdx,QWORD PTR [rip+0x5b6d]        # ffffffff80007a50 <iobase>
ffffffff80001ee3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001ee6:	c1 e8 02             	shr    eax,0x2
ffffffff80001ee9:	89 c0                	mov    eax,eax
ffffffff80001eeb:	48 c1 e0 02          	shl    rax,0x2
ffffffff80001eef:	48 01 c2             	add    rdx,rax
ffffffff80001ef2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001ef5:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80001ef7:	90                   	nop
ffffffff80001ef8:	c9                   	leave  
ffffffff80001ef9:	c3                   	ret    

ffffffff80001efa <DisplayInfo::DisplayInfo()>:
ffffffff80001efa:	f3 0f 1e fa          	endbr64 
ffffffff80001efe:	55                   	push   rbp
ffffffff80001eff:	48 89 e5             	mov    rbp,rsp
ffffffff80001f02:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001f06:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80001f0a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001f0e:	c6 40 04 00          	mov    BYTE PTR [rax+0x4],0x0
ffffffff80001f12:	90                   	nop
ffffffff80001f13:	c9                   	leave  
ffffffff80001f14:	c3                   	ret    
ffffffff80001f15:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80001f1c:	00 00 00 
ffffffff80001f1f:	90                   	nop

ffffffff80001f20 <SetIDTEntry(int, unsigned long, unsigned char, unsigned short, unsigned char, unsigned char)>:
ffffffff80001f20:	f3 0f 1e fa          	endbr64 
ffffffff80001f24:	48 63 ff             	movsxd rdi,edi
ffffffff80001f27:	48 89 f0             	mov    rax,rsi
ffffffff80001f2a:	41 c1 e1 05          	shl    r9d,0x5
ffffffff80001f2e:	89 d6                	mov    esi,edx
ffffffff80001f30:	48 c1 e7 04          	shl    rdi,0x4
ffffffff80001f34:	45 09 c1             	or     r9d,r8d
ffffffff80001f37:	66 89 87 80 7a 00 80 	mov    WORD PTR [rdi-0x7fff8580],ax
ffffffff80001f3e:	48 8d 97 80 7a 00 80 	lea    rdx,[rdi-0x7fff8580]
ffffffff80001f45:	48 89 c7             	mov    rdi,rax
ffffffff80001f48:	41 83 c9 80          	or     r9d,0xffffff80
ffffffff80001f4c:	48 c1 ef 10          	shr    rdi,0x10
ffffffff80001f50:	48 c1 e8 20          	shr    rax,0x20
ffffffff80001f54:	66 89 7a 06          	mov    WORD PTR [rdx+0x6],di
ffffffff80001f58:	89 42 08             	mov    DWORD PTR [rdx+0x8],eax
ffffffff80001f5b:	40 88 72 04          	mov    BYTE PTR [rdx+0x4],sil
ffffffff80001f5f:	44 88 4a 05          	mov    BYTE PTR [rdx+0x5],r9b
ffffffff80001f63:	66 89 4a 02          	mov    WORD PTR [rdx+0x2],cx
ffffffff80001f67:	c7 42 0c 00 00 00 00 	mov    DWORD PTR [rdx+0xc],0x0
ffffffff80001f6e:	c3                   	ret    
ffffffff80001f6f:	90                   	nop

ffffffff80001f70 <interrupt_handler>:
ffffffff80001f70:	f3 0f 1e fa          	endbr64 
ffffffff80001f74:	55                   	push   rbp
ffffffff80001f75:	48 89 e5             	mov    rbp,rsp
ffffffff80001f78:	41 54                	push   r12
ffffffff80001f7a:	49 89 fc             	mov    r12,rdi
ffffffff80001f7d:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001f81:	48 8b 47 78          	mov    rax,QWORD PTR [rdi+0x78]
ffffffff80001f85:	48 83 f8 1f          	cmp    rax,0x1f
ffffffff80001f89:	76 09                	jbe    ffffffff80001f94 <interrupt_handler+0x24>
ffffffff80001f8b:	4c 8b 65 f8          	mov    r12,QWORD PTR [rbp-0x8]
ffffffff80001f8f:	48 89 f8             	mov    rax,rdi
ffffffff80001f92:	c9                   	leave  
ffffffff80001f93:	c3                   	ret    
ffffffff80001f94:	48 8b 34 c5 e0 71 00 	mov    rsi,QWORD PTR [rax*8-0x7fff8e20]
ffffffff80001f9b:	80 
ffffffff80001f9c:	48 c7 c7 e0 59 00 80 	mov    rdi,0xffffffff800059e0
ffffffff80001fa3:	31 c0                	xor    eax,eax
ffffffff80001fa5:	e8 16 06 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001faa:	49 8b 4c 24 60       	mov    rcx,QWORD PTR [r12+0x60]
ffffffff80001faf:	49 8b 54 24 68       	mov    rdx,QWORD PTR [r12+0x68]
ffffffff80001fb4:	31 c0                	xor    eax,eax
ffffffff80001fb6:	49 8b 74 24 70       	mov    rsi,QWORD PTR [r12+0x70]
ffffffff80001fbb:	4d 8b 44 24 58       	mov    r8,QWORD PTR [r12+0x58]
ffffffff80001fc0:	48 c7 c7 08 5a 00 80 	mov    rdi,0xffffffff80005a08
ffffffff80001fc7:	e8 f4 05 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001fcc:	49 8b 4c 24 40       	mov    rcx,QWORD PTR [r12+0x40]
ffffffff80001fd1:	31 c0                	xor    eax,eax
ffffffff80001fd3:	49 8b 54 24 48       	mov    rdx,QWORD PTR [r12+0x48]
ffffffff80001fd8:	49 8b 74 24 50       	mov    rsi,QWORD PTR [r12+0x50]
ffffffff80001fdd:	4d 8b 84 24 a0 00 00 	mov    r8,QWORD PTR [r12+0xa0]
ffffffff80001fe4:	00 
ffffffff80001fe5:	48 c7 c7 30 5a 00 80 	mov    rdi,0xffffffff80005a30
ffffffff80001fec:	e8 cf 05 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80001ff1:	49 8b 4c 24 28       	mov    rcx,QWORD PTR [r12+0x28]
ffffffff80001ff6:	49 8b 54 24 30       	mov    rdx,QWORD PTR [r12+0x30]
ffffffff80001ffb:	31 c0                	xor    eax,eax
ffffffff80001ffd:	49 8b 74 24 38       	mov    rsi,QWORD PTR [r12+0x38]
ffffffff80002002:	4d 8b 44 24 20       	mov    r8,QWORD PTR [r12+0x20]
ffffffff80002007:	48 c7 c7 58 5a 00 80 	mov    rdi,0xffffffff80005a58
ffffffff8000200e:	e8 ad 05 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002013:	49 8b 4c 24 08       	mov    rcx,QWORD PTR [r12+0x8]
ffffffff80002018:	4d 8b 04 24          	mov    r8,QWORD PTR [r12]
ffffffff8000201c:	31 c0                	xor    eax,eax
ffffffff8000201e:	49 8b 54 24 10       	mov    rdx,QWORD PTR [r12+0x10]
ffffffff80002023:	49 8b 74 24 18       	mov    rsi,QWORD PTR [r12+0x18]
ffffffff80002028:	48 c7 c7 80 5a 00 80 	mov    rdi,0xffffffff80005a80
ffffffff8000202f:	e8 8c 05 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002034:	49 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [r12+0x80]
ffffffff8000203b:	00 
ffffffff8000203c:	48 c7 c7 a8 5a 00 80 	mov    rdi,0xffffffff80005aa8
ffffffff80002043:	31 c0                	xor    eax,eax
ffffffff80002045:	49 8b b4 24 88 00 00 	mov    rsi,QWORD PTR [r12+0x88]
ffffffff8000204c:	00 
ffffffff8000204d:	e8 6e 05 00 00       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002052:	fa                   	cli    
ffffffff80002053:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002058:	f4                   	hlt    
ffffffff80002059:	eb fd                	jmp    ffffffff80002058 <interrupt_handler+0xe8>
ffffffff8000205b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80002060 <IDT::Initialize()>:
ffffffff80002060:	f3 0f 1e fa          	endbr64 
ffffffff80002064:	55                   	push   rbp
ffffffff80002065:	31 c9                	xor    ecx,ecx
ffffffff80002067:	48 89 e5             	mov    rbp,rsp
ffffffff8000206a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80002070:	48 8b 14 cd 61 3f 00 	mov    rdx,QWORD PTR [rcx*8-0x7fffc09f]
ffffffff80002077:	80 
ffffffff80002078:	48 63 f1             	movsxd rsi,ecx
ffffffff8000207b:	48 83 c1 01          	add    rcx,0x1
ffffffff8000207f:	48 c1 e6 04          	shl    rsi,0x4
ffffffff80002083:	66 89 96 80 7a 00 80 	mov    WORD PTR [rsi-0x7fff8580],dx
ffffffff8000208a:	48 8d 86 80 7a 00 80 	lea    rax,[rsi-0x7fff8580]
ffffffff80002091:	48 89 d6             	mov    rsi,rdx
ffffffff80002094:	48 c1 ea 20          	shr    rdx,0x20
ffffffff80002098:	48 c1 ee 10          	shr    rsi,0x10
ffffffff8000209c:	66 89 70 06          	mov    WORD PTR [rax+0x6],si
ffffffff800020a0:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff800020a3:	ba 08 00 00 00       	mov    edx,0x8
ffffffff800020a8:	c6 40 04 00          	mov    BYTE PTR [rax+0x4],0x0
ffffffff800020ac:	c6 40 05 8e          	mov    BYTE PTR [rax+0x5],0x8e
ffffffff800020b0:	66 89 50 02          	mov    WORD PTR [rax+0x2],dx
ffffffff800020b4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [rax+0xc],0x0
ffffffff800020bb:	48 81 f9 00 01 00 00 	cmp    rcx,0x100
ffffffff800020c2:	75 ac                	jne    ffffffff80002070 <IDT::Initialize()+0x10>
ffffffff800020c4:	b8 ff 0f 00 00       	mov    eax,0xfff
ffffffff800020c9:	48 c7 c7 60 7a 00 80 	mov    rdi,0xffffffff80007a60
ffffffff800020d0:	48 c7 05 87 59 00 00 	mov    QWORD PTR [rip+0x5987],0xffffffff80007a80        # ffffffff80007a62 <idtr+0x2>
ffffffff800020d7:	80 7a 00 80 
ffffffff800020db:	66 89 05 7e 59 00 00 	mov    WORD PTR [rip+0x597e],ax        # ffffffff80007a60 <idtr>
ffffffff800020e2:	e8 7a 26 00 00       	call   ffffffff80004761 <LoadIdt>
ffffffff800020e7:	fb                   	sti    
ffffffff800020e8:	5d                   	pop    rbp
ffffffff800020e9:	c3                   	ret    
ffffffff800020ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff800020f0 <PIC::RemapAndDisable()>:
ffffffff800020f0:	f3 0f 1e fa          	endbr64 
ffffffff800020f4:	b8 11 00 00 00       	mov    eax,0x11
ffffffff800020f9:	e6 20                	out    0x20,al
ffffffff800020fb:	e6 a0                	out    0xa0,al
ffffffff800020fd:	b8 20 00 00 00       	mov    eax,0x20
ffffffff80002102:	e6 21                	out    0x21,al
ffffffff80002104:	b8 28 00 00 00       	mov    eax,0x28
ffffffff80002109:	e6 a1                	out    0xa1,al
ffffffff8000210b:	b8 04 00 00 00       	mov    eax,0x4
ffffffff80002110:	e6 21                	out    0x21,al
ffffffff80002112:	b8 02 00 00 00       	mov    eax,0x2
ffffffff80002117:	e6 a1                	out    0xa1,al
ffffffff80002119:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000211e:	e6 21                	out    0x21,al
ffffffff80002120:	e6 a1                	out    0xa1,al
ffffffff80002122:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff80002127:	e6 21                	out    0x21,al
ffffffff80002129:	e6 a1                	out    0xa1,al
ffffffff8000212b:	c3                   	ret    
ffffffff8000212c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80002130 <InitCom0()>:
ffffffff80002130:	f3 0f 1e fa          	endbr64 
ffffffff80002134:	31 ff                	xor    edi,edi
ffffffff80002136:	41 b8 f9 03 00 00    	mov    r8d,0x3f9
ffffffff8000213c:	89 f8                	mov    eax,edi
ffffffff8000213e:	44 89 c2             	mov    edx,r8d
ffffffff80002141:	ee                   	out    dx,al
ffffffff80002142:	be fb 03 00 00       	mov    esi,0x3fb
ffffffff80002147:	b8 80 ff ff ff       	mov    eax,0xffffff80
ffffffff8000214c:	89 f2                	mov    edx,esi
ffffffff8000214e:	ee                   	out    dx,al
ffffffff8000214f:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002154:	ba f8 03 00 00       	mov    edx,0x3f8
ffffffff80002159:	89 c8                	mov    eax,ecx
ffffffff8000215b:	ee                   	out    dx,al
ffffffff8000215c:	89 f8                	mov    eax,edi
ffffffff8000215e:	44 89 c2             	mov    edx,r8d
ffffffff80002161:	ee                   	out    dx,al
ffffffff80002162:	89 c8                	mov    eax,ecx
ffffffff80002164:	89 f2                	mov    edx,esi
ffffffff80002166:	ee                   	out    dx,al
ffffffff80002167:	b8 c7 ff ff ff       	mov    eax,0xffffffc7
ffffffff8000216c:	ba fa 03 00 00       	mov    edx,0x3fa
ffffffff80002171:	ee                   	out    dx,al
ffffffff80002172:	ba fc 03 00 00       	mov    edx,0x3fc
ffffffff80002177:	b8 0b 00 00 00       	mov    eax,0xb
ffffffff8000217c:	ee                   	out    dx,al
ffffffff8000217d:	b8 0f 00 00 00       	mov    eax,0xf
ffffffff80002182:	ee                   	out    dx,al
ffffffff80002183:	c3                   	ret    
ffffffff80002184:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000218b:	00 00 00 00 
ffffffff8000218f:	90                   	nop

ffffffff80002190 <putc_com0(char)>:
ffffffff80002190:	f3 0f 1e fa          	endbr64 
ffffffff80002194:	ba f8 03 00 00       	mov    edx,0x3f8
ffffffff80002199:	89 f8                	mov    eax,edi
ffffffff8000219b:	ee                   	out    dx,al
ffffffff8000219c:	c3                   	ret    
ffffffff8000219d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800021a0 <puts_com0(char const*)>:
ffffffff800021a0:	f3 0f 1e fa          	endbr64 
ffffffff800021a4:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
ffffffff800021a7:	84 c0                	test   al,al
ffffffff800021a9:	74 11                	je     ffffffff800021bc <puts_com0(char const*)+0x1c>
ffffffff800021ab:	ba f8 03 00 00       	mov    edx,0x3f8
ffffffff800021b0:	48 83 c7 01          	add    rdi,0x1
ffffffff800021b4:	ee                   	out    dx,al
ffffffff800021b5:	0f b6 07             	movzx  eax,BYTE PTR [rdi]
ffffffff800021b8:	84 c0                	test   al,al
ffffffff800021ba:	75 f4                	jne    ffffffff800021b0 <puts_com0(char const*)+0x10>
ffffffff800021bc:	c3                   	ret    
ffffffff800021bd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800021c0 <itoa(long, int)>:
ffffffff800021c0:	f3 0f 1e fa          	endbr64 
ffffffff800021c4:	48 89 f8             	mov    rax,rdi
ffffffff800021c7:	49 c7 c0 de 5a 00 80 	mov    r8,0xffffffff80005ade
ffffffff800021ce:	48 85 ff             	test   rdi,rdi
ffffffff800021d1:	74 3f                	je     ffffffff80002212 <itoa(long, int)+0x52>
ffffffff800021d3:	48 63 f6             	movsxd rsi,esi
ffffffff800021d6:	b9 3e 00 00 00       	mov    ecx,0x3e
ffffffff800021db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800021e0:	48 99                	cqo    
ffffffff800021e2:	4c 63 c1             	movsxd r8,ecx
ffffffff800021e5:	48 f7 fe             	idiv   rsi
ffffffff800021e8:	0f b6 92 d2 5c 00 80 	movzx  edx,BYTE PTR [rdx-0x7fffa32e]
ffffffff800021ef:	48 85 c0             	test   rax,rax
ffffffff800021f2:	40 0f 95 c7          	setne  dil
ffffffff800021f6:	83 f9 01             	cmp    ecx,0x1
ffffffff800021f9:	88 91 e0 8a 00 80    	mov    BYTE PTR [rcx-0x7fff7520],dl
ffffffff800021ff:	0f 95 c2             	setne  dl
ffffffff80002202:	48 83 e9 01          	sub    rcx,0x1
ffffffff80002206:	40 84 d7             	test   dil,dl
ffffffff80002209:	75 d5                	jne    ffffffff800021e0 <itoa(long, int)+0x20>
ffffffff8000220b:	49 81 c0 e0 8a 00 80 	add    r8,0xffffffff80008ae0
ffffffff80002212:	4c 89 c0             	mov    rax,r8
ffffffff80002215:	c3                   	ret    
ffffffff80002216:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000221d:	00 00 00 

ffffffff80002220 <utoa(unsigned long, int)>:
ffffffff80002220:	f3 0f 1e fa          	endbr64 
ffffffff80002224:	48 c7 c0 de 5a 00 80 	mov    rax,0xffffffff80005ade
ffffffff8000222b:	48 85 ff             	test   rdi,rdi
ffffffff8000222e:	74 4b                	je     ffffffff8000227b <utoa(unsigned long, int)+0x5b>
ffffffff80002230:	48 63 f6             	movsxd rsi,esi
ffffffff80002233:	b9 3e 00 00 00       	mov    ecx,0x3e
ffffffff80002238:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000223f:	00 
ffffffff80002240:	48 89 f8             	mov    rax,rdi
ffffffff80002243:	31 d2                	xor    edx,edx
ffffffff80002245:	41 89 c8             	mov    r8d,ecx
ffffffff80002248:	48 f7 f6             	div    rsi
ffffffff8000224b:	0f b6 92 d2 5c 00 80 	movzx  edx,BYTE PTR [rdx-0x7fffa32e]
ffffffff80002252:	88 91 a0 8a 00 80    	mov    BYTE PTR [rcx-0x7fff7560],dl
ffffffff80002258:	48 89 fa             	mov    rdx,rdi
ffffffff8000225b:	48 89 c7             	mov    rdi,rax
ffffffff8000225e:	48 39 d6             	cmp    rsi,rdx
ffffffff80002261:	0f 96 c2             	setbe  dl
ffffffff80002264:	83 f9 01             	cmp    ecx,0x1
ffffffff80002267:	0f 95 c0             	setne  al
ffffffff8000226a:	48 83 e9 01          	sub    rcx,0x1
ffffffff8000226e:	84 c2                	test   dl,al
ffffffff80002270:	75 ce                	jne    ffffffff80002240 <utoa(unsigned long, int)+0x20>
ffffffff80002272:	49 63 c0             	movsxd rax,r8d
ffffffff80002275:	48 05 a0 8a 00 80    	add    rax,0xffffffff80008aa0
ffffffff8000227b:	c3                   	ret    
ffffffff8000227c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80002280 <PutPixel(int, int, unsigned char, unsigned char, unsigned char)>:
ffffffff80002280:	f3 0f 1e fa          	endbr64 
ffffffff80002284:	4c 8b 0d fd 67 00 00 	mov    r9,QWORD PTR [rip+0x67fd]        # ffffffff80008a88 <chosen_fb>
ffffffff8000228b:	0f b6 c1             	movzx  eax,cl
ffffffff8000228e:	4c 63 d6             	movsxd r10,esi
ffffffff80002291:	0f b6 d2             	movzx  edx,dl
ffffffff80002294:	45 0f b6 c0          	movzx  r8d,r8b
ffffffff80002298:	48 63 ff             	movsxd rdi,edi
ffffffff8000229b:	41 0f b6 49 26       	movzx  ecx,BYTE PTR [r9+0x26]
ffffffff800022a0:	49 8b 71 18          	mov    rsi,QWORD PTR [r9+0x18]
ffffffff800022a4:	d3 e0                	shl    eax,cl
ffffffff800022a6:	41 0f b6 49 28       	movzx  ecx,BYTE PTR [r9+0x28]
ffffffff800022ab:	48 c1 ee 02          	shr    rsi,0x2
ffffffff800022af:	49 0f af f2          	imul   rsi,r10
ffffffff800022b3:	41 d3 e0             	shl    r8d,cl
ffffffff800022b6:	41 0f b6 49 24       	movzx  ecx,BYTE PTR [r9+0x24]
ffffffff800022bb:	44 09 c0             	or     eax,r8d
ffffffff800022be:	d3 e2                	shl    edx,cl
ffffffff800022c0:	48 01 fe             	add    rsi,rdi
ffffffff800022c3:	09 d0                	or     eax,edx
ffffffff800022c5:	48 8b 15 c4 67 00 00 	mov    rdx,QWORD PTR [rip+0x67c4]        # ffffffff80008a90 <fb_address>
ffffffff800022cc:	89 04 b2             	mov    DWORD PTR [rdx+rsi*4],eax
ffffffff800022cf:	c3                   	ret    

ffffffff800022d0 <Screen::GetFramebuffer()>:
ffffffff800022d0:	f3 0f 1e fa          	endbr64 
ffffffff800022d4:	48 8b 05 b5 67 00 00 	mov    rax,QWORD PTR [rip+0x67b5]        # ffffffff80008a90 <fb_address>
ffffffff800022db:	c3                   	ret    
ffffffff800022dc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800022e0 <putc(char)>:
ffffffff800022e0:	f3 0f 1e fa          	endbr64 
ffffffff800022e4:	89 f8                	mov    eax,edi
ffffffff800022e6:	ba f8 03 00 00       	mov    edx,0x3f8
ffffffff800022eb:	ee                   	out    dx,al
ffffffff800022ec:	40 80 ff 0a          	cmp    dil,0xa
ffffffff800022f0:	0f 84 5a 02 00 00    	je     ffffffff80002550 <putc(char)+0x270>
ffffffff800022f6:	8b 0d 88 67 00 00    	mov    ecx,DWORD PTR [rip+0x6788]        # ffffffff80008a84 <x>
ffffffff800022fc:	40 80 ff 09          	cmp    dil,0x9
ffffffff80002300:	0f 84 05 02 00 00    	je     ffffffff8000250b <putc(char)+0x22b>
ffffffff80002306:	48 8b 15 7b 67 00 00 	mov    rdx,QWORD PTR [rip+0x677b]        # ffffffff80008a88 <chosen_fb>
ffffffff8000230d:	48 0f be c0          	movsx  rax,al
ffffffff80002311:	8d 0c cd 07 00 00 00 	lea    ecx,[rcx*8+0x7]
ffffffff80002318:	48 8d 34 c5 20 73 00 	lea    rsi,[rax*8-0x7fff8ce0]
ffffffff8000231f:	80 
ffffffff80002320:	8b 05 5a 67 00 00    	mov    eax,DWORD PTR [rip+0x675a]        # ffffffff80008a80 <y>
ffffffff80002326:	48 63 c9             	movsxd rcx,ecx
ffffffff80002329:	4c 8b 4a 18          	mov    r9,QWORD PTR [rdx+0x18]
ffffffff8000232d:	4c 8d 56 08          	lea    r10,[rsi+0x8]
ffffffff80002331:	c1 e0 03             	shl    eax,0x3
ffffffff80002334:	4c 89 cf             	mov    rdi,r9
ffffffff80002337:	48 98                	cdqe   
ffffffff80002339:	49 83 e1 fc          	and    r9,0xfffffffffffffffc
ffffffff8000233d:	48 c1 ef 02          	shr    rdi,0x2
ffffffff80002341:	48 0f af c7          	imul   rax,rdi
ffffffff80002345:	48 01 c8             	add    rax,rcx
ffffffff80002348:	48 8b 0d 41 67 00 00 	mov    rcx,QWORD PTR [rip+0x6741]        # ffffffff80008a90 <fb_address>
ffffffff8000234f:	48 8d 3c 81          	lea    rdi,[rcx+rax*4]
ffffffff80002353:	b8 ff 00 00 00       	mov    eax,0xff
ffffffff80002358:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000235f:	00 
ffffffff80002360:	31 c9                	xor    ecx,ecx
ffffffff80002362:	f6 06 01             	test   BYTE PTR [rsi],0x1
ffffffff80002365:	74 27                	je     ffffffff8000238e <putc(char)+0xae>
ffffffff80002367:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff8000236b:	41 89 c0             	mov    r8d,eax
ffffffff8000236e:	41 89 c3             	mov    r11d,eax
ffffffff80002371:	41 d3 e0             	shl    r8d,cl
ffffffff80002374:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff80002378:	41 d3 e3             	shl    r11d,cl
ffffffff8000237b:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff8000237f:	45 09 d8             	or     r8d,r11d
ffffffff80002382:	41 89 c3             	mov    r11d,eax
ffffffff80002385:	41 d3 e3             	shl    r11d,cl
ffffffff80002388:	44 89 d9             	mov    ecx,r11d
ffffffff8000238b:	44 09 c1             	or     ecx,r8d
ffffffff8000238e:	89 4f e4             	mov    DWORD PTR [rdi-0x1c],ecx
ffffffff80002391:	31 c9                	xor    ecx,ecx
ffffffff80002393:	f6 06 02             	test   BYTE PTR [rsi],0x2
ffffffff80002396:	74 27                	je     ffffffff800023bf <putc(char)+0xdf>
ffffffff80002398:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff8000239c:	41 89 c0             	mov    r8d,eax
ffffffff8000239f:	41 89 c3             	mov    r11d,eax
ffffffff800023a2:	41 d3 e0             	shl    r8d,cl
ffffffff800023a5:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff800023a9:	41 d3 e3             	shl    r11d,cl
ffffffff800023ac:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff800023b0:	45 09 d8             	or     r8d,r11d
ffffffff800023b3:	41 89 c3             	mov    r11d,eax
ffffffff800023b6:	41 d3 e3             	shl    r11d,cl
ffffffff800023b9:	44 89 d9             	mov    ecx,r11d
ffffffff800023bc:	44 09 c1             	or     ecx,r8d
ffffffff800023bf:	89 4f e8             	mov    DWORD PTR [rdi-0x18],ecx
ffffffff800023c2:	31 c9                	xor    ecx,ecx
ffffffff800023c4:	f6 06 04             	test   BYTE PTR [rsi],0x4
ffffffff800023c7:	74 27                	je     ffffffff800023f0 <putc(char)+0x110>
ffffffff800023c9:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff800023cd:	41 89 c0             	mov    r8d,eax
ffffffff800023d0:	41 89 c3             	mov    r11d,eax
ffffffff800023d3:	41 d3 e0             	shl    r8d,cl
ffffffff800023d6:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff800023da:	41 d3 e3             	shl    r11d,cl
ffffffff800023dd:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff800023e1:	45 09 d8             	or     r8d,r11d
ffffffff800023e4:	41 89 c3             	mov    r11d,eax
ffffffff800023e7:	41 d3 e3             	shl    r11d,cl
ffffffff800023ea:	44 89 d9             	mov    ecx,r11d
ffffffff800023ed:	44 09 c1             	or     ecx,r8d
ffffffff800023f0:	89 4f ec             	mov    DWORD PTR [rdi-0x14],ecx
ffffffff800023f3:	31 c9                	xor    ecx,ecx
ffffffff800023f5:	f6 06 08             	test   BYTE PTR [rsi],0x8
ffffffff800023f8:	74 27                	je     ffffffff80002421 <putc(char)+0x141>
ffffffff800023fa:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff800023fe:	41 89 c0             	mov    r8d,eax
ffffffff80002401:	41 89 c3             	mov    r11d,eax
ffffffff80002404:	41 d3 e0             	shl    r8d,cl
ffffffff80002407:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff8000240b:	41 d3 e3             	shl    r11d,cl
ffffffff8000240e:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff80002412:	45 09 d8             	or     r8d,r11d
ffffffff80002415:	41 89 c3             	mov    r11d,eax
ffffffff80002418:	41 d3 e3             	shl    r11d,cl
ffffffff8000241b:	44 89 d9             	mov    ecx,r11d
ffffffff8000241e:	44 09 c1             	or     ecx,r8d
ffffffff80002421:	89 4f f0             	mov    DWORD PTR [rdi-0x10],ecx
ffffffff80002424:	31 c9                	xor    ecx,ecx
ffffffff80002426:	f6 06 10             	test   BYTE PTR [rsi],0x10
ffffffff80002429:	74 27                	je     ffffffff80002452 <putc(char)+0x172>
ffffffff8000242b:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff8000242f:	41 89 c0             	mov    r8d,eax
ffffffff80002432:	41 89 c3             	mov    r11d,eax
ffffffff80002435:	41 d3 e0             	shl    r8d,cl
ffffffff80002438:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff8000243c:	41 d3 e3             	shl    r11d,cl
ffffffff8000243f:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff80002443:	45 09 d8             	or     r8d,r11d
ffffffff80002446:	41 89 c3             	mov    r11d,eax
ffffffff80002449:	41 d3 e3             	shl    r11d,cl
ffffffff8000244c:	44 89 d9             	mov    ecx,r11d
ffffffff8000244f:	44 09 c1             	or     ecx,r8d
ffffffff80002452:	89 4f f4             	mov    DWORD PTR [rdi-0xc],ecx
ffffffff80002455:	31 c9                	xor    ecx,ecx
ffffffff80002457:	f6 06 20             	test   BYTE PTR [rsi],0x20
ffffffff8000245a:	74 27                	je     ffffffff80002483 <putc(char)+0x1a3>
ffffffff8000245c:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff80002460:	41 89 c0             	mov    r8d,eax
ffffffff80002463:	41 89 c3             	mov    r11d,eax
ffffffff80002466:	41 d3 e0             	shl    r8d,cl
ffffffff80002469:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff8000246d:	41 d3 e3             	shl    r11d,cl
ffffffff80002470:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff80002474:	45 09 d8             	or     r8d,r11d
ffffffff80002477:	41 89 c3             	mov    r11d,eax
ffffffff8000247a:	41 d3 e3             	shl    r11d,cl
ffffffff8000247d:	44 89 d9             	mov    ecx,r11d
ffffffff80002480:	44 09 c1             	or     ecx,r8d
ffffffff80002483:	89 4f f8             	mov    DWORD PTR [rdi-0x8],ecx
ffffffff80002486:	31 c9                	xor    ecx,ecx
ffffffff80002488:	f6 06 40             	test   BYTE PTR [rsi],0x40
ffffffff8000248b:	74 27                	je     ffffffff800024b4 <putc(char)+0x1d4>
ffffffff8000248d:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff80002491:	41 89 c0             	mov    r8d,eax
ffffffff80002494:	41 89 c3             	mov    r11d,eax
ffffffff80002497:	41 d3 e0             	shl    r8d,cl
ffffffff8000249a:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff8000249e:	41 d3 e3             	shl    r11d,cl
ffffffff800024a1:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff800024a5:	45 09 d8             	or     r8d,r11d
ffffffff800024a8:	41 89 c3             	mov    r11d,eax
ffffffff800024ab:	41 d3 e3             	shl    r11d,cl
ffffffff800024ae:	44 89 d9             	mov    ecx,r11d
ffffffff800024b1:	44 09 c1             	or     ecx,r8d
ffffffff800024b4:	89 4f fc             	mov    DWORD PTR [rdi-0x4],ecx
ffffffff800024b7:	80 3e 00             	cmp    BYTE PTR [rsi],0x0
ffffffff800024ba:	79 7c                	jns    ffffffff80002538 <putc(char)+0x258>
ffffffff800024bc:	0f b6 4a 24          	movzx  ecx,BYTE PTR [rdx+0x24]
ffffffff800024c0:	41 89 c0             	mov    r8d,eax
ffffffff800024c3:	41 89 c3             	mov    r11d,eax
ffffffff800024c6:	48 83 c6 01          	add    rsi,0x1
ffffffff800024ca:	41 d3 e0             	shl    r8d,cl
ffffffff800024cd:	0f b6 4a 26          	movzx  ecx,BYTE PTR [rdx+0x26]
ffffffff800024d1:	41 d3 e3             	shl    r11d,cl
ffffffff800024d4:	0f b6 4a 28          	movzx  ecx,BYTE PTR [rdx+0x28]
ffffffff800024d8:	45 09 d8             	or     r8d,r11d
ffffffff800024db:	41 89 c3             	mov    r11d,eax
ffffffff800024de:	41 d3 e3             	shl    r11d,cl
ffffffff800024e1:	45 09 d8             	or     r8d,r11d
ffffffff800024e4:	44 89 07             	mov    DWORD PTR [rdi],r8d
ffffffff800024e7:	4c 01 cf             	add    rdi,r9
ffffffff800024ea:	49 39 f2             	cmp    r10,rsi
ffffffff800024ed:	0f 85 6d fe ff ff    	jne    ffffffff80002360 <putc(char)+0x80>
ffffffff800024f3:	8b 05 8b 65 00 00    	mov    eax,DWORD PTR [rip+0x658b]        # ffffffff80008a84 <x>
ffffffff800024f9:	83 c0 01             	add    eax,0x1
ffffffff800024fc:	89 05 82 65 00 00    	mov    DWORD PTR [rip+0x6582],eax        # ffffffff80008a84 <x>
ffffffff80002502:	48 98                	cdqe   
ffffffff80002504:	48 3b 42 08          	cmp    rax,QWORD PTR [rdx+0x8]
ffffffff80002508:	74 58                	je     ffffffff80002562 <putc(char)+0x282>
ffffffff8000250a:	c3                   	ret    
ffffffff8000250b:	8d 51 01             	lea    edx,[rcx+0x1]
ffffffff8000250e:	8d 41 02             	lea    eax,[rcx+0x2]
ffffffff80002511:	89 15 6d 65 00 00    	mov    DWORD PTR [rip+0x656d],edx        # ffffffff80008a84 <x>
ffffffff80002517:	83 e2 03             	and    edx,0x3
ffffffff8000251a:	74 ee                	je     ffffffff8000250a <putc(char)+0x22a>
ffffffff8000251c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80002520:	89 c2                	mov    edx,eax
ffffffff80002522:	89 c1                	mov    ecx,eax
ffffffff80002524:	83 c0 01             	add    eax,0x1
ffffffff80002527:	83 e2 03             	and    edx,0x3
ffffffff8000252a:	85 d2                	test   edx,edx
ffffffff8000252c:	75 f2                	jne    ffffffff80002520 <putc(char)+0x240>
ffffffff8000252e:	89 0d 50 65 00 00    	mov    DWORD PTR [rip+0x6550],ecx        # ffffffff80008a84 <x>
ffffffff80002534:	c3                   	ret    
ffffffff80002535:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff80002538:	48 83 c6 01          	add    rsi,0x1
ffffffff8000253c:	c7 07 00 00 00 00    	mov    DWORD PTR [rdi],0x0
ffffffff80002542:	4c 01 cf             	add    rdi,r9
ffffffff80002545:	4c 39 d6             	cmp    rsi,r10
ffffffff80002548:	0f 85 12 fe ff ff    	jne    ffffffff80002360 <putc(char)+0x80>
ffffffff8000254e:	eb a3                	jmp    ffffffff800024f3 <putc(char)+0x213>
ffffffff80002550:	83 05 29 65 00 00 01 	add    DWORD PTR [rip+0x6529],0x1        # ffffffff80008a80 <y>
ffffffff80002557:	c7 05 23 65 00 00 00 	mov    DWORD PTR [rip+0x6523],0x0        # ffffffff80008a84 <x>
ffffffff8000255e:	00 00 00 
ffffffff80002561:	c3                   	ret    
ffffffff80002562:	83 05 17 65 00 00 01 	add    DWORD PTR [rip+0x6517],0x1        # ffffffff80008a80 <y>
ffffffff80002569:	c7 05 11 65 00 00 00 	mov    DWORD PTR [rip+0x6511],0x0        # ffffffff80008a84 <x>
ffffffff80002570:	00 00 00 
ffffffff80002573:	c3                   	ret    
ffffffff80002574:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000257b:	00 00 00 00 
ffffffff8000257f:	90                   	nop

ffffffff80002580 <puts(char const*)>:
ffffffff80002580:	f3 0f 1e fa          	endbr64 
ffffffff80002584:	55                   	push   rbp
ffffffff80002585:	48 89 e5             	mov    rbp,rsp
ffffffff80002588:	41 54                	push   r12
ffffffff8000258a:	45 31 e4             	xor    r12d,r12d
ffffffff8000258d:	53                   	push   rbx
ffffffff8000258e:	48 89 fb             	mov    rbx,rdi
ffffffff80002591:	0f be 3f             	movsx  edi,BYTE PTR [rdi]
ffffffff80002594:	40 84 ff             	test   dil,dil
ffffffff80002597:	74 1d                	je     ffffffff800025b6 <puts(char const*)+0x36>
ffffffff80002599:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800025a0:	e8 3b fd ff ff       	call   ffffffff800022e0 <putc(char)>
ffffffff800025a5:	0f be 7b 01          	movsx  edi,BYTE PTR [rbx+0x1]
ffffffff800025a9:	48 83 c3 01          	add    rbx,0x1
ffffffff800025ad:	41 83 c4 01          	add    r12d,0x1
ffffffff800025b1:	40 84 ff             	test   dil,dil
ffffffff800025b4:	75 ea                	jne    ffffffff800025a0 <puts(char const*)+0x20>
ffffffff800025b6:	44 89 e0             	mov    eax,r12d
ffffffff800025b9:	5b                   	pop    rbx
ffffffff800025ba:	41 5c                	pop    r12
ffffffff800025bc:	5d                   	pop    rbp
ffffffff800025bd:	c3                   	ret    
ffffffff800025be:	66 90                	xchg   ax,ax

ffffffff800025c0 <_printf(char const*, ...)>:
ffffffff800025c0:	f3 0f 1e fa          	endbr64 
ffffffff800025c4:	55                   	push   rbp
ffffffff800025c5:	48 89 e5             	mov    rbp,rsp
ffffffff800025c8:	53                   	push   rbx
ffffffff800025c9:	31 db                	xor    ebx,ebx
ffffffff800025cb:	48 83 ec 58          	sub    rsp,0x58
ffffffff800025cf:	48 89 75 c8          	mov    QWORD PTR [rbp-0x38],rsi
ffffffff800025d3:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff800025d7:	4c 89 45 e0          	mov    QWORD PTR [rbp-0x20],r8
ffffffff800025db:	4c 89 4d e8          	mov    QWORD PTR [rbp-0x18],r9
ffffffff800025df:	48 89 55 d0          	mov    QWORD PTR [rbp-0x30],rdx
ffffffff800025e3:	ba 01 00 00 00       	mov    edx,0x1
ffffffff800025e8:	89 d8                	mov    eax,ebx
ffffffff800025ea:	f0 0f b1 15 a6 64 00 	lock cmpxchg DWORD PTR [rip+0x64a6],edx        # ffffffff80008a98 <screen_lock>
ffffffff800025f1:	00 
ffffffff800025f2:	75 f4                	jne    ffffffff800025e8 <_printf(char const*, ...)+0x28>
ffffffff800025f4:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffffffff800025f8:	48 8d 75 a8          	lea    rsi,[rbp-0x58]
ffffffff800025fc:	c7 45 a8 08 00 00 00 	mov    DWORD PTR [rbp-0x58],0x8
ffffffff80002603:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80002607:	48 8d 45 c0          	lea    rax,[rbp-0x40]
ffffffff8000260b:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8000260f:	e8 0c 00 00 00       	call   ffffffff80002620 <vprintf(char const*, __va_list_tag*)>
ffffffff80002614:	87 1d 7e 64 00 00    	xchg   DWORD PTR [rip+0x647e],ebx        # ffffffff80008a98 <screen_lock>
ffffffff8000261a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000261e:	c9                   	leave  
ffffffff8000261f:	c3                   	ret    

ffffffff80002620 <vprintf(char const*, __va_list_tag*)>:
ffffffff80002620:	f3 0f 1e fa          	endbr64 
ffffffff80002624:	55                   	push   rbp
ffffffff80002625:	48 89 e5             	mov    rbp,rsp
ffffffff80002628:	41 57                	push   r15
ffffffff8000262a:	41 56                	push   r14
ffffffff8000262c:	41 55                	push   r13
ffffffff8000262e:	41 54                	push   r12
ffffffff80002630:	53                   	push   rbx
ffffffff80002631:	48 89 fb             	mov    rbx,rdi
ffffffff80002634:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002638:	0f be 3f             	movsx  edi,BYTE PTR [rdi]
ffffffff8000263b:	40 84 ff             	test   dil,dil
ffffffff8000263e:	0f 84 dc 00 00 00    	je     ffffffff80002720 <vprintf(char const*, __va_list_tag*)+0x100>
ffffffff80002644:	49 be cd cc cc cc cc 	movabs r14,0xcccccccccccccccd
ffffffff8000264b:	cc cc cc 
ffffffff8000264e:	49 89 f4             	mov    r12,rsi
ffffffff80002651:	49 bd 67 66 66 66 66 	movabs r13,0x6666666666666667
ffffffff80002658:	66 66 66 
ffffffff8000265b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002660:	40 80 ff 25          	cmp    dil,0x25
ffffffff80002664:	0f 85 a6 02 00 00    	jne    ffffffff80002910 <vprintf(char const*, __va_list_tag*)+0x2f0>
ffffffff8000266a:	0f b6 53 01          	movzx  edx,BYTE PTR [rbx+0x1]
ffffffff8000266e:	8d 42 9d             	lea    eax,[rdx-0x63]
ffffffff80002671:	3c 15                	cmp    al,0x15
ffffffff80002673:	0f 87 67 03 00 00    	ja     ffffffff800029e0 <vprintf(char const*, __va_list_tag*)+0x3c0>
ffffffff80002679:	0f b6 c0             	movzx  eax,al
ffffffff8000267c:	3e ff 24 c5 00 5d 00 	notrack jmp QWORD PTR [rax*8-0x7fffa300]
ffffffff80002683:	80 
ffffffff80002684:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80002688:	41 8b 04 24          	mov    eax,DWORD PTR [r12]
ffffffff8000268c:	83 f8 2f             	cmp    eax,0x2f
ffffffff8000268f:	0f 87 bb 02 00 00    	ja     ffffffff80002950 <vprintf(char const*, __va_list_tag*)+0x330>
ffffffff80002695:	89 c2                	mov    edx,eax
ffffffff80002697:	83 c0 08             	add    eax,0x8
ffffffff8000269a:	49 03 54 24 10       	add    rdx,QWORD PTR [r12+0x10]
ffffffff8000269f:	41 89 04 24          	mov    DWORD PTR [r12],eax
ffffffff800026a3:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff800026a6:	48 85 d2             	test   rdx,rdx
ffffffff800026a9:	0f 84 bb 02 00 00    	je     ffffffff8000296a <vprintf(char const*, __va_list_tag*)+0x34a>
ffffffff800026af:	b8 3e 00 00 00       	mov    eax,0x3e
ffffffff800026b4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff800026b8:	48 89 d1             	mov    rcx,rdx
ffffffff800026bb:	4c 63 f8             	movsxd r15,eax
ffffffff800026be:	83 e1 0f             	and    ecx,0xf
ffffffff800026c1:	48 c1 ea 04          	shr    rdx,0x4
ffffffff800026c5:	0f be b9 d2 5c 00 80 	movsx  edi,BYTE PTR [rcx-0x7fffa32e]
ffffffff800026cc:	40 0f 95 c6          	setne  sil
ffffffff800026d0:	83 f8 01             	cmp    eax,0x1
ffffffff800026d3:	0f 95 c1             	setne  cl
ffffffff800026d6:	48 83 e8 01          	sub    rax,0x1
ffffffff800026da:	40 88 b8 a1 8a 00 80 	mov    BYTE PTR [rax-0x7fff755f],dil
ffffffff800026e1:	40 84 ce             	test   sil,cl
ffffffff800026e4:	75 d2                	jne    ffffffff800026b8 <vprintf(char const*, __va_list_tag*)+0x98>
ffffffff800026e6:	49 81 c7 a0 8a 00 80 	add    r15,0xffffffff80008aa0
ffffffff800026ed:	40 84 ff             	test   dil,dil
ffffffff800026f0:	74 1e                	je     ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff800026f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800026f8:	e8 e3 fb ff ff       	call   ffffffff800022e0 <putc(char)>
ffffffff800026fd:	41 0f be 7f 01       	movsx  edi,BYTE PTR [r15+0x1]
ffffffff80002702:	49 83 c7 01          	add    r15,0x1
ffffffff80002706:	40 84 ff             	test   dil,dil
ffffffff80002709:	75 ed                	jne    ffffffff800026f8 <vprintf(char const*, __va_list_tag*)+0xd8>
ffffffff8000270b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002710:	48 83 c3 02          	add    rbx,0x2
ffffffff80002714:	0f be 3b             	movsx  edi,BYTE PTR [rbx]
ffffffff80002717:	40 84 ff             	test   dil,dil
ffffffff8000271a:	0f 85 40 ff ff ff    	jne    ffffffff80002660 <vprintf(char const*, __va_list_tag*)+0x40>
ffffffff80002720:	48 83 c4 08          	add    rsp,0x8
ffffffff80002724:	31 c0                	xor    eax,eax
ffffffff80002726:	5b                   	pop    rbx
ffffffff80002727:	41 5c                	pop    r12
ffffffff80002729:	41 5d                	pop    r13
ffffffff8000272b:	41 5e                	pop    r14
ffffffff8000272d:	41 5f                	pop    r15
ffffffff8000272f:	5d                   	pop    rbp
ffffffff80002730:	c3                   	ret    
ffffffff80002731:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80002738:	41 8b 04 24          	mov    eax,DWORD PTR [r12]
ffffffff8000273c:	83 f8 2f             	cmp    eax,0x2f
ffffffff8000273f:	0f 87 db 01 00 00    	ja     ffffffff80002920 <vprintf(char const*, __va_list_tag*)+0x300>
ffffffff80002745:	89 c2                	mov    edx,eax
ffffffff80002747:	83 c0 08             	add    eax,0x8
ffffffff8000274a:	49 03 54 24 10       	add    rdx,QWORD PTR [r12+0x10]
ffffffff8000274f:	41 89 04 24          	mov    DWORD PTR [r12],eax
ffffffff80002753:	48 63 32             	movsxd rsi,DWORD PTR [rdx]
ffffffff80002756:	48 85 f6             	test   rsi,rsi
ffffffff80002759:	0f 84 db 01 00 00    	je     ffffffff8000293a <vprintf(char const*, __va_list_tag*)+0x31a>
ffffffff8000275f:	b9 3e 00 00 00       	mov    ecx,0x3e
ffffffff80002764:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80002768:	48 89 f0             	mov    rax,rsi
ffffffff8000276b:	48 89 f7             	mov    rdi,rsi
ffffffff8000276e:	4c 63 f9             	movsxd r15,ecx
ffffffff80002771:	49 f7 e6             	mul    r14
ffffffff80002774:	48 c1 ea 03          	shr    rdx,0x3
ffffffff80002778:	48 8d 04 92          	lea    rax,[rdx+rdx*4]
ffffffff8000277c:	48 01 c0             	add    rax,rax
ffffffff8000277f:	48 29 c7             	sub    rdi,rax
ffffffff80002782:	48 89 f0             	mov    rax,rsi
ffffffff80002785:	48 89 d6             	mov    rsi,rdx
ffffffff80002788:	48 83 f8 09          	cmp    rax,0x9
ffffffff8000278c:	0f be bf d2 5c 00 80 	movsx  edi,BYTE PTR [rdi-0x7fffa32e]
ffffffff80002793:	0f 97 c2             	seta   dl
ffffffff80002796:	83 f9 01             	cmp    ecx,0x1
ffffffff80002799:	0f 95 c0             	setne  al
ffffffff8000279c:	40 88 b9 a0 8a 00 80 	mov    BYTE PTR [rcx-0x7fff7560],dil
ffffffff800027a3:	48 83 e9 01          	sub    rcx,0x1
ffffffff800027a7:	84 c2                	test   dl,al
ffffffff800027a9:	75 bd                	jne    ffffffff80002768 <vprintf(char const*, __va_list_tag*)+0x148>
ffffffff800027ab:	49 81 c7 a0 8a 00 80 	add    r15,0xffffffff80008aa0
ffffffff800027b2:	40 84 ff             	test   dil,dil
ffffffff800027b5:	0f 84 55 ff ff ff    	je     ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff800027bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800027c0:	e8 1b fb ff ff       	call   ffffffff800022e0 <putc(char)>
ffffffff800027c5:	41 0f be 7f 01       	movsx  edi,BYTE PTR [r15+0x1]
ffffffff800027ca:	49 83 c7 01          	add    r15,0x1
ffffffff800027ce:	40 84 ff             	test   dil,dil
ffffffff800027d1:	75 ed                	jne    ffffffff800027c0 <vprintf(char const*, __va_list_tag*)+0x1a0>
ffffffff800027d3:	e9 38 ff ff ff       	jmp    ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff800027d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800027df:	00 
ffffffff800027e0:	41 8b 04 24          	mov    eax,DWORD PTR [r12]
ffffffff800027e4:	83 f8 2f             	cmp    eax,0x2f
ffffffff800027e7:	0f 87 93 01 00 00    	ja     ffffffff80002980 <vprintf(char const*, __va_list_tag*)+0x360>
ffffffff800027ed:	89 c2                	mov    edx,eax
ffffffff800027ef:	83 c0 08             	add    eax,0x8
ffffffff800027f2:	49 03 54 24 10       	add    rdx,QWORD PTR [r12+0x10]
ffffffff800027f7:	41 89 04 24          	mov    DWORD PTR [r12],eax
ffffffff800027fb:	4c 8b 3a             	mov    r15,QWORD PTR [rdx]
ffffffff800027fe:	41 0f be 3f          	movsx  edi,BYTE PTR [r15]
ffffffff80002802:	40 84 ff             	test   dil,dil
ffffffff80002805:	0f 84 05 ff ff ff    	je     ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff8000280b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002810:	e8 cb fa ff ff       	call   ffffffff800022e0 <putc(char)>
ffffffff80002815:	41 0f be 7f 01       	movsx  edi,BYTE PTR [r15+0x1]
ffffffff8000281a:	49 83 c7 01          	add    r15,0x1
ffffffff8000281e:	40 84 ff             	test   dil,dil
ffffffff80002821:	75 ed                	jne    ffffffff80002810 <vprintf(char const*, __va_list_tag*)+0x1f0>
ffffffff80002823:	e9 e8 fe ff ff       	jmp    ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff80002828:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000282f:	00 
ffffffff80002830:	41 8b 04 24          	mov    eax,DWORD PTR [r12]
ffffffff80002834:	83 f8 2f             	cmp    eax,0x2f
ffffffff80002837:	0f 87 5b 01 00 00    	ja     ffffffff80002998 <vprintf(char const*, __va_list_tag*)+0x378>
ffffffff8000283d:	89 c2                	mov    edx,eax
ffffffff8000283f:	83 c0 08             	add    eax,0x8
ffffffff80002842:	49 03 54 24 10       	add    rdx,QWORD PTR [r12+0x10]
ffffffff80002847:	41 89 04 24          	mov    DWORD PTR [r12],eax
ffffffff8000284b:	48 63 0a             	movsxd rcx,DWORD PTR [rdx]
ffffffff8000284e:	48 85 c9             	test   rcx,rcx
ffffffff80002851:	0f 84 5b 01 00 00    	je     ffffffff800029b2 <vprintf(char const*, __va_list_tag*)+0x392>
ffffffff80002857:	be 3e 00 00 00       	mov    esi,0x3e
ffffffff8000285c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
ffffffff80002860:	48 89 c8             	mov    rax,rcx
ffffffff80002863:	4c 63 fe             	movsxd r15,esi
ffffffff80002866:	49 f7 ed             	imul   r13
ffffffff80002869:	48 89 c8             	mov    rax,rcx
ffffffff8000286c:	48 c1 f8 3f          	sar    rax,0x3f
ffffffff80002870:	48 c1 fa 02          	sar    rdx,0x2
ffffffff80002874:	48 29 c2             	sub    rdx,rax
ffffffff80002877:	48 8d 04 92          	lea    rax,[rdx+rdx*4]
ffffffff8000287b:	48 01 c0             	add    rax,rax
ffffffff8000287e:	48 29 c1             	sub    rcx,rax
ffffffff80002881:	48 85 d2             	test   rdx,rdx
ffffffff80002884:	0f be b9 d2 5c 00 80 	movsx  edi,BYTE PTR [rcx-0x7fffa32e]
ffffffff8000288b:	48 89 d1             	mov    rcx,rdx
ffffffff8000288e:	0f 95 c2             	setne  dl
ffffffff80002891:	83 fe 01             	cmp    esi,0x1
ffffffff80002894:	0f 95 c0             	setne  al
ffffffff80002897:	48 83 ee 01          	sub    rsi,0x1
ffffffff8000289b:	40 88 be e1 8a 00 80 	mov    BYTE PTR [rsi-0x7fff751f],dil
ffffffff800028a2:	84 c2                	test   dl,al
ffffffff800028a4:	75 ba                	jne    ffffffff80002860 <vprintf(char const*, __va_list_tag*)+0x240>
ffffffff800028a6:	49 81 c7 e0 8a 00 80 	add    r15,0xffffffff80008ae0
ffffffff800028ad:	40 84 ff             	test   dil,dil
ffffffff800028b0:	0f 84 5a fe ff ff    	je     ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff800028b6:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800028bd:	00 00 00 
ffffffff800028c0:	e8 1b fa ff ff       	call   ffffffff800022e0 <putc(char)>
ffffffff800028c5:	41 0f be 7f 01       	movsx  edi,BYTE PTR [r15+0x1]
ffffffff800028ca:	49 83 c7 01          	add    r15,0x1
ffffffff800028ce:	40 84 ff             	test   dil,dil
ffffffff800028d1:	75 ed                	jne    ffffffff800028c0 <vprintf(char const*, __va_list_tag*)+0x2a0>
ffffffff800028d3:	e9 38 fe ff ff       	jmp    ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff800028d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800028df:	00 
ffffffff800028e0:	41 8b 04 24          	mov    eax,DWORD PTR [r12]
ffffffff800028e4:	83 f8 2f             	cmp    eax,0x2f
ffffffff800028e7:	0f 87 db 00 00 00    	ja     ffffffff800029c8 <vprintf(char const*, __va_list_tag*)+0x3a8>
ffffffff800028ed:	89 c2                	mov    edx,eax
ffffffff800028ef:	83 c0 08             	add    eax,0x8
ffffffff800028f2:	49 03 54 24 10       	add    rdx,QWORD PTR [r12+0x10]
ffffffff800028f7:	41 89 04 24          	mov    DWORD PTR [r12],eax
ffffffff800028fb:	0f be 3a             	movsx  edi,BYTE PTR [rdx]
ffffffff800028fe:	e8 dd f9 ff ff       	call   ffffffff800022e0 <putc(char)>
ffffffff80002903:	e9 08 fe ff ff       	jmp    ffffffff80002710 <vprintf(char const*, __va_list_tag*)+0xf0>
ffffffff80002908:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff8000290f:	00 
ffffffff80002910:	48 83 c3 01          	add    rbx,0x1
ffffffff80002914:	e8 c7 f9 ff ff       	call   ffffffff800022e0 <putc(char)>
ffffffff80002919:	e9 f6 fd ff ff       	jmp    ffffffff80002714 <vprintf(char const*, __va_list_tag*)+0xf4>
ffffffff8000291e:	66 90                	xchg   ax,ax
ffffffff80002920:	49 8b 54 24 08       	mov    rdx,QWORD PTR [r12+0x8]
ffffffff80002925:	48 8d 42 08          	lea    rax,[rdx+0x8]
ffffffff80002929:	49 89 44 24 08       	mov    QWORD PTR [r12+0x8],rax
ffffffff8000292e:	48 63 32             	movsxd rsi,DWORD PTR [rdx]
ffffffff80002931:	48 85 f6             	test   rsi,rsi
ffffffff80002934:	0f 85 25 fe ff ff    	jne    ffffffff8000275f <vprintf(char const*, __va_list_tag*)+0x13f>
ffffffff8000293a:	bf 30 00 00 00       	mov    edi,0x30
ffffffff8000293f:	49 c7 c7 de 5a 00 80 	mov    r15,0xffffffff80005ade
ffffffff80002946:	e9 75 fe ff ff       	jmp    ffffffff800027c0 <vprintf(char const*, __va_list_tag*)+0x1a0>
ffffffff8000294b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002950:	49 8b 54 24 08       	mov    rdx,QWORD PTR [r12+0x8]
ffffffff80002955:	48 8d 42 08          	lea    rax,[rdx+0x8]
ffffffff80002959:	49 89 44 24 08       	mov    QWORD PTR [r12+0x8],rax
ffffffff8000295e:	48 8b 12             	mov    rdx,QWORD PTR [rdx]
ffffffff80002961:	48 85 d2             	test   rdx,rdx
ffffffff80002964:	0f 85 45 fd ff ff    	jne    ffffffff800026af <vprintf(char const*, __va_list_tag*)+0x8f>
ffffffff8000296a:	bf 30 00 00 00       	mov    edi,0x30
ffffffff8000296f:	49 c7 c7 de 5a 00 80 	mov    r15,0xffffffff80005ade
ffffffff80002976:	e9 7d fd ff ff       	jmp    ffffffff800026f8 <vprintf(char const*, __va_list_tag*)+0xd8>
ffffffff8000297b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002980:	49 8b 54 24 08       	mov    rdx,QWORD PTR [r12+0x8]
ffffffff80002985:	48 8d 42 08          	lea    rax,[rdx+0x8]
ffffffff80002989:	49 89 44 24 08       	mov    QWORD PTR [r12+0x8],rax
ffffffff8000298e:	e9 68 fe ff ff       	jmp    ffffffff800027fb <vprintf(char const*, __va_list_tag*)+0x1db>
ffffffff80002993:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002998:	49 8b 54 24 08       	mov    rdx,QWORD PTR [r12+0x8]
ffffffff8000299d:	48 8d 42 08          	lea    rax,[rdx+0x8]
ffffffff800029a1:	49 89 44 24 08       	mov    QWORD PTR [r12+0x8],rax
ffffffff800029a6:	48 63 0a             	movsxd rcx,DWORD PTR [rdx]
ffffffff800029a9:	48 85 c9             	test   rcx,rcx
ffffffff800029ac:	0f 85 a5 fe ff ff    	jne    ffffffff80002857 <vprintf(char const*, __va_list_tag*)+0x237>
ffffffff800029b2:	bf 30 00 00 00       	mov    edi,0x30
ffffffff800029b7:	49 c7 c7 de 5a 00 80 	mov    r15,0xffffffff80005ade
ffffffff800029be:	e9 fd fe ff ff       	jmp    ffffffff800028c0 <vprintf(char const*, __va_list_tag*)+0x2a0>
ffffffff800029c3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800029c8:	49 8b 54 24 08       	mov    rdx,QWORD PTR [r12+0x8]
ffffffff800029cd:	48 8d 42 08          	lea    rax,[rdx+0x8]
ffffffff800029d1:	49 89 44 24 08       	mov    QWORD PTR [r12+0x8],rax
ffffffff800029d6:	e9 20 ff ff ff       	jmp    ffffffff800028fb <vprintf(char const*, __va_list_tag*)+0x2db>
ffffffff800029db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff800029e0:	0f be f2             	movsx  esi,dl
ffffffff800029e3:	48 c7 c7 e3 5c 00 80 	mov    rdi,0xffffffff80005ce3
ffffffff800029ea:	31 c0                	xor    eax,eax
ffffffff800029ec:	e8 cf fb ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800029f1:	fa                   	cli    
ffffffff800029f2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff800029f8:	f4                   	hlt    
ffffffff800029f9:	eb fd                	jmp    ffffffff800029f8 <vprintf(char const*, __va_list_tag*)+0x3d8>
ffffffff800029fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

ffffffff80002a00 <Screen::Initialize()>:
ffffffff80002a00:	f3 0f 1e fa          	endbr64 
ffffffff80002a04:	48 8b 05 fd 48 00 00 	mov    rax,QWORD PTR [rip+0x48fd]        # ffffffff80007308 <fb_req+0x28>
ffffffff80002a0b:	55                   	push   rbp
ffffffff80002a0c:	48 c7 c7 b0 5d 00 80 	mov    rdi,0xffffffff80005db0
ffffffff80002a13:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80002a17:	48 89 e5             	mov    rbp,rsp
ffffffff80002a1a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002a1d:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff80002a21:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80002a25:	48 89 05 5c 60 00 00 	mov    QWORD PTR [rip+0x605c],rax        # ffffffff80008a88 <chosen_fb>
ffffffff80002a2c:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff80002a2f:	31 c0                	xor    eax,eax
ffffffff80002a31:	48 89 35 58 60 00 00 	mov    QWORD PTR [rip+0x6058],rsi        # ffffffff80008a90 <fb_address>
ffffffff80002a38:	e8 83 fb ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002a3d:	48 c7 c7 d0 5d 00 80 	mov    rdi,0xffffffff80005dd0
ffffffff80002a44:	31 c0                	xor    eax,eax
ffffffff80002a46:	5d                   	pop    rbp
ffffffff80002a47:	e9 74 fb ff ff       	jmp    ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002a4c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80002a50 <_GLOBAL__sub_I_font8x8_basic>:
ffffffff80002a50:	f3 0f 1e fa          	endbr64 
ffffffff80002a54:	c7 05 3a 60 00 00 00 	mov    DWORD PTR [rip+0x603a],0x0        # ffffffff80008a98 <screen_lock>
ffffffff80002a5b:	00 00 00 
ffffffff80002a5e:	c3                   	ret    
ffffffff80002a5f:	90                   	nop

ffffffff80002a60 <Features::DetectAndInit()>:
ffffffff80002a60:	f3 0f 1e fa          	endbr64 
ffffffff80002a64:	55                   	push   rbp
ffffffff80002a65:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80002a6a:	48 89 e5             	mov    rbp,rsp
ffffffff80002a6d:	53                   	push   rbx
ffffffff80002a6e:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002a72:	0f a2                	cpuid  
ffffffff80002a74:	f7 c2 00 00 00 02    	test   edx,0x2000000
ffffffff80002a7a:	74 50                	je     ffffffff80002acc <Features::DetectAndInit()+0x6c>
ffffffff80002a7c:	81 e2 00 00 00 04    	and    edx,0x4000000
ffffffff80002a82:	74 77                	je     ffffffff80002afb <Features::DetectAndInit()+0x9b>
ffffffff80002a84:	83 e1 01             	and    ecx,0x1
ffffffff80002a87:	74 5a                	je     ffffffff80002ae3 <Features::DetectAndInit()+0x83>
ffffffff80002a89:	b8 07 00 00 00       	mov    eax,0x7
ffffffff80002a8e:	31 c9                	xor    ecx,ecx
ffffffff80002a90:	0f a2                	cpuid  
ffffffff80002a92:	0f 20 c0             	mov    rax,cr0
ffffffff80002a95:	83 e0 fb             	and    eax,0xfffffffb
ffffffff80002a98:	83 c8 02             	or     eax,0x2
ffffffff80002a9b:	0f 22 c0             	mov    cr0,rax
ffffffff80002a9e:	0f 20 e0             	mov    rax,cr4
ffffffff80002aa1:	0d 00 06 04 00       	or     eax,0x40600
ffffffff80002aa6:	0f 22 e0             	mov    cr4,rax
ffffffff80002aa9:	48 c7 c7 91 5e 00 80 	mov    rdi,0xffffffff80005e91
ffffffff80002ab0:	31 c0                	xor    eax,eax
ffffffff80002ab2:	e8 09 fb ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002ab7:	db e3                	fninit 
ffffffff80002ab9:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff80002abd:	48 c7 c7 9e 5e 00 80 	mov    rdi,0xffffffff80005e9e
ffffffff80002ac4:	31 c0                	xor    eax,eax
ffffffff80002ac6:	c9                   	leave  
ffffffff80002ac7:	e9 f4 fa ff ff       	jmp    ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002acc:	48 c7 c7 f8 5d 00 80 	mov    rdi,0xffffffff80005df8
ffffffff80002ad3:	31 c0                	xor    eax,eax
ffffffff80002ad5:	e8 e6 fa ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002ada:	fa                   	cli    
ffffffff80002adb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002ae0:	f4                   	hlt    
ffffffff80002ae1:	eb fd                	jmp    ffffffff80002ae0 <Features::DetectAndInit()+0x80>
ffffffff80002ae3:	48 c7 c7 60 5e 00 80 	mov    rdi,0xffffffff80005e60
ffffffff80002aea:	31 c0                	xor    eax,eax
ffffffff80002aec:	e8 cf fa ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002af1:	fa                   	cli    
ffffffff80002af2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80002af8:	f4                   	hlt    
ffffffff80002af9:	eb fd                	jmp    ffffffff80002af8 <Features::DetectAndInit()+0x98>
ffffffff80002afb:	48 c7 c7 28 5e 00 80 	mov    rdi,0xffffffff80005e28
ffffffff80002b02:	31 c0                	xor    eax,eax
ffffffff80002b04:	e8 b7 fa ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002b09:	fa                   	cli    
ffffffff80002b0a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80002b10:	f4                   	hlt    
ffffffff80002b11:	eb fd                	jmp    ffffffff80002b10 <Features::DetectAndInit()+0xb0>
ffffffff80002b13:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80002b1a:	00 00 00 
ffffffff80002b1d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80002b20 <GDT::SetupGdt(int)>:
ffffffff80002b20:	f3 0f 1e fa          	endbr64 
ffffffff80002b24:	55                   	push   rbp
ffffffff80002b25:	ba 01 00 00 00       	mov    edx,0x1
ffffffff80002b2a:	48 89 e5             	mov    rbp,rsp
ffffffff80002b2d:	41 55                	push   r13
ffffffff80002b2f:	45 31 ed             	xor    r13d,r13d
ffffffff80002b32:	41 54                	push   r12
ffffffff80002b34:	53                   	push   rbx
ffffffff80002b35:	48 63 df             	movsxd rbx,edi
ffffffff80002b38:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002b3c:	44 89 e8             	mov    eax,r13d
ffffffff80002b3f:	f0 0f b1 15 d9 67 00 	lock cmpxchg DWORD PTR [rip+0x67d9],edx        # ffffffff80009320 <gdt_lock>
ffffffff80002b46:	00 
ffffffff80002b47:	75 f3                	jne    ffffffff80002b3c <GDT::SetupGdt(int)+0x1c>
ffffffff80002b49:	bf 04 00 00 00       	mov    edi,0x4
ffffffff80002b4e:	e8 cd e0 ff ff       	call   ffffffff80000c20 <PhysicalMemory::alloc(unsigned long)>
ffffffff80002b53:	48 8b 15 6e 46 00 00 	mov    rdx,QWORD PTR [rip+0x466e]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80002b5a:	48 c7 c7 b0 5e 00 80 	mov    rdi,0xffffffff80005eb0
ffffffff80002b61:	48 03 42 08          	add    rax,QWORD PTR [rdx+0x8]
ffffffff80002b65:	48 89 c6             	mov    rsi,rax
ffffffff80002b68:	48 8d 04 5b          	lea    rax,[rbx+rbx*2]
ffffffff80002b6c:	48 8d 04 83          	lea    rax,[rbx+rax*4]
ffffffff80002b70:	4c 8d 24 c5 40 93 00 	lea    r12,[rax*8-0x7fff6cc0]
ffffffff80002b77:	80 
ffffffff80002b78:	48 8d 86 00 40 00 00 	lea    rax,[rsi+0x4000]
ffffffff80002b7f:	49 89 44 24 04       	mov    QWORD PTR [r12+0x4],rax
ffffffff80002b84:	b8 68 00 00 00       	mov    eax,0x68
ffffffff80002b89:	66 41 89 44 24 66    	mov    WORD PTR [r12+0x66],ax
ffffffff80002b8f:	31 c0                	xor    eax,eax
ffffffff80002b91:	e8 2a fa ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002b96:	31 d2                	xor    edx,edx
ffffffff80002b98:	c6 05 c6 cf 00 00 00 	mov    BYTE PTR [rip+0xcfc6],0x0        # ffffffff8000fb65 <gdt+0x5>
ffffffff80002b9f:	31 c9                	xor    ecx,ecx
ffffffff80002ba1:	66 89 15 ba cf 00 00 	mov    WORD PTR [rip+0xcfba],dx        # ffffffff8000fb62 <gdt+0x2>
ffffffff80002ba8:	31 f6                	xor    esi,esi
ffffffff80002baa:	45 31 c0             	xor    r8d,r8d
ffffffff80002bad:	45 31 d2             	xor    r10d,r10d
ffffffff80002bb0:	c6 05 ad cf 00 00 00 	mov    BYTE PTR [rip+0xcfad],0x0        # ffffffff8000fb64 <gdt+0x4>
ffffffff80002bb7:	bf ff ff ff ff       	mov    edi,0xffffffff
ffffffff80002bbc:	41 b9 ff ff ff ff    	mov    r9d,0xffffffff
ffffffff80002bc2:	41 bb ff ff ff ff    	mov    r11d,0xffffffff
ffffffff80002bc8:	c6 05 98 cf 00 00 00 	mov    BYTE PTR [rip+0xcf98],0x0        # ffffffff8000fb67 <gdt+0x7>
ffffffff80002bcf:	0f b6 05 90 cf 00 00 	movzx  eax,BYTE PTR [rip+0xcf90]        # ffffffff8000fb66 <gdt+0x6>
ffffffff80002bd6:	83 e0 0f             	and    eax,0xf
ffffffff80002bd9:	88 05 87 cf 00 00    	mov    BYTE PTR [rip+0xcf87],al        # ffffffff8000fb66 <gdt+0x6>
ffffffff80002bdf:	66 89 0d 7a cf 00 00 	mov    WORD PTR [rip+0xcf7a],cx        # ffffffff8000fb60 <gdt>
ffffffff80002be6:	0f b6 05 79 cf 00 00 	movzx  eax,BYTE PTR [rip+0xcf79]        # ffffffff8000fb66 <gdt+0x6>
ffffffff80002bed:	83 e0 f0             	and    eax,0xfffffff0
ffffffff80002bf0:	88 05 70 cf 00 00    	mov    BYTE PTR [rip+0xcf70],al        # ffffffff8000fb66 <gdt+0x6>
ffffffff80002bf6:	c6 05 70 cf 00 00 9a 	mov    BYTE PTR [rip+0xcf70],0x9a        # ffffffff8000fb6d <gdt+0xd>
ffffffff80002bfd:	66 89 35 66 cf 00 00 	mov    WORD PTR [rip+0xcf66],si        # ffffffff8000fb6a <gdt+0xa>
ffffffff80002c04:	c6 05 61 cf 00 00 00 	mov    BYTE PTR [rip+0xcf61],0x0        # ffffffff8000fb6c <gdt+0xc>
ffffffff80002c0b:	c6 05 5d cf 00 00 00 	mov    BYTE PTR [rip+0xcf5d],0x0        # ffffffff8000fb6f <gdt+0xf>
ffffffff80002c12:	0f b6 05 55 cf 00 00 	movzx  eax,BYTE PTR [rip+0xcf55]        # ffffffff8000fb6e <gdt+0xe>
ffffffff80002c19:	83 e0 0f             	and    eax,0xf
ffffffff80002c1c:	83 c8 a0             	or     eax,0xffffffa0
ffffffff80002c1f:	88 05 49 cf 00 00    	mov    BYTE PTR [rip+0xcf49],al        # ffffffff8000fb6e <gdt+0xe>
ffffffff80002c25:	66 89 3d 3c cf 00 00 	mov    WORD PTR [rip+0xcf3c],di        # ffffffff8000fb68 <gdt+0x8>
ffffffff80002c2c:	0f b6 05 3b cf 00 00 	movzx  eax,BYTE PTR [rip+0xcf3b]        # ffffffff8000fb6e <gdt+0xe>
ffffffff80002c33:	48 c7 c7 40 fb 00 80 	mov    rdi,0xffffffff8000fb40
ffffffff80002c3a:	83 c8 0f             	or     eax,0xf
ffffffff80002c3d:	88 05 2b cf 00 00    	mov    BYTE PTR [rip+0xcf2b],al        # ffffffff8000fb6e <gdt+0xe>
ffffffff80002c43:	c6 05 2b cf 00 00 92 	mov    BYTE PTR [rip+0xcf2b],0x92        # ffffffff8000fb75 <gdt+0x15>
ffffffff80002c4a:	66 44 89 05 20 cf 00 	mov    WORD PTR [rip+0xcf20],r8w        # ffffffff8000fb72 <gdt+0x12>
ffffffff80002c51:	00 
ffffffff80002c52:	c6 05 1b cf 00 00 00 	mov    BYTE PTR [rip+0xcf1b],0x0        # ffffffff8000fb74 <gdt+0x14>
ffffffff80002c59:	c6 05 17 cf 00 00 00 	mov    BYTE PTR [rip+0xcf17],0x0        # ffffffff8000fb77 <gdt+0x17>
ffffffff80002c60:	0f b6 15 0f cf 00 00 	movzx  edx,BYTE PTR [rip+0xcf0f]        # ffffffff8000fb76 <gdt+0x16>
ffffffff80002c67:	83 e2 0f             	and    edx,0xf
ffffffff80002c6a:	83 ca c0             	or     edx,0xffffffc0
ffffffff80002c6d:	88 15 03 cf 00 00    	mov    BYTE PTR [rip+0xcf03],dl        # ffffffff8000fb76 <gdt+0x16>
ffffffff80002c73:	66 44 89 0d f5 ce 00 	mov    WORD PTR [rip+0xcef5],r9w        # ffffffff8000fb70 <gdt+0x10>
ffffffff80002c7a:	00 
ffffffff80002c7b:	0f b6 05 f4 ce 00 00 	movzx  eax,BYTE PTR [rip+0xcef4]        # ffffffff8000fb76 <gdt+0x16>
ffffffff80002c82:	83 c8 0f             	or     eax,0xf
ffffffff80002c85:	88 05 eb ce 00 00    	mov    BYTE PTR [rip+0xceeb],al        # ffffffff8000fb76 <gdt+0x16>
ffffffff80002c8b:	c6 05 eb ce 00 00 fa 	mov    BYTE PTR [rip+0xceeb],0xfa        # ffffffff8000fb7d <gdt+0x1d>
ffffffff80002c92:	66 44 89 15 e0 ce 00 	mov    WORD PTR [rip+0xcee0],r10w        # ffffffff8000fb7a <gdt+0x1a>
ffffffff80002c99:	00 
ffffffff80002c9a:	c6 05 db ce 00 00 00 	mov    BYTE PTR [rip+0xcedb],0x0        # ffffffff8000fb7c <gdt+0x1c>
ffffffff80002ca1:	c6 05 d7 ce 00 00 00 	mov    BYTE PTR [rip+0xced7],0x0        # ffffffff8000fb7f <gdt+0x1f>
ffffffff80002ca8:	0f b6 15 cf ce 00 00 	movzx  edx,BYTE PTR [rip+0xcecf]        # ffffffff8000fb7e <gdt+0x1e>
ffffffff80002caf:	83 e2 0f             	and    edx,0xf
ffffffff80002cb2:	83 ca a0             	or     edx,0xffffffa0
ffffffff80002cb5:	88 15 c3 ce 00 00    	mov    BYTE PTR [rip+0xcec3],dl        # ffffffff8000fb7e <gdt+0x1e>
ffffffff80002cbb:	66 44 89 1d b5 ce 00 	mov    WORD PTR [rip+0xceb5],r11w        # ffffffff8000fb78 <gdt+0x18>
ffffffff80002cc2:	00 
ffffffff80002cc3:	0f b6 05 b4 ce 00 00 	movzx  eax,BYTE PTR [rip+0xceb4]        # ffffffff8000fb7e <gdt+0x1e>
ffffffff80002cca:	83 c8 0f             	or     eax,0xf
ffffffff80002ccd:	88 05 ab ce 00 00    	mov    BYTE PTR [rip+0xceab],al        # ffffffff8000fb7e <gdt+0x1e>
ffffffff80002cd3:	31 c0                	xor    eax,eax
ffffffff80002cd5:	c6 05 a9 ce 00 00 f2 	mov    BYTE PTR [rip+0xcea9],0xf2        # ffffffff8000fb85 <gdt+0x25>
ffffffff80002cdc:	66 89 05 9f ce 00 00 	mov    WORD PTR [rip+0xce9f],ax        # ffffffff8000fb82 <gdt+0x22>
ffffffff80002ce3:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff80002ce8:	c6 05 95 ce 00 00 00 	mov    BYTE PTR [rip+0xce95],0x0        # ffffffff8000fb84 <gdt+0x24>
ffffffff80002cef:	c6 05 91 ce 00 00 00 	mov    BYTE PTR [rip+0xce91],0x0        # ffffffff8000fb87 <gdt+0x27>
ffffffff80002cf6:	0f b6 15 89 ce 00 00 	movzx  edx,BYTE PTR [rip+0xce89]        # ffffffff8000fb86 <gdt+0x26>
ffffffff80002cfd:	83 e2 0f             	and    edx,0xf
ffffffff80002d00:	83 ca c0             	or     edx,0xffffffc0
ffffffff80002d03:	88 15 7d ce 00 00    	mov    BYTE PTR [rip+0xce7d],dl        # ffffffff8000fb86 <gdt+0x26>
ffffffff80002d09:	66 89 05 70 ce 00 00 	mov    WORD PTR [rip+0xce70],ax        # ffffffff8000fb80 <gdt+0x20>
ffffffff80002d10:	0f b6 05 6f ce 00 00 	movzx  eax,BYTE PTR [rip+0xce6f]        # ffffffff8000fb86 <gdt+0x26>
ffffffff80002d17:	83 c8 0f             	or     eax,0xf
ffffffff80002d1a:	88 05 66 ce 00 00    	mov    BYTE PTR [rip+0xce66],al        # ffffffff8000fb86 <gdt+0x26>
ffffffff80002d20:	c6 05 66 ce 00 00 89 	mov    BYTE PTR [rip+0xce66],0x89        # ffffffff8000fb8d <gdt+0x2d>
ffffffff80002d27:	0f b6 05 60 ce 00 00 	movzx  eax,BYTE PTR [rip+0xce60]        # ffffffff8000fb8e <gdt+0x2e>
ffffffff80002d2e:	83 e0 0f             	and    eax,0xf
ffffffff80002d31:	88 05 57 ce 00 00    	mov    BYTE PTR [rip+0xce57],al        # ffffffff8000fb8e <gdt+0x2e>
ffffffff80002d37:	4c 89 e0             	mov    rax,r12
ffffffff80002d3a:	c7 05 50 ce 00 00 00 	mov    DWORD PTR [rip+0xce50],0x0        # ffffffff8000fb94 <gdt+0x34>
ffffffff80002d41:	00 00 00 
ffffffff80002d44:	48 c1 e8 10          	shr    rax,0x10
ffffffff80002d48:	66 44 89 25 3a ce 00 	mov    WORD PTR [rip+0xce3a],r12w        # ffffffff8000fb8a <gdt+0x2a>
ffffffff80002d4f:	00 
ffffffff80002d50:	88 05 36 ce 00 00    	mov    BYTE PTR [rip+0xce36],al        # ffffffff8000fb8c <gdt+0x2c>
ffffffff80002d56:	4c 89 e0             	mov    rax,r12
ffffffff80002d59:	48 c1 e8 18          	shr    rax,0x18
ffffffff80002d5d:	88 05 2c ce 00 00    	mov    BYTE PTR [rip+0xce2c],al        # ffffffff8000fb8f <gdt+0x2f>
ffffffff80002d63:	4c 89 e0             	mov    rax,r12
ffffffff80002d66:	48 c1 e8 20          	shr    rax,0x20
ffffffff80002d6a:	89 05 20 ce 00 00    	mov    DWORD PTR [rip+0xce20],eax        # ffffffff8000fb90 <gdt+0x30>
ffffffff80002d70:	b8 68 00 00 00       	mov    eax,0x68
ffffffff80002d75:	66 89 05 0c ce 00 00 	mov    WORD PTR [rip+0xce0c],ax        # ffffffff8000fb88 <gdt+0x28>
ffffffff80002d7c:	0f b6 05 0b ce 00 00 	movzx  eax,BYTE PTR [rip+0xce0b]        # ffffffff8000fb8e <gdt+0x2e>
ffffffff80002d83:	83 e0 f0             	and    eax,0xfffffff0
ffffffff80002d86:	88 05 02 ce 00 00    	mov    BYTE PTR [rip+0xce02],al        # ffffffff8000fb8e <gdt+0x2e>
ffffffff80002d8c:	b8 37 00 00 00       	mov    eax,0x37
ffffffff80002d91:	48 c7 05 a6 cd 00 00 	mov    QWORD PTR [rip+0xcda6],0xffffffff8000fb60        # ffffffff8000fb42 <gdtr+0x2>
ffffffff80002d98:	60 fb 00 80 
ffffffff80002d9c:	66 89 05 9d cd 00 00 	mov    WORD PTR [rip+0xcd9d],ax        # ffffffff8000fb40 <gdtr>
ffffffff80002da3:	e8 c8 19 00 00       	call   ffffffff80004770 <LoadGdt>
ffffffff80002da8:	b8 28 00 00 00       	mov    eax,0x28
ffffffff80002dad:	0f 00 d8             	ltr    ax
ffffffff80002db0:	4c 89 24 dd 20 8b 00 	mov    QWORD PTR [rbx*8-0x7fff74e0],r12
ffffffff80002db7:	80 
ffffffff80002db8:	44 87 2d 61 65 00 00 	xchg   DWORD PTR [rip+0x6561],r13d        # ffffffff80009320 <gdt_lock>
ffffffff80002dbf:	48 83 c4 08          	add    rsp,0x8
ffffffff80002dc3:	5b                   	pop    rbx
ffffffff80002dc4:	41 5c                	pop    r12
ffffffff80002dc6:	41 5d                	pop    r13
ffffffff80002dc8:	5d                   	pop    rbp
ffffffff80002dc9:	c3                   	ret    
ffffffff80002dca:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80002dd0 <_GLOBAL__sub_I_stack_size>:
ffffffff80002dd0:	f3 0f 1e fa          	endbr64 
ffffffff80002dd4:	c7 05 42 65 00 00 00 	mov    DWORD PTR [rip+0x6542],0x0        # ffffffff80009320 <gdt_lock>
ffffffff80002ddb:	00 00 00 
ffffffff80002dde:	c3                   	ret    
ffffffff80002ddf:	90                   	nop

ffffffff80002de0 <FindTable(char const*)>:
ffffffff80002de0:	f3 0f 1e fa          	endbr64 
ffffffff80002de4:	48 8b 15 dd d5 00 00 	mov    rdx,QWORD PTR [rip+0xd5dd]        # ffffffff800103c8 <rsdt>
ffffffff80002deb:	8b 42 04             	mov    eax,DWORD PTR [rdx+0x4]
ffffffff80002dee:	48 83 e8 24          	sub    rax,0x24
ffffffff80002df2:	48 c1 e8 02          	shr    rax,0x2
ffffffff80002df6:	74 59                	je     ffffffff80002e51 <FindTable(char const*)+0x71>
ffffffff80002df8:	48 8b 0d c9 43 00 00 	mov    rcx,QWORD PTR [rip+0x43c9]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80002dff:	48 83 c2 24          	add    rdx,0x24
ffffffff80002e03:	0f b6 37             	movzx  esi,BYTE PTR [rdi]
ffffffff80002e06:	4c 8d 0c 82          	lea    r9,[rdx+rax*4]
ffffffff80002e0a:	4c 8b 41 08          	mov    r8,QWORD PTR [rcx+0x8]
ffffffff80002e0e:	66 90                	xchg   ax,ax
ffffffff80002e10:	8b 02                	mov    eax,DWORD PTR [rdx]
ffffffff80002e12:	4c 01 c0             	add    rax,r8
ffffffff80002e15:	40 38 30             	cmp    BYTE PTR [rax],sil
ffffffff80002e18:	75 2e                	jne    ffffffff80002e48 <FindTable(char const*)+0x68>
ffffffff80002e1a:	40 84 f6             	test   sil,sil
ffffffff80002e1d:	74 23                	je     ffffffff80002e42 <FindTable(char const*)+0x62>
ffffffff80002e1f:	0f b6 48 01          	movzx  ecx,BYTE PTR [rax+0x1]
ffffffff80002e23:	3a 4f 01             	cmp    cl,BYTE PTR [rdi+0x1]
ffffffff80002e26:	75 20                	jne    ffffffff80002e48 <FindTable(char const*)+0x68>
ffffffff80002e28:	84 c9                	test   cl,cl
ffffffff80002e2a:	74 16                	je     ffffffff80002e42 <FindTable(char const*)+0x62>
ffffffff80002e2c:	0f b6 48 02          	movzx  ecx,BYTE PTR [rax+0x2]
ffffffff80002e30:	3a 4f 02             	cmp    cl,BYTE PTR [rdi+0x2]
ffffffff80002e33:	75 13                	jne    ffffffff80002e48 <FindTable(char const*)+0x68>
ffffffff80002e35:	84 c9                	test   cl,cl
ffffffff80002e37:	74 09                	je     ffffffff80002e42 <FindTable(char const*)+0x62>
ffffffff80002e39:	0f b6 4f 03          	movzx  ecx,BYTE PTR [rdi+0x3]
ffffffff80002e3d:	38 48 03             	cmp    BYTE PTR [rax+0x3],cl
ffffffff80002e40:	75 06                	jne    ffffffff80002e48 <FindTable(char const*)+0x68>
ffffffff80002e42:	c3                   	ret    
ffffffff80002e43:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002e48:	48 83 c2 04          	add    rdx,0x4
ffffffff80002e4c:	49 39 d1             	cmp    r9,rdx
ffffffff80002e4f:	75 bf                	jne    ffffffff80002e10 <FindTable(char const*)+0x30>
ffffffff80002e51:	31 c0                	xor    eax,eax
ffffffff80002e53:	c3                   	ret    
ffffffff80002e54:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80002e5b:	00 00 00 00 
ffffffff80002e5f:	90                   	nop

ffffffff80002e60 <ParseAPIC()>:
ffffffff80002e60:	f3 0f 1e fa          	endbr64 
ffffffff80002e64:	48 8b 15 5d d5 00 00 	mov    rdx,QWORD PTR [rip+0xd55d]        # ffffffff800103c8 <rsdt>
ffffffff80002e6b:	8b 42 04             	mov    eax,DWORD PTR [rdx+0x4]
ffffffff80002e6e:	48 83 e8 24          	sub    rax,0x24
ffffffff80002e72:	48 c1 e8 02          	shr    rax,0x2
ffffffff80002e76:	0f 84 a1 00 00 00    	je     ffffffff80002f1d <ParseAPIC()+0xbd>
ffffffff80002e7c:	48 8b 0d 45 43 00 00 	mov    rcx,QWORD PTR [rip+0x4345]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80002e83:	48 83 c2 24          	add    rdx,0x24
ffffffff80002e87:	48 8d 34 82          	lea    rsi,[rdx+rax*4]
ffffffff80002e8b:	48 8b 49 08          	mov    rcx,QWORD PTR [rcx+0x8]
ffffffff80002e8f:	90                   	nop
ffffffff80002e90:	8b 02                	mov    eax,DWORD PTR [rdx]
ffffffff80002e92:	48 01 c8             	add    rax,rcx
ffffffff80002e95:	80 38 41             	cmp    BYTE PTR [rax],0x41
ffffffff80002e98:	75 76                	jne    ffffffff80002f10 <ParseAPIC()+0xb0>
ffffffff80002e9a:	80 78 01 50          	cmp    BYTE PTR [rax+0x1],0x50
ffffffff80002e9e:	75 70                	jne    ffffffff80002f10 <ParseAPIC()+0xb0>
ffffffff80002ea0:	80 78 02 49          	cmp    BYTE PTR [rax+0x2],0x49
ffffffff80002ea4:	75 6a                	jne    ffffffff80002f10 <ParseAPIC()+0xb0>
ffffffff80002ea6:	80 78 03 43          	cmp    BYTE PTR [rax+0x3],0x43
ffffffff80002eaa:	75 64                	jne    ffffffff80002f10 <ParseAPIC()+0xb0>
ffffffff80002eac:	8b 50 24             	mov    edx,DWORD PTR [rax+0x24]
ffffffff80002eaf:	8b 78 04             	mov    edi,DWORD PTR [rax+0x4]
ffffffff80002eb2:	89 15 08 d5 00 00    	mov    DWORD PTR [rip+0xd508],edx        # ffffffff800103c0 <lapic_addr>
ffffffff80002eb8:	ba 2c 00 00 00       	mov    edx,0x2c
ffffffff80002ebd:	83 ff 2c             	cmp    edi,0x2c
ffffffff80002ec0:	76 79                	jbe    ffffffff80002f3b <ParseAPIC()+0xdb>
ffffffff80002ec2:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
ffffffff80002ec6:	80 39 02             	cmp    BYTE PTR [rcx],0x2
ffffffff80002ec9:	0f b6 71 01          	movzx  esi,BYTE PTR [rcx+0x1]
ffffffff80002ecd:	75 61                	jne    ffffffff80002f30 <ParseAPIC()+0xd0>
ffffffff80002ecf:	8b 79 04             	mov    edi,DWORD PTR [rcx+0x4]
ffffffff80002ed2:	44 0f b6 41 03       	movzx  r8d,BYTE PTR [rcx+0x3]
ffffffff80002ed7:	48 01 f2             	add    rdx,rsi
ffffffff80002eda:	48 8b 0d bf cc 00 00 	mov    rcx,QWORD PTR [rip+0xccbf]        # ffffffff8000fba0 <numGSIs>
ffffffff80002ee1:	89 3c cd c4 fb 00 80 	mov    DWORD PTR [rcx*8-0x7fff043c],edi
ffffffff80002ee8:	4c 8d 49 01          	lea    r9,[rcx+0x1]
ffffffff80002eec:	44 88 04 cd c0 fb 00 	mov    BYTE PTR [rcx*8-0x7fff0440],r8b
ffffffff80002ef3:	80 
ffffffff80002ef4:	8b 48 04             	mov    ecx,DWORD PTR [rax+0x4]
ffffffff80002ef7:	4c 89 0d a2 cc 00 00 	mov    QWORD PTR [rip+0xcca2],r9        # ffffffff8000fba0 <numGSIs>
ffffffff80002efe:	48 89 cf             	mov    rdi,rcx
ffffffff80002f01:	48 39 ca             	cmp    rdx,rcx
ffffffff80002f04:	72 bc                	jb     ffffffff80002ec2 <ParseAPIC()+0x62>
ffffffff80002f06:	c3                   	ret    
ffffffff80002f07:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80002f0e:	00 00 
ffffffff80002f10:	48 83 c2 04          	add    rdx,0x4
ffffffff80002f14:	48 39 d6             	cmp    rsi,rdx
ffffffff80002f17:	0f 85 73 ff ff ff    	jne    ffffffff80002e90 <ParseAPIC()+0x30>
ffffffff80002f1d:	48 c7 c7 d1 5e 00 80 	mov    rdi,0xffffffff80005ed1
ffffffff80002f24:	31 c0                	xor    eax,eax
ffffffff80002f26:	e9 95 f6 ff ff       	jmp    ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002f2b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80002f30:	48 01 f2             	add    rdx,rsi
ffffffff80002f33:	89 f9                	mov    ecx,edi
ffffffff80002f35:	48 39 d1             	cmp    rcx,rdx
ffffffff80002f38:	77 88                	ja     ffffffff80002ec2 <ParseAPIC()+0x62>
ffffffff80002f3a:	c3                   	ret    
ffffffff80002f3b:	c3                   	ret    
ffffffff80002f3c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80002f40 <ACPI::ParseTables()>:
ffffffff80002f40:	f3 0f 1e fa          	endbr64 
ffffffff80002f44:	55                   	push   rbp
ffffffff80002f45:	48 c7 c7 ef 5e 00 80 	mov    rdi,0xffffffff80005eef
ffffffff80002f4c:	48 89 e5             	mov    rbp,rsp
ffffffff80002f4f:	53                   	push   rbx
ffffffff80002f50:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002f54:	48 8b 05 2d 48 00 00 	mov    rax,QWORD PTR [rip+0x482d]        # ffffffff80007788 <rsdp+0x28>
ffffffff80002f5b:	48 8b 58 08          	mov    rbx,QWORD PTR [rax+0x8]
ffffffff80002f5f:	31 c0                	xor    eax,eax
ffffffff80002f61:	48 89 de             	mov    rsi,rbx
ffffffff80002f64:	e8 57 f6 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002f69:	80 3b 52             	cmp    BYTE PTR [rbx],0x52
ffffffff80002f6c:	75 52                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f6e:	80 7b 01 53          	cmp    BYTE PTR [rbx+0x1],0x53
ffffffff80002f72:	75 4c                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f74:	80 7b 02 44          	cmp    BYTE PTR [rbx+0x2],0x44
ffffffff80002f78:	75 46                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f7a:	80 7b 03 20          	cmp    BYTE PTR [rbx+0x3],0x20
ffffffff80002f7e:	75 40                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f80:	80 7b 04 50          	cmp    BYTE PTR [rbx+0x4],0x50
ffffffff80002f84:	75 3a                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f86:	80 7b 05 54          	cmp    BYTE PTR [rbx+0x5],0x54
ffffffff80002f8a:	75 34                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f8c:	80 7b 06 52          	cmp    BYTE PTR [rbx+0x6],0x52
ffffffff80002f90:	75 2e                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f92:	80 7b 07 20          	cmp    BYTE PTR [rbx+0x7],0x20
ffffffff80002f96:	75 28                	jne    ffffffff80002fc0 <ACPI::ParseTables()+0x80>
ffffffff80002f98:	48 8b 15 29 42 00 00 	mov    rdx,QWORD PTR [rip+0x4229]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80002f9f:	8b 43 10             	mov    eax,DWORD PTR [rbx+0x10]
ffffffff80002fa2:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff80002fa6:	48 03 42 08          	add    rax,QWORD PTR [rdx+0x8]
ffffffff80002faa:	48 89 05 17 d4 00 00 	mov    QWORD PTR [rip+0xd417],rax        # ffffffff800103c8 <rsdt>
ffffffff80002fb1:	c9                   	leave  
ffffffff80002fb2:	e9 a9 fe ff ff       	jmp    ffffffff80002e60 <ParseAPIC()>
ffffffff80002fb7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80002fbe:	00 00 
ffffffff80002fc0:	48 c7 c7 00 5f 00 80 	mov    rdi,0xffffffff80005f00
ffffffff80002fc7:	31 c0                	xor    eax,eax
ffffffff80002fc9:	e8 f2 f5 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80002fce:	fa                   	cli    
ffffffff80002fcf:	f4                   	hlt    
ffffffff80002fd0:	eb fd                	jmp    ffffffff80002fcf <ACPI::ParseTables()+0x8f>
ffffffff80002fd2:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff80002fd9:	00 00 00 
ffffffff80002fdc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80002fe0 <LAPIC::Initialize()>:
ffffffff80002fe0:	f3 0f 1e fa          	endbr64 
ffffffff80002fe4:	b9 1b 00 00 00       	mov    ecx,0x1b
ffffffff80002fe9:	0f 32                	rdmsr  
ffffffff80002feb:	48 c1 e2 20          	shl    rdx,0x20
ffffffff80002fef:	89 c0                	mov    eax,eax
ffffffff80002ff1:	48 09 c2             	or     rdx,rax
ffffffff80002ff4:	48 89 d0             	mov    rax,rdx
ffffffff80002ff7:	48 c1 ea 20          	shr    rdx,0x20
ffffffff80002ffb:	80 cc 08             	or     ah,0x8
ffffffff80002ffe:	0f 30                	wrmsr  
ffffffff80003000:	48 8b 05 c1 41 00 00 	mov    rax,QWORD PTR [rip+0x41c1]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80003007:	48 8b 15 b2 d3 00 00 	mov    rdx,QWORD PTR [rip+0xd3b2]        # ffffffff800103c0 <lapic_addr>
ffffffff8000300e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003012:	c7 84 02 f0 00 00 00 	mov    DWORD PTR [rdx+rax*1+0xf0],0x1ff
ffffffff80003019:	ff 01 00 00 
ffffffff8000301d:	c3                   	ret    
ffffffff8000301e:	66 90                	xchg   ax,ax

ffffffff80003020 <LAPIC::WriteReg(unsigned char, unsigned int)>:
ffffffff80003020:	f3 0f 1e fa          	endbr64 
ffffffff80003024:	48 8b 05 9d 41 00 00 	mov    rax,QWORD PTR [rip+0x419d]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff8000302b:	40 0f b6 ff          	movzx  edi,dil
ffffffff8000302f:	48 03 78 08          	add    rdi,QWORD PTR [rax+0x8]
ffffffff80003033:	48 03 3d 86 d3 00 00 	add    rdi,QWORD PTR [rip+0xd386]        # ffffffff800103c0 <lapic_addr>
ffffffff8000303a:	89 37                	mov    DWORD PTR [rdi],esi
ffffffff8000303c:	c3                   	ret    
ffffffff8000303d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80003040 <LAPIC::ReadReg(unsigned char)>:
ffffffff80003040:	f3 0f 1e fa          	endbr64 
ffffffff80003044:	48 8b 05 7d 41 00 00 	mov    rax,QWORD PTR [rip+0x417d]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff8000304b:	40 0f b6 ff          	movzx  edi,dil
ffffffff8000304f:	48 03 78 08          	add    rdi,QWORD PTR [rax+0x8]
ffffffff80003053:	48 03 3d 66 d3 00 00 	add    rdi,QWORD PTR [rip+0xd366]        # ffffffff800103c0 <lapic_addr>
ffffffff8000305a:	8b 07                	mov    eax,DWORD PTR [rdi]
ffffffff8000305c:	c3                   	ret    
ffffffff8000305d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80003060 <IOAPIC::ReadReg(unsigned int)>:
ffffffff80003060:	f3 0f 1e fa          	endbr64 
ffffffff80003064:	48 8b 05 5d 41 00 00 	mov    rax,QWORD PTR [rip+0x415d]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff8000306b:	ba 00 00 c0 fe       	mov    edx,0xfec00000
ffffffff80003070:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003074:	89 3c 10             	mov    DWORD PTR [rax+rdx*1],edi
ffffffff80003077:	8b 44 10 10          	mov    eax,DWORD PTR [rax+rdx*1+0x10]
ffffffff8000307b:	c3                   	ret    
ffffffff8000307c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff80003080 <IOAPIC::WriteReg(unsigned int, unsigned int)>:
ffffffff80003080:	f3 0f 1e fa          	endbr64 
ffffffff80003084:	48 8b 05 3d 41 00 00 	mov    rax,QWORD PTR [rip+0x413d]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff8000308b:	ba 00 00 c0 fe       	mov    edx,0xfec00000
ffffffff80003090:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003094:	89 3c 10             	mov    DWORD PTR [rax+rdx*1],edi
ffffffff80003097:	89 74 10 10          	mov    DWORD PTR [rax+rdx*1+0x10],esi
ffffffff8000309b:	c3                   	ret    
ffffffff8000309c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

ffffffff800030a0 <RedirectGSI(unsigned int, unsigned char)>:
ffffffff800030a0:	f3 0f 1e fa          	endbr64 
ffffffff800030a4:	55                   	push   rbp
ffffffff800030a5:	89 fa                	mov    edx,edi
ffffffff800030a7:	31 c0                	xor    eax,eax
ffffffff800030a9:	48 89 e5             	mov    rbp,rsp
ffffffff800030ac:	41 54                	push   r12
ffffffff800030ae:	41 89 fc             	mov    r12d,edi
ffffffff800030b1:	48 c7 c7 1f 5f 00 80 	mov    rdi,0xffffffff80005f1f
ffffffff800030b8:	53                   	push   rbx
ffffffff800030b9:	40 0f b6 de          	movzx  ebx,sil
ffffffff800030bd:	89 de                	mov    esi,ebx
ffffffff800030bf:	e8 fc f4 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800030c4:	47 8d 44 24 10       	lea    r8d,[r12+r12*1+0x10]
ffffffff800030c9:	bf 00 00 c0 fe       	mov    edi,0xfec00000
ffffffff800030ce:	48 8b 05 f3 40 00 00 	mov    rax,QWORD PTR [rip+0x40f3]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff800030d5:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
ffffffff800030d9:	b8 10 00 c0 fe       	mov    eax,0xfec00010
ffffffff800030de:	8b 0c 30             	mov    ecx,DWORD PTR [rax+rsi*1]
ffffffff800030e1:	8b 14 30             	mov    edx,DWORD PTR [rax+rsi*1]
ffffffff800030e4:	44 89 04 3e          	mov    DWORD PTR [rsi+rdi*1],r8d
ffffffff800030e8:	c1 e1 18             	shl    ecx,0x18
ffffffff800030eb:	81 e2 00 f0 fe 00    	and    edx,0xfef000
ffffffff800030f1:	09 ca                	or     edx,ecx
ffffffff800030f3:	09 d3                	or     ebx,edx
ffffffff800030f5:	89 1c 30             	mov    DWORD PTR [rax+rsi*1],ebx
ffffffff800030f8:	5b                   	pop    rbx
ffffffff800030f9:	41 5c                	pop    r12
ffffffff800030fb:	5d                   	pop    rbp
ffffffff800030fc:	c3                   	ret    
ffffffff800030fd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80003100 <IOAPIC::Initialize()>:
ffffffff80003100:	f3 0f 1e fa          	endbr64 
ffffffff80003104:	48 83 3d 94 ca 00 00 	cmp    QWORD PTR [rip+0xca94],0x0        # ffffffff8000fba0 <numGSIs>
ffffffff8000310b:	00 
ffffffff8000310c:	0f 84 96 00 00 00    	je     ffffffff800031a8 <IOAPIC::Initialize()+0xa8>
ffffffff80003112:	55                   	push   rbp
ffffffff80003113:	48 89 e5             	mov    rbp,rsp
ffffffff80003116:	41 57                	push   r15
ffffffff80003118:	41 56                	push   r14
ffffffff8000311a:	41 55                	push   r13
ffffffff8000311c:	41 bd 00 00 c0 fe    	mov    r13d,0xfec00000
ffffffff80003122:	41 54                	push   r12
ffffffff80003124:	41 bc 10 00 c0 fe    	mov    r12d,0xfec00010
ffffffff8000312a:	53                   	push   rbx
ffffffff8000312b:	31 db                	xor    ebx,ebx
ffffffff8000312d:	48 83 ec 08          	sub    rsp,0x8
ffffffff80003131:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff80003138:	44 8b 3c dd c4 fb 00 	mov    r15d,DWORD PTR [rbx*8-0x7fff043c]
ffffffff8000313f:	80 
ffffffff80003140:	48 c7 c7 1f 5f 00 80 	mov    rdi,0xffffffff80005f1f
ffffffff80003147:	31 c0                	xor    eax,eax
ffffffff80003149:	44 0f b6 34 dd c0 fb 	movzx  r14d,BYTE PTR [rbx*8-0x7fff0440]
ffffffff80003150:	00 80 
ffffffff80003152:	48 83 c3 01          	add    rbx,0x1
ffffffff80003156:	44 89 f6             	mov    esi,r14d
ffffffff80003159:	44 89 fa             	mov    edx,r15d
ffffffff8000315c:	e8 5f f4 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80003161:	48 8b 05 60 40 00 00 	mov    rax,QWORD PTR [rip+0x4060]        # ffffffff800071c8 <hhdm_req+0x28>
ffffffff80003168:	43 8d 7c 3f 10       	lea    edi,[r15+r15*1+0x10]
ffffffff8000316d:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
ffffffff80003171:	4a 8d 14 26          	lea    rdx,[rsi+r12*1]
ffffffff80003175:	8b 0a                	mov    ecx,DWORD PTR [rdx]
ffffffff80003177:	8b 02                	mov    eax,DWORD PTR [rdx]
ffffffff80003179:	42 89 3c 2e          	mov    DWORD PTR [rsi+r13*1],edi
ffffffff8000317d:	c1 e1 18             	shl    ecx,0x18
ffffffff80003180:	25 00 f0 fe 00       	and    eax,0xfef000
ffffffff80003185:	09 c8                	or     eax,ecx
ffffffff80003187:	41 09 c6             	or     r14d,eax
ffffffff8000318a:	48 39 1d 0f ca 00 00 	cmp    QWORD PTR [rip+0xca0f],rbx        # ffffffff8000fba0 <numGSIs>
ffffffff80003191:	44 89 32             	mov    DWORD PTR [rdx],r14d
ffffffff80003194:	77 a2                	ja     ffffffff80003138 <IOAPIC::Initialize()+0x38>
ffffffff80003196:	48 83 c4 08          	add    rsp,0x8
ffffffff8000319a:	5b                   	pop    rbx
ffffffff8000319b:	41 5c                	pop    r12
ffffffff8000319d:	41 5d                	pop    r13
ffffffff8000319f:	41 5e                	pop    r14
ffffffff800031a1:	41 5f                	pop    r15
ffffffff800031a3:	5d                   	pop    rbp
ffffffff800031a4:	c3                   	ret    
ffffffff800031a5:	0f 1f 00             	nop    DWORD PTR [rax]
ffffffff800031a8:	c3                   	ret    
ffffffff800031a9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

ffffffff800031b0 <start_ap(limine_smp_info*)>:
ffffffff800031b0:	f3 0f 1e fa          	endbr64 
ffffffff800031b4:	55                   	push   rbp
ffffffff800031b5:	48 89 e5             	mov    rbp,rsp
ffffffff800031b8:	53                   	push   rbx
ffffffff800031b9:	48 89 fb             	mov    rbx,rdi
ffffffff800031bc:	48 83 ec 08          	sub    rsp,0x8
ffffffff800031c0:	8b 3f                	mov    edi,DWORD PTR [rdi]
ffffffff800031c2:	e8 59 f9 ff ff       	call   ffffffff80002b20 <GDT::SetupGdt(int)>
ffffffff800031c7:	e8 e4 e0 ff ff       	call   ffffffff800012b0 <VirtualMemory::SwapToKernelPT()>
ffffffff800031cc:	8b 33                	mov    esi,DWORD PTR [rbx]
ffffffff800031ce:	48 c7 c7 39 5f 00 80 	mov    rdi,0xffffffff80005f39
ffffffff800031d5:	31 c0                	xor    eax,eax
ffffffff800031d7:	e8 e4 f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800031dc:	31 d2                	xor    edx,edx
ffffffff800031de:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff800031e3:	89 d0                	mov    eax,edx
ffffffff800031e5:	f0 0f b1 0d f3 d1 00 	lock cmpxchg DWORD PTR [rip+0xd1f3],ecx        # ffffffff800103e0 <cpu_lock>
ffffffff800031ec:	00 
ffffffff800031ed:	75 f4                	jne    ffffffff800031e3 <start_ap(limine_smp_info*)+0x33>
ffffffff800031ef:	48 83 05 e1 45 00 00 	add    QWORD PTR [rip+0x45e1],0x1        # ffffffff800077d8 <cpus_arrived>
ffffffff800031f6:	01 
ffffffff800031f7:	87 15 e3 d1 00 00    	xchg   DWORD PTR [rip+0xd1e3],edx        # ffffffff800103e0 <cpu_lock>
ffffffff800031fd:	fa                   	cli    
ffffffff800031fe:	66 90                	xchg   ax,ax
ffffffff80003200:	f4                   	hlt    
ffffffff80003201:	eb fd                	jmp    ffffffff80003200 <start_ap(limine_smp_info*)+0x50>
ffffffff80003203:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000320a:	00 00 00 00 
ffffffff8000320e:	66 90                	xchg   ax,ax

ffffffff80003210 <kernel_entry>:
ffffffff80003210:	f3 0f 1e fa          	endbr64 
ffffffff80003214:	55                   	push   rbp
ffffffff80003215:	48 89 e5             	mov    rbp,rsp
ffffffff80003218:	e8 e3 f7 ff ff       	call   ffffffff80002a00 <Screen::Initialize()>
ffffffff8000321d:	48 c7 c7 00 60 00 80 	mov    rdi,0xffffffff80006000
ffffffff80003224:	31 c0                	xor    eax,eax
ffffffff80003226:	e8 95 f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff8000322b:	48 c7 c2 4f 5f 00 80 	mov    rdx,0xffffffff80005f4f
ffffffff80003232:	48 c7 c6 56 5f 00 80 	mov    rsi,0xffffffff80005f56
ffffffff80003239:	31 c0                	xor    eax,eax
ffffffff8000323b:	48 c7 c7 5c 5f 00 80 	mov    rdi,0xffffffff80005f5c
ffffffff80003242:	e8 79 f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80003247:	e8 14 ee ff ff       	call   ffffffff80002060 <IDT::Initialize()>
ffffffff8000324c:	48 c7 c7 58 60 00 80 	mov    rdi,0xffffffff80006058
ffffffff80003253:	31 c0                	xor    eax,eax
ffffffff80003255:	e8 66 f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff8000325a:	e8 91 ee ff ff       	call   ffffffff800020f0 <PIC::RemapAndDisable()>
ffffffff8000325f:	48 c7 c7 80 60 00 80 	mov    rdi,0xffffffff80006080
ffffffff80003266:	31 c0                	xor    eax,eax
ffffffff80003268:	e8 53 f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff8000326d:	48 c7 c7 74 5f 00 80 	mov    rdi,0xffffffff80005f74
ffffffff80003274:	31 c0                	xor    eax,eax
ffffffff80003276:	e8 45 f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff8000327b:	e8 30 d7 ff ff       	call   ffffffff800009b0 <PhysicalMemory::Initialize()>
ffffffff80003280:	31 ff                	xor    edi,edi
ffffffff80003282:	e8 99 f8 ff ff       	call   ffffffff80002b20 <GDT::SetupGdt(int)>
ffffffff80003287:	48 c7 c7 a8 60 00 80 	mov    rdi,0xffffffff800060a8
ffffffff8000328e:	31 c0                	xor    eax,eax
ffffffff80003290:	e8 2b f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff80003295:	48 c7 c7 92 5f 00 80 	mov    rdi,0xffffffff80005f92
ffffffff8000329c:	31 c0                	xor    eax,eax
ffffffff8000329e:	e8 1d f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800032a3:	e8 58 de ff ff       	call   ffffffff80001100 <VirtualMemory::Initialize()>
ffffffff800032a8:	48 c7 c7 af 5f 00 80 	mov    rdi,0xffffffff80005faf
ffffffff800032af:	31 c0                	xor    eax,eax
ffffffff800032b1:	e8 0a f3 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800032b6:	e8 85 fc ff ff       	call   ffffffff80002f40 <ACPI::ParseTables()>
ffffffff800032bb:	48 c7 c7 c4 5f 00 80 	mov    rdi,0xffffffff80005fc4
ffffffff800032c2:	31 c0                	xor    eax,eax
ffffffff800032c4:	e8 f7 f2 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800032c9:	e8 12 fd ff ff       	call   ffffffff80002fe0 <LAPIC::Initialize()>
ffffffff800032ce:	e8 2d fe ff ff       	call   ffffffff80003100 <IOAPIC::Initialize()>
ffffffff800032d3:	31 c0                	xor    eax,eax
ffffffff800032d5:	48 c7 c7 d7 5f 00 80 	mov    rdi,0xffffffff80005fd7
ffffffff800032dc:	e8 df f2 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff800032e1:	48 8b 05 e0 44 00 00 	mov    rax,QWORD PTR [rip+0x44e0]        # ffffffff800077c8 <smp_req+0x28>
ffffffff800032e8:	48 83 78 10 00       	cmp    QWORD PTR [rax+0x10],0x0
ffffffff800032ed:	74 40                	je     ffffffff8000332f <kernel_entry+0x11f>
ffffffff800032ef:	31 c0                	xor    eax,eax
ffffffff800032f1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
ffffffff800032f8:	48 8b 15 c9 44 00 00 	mov    rdx,QWORD PTR [rip+0x44c9]        # ffffffff800077c8 <smp_req+0x28>
ffffffff800032ff:	48 8b 0d c2 44 00 00 	mov    rcx,QWORD PTR [rip+0x44c2]        # ffffffff800077c8 <smp_req+0x28>
ffffffff80003306:	48 8b 52 18          	mov    rdx,QWORD PTR [rdx+0x18]
ffffffff8000330a:	8b 71 0c             	mov    esi,DWORD PTR [rcx+0xc]
ffffffff8000330d:	48 8b 14 c2          	mov    rdx,QWORD PTR [rdx+rax*8]
ffffffff80003311:	39 72 04             	cmp    DWORD PTR [rdx+0x4],esi
ffffffff80003314:	74 6a                	je     ffffffff80003380 <kernel_entry+0x170>
ffffffff80003316:	48 c7 42 10 b0 31 00 	mov    QWORD PTR [rdx+0x10],0xffffffff800031b0
ffffffff8000331d:	80 
ffffffff8000331e:	48 8b 15 a3 44 00 00 	mov    rdx,QWORD PTR [rip+0x44a3]        # ffffffff800077c8 <smp_req+0x28>
ffffffff80003325:	48 83 c0 01          	add    rax,0x1
ffffffff80003329:	48 3b 42 10          	cmp    rax,QWORD PTR [rdx+0x10]
ffffffff8000332d:	72 c9                	jb     ffffffff800032f8 <kernel_entry+0xe8>
ffffffff8000332f:	48 8b 05 92 44 00 00 	mov    rax,QWORD PTR [rip+0x4492]        # ffffffff800077c8 <smp_req+0x28>
ffffffff80003336:	48 8b 0d 9b 44 00 00 	mov    rcx,QWORD PTR [rip+0x449b]        # ffffffff800077d8 <cpus_arrived>
ffffffff8000333d:	48 39 48 10          	cmp    QWORD PTR [rax+0x10],rcx
ffffffff80003341:	76 1b                	jbe    ffffffff8000335e <kernel_entry+0x14e>
ffffffff80003343:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80003348:	f3 90                	pause  
ffffffff8000334a:	48 8b 05 77 44 00 00 	mov    rax,QWORD PTR [rip+0x4477]        # ffffffff800077c8 <smp_req+0x28>
ffffffff80003351:	48 8b 3d 80 44 00 00 	mov    rdi,QWORD PTR [rip+0x4480]        # ffffffff800077d8 <cpus_arrived>
ffffffff80003358:	48 39 78 10          	cmp    QWORD PTR [rax+0x10],rdi
ffffffff8000335c:	77 ea                	ja     ffffffff80003348 <kernel_entry+0x138>
ffffffff8000335e:	48 c7 c7 ea 5f 00 80 	mov    rdi,0xffffffff80005fea
ffffffff80003365:	31 c0                	xor    eax,eax
ffffffff80003367:	e8 54 f2 ff ff       	call   ffffffff800025c0 <_printf(char const*, ...)>
ffffffff8000336c:	e8 3d e9 ff ff       	call   ffffffff80001cae <IntelGpu::Initialize()>
ffffffff80003371:	fa                   	cli    
ffffffff80003372:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
ffffffff80003378:	f4                   	hlt    
ffffffff80003379:	eb fd                	jmp    ffffffff80003378 <kernel_entry+0x168>
ffffffff8000337b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
ffffffff80003380:	48 8b 15 41 44 00 00 	mov    rdx,QWORD PTR [rip+0x4441]        # ffffffff800077c8 <smp_req+0x28>
ffffffff80003387:	48 83 c0 01          	add    rax,0x1
ffffffff8000338b:	48 39 42 10          	cmp    QWORD PTR [rdx+0x10],rax
ffffffff8000338f:	0f 87 63 ff ff ff    	ja     ffffffff800032f8 <kernel_entry+0xe8>
ffffffff80003395:	eb 98                	jmp    ffffffff8000332f <kernel_entry+0x11f>
ffffffff80003397:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
ffffffff8000339e:	00 00 

ffffffff800033a0 <_GLOBAL__sub_I_kernel_stack>:
ffffffff800033a0:	f3 0f 1e fa          	endbr64 
ffffffff800033a4:	c7 05 32 d0 00 00 00 	mov    DWORD PTR [rip+0xd032],0x0        # ffffffff800103e0 <cpu_lock>
ffffffff800033ab:	00 00 00 
ffffffff800033ae:	c3                   	ret    
ffffffff800033af:	90                   	nop

ffffffff800033b0 <EnableAvx>:
ffffffff800033b0:	50                   	push   rax
ffffffff800033b1:	51                   	push   rcx
ffffffff800033b2:	52                   	push   rdx
ffffffff800033b3:	48 31 c9             	xor    rcx,rcx
ffffffff800033b6:	0f 01 d0             	xgetbv 
ffffffff800033b9:	83 c8 07             	or     eax,0x7
ffffffff800033bc:	0f 01 d1             	xsetbv 
ffffffff800033bf:	5a                   	pop    rdx
ffffffff800033c0:	59                   	pop    rcx
ffffffff800033c1:	58                   	pop    rax
ffffffff800033c2:	c3                   	ret    
ffffffff800033c3:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800033ca:	00 00 00 
ffffffff800033cd:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff800033d0 <isr_common>:
ffffffff800033d0:	50                   	push   rax
ffffffff800033d1:	53                   	push   rbx
ffffffff800033d2:	51                   	push   rcx
ffffffff800033d3:	52                   	push   rdx
ffffffff800033d4:	56                   	push   rsi
ffffffff800033d5:	57                   	push   rdi
ffffffff800033d6:	55                   	push   rbp
ffffffff800033d7:	41 50                	push   r8
ffffffff800033d9:	41 51                	push   r9
ffffffff800033db:	41 52                	push   r10
ffffffff800033dd:	41 53                	push   r11
ffffffff800033df:	41 54                	push   r12
ffffffff800033e1:	41 55                	push   r13
ffffffff800033e3:	41 56                	push   r14
ffffffff800033e5:	41 57                	push   r15
ffffffff800033e7:	48 89 e7             	mov    rdi,rsp
ffffffff800033ea:	e8 81 eb ff ff       	call   ffffffff80001f70 <interrupt_handler>
ffffffff800033ef:	48 89 c4             	mov    rsp,rax
ffffffff800033f2:	41 5f                	pop    r15
ffffffff800033f4:	41 5e                	pop    r14
ffffffff800033f6:	41 5d                	pop    r13
ffffffff800033f8:	41 5c                	pop    r12
ffffffff800033fa:	41 5b                	pop    r11
ffffffff800033fc:	41 5a                	pop    r10
ffffffff800033fe:	41 59                	pop    r9
ffffffff80003400:	41 58                	pop    r8
ffffffff80003402:	5d                   	pop    rbp
ffffffff80003403:	5f                   	pop    rdi
ffffffff80003404:	5e                   	pop    rsi
ffffffff80003405:	5a                   	pop    rdx
ffffffff80003406:	59                   	pop    rcx
ffffffff80003407:	5b                   	pop    rbx
ffffffff80003408:	58                   	pop    rax
ffffffff80003409:	48 83 c4 10          	add    rsp,0x10
ffffffff8000340d:	fb                   	sti    
ffffffff8000340e:	48 cf                	iretq  

ffffffff80003410 <isr_0>:
ffffffff80003410:	6a 00                	push   0x0
ffffffff80003412:	6a 00                	push   0x0
ffffffff80003414:	fc                   	cld    
ffffffff80003415:	eb b9                	jmp    ffffffff800033d0 <isr_common>

ffffffff80003417 <isr_1>:
ffffffff80003417:	6a 00                	push   0x0
ffffffff80003419:	6a 01                	push   0x1
ffffffff8000341b:	fc                   	cld    
ffffffff8000341c:	eb b2                	jmp    ffffffff800033d0 <isr_common>

ffffffff8000341e <isr_2>:
ffffffff8000341e:	6a 00                	push   0x0
ffffffff80003420:	6a 02                	push   0x2
ffffffff80003422:	fc                   	cld    
ffffffff80003423:	eb ab                	jmp    ffffffff800033d0 <isr_common>

ffffffff80003425 <isr_3>:
ffffffff80003425:	6a 00                	push   0x0
ffffffff80003427:	6a 03                	push   0x3
ffffffff80003429:	fc                   	cld    
ffffffff8000342a:	eb a4                	jmp    ffffffff800033d0 <isr_common>

ffffffff8000342c <isr_4>:
ffffffff8000342c:	6a 00                	push   0x0
ffffffff8000342e:	6a 04                	push   0x4
ffffffff80003430:	fc                   	cld    
ffffffff80003431:	eb 9d                	jmp    ffffffff800033d0 <isr_common>

ffffffff80003433 <isr_5>:
ffffffff80003433:	6a 00                	push   0x0
ffffffff80003435:	6a 05                	push   0x5
ffffffff80003437:	fc                   	cld    
ffffffff80003438:	eb 96                	jmp    ffffffff800033d0 <isr_common>

ffffffff8000343a <isr_6>:
ffffffff8000343a:	6a 00                	push   0x0
ffffffff8000343c:	6a 06                	push   0x6
ffffffff8000343e:	fc                   	cld    
ffffffff8000343f:	eb 8f                	jmp    ffffffff800033d0 <isr_common>

ffffffff80003441 <isr_7>:
ffffffff80003441:	6a 00                	push   0x0
ffffffff80003443:	6a 07                	push   0x7
ffffffff80003445:	fc                   	cld    
ffffffff80003446:	eb 88                	jmp    ffffffff800033d0 <isr_common>

ffffffff80003448 <isr_8>:
ffffffff80003448:	6a 08                	push   0x8
ffffffff8000344a:	fc                   	cld    
ffffffff8000344b:	eb 83                	jmp    ffffffff800033d0 <isr_common>

ffffffff8000344d <isr_9>:
ffffffff8000344d:	6a 00                	push   0x0
ffffffff8000344f:	6a 09                	push   0x9
ffffffff80003451:	fc                   	cld    
ffffffff80003452:	e9 79 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003457 <isr_10>:
ffffffff80003457:	6a 0a                	push   0xa
ffffffff80003459:	fc                   	cld    
ffffffff8000345a:	e9 71 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000345f <isr_11>:
ffffffff8000345f:	6a 0b                	push   0xb
ffffffff80003461:	fc                   	cld    
ffffffff80003462:	e9 69 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003467 <isr_12>:
ffffffff80003467:	6a 0c                	push   0xc
ffffffff80003469:	fc                   	cld    
ffffffff8000346a:	e9 61 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000346f <isr_13>:
ffffffff8000346f:	6a 0d                	push   0xd
ffffffff80003471:	fc                   	cld    
ffffffff80003472:	e9 59 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003477 <isr_14>:
ffffffff80003477:	6a 0e                	push   0xe
ffffffff80003479:	fc                   	cld    
ffffffff8000347a:	e9 51 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000347f <isr_15>:
ffffffff8000347f:	6a 00                	push   0x0
ffffffff80003481:	6a 0f                	push   0xf
ffffffff80003483:	fc                   	cld    
ffffffff80003484:	e9 47 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003489 <isr_16>:
ffffffff80003489:	6a 00                	push   0x0
ffffffff8000348b:	6a 10                	push   0x10
ffffffff8000348d:	fc                   	cld    
ffffffff8000348e:	e9 3d ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003493 <isr_17>:
ffffffff80003493:	6a 11                	push   0x11
ffffffff80003495:	fc                   	cld    
ffffffff80003496:	e9 35 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000349b <isr_18>:
ffffffff8000349b:	6a 00                	push   0x0
ffffffff8000349d:	6a 12                	push   0x12
ffffffff8000349f:	fc                   	cld    
ffffffff800034a0:	e9 2b ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034a5 <isr_19>:
ffffffff800034a5:	6a 00                	push   0x0
ffffffff800034a7:	6a 13                	push   0x13
ffffffff800034a9:	fc                   	cld    
ffffffff800034aa:	e9 21 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034af <isr_20>:
ffffffff800034af:	6a 00                	push   0x0
ffffffff800034b1:	6a 14                	push   0x14
ffffffff800034b3:	fc                   	cld    
ffffffff800034b4:	e9 17 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034b9 <isr_21>:
ffffffff800034b9:	6a 15                	push   0x15
ffffffff800034bb:	fc                   	cld    
ffffffff800034bc:	e9 0f ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034c1 <isr_22>:
ffffffff800034c1:	6a 00                	push   0x0
ffffffff800034c3:	6a 16                	push   0x16
ffffffff800034c5:	fc                   	cld    
ffffffff800034c6:	e9 05 ff ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034cb <isr_23>:
ffffffff800034cb:	6a 00                	push   0x0
ffffffff800034cd:	6a 17                	push   0x17
ffffffff800034cf:	fc                   	cld    
ffffffff800034d0:	e9 fb fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034d5 <isr_24>:
ffffffff800034d5:	6a 00                	push   0x0
ffffffff800034d7:	6a 18                	push   0x18
ffffffff800034d9:	fc                   	cld    
ffffffff800034da:	e9 f1 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034df <isr_25>:
ffffffff800034df:	6a 00                	push   0x0
ffffffff800034e1:	6a 19                	push   0x19
ffffffff800034e3:	fc                   	cld    
ffffffff800034e4:	e9 e7 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034e9 <isr_26>:
ffffffff800034e9:	6a 00                	push   0x0
ffffffff800034eb:	6a 1a                	push   0x1a
ffffffff800034ed:	fc                   	cld    
ffffffff800034ee:	e9 dd fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034f3 <isr_27>:
ffffffff800034f3:	6a 00                	push   0x0
ffffffff800034f5:	6a 1b                	push   0x1b
ffffffff800034f7:	fc                   	cld    
ffffffff800034f8:	e9 d3 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800034fd <isr_28>:
ffffffff800034fd:	6a 00                	push   0x0
ffffffff800034ff:	6a 1c                	push   0x1c
ffffffff80003501:	fc                   	cld    
ffffffff80003502:	e9 c9 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003507 <isr_29>:
ffffffff80003507:	6a 1d                	push   0x1d
ffffffff80003509:	fc                   	cld    
ffffffff8000350a:	e9 c1 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000350f <isr_30>:
ffffffff8000350f:	6a 1e                	push   0x1e
ffffffff80003511:	fc                   	cld    
ffffffff80003512:	e9 b9 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003517 <isr_31>:
ffffffff80003517:	6a 00                	push   0x0
ffffffff80003519:	6a 1f                	push   0x1f
ffffffff8000351b:	fc                   	cld    
ffffffff8000351c:	e9 af fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003521 <isr_32>:
ffffffff80003521:	6a 00                	push   0x0
ffffffff80003523:	6a 20                	push   0x20
ffffffff80003525:	fc                   	cld    
ffffffff80003526:	e9 a5 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000352b <isr_33>:
ffffffff8000352b:	6a 00                	push   0x0
ffffffff8000352d:	6a 21                	push   0x21
ffffffff8000352f:	fc                   	cld    
ffffffff80003530:	e9 9b fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003535 <isr_34>:
ffffffff80003535:	6a 00                	push   0x0
ffffffff80003537:	6a 22                	push   0x22
ffffffff80003539:	fc                   	cld    
ffffffff8000353a:	e9 91 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000353f <isr_35>:
ffffffff8000353f:	6a 00                	push   0x0
ffffffff80003541:	6a 23                	push   0x23
ffffffff80003543:	fc                   	cld    
ffffffff80003544:	e9 87 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003549 <isr_36>:
ffffffff80003549:	6a 00                	push   0x0
ffffffff8000354b:	6a 24                	push   0x24
ffffffff8000354d:	fc                   	cld    
ffffffff8000354e:	e9 7d fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003553 <isr_37>:
ffffffff80003553:	6a 00                	push   0x0
ffffffff80003555:	6a 25                	push   0x25
ffffffff80003557:	fc                   	cld    
ffffffff80003558:	e9 73 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000355d <isr_38>:
ffffffff8000355d:	6a 00                	push   0x0
ffffffff8000355f:	6a 26                	push   0x26
ffffffff80003561:	fc                   	cld    
ffffffff80003562:	e9 69 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003567 <isr_39>:
ffffffff80003567:	6a 00                	push   0x0
ffffffff80003569:	6a 27                	push   0x27
ffffffff8000356b:	fc                   	cld    
ffffffff8000356c:	e9 5f fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003571 <isr_40>:
ffffffff80003571:	6a 00                	push   0x0
ffffffff80003573:	6a 28                	push   0x28
ffffffff80003575:	fc                   	cld    
ffffffff80003576:	e9 55 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000357b <isr_41>:
ffffffff8000357b:	6a 00                	push   0x0
ffffffff8000357d:	6a 29                	push   0x29
ffffffff8000357f:	fc                   	cld    
ffffffff80003580:	e9 4b fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003585 <isr_42>:
ffffffff80003585:	6a 00                	push   0x0
ffffffff80003587:	6a 2a                	push   0x2a
ffffffff80003589:	fc                   	cld    
ffffffff8000358a:	e9 41 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000358f <isr_43>:
ffffffff8000358f:	6a 00                	push   0x0
ffffffff80003591:	6a 2b                	push   0x2b
ffffffff80003593:	fc                   	cld    
ffffffff80003594:	e9 37 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003599 <isr_44>:
ffffffff80003599:	6a 00                	push   0x0
ffffffff8000359b:	6a 2c                	push   0x2c
ffffffff8000359d:	fc                   	cld    
ffffffff8000359e:	e9 2d fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035a3 <isr_45>:
ffffffff800035a3:	6a 00                	push   0x0
ffffffff800035a5:	6a 2d                	push   0x2d
ffffffff800035a7:	fc                   	cld    
ffffffff800035a8:	e9 23 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035ad <isr_46>:
ffffffff800035ad:	6a 00                	push   0x0
ffffffff800035af:	6a 2e                	push   0x2e
ffffffff800035b1:	fc                   	cld    
ffffffff800035b2:	e9 19 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035b7 <isr_47>:
ffffffff800035b7:	6a 00                	push   0x0
ffffffff800035b9:	6a 2f                	push   0x2f
ffffffff800035bb:	fc                   	cld    
ffffffff800035bc:	e9 0f fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035c1 <isr_48>:
ffffffff800035c1:	6a 00                	push   0x0
ffffffff800035c3:	6a 30                	push   0x30
ffffffff800035c5:	fc                   	cld    
ffffffff800035c6:	e9 05 fe ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035cb <isr_49>:
ffffffff800035cb:	6a 00                	push   0x0
ffffffff800035cd:	6a 31                	push   0x31
ffffffff800035cf:	fc                   	cld    
ffffffff800035d0:	e9 fb fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035d5 <isr_50>:
ffffffff800035d5:	6a 00                	push   0x0
ffffffff800035d7:	6a 32                	push   0x32
ffffffff800035d9:	fc                   	cld    
ffffffff800035da:	e9 f1 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035df <isr_51>:
ffffffff800035df:	6a 00                	push   0x0
ffffffff800035e1:	6a 33                	push   0x33
ffffffff800035e3:	fc                   	cld    
ffffffff800035e4:	e9 e7 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035e9 <isr_52>:
ffffffff800035e9:	6a 00                	push   0x0
ffffffff800035eb:	6a 34                	push   0x34
ffffffff800035ed:	fc                   	cld    
ffffffff800035ee:	e9 dd fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035f3 <isr_53>:
ffffffff800035f3:	6a 00                	push   0x0
ffffffff800035f5:	6a 35                	push   0x35
ffffffff800035f7:	fc                   	cld    
ffffffff800035f8:	e9 d3 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800035fd <isr_54>:
ffffffff800035fd:	6a 00                	push   0x0
ffffffff800035ff:	6a 36                	push   0x36
ffffffff80003601:	fc                   	cld    
ffffffff80003602:	e9 c9 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003607 <isr_55>:
ffffffff80003607:	6a 00                	push   0x0
ffffffff80003609:	6a 37                	push   0x37
ffffffff8000360b:	fc                   	cld    
ffffffff8000360c:	e9 bf fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003611 <isr_56>:
ffffffff80003611:	6a 00                	push   0x0
ffffffff80003613:	6a 38                	push   0x38
ffffffff80003615:	fc                   	cld    
ffffffff80003616:	e9 b5 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000361b <isr_57>:
ffffffff8000361b:	6a 00                	push   0x0
ffffffff8000361d:	6a 39                	push   0x39
ffffffff8000361f:	fc                   	cld    
ffffffff80003620:	e9 ab fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003625 <isr_58>:
ffffffff80003625:	6a 00                	push   0x0
ffffffff80003627:	6a 3a                	push   0x3a
ffffffff80003629:	fc                   	cld    
ffffffff8000362a:	e9 a1 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000362f <isr_59>:
ffffffff8000362f:	6a 00                	push   0x0
ffffffff80003631:	6a 3b                	push   0x3b
ffffffff80003633:	fc                   	cld    
ffffffff80003634:	e9 97 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003639 <isr_60>:
ffffffff80003639:	6a 00                	push   0x0
ffffffff8000363b:	6a 3c                	push   0x3c
ffffffff8000363d:	fc                   	cld    
ffffffff8000363e:	e9 8d fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003643 <isr_61>:
ffffffff80003643:	6a 00                	push   0x0
ffffffff80003645:	6a 3d                	push   0x3d
ffffffff80003647:	fc                   	cld    
ffffffff80003648:	e9 83 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000364d <isr_62>:
ffffffff8000364d:	6a 00                	push   0x0
ffffffff8000364f:	6a 3e                	push   0x3e
ffffffff80003651:	fc                   	cld    
ffffffff80003652:	e9 79 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003657 <isr_63>:
ffffffff80003657:	6a 00                	push   0x0
ffffffff80003659:	6a 3f                	push   0x3f
ffffffff8000365b:	fc                   	cld    
ffffffff8000365c:	e9 6f fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003661 <isr_64>:
ffffffff80003661:	6a 00                	push   0x0
ffffffff80003663:	6a 40                	push   0x40
ffffffff80003665:	fc                   	cld    
ffffffff80003666:	e9 65 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000366b <isr_65>:
ffffffff8000366b:	6a 00                	push   0x0
ffffffff8000366d:	6a 41                	push   0x41
ffffffff8000366f:	fc                   	cld    
ffffffff80003670:	e9 5b fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003675 <isr_66>:
ffffffff80003675:	6a 00                	push   0x0
ffffffff80003677:	6a 42                	push   0x42
ffffffff80003679:	fc                   	cld    
ffffffff8000367a:	e9 51 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000367f <isr_67>:
ffffffff8000367f:	6a 00                	push   0x0
ffffffff80003681:	6a 43                	push   0x43
ffffffff80003683:	fc                   	cld    
ffffffff80003684:	e9 47 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003689 <isr_68>:
ffffffff80003689:	6a 00                	push   0x0
ffffffff8000368b:	6a 44                	push   0x44
ffffffff8000368d:	fc                   	cld    
ffffffff8000368e:	e9 3d fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003693 <isr_69>:
ffffffff80003693:	6a 00                	push   0x0
ffffffff80003695:	6a 45                	push   0x45
ffffffff80003697:	fc                   	cld    
ffffffff80003698:	e9 33 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000369d <isr_70>:
ffffffff8000369d:	6a 00                	push   0x0
ffffffff8000369f:	6a 46                	push   0x46
ffffffff800036a1:	fc                   	cld    
ffffffff800036a2:	e9 29 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036a7 <isr_71>:
ffffffff800036a7:	6a 00                	push   0x0
ffffffff800036a9:	6a 47                	push   0x47
ffffffff800036ab:	fc                   	cld    
ffffffff800036ac:	e9 1f fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036b1 <isr_72>:
ffffffff800036b1:	6a 00                	push   0x0
ffffffff800036b3:	6a 48                	push   0x48
ffffffff800036b5:	fc                   	cld    
ffffffff800036b6:	e9 15 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036bb <isr_73>:
ffffffff800036bb:	6a 00                	push   0x0
ffffffff800036bd:	6a 49                	push   0x49
ffffffff800036bf:	fc                   	cld    
ffffffff800036c0:	e9 0b fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036c5 <isr_74>:
ffffffff800036c5:	6a 00                	push   0x0
ffffffff800036c7:	6a 4a                	push   0x4a
ffffffff800036c9:	fc                   	cld    
ffffffff800036ca:	e9 01 fd ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036cf <isr_75>:
ffffffff800036cf:	6a 00                	push   0x0
ffffffff800036d1:	6a 4b                	push   0x4b
ffffffff800036d3:	fc                   	cld    
ffffffff800036d4:	e9 f7 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036d9 <isr_76>:
ffffffff800036d9:	6a 00                	push   0x0
ffffffff800036db:	6a 4c                	push   0x4c
ffffffff800036dd:	fc                   	cld    
ffffffff800036de:	e9 ed fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036e3 <isr_77>:
ffffffff800036e3:	6a 00                	push   0x0
ffffffff800036e5:	6a 4d                	push   0x4d
ffffffff800036e7:	fc                   	cld    
ffffffff800036e8:	e9 e3 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036ed <isr_78>:
ffffffff800036ed:	6a 00                	push   0x0
ffffffff800036ef:	6a 4e                	push   0x4e
ffffffff800036f1:	fc                   	cld    
ffffffff800036f2:	e9 d9 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800036f7 <isr_79>:
ffffffff800036f7:	6a 00                	push   0x0
ffffffff800036f9:	6a 4f                	push   0x4f
ffffffff800036fb:	fc                   	cld    
ffffffff800036fc:	e9 cf fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003701 <isr_80>:
ffffffff80003701:	6a 00                	push   0x0
ffffffff80003703:	6a 50                	push   0x50
ffffffff80003705:	fc                   	cld    
ffffffff80003706:	e9 c5 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000370b <isr_81>:
ffffffff8000370b:	6a 00                	push   0x0
ffffffff8000370d:	6a 51                	push   0x51
ffffffff8000370f:	fc                   	cld    
ffffffff80003710:	e9 bb fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003715 <isr_82>:
ffffffff80003715:	6a 00                	push   0x0
ffffffff80003717:	6a 52                	push   0x52
ffffffff80003719:	fc                   	cld    
ffffffff8000371a:	e9 b1 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000371f <isr_83>:
ffffffff8000371f:	6a 00                	push   0x0
ffffffff80003721:	6a 53                	push   0x53
ffffffff80003723:	fc                   	cld    
ffffffff80003724:	e9 a7 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003729 <isr_84>:
ffffffff80003729:	6a 00                	push   0x0
ffffffff8000372b:	6a 54                	push   0x54
ffffffff8000372d:	fc                   	cld    
ffffffff8000372e:	e9 9d fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003733 <isr_85>:
ffffffff80003733:	6a 00                	push   0x0
ffffffff80003735:	6a 55                	push   0x55
ffffffff80003737:	fc                   	cld    
ffffffff80003738:	e9 93 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000373d <isr_86>:
ffffffff8000373d:	6a 00                	push   0x0
ffffffff8000373f:	6a 56                	push   0x56
ffffffff80003741:	fc                   	cld    
ffffffff80003742:	e9 89 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003747 <isr_87>:
ffffffff80003747:	6a 00                	push   0x0
ffffffff80003749:	6a 57                	push   0x57
ffffffff8000374b:	fc                   	cld    
ffffffff8000374c:	e9 7f fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003751 <isr_88>:
ffffffff80003751:	6a 00                	push   0x0
ffffffff80003753:	6a 58                	push   0x58
ffffffff80003755:	fc                   	cld    
ffffffff80003756:	e9 75 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000375b <isr_89>:
ffffffff8000375b:	6a 00                	push   0x0
ffffffff8000375d:	6a 59                	push   0x59
ffffffff8000375f:	fc                   	cld    
ffffffff80003760:	e9 6b fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003765 <isr_90>:
ffffffff80003765:	6a 00                	push   0x0
ffffffff80003767:	6a 5a                	push   0x5a
ffffffff80003769:	fc                   	cld    
ffffffff8000376a:	e9 61 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000376f <isr_91>:
ffffffff8000376f:	6a 00                	push   0x0
ffffffff80003771:	6a 5b                	push   0x5b
ffffffff80003773:	fc                   	cld    
ffffffff80003774:	e9 57 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003779 <isr_92>:
ffffffff80003779:	6a 00                	push   0x0
ffffffff8000377b:	6a 5c                	push   0x5c
ffffffff8000377d:	fc                   	cld    
ffffffff8000377e:	e9 4d fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003783 <isr_93>:
ffffffff80003783:	6a 00                	push   0x0
ffffffff80003785:	6a 5d                	push   0x5d
ffffffff80003787:	fc                   	cld    
ffffffff80003788:	e9 43 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000378d <isr_94>:
ffffffff8000378d:	6a 00                	push   0x0
ffffffff8000378f:	6a 5e                	push   0x5e
ffffffff80003791:	fc                   	cld    
ffffffff80003792:	e9 39 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003797 <isr_95>:
ffffffff80003797:	6a 00                	push   0x0
ffffffff80003799:	6a 5f                	push   0x5f
ffffffff8000379b:	fc                   	cld    
ffffffff8000379c:	e9 2f fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037a1 <isr_96>:
ffffffff800037a1:	6a 00                	push   0x0
ffffffff800037a3:	6a 60                	push   0x60
ffffffff800037a5:	fc                   	cld    
ffffffff800037a6:	e9 25 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037ab <isr_97>:
ffffffff800037ab:	6a 00                	push   0x0
ffffffff800037ad:	6a 61                	push   0x61
ffffffff800037af:	fc                   	cld    
ffffffff800037b0:	e9 1b fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037b5 <isr_98>:
ffffffff800037b5:	6a 00                	push   0x0
ffffffff800037b7:	6a 62                	push   0x62
ffffffff800037b9:	fc                   	cld    
ffffffff800037ba:	e9 11 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037bf <isr_99>:
ffffffff800037bf:	6a 00                	push   0x0
ffffffff800037c1:	6a 63                	push   0x63
ffffffff800037c3:	fc                   	cld    
ffffffff800037c4:	e9 07 fc ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037c9 <isr_100>:
ffffffff800037c9:	6a 00                	push   0x0
ffffffff800037cb:	6a 64                	push   0x64
ffffffff800037cd:	fc                   	cld    
ffffffff800037ce:	e9 fd fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037d3 <isr_101>:
ffffffff800037d3:	6a 00                	push   0x0
ffffffff800037d5:	6a 65                	push   0x65
ffffffff800037d7:	fc                   	cld    
ffffffff800037d8:	e9 f3 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037dd <isr_102>:
ffffffff800037dd:	6a 00                	push   0x0
ffffffff800037df:	6a 66                	push   0x66
ffffffff800037e1:	fc                   	cld    
ffffffff800037e2:	e9 e9 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037e7 <isr_103>:
ffffffff800037e7:	6a 00                	push   0x0
ffffffff800037e9:	6a 67                	push   0x67
ffffffff800037eb:	fc                   	cld    
ffffffff800037ec:	e9 df fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037f1 <isr_104>:
ffffffff800037f1:	6a 00                	push   0x0
ffffffff800037f3:	6a 68                	push   0x68
ffffffff800037f5:	fc                   	cld    
ffffffff800037f6:	e9 d5 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800037fb <isr_105>:
ffffffff800037fb:	6a 00                	push   0x0
ffffffff800037fd:	6a 69                	push   0x69
ffffffff800037ff:	fc                   	cld    
ffffffff80003800:	e9 cb fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003805 <isr_106>:
ffffffff80003805:	6a 00                	push   0x0
ffffffff80003807:	6a 6a                	push   0x6a
ffffffff80003809:	fc                   	cld    
ffffffff8000380a:	e9 c1 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000380f <isr_107>:
ffffffff8000380f:	6a 00                	push   0x0
ffffffff80003811:	6a 6b                	push   0x6b
ffffffff80003813:	fc                   	cld    
ffffffff80003814:	e9 b7 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003819 <isr_108>:
ffffffff80003819:	6a 00                	push   0x0
ffffffff8000381b:	6a 6c                	push   0x6c
ffffffff8000381d:	fc                   	cld    
ffffffff8000381e:	e9 ad fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003823 <isr_109>:
ffffffff80003823:	6a 00                	push   0x0
ffffffff80003825:	6a 6d                	push   0x6d
ffffffff80003827:	fc                   	cld    
ffffffff80003828:	e9 a3 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000382d <isr_110>:
ffffffff8000382d:	6a 00                	push   0x0
ffffffff8000382f:	6a 6e                	push   0x6e
ffffffff80003831:	fc                   	cld    
ffffffff80003832:	e9 99 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003837 <isr_111>:
ffffffff80003837:	6a 00                	push   0x0
ffffffff80003839:	6a 6f                	push   0x6f
ffffffff8000383b:	fc                   	cld    
ffffffff8000383c:	e9 8f fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003841 <isr_112>:
ffffffff80003841:	6a 00                	push   0x0
ffffffff80003843:	6a 70                	push   0x70
ffffffff80003845:	fc                   	cld    
ffffffff80003846:	e9 85 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000384b <isr_113>:
ffffffff8000384b:	6a 00                	push   0x0
ffffffff8000384d:	6a 71                	push   0x71
ffffffff8000384f:	fc                   	cld    
ffffffff80003850:	e9 7b fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003855 <isr_114>:
ffffffff80003855:	6a 00                	push   0x0
ffffffff80003857:	6a 72                	push   0x72
ffffffff80003859:	fc                   	cld    
ffffffff8000385a:	e9 71 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000385f <isr_115>:
ffffffff8000385f:	6a 00                	push   0x0
ffffffff80003861:	6a 73                	push   0x73
ffffffff80003863:	fc                   	cld    
ffffffff80003864:	e9 67 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003869 <isr_116>:
ffffffff80003869:	6a 00                	push   0x0
ffffffff8000386b:	6a 74                	push   0x74
ffffffff8000386d:	fc                   	cld    
ffffffff8000386e:	e9 5d fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003873 <isr_117>:
ffffffff80003873:	6a 00                	push   0x0
ffffffff80003875:	6a 75                	push   0x75
ffffffff80003877:	fc                   	cld    
ffffffff80003878:	e9 53 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000387d <isr_118>:
ffffffff8000387d:	6a 00                	push   0x0
ffffffff8000387f:	6a 76                	push   0x76
ffffffff80003881:	fc                   	cld    
ffffffff80003882:	e9 49 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003887 <isr_119>:
ffffffff80003887:	6a 00                	push   0x0
ffffffff80003889:	6a 77                	push   0x77
ffffffff8000388b:	fc                   	cld    
ffffffff8000388c:	e9 3f fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003891 <isr_120>:
ffffffff80003891:	6a 00                	push   0x0
ffffffff80003893:	6a 78                	push   0x78
ffffffff80003895:	fc                   	cld    
ffffffff80003896:	e9 35 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000389b <isr_121>:
ffffffff8000389b:	6a 00                	push   0x0
ffffffff8000389d:	6a 79                	push   0x79
ffffffff8000389f:	fc                   	cld    
ffffffff800038a0:	e9 2b fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038a5 <isr_122>:
ffffffff800038a5:	6a 00                	push   0x0
ffffffff800038a7:	6a 7a                	push   0x7a
ffffffff800038a9:	fc                   	cld    
ffffffff800038aa:	e9 21 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038af <isr_123>:
ffffffff800038af:	6a 00                	push   0x0
ffffffff800038b1:	6a 7b                	push   0x7b
ffffffff800038b3:	fc                   	cld    
ffffffff800038b4:	e9 17 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038b9 <isr_124>:
ffffffff800038b9:	6a 00                	push   0x0
ffffffff800038bb:	6a 7c                	push   0x7c
ffffffff800038bd:	fc                   	cld    
ffffffff800038be:	e9 0d fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038c3 <isr_125>:
ffffffff800038c3:	6a 00                	push   0x0
ffffffff800038c5:	6a 7d                	push   0x7d
ffffffff800038c7:	fc                   	cld    
ffffffff800038c8:	e9 03 fb ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038cd <isr_126>:
ffffffff800038cd:	6a 00                	push   0x0
ffffffff800038cf:	6a 7e                	push   0x7e
ffffffff800038d1:	fc                   	cld    
ffffffff800038d2:	e9 f9 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038d7 <isr_127>:
ffffffff800038d7:	6a 00                	push   0x0
ffffffff800038d9:	6a 7f                	push   0x7f
ffffffff800038db:	fc                   	cld    
ffffffff800038dc:	e9 ef fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038e1 <isr_128>:
ffffffff800038e1:	6a 00                	push   0x0
ffffffff800038e3:	68 80 00 00 00       	push   0x80
ffffffff800038e8:	fc                   	cld    
ffffffff800038e9:	e9 e2 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038ee <isr_129>:
ffffffff800038ee:	6a 00                	push   0x0
ffffffff800038f0:	68 81 00 00 00       	push   0x81
ffffffff800038f5:	fc                   	cld    
ffffffff800038f6:	e9 d5 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800038fb <isr_130>:
ffffffff800038fb:	6a 00                	push   0x0
ffffffff800038fd:	68 82 00 00 00       	push   0x82
ffffffff80003902:	fc                   	cld    
ffffffff80003903:	e9 c8 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003908 <isr_131>:
ffffffff80003908:	6a 00                	push   0x0
ffffffff8000390a:	68 83 00 00 00       	push   0x83
ffffffff8000390f:	fc                   	cld    
ffffffff80003910:	e9 bb fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003915 <isr_132>:
ffffffff80003915:	6a 00                	push   0x0
ffffffff80003917:	68 84 00 00 00       	push   0x84
ffffffff8000391c:	fc                   	cld    
ffffffff8000391d:	e9 ae fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003922 <isr_133>:
ffffffff80003922:	6a 00                	push   0x0
ffffffff80003924:	68 85 00 00 00       	push   0x85
ffffffff80003929:	fc                   	cld    
ffffffff8000392a:	e9 a1 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000392f <isr_134>:
ffffffff8000392f:	6a 00                	push   0x0
ffffffff80003931:	68 86 00 00 00       	push   0x86
ffffffff80003936:	fc                   	cld    
ffffffff80003937:	e9 94 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000393c <isr_135>:
ffffffff8000393c:	6a 00                	push   0x0
ffffffff8000393e:	68 87 00 00 00       	push   0x87
ffffffff80003943:	fc                   	cld    
ffffffff80003944:	e9 87 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003949 <isr_136>:
ffffffff80003949:	6a 00                	push   0x0
ffffffff8000394b:	68 88 00 00 00       	push   0x88
ffffffff80003950:	fc                   	cld    
ffffffff80003951:	e9 7a fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003956 <isr_137>:
ffffffff80003956:	6a 00                	push   0x0
ffffffff80003958:	68 89 00 00 00       	push   0x89
ffffffff8000395d:	fc                   	cld    
ffffffff8000395e:	e9 6d fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003963 <isr_138>:
ffffffff80003963:	6a 00                	push   0x0
ffffffff80003965:	68 8a 00 00 00       	push   0x8a
ffffffff8000396a:	fc                   	cld    
ffffffff8000396b:	e9 60 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003970 <isr_139>:
ffffffff80003970:	6a 00                	push   0x0
ffffffff80003972:	68 8b 00 00 00       	push   0x8b
ffffffff80003977:	fc                   	cld    
ffffffff80003978:	e9 53 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000397d <isr_140>:
ffffffff8000397d:	6a 00                	push   0x0
ffffffff8000397f:	68 8c 00 00 00       	push   0x8c
ffffffff80003984:	fc                   	cld    
ffffffff80003985:	e9 46 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff8000398a <isr_141>:
ffffffff8000398a:	6a 00                	push   0x0
ffffffff8000398c:	68 8d 00 00 00       	push   0x8d
ffffffff80003991:	fc                   	cld    
ffffffff80003992:	e9 39 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003997 <isr_142>:
ffffffff80003997:	6a 00                	push   0x0
ffffffff80003999:	68 8e 00 00 00       	push   0x8e
ffffffff8000399e:	fc                   	cld    
ffffffff8000399f:	e9 2c fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039a4 <isr_143>:
ffffffff800039a4:	6a 00                	push   0x0
ffffffff800039a6:	68 8f 00 00 00       	push   0x8f
ffffffff800039ab:	fc                   	cld    
ffffffff800039ac:	e9 1f fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039b1 <isr_144>:
ffffffff800039b1:	6a 00                	push   0x0
ffffffff800039b3:	68 90 00 00 00       	push   0x90
ffffffff800039b8:	fc                   	cld    
ffffffff800039b9:	e9 12 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039be <isr_145>:
ffffffff800039be:	6a 00                	push   0x0
ffffffff800039c0:	68 91 00 00 00       	push   0x91
ffffffff800039c5:	fc                   	cld    
ffffffff800039c6:	e9 05 fa ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039cb <isr_146>:
ffffffff800039cb:	6a 00                	push   0x0
ffffffff800039cd:	68 92 00 00 00       	push   0x92
ffffffff800039d2:	fc                   	cld    
ffffffff800039d3:	e9 f8 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039d8 <isr_147>:
ffffffff800039d8:	6a 00                	push   0x0
ffffffff800039da:	68 93 00 00 00       	push   0x93
ffffffff800039df:	fc                   	cld    
ffffffff800039e0:	e9 eb f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039e5 <isr_148>:
ffffffff800039e5:	6a 00                	push   0x0
ffffffff800039e7:	68 94 00 00 00       	push   0x94
ffffffff800039ec:	fc                   	cld    
ffffffff800039ed:	e9 de f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039f2 <isr_149>:
ffffffff800039f2:	6a 00                	push   0x0
ffffffff800039f4:	68 95 00 00 00       	push   0x95
ffffffff800039f9:	fc                   	cld    
ffffffff800039fa:	e9 d1 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff800039ff <isr_150>:
ffffffff800039ff:	6a 00                	push   0x0
ffffffff80003a01:	68 96 00 00 00       	push   0x96
ffffffff80003a06:	fc                   	cld    
ffffffff80003a07:	e9 c4 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a0c <isr_151>:
ffffffff80003a0c:	6a 00                	push   0x0
ffffffff80003a0e:	68 97 00 00 00       	push   0x97
ffffffff80003a13:	fc                   	cld    
ffffffff80003a14:	e9 b7 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a19 <isr_152>:
ffffffff80003a19:	6a 00                	push   0x0
ffffffff80003a1b:	68 98 00 00 00       	push   0x98
ffffffff80003a20:	fc                   	cld    
ffffffff80003a21:	e9 aa f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a26 <isr_153>:
ffffffff80003a26:	6a 00                	push   0x0
ffffffff80003a28:	68 99 00 00 00       	push   0x99
ffffffff80003a2d:	fc                   	cld    
ffffffff80003a2e:	e9 9d f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a33 <isr_154>:
ffffffff80003a33:	6a 00                	push   0x0
ffffffff80003a35:	68 9a 00 00 00       	push   0x9a
ffffffff80003a3a:	fc                   	cld    
ffffffff80003a3b:	e9 90 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a40 <isr_155>:
ffffffff80003a40:	6a 00                	push   0x0
ffffffff80003a42:	68 9b 00 00 00       	push   0x9b
ffffffff80003a47:	fc                   	cld    
ffffffff80003a48:	e9 83 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a4d <isr_156>:
ffffffff80003a4d:	6a 00                	push   0x0
ffffffff80003a4f:	68 9c 00 00 00       	push   0x9c
ffffffff80003a54:	fc                   	cld    
ffffffff80003a55:	e9 76 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a5a <isr_157>:
ffffffff80003a5a:	6a 00                	push   0x0
ffffffff80003a5c:	68 9d 00 00 00       	push   0x9d
ffffffff80003a61:	fc                   	cld    
ffffffff80003a62:	e9 69 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a67 <isr_158>:
ffffffff80003a67:	6a 00                	push   0x0
ffffffff80003a69:	68 9e 00 00 00       	push   0x9e
ffffffff80003a6e:	fc                   	cld    
ffffffff80003a6f:	e9 5c f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a74 <isr_159>:
ffffffff80003a74:	6a 00                	push   0x0
ffffffff80003a76:	68 9f 00 00 00       	push   0x9f
ffffffff80003a7b:	fc                   	cld    
ffffffff80003a7c:	e9 4f f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a81 <isr_160>:
ffffffff80003a81:	6a 00                	push   0x0
ffffffff80003a83:	68 a0 00 00 00       	push   0xa0
ffffffff80003a88:	fc                   	cld    
ffffffff80003a89:	e9 42 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a8e <isr_161>:
ffffffff80003a8e:	6a 00                	push   0x0
ffffffff80003a90:	68 a1 00 00 00       	push   0xa1
ffffffff80003a95:	fc                   	cld    
ffffffff80003a96:	e9 35 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003a9b <isr_162>:
ffffffff80003a9b:	6a 00                	push   0x0
ffffffff80003a9d:	68 a2 00 00 00       	push   0xa2
ffffffff80003aa2:	fc                   	cld    
ffffffff80003aa3:	e9 28 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003aa8 <isr_163>:
ffffffff80003aa8:	6a 00                	push   0x0
ffffffff80003aaa:	68 a3 00 00 00       	push   0xa3
ffffffff80003aaf:	fc                   	cld    
ffffffff80003ab0:	e9 1b f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ab5 <isr_164>:
ffffffff80003ab5:	6a 00                	push   0x0
ffffffff80003ab7:	68 a4 00 00 00       	push   0xa4
ffffffff80003abc:	fc                   	cld    
ffffffff80003abd:	e9 0e f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ac2 <isr_165>:
ffffffff80003ac2:	6a 00                	push   0x0
ffffffff80003ac4:	68 a5 00 00 00       	push   0xa5
ffffffff80003ac9:	fc                   	cld    
ffffffff80003aca:	e9 01 f9 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003acf <isr_166>:
ffffffff80003acf:	6a 00                	push   0x0
ffffffff80003ad1:	68 a6 00 00 00       	push   0xa6
ffffffff80003ad6:	fc                   	cld    
ffffffff80003ad7:	e9 f4 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003adc <isr_167>:
ffffffff80003adc:	6a 00                	push   0x0
ffffffff80003ade:	68 a7 00 00 00       	push   0xa7
ffffffff80003ae3:	fc                   	cld    
ffffffff80003ae4:	e9 e7 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ae9 <isr_168>:
ffffffff80003ae9:	6a 00                	push   0x0
ffffffff80003aeb:	68 a8 00 00 00       	push   0xa8
ffffffff80003af0:	fc                   	cld    
ffffffff80003af1:	e9 da f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003af6 <isr_169>:
ffffffff80003af6:	6a 00                	push   0x0
ffffffff80003af8:	68 a9 00 00 00       	push   0xa9
ffffffff80003afd:	fc                   	cld    
ffffffff80003afe:	e9 cd f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b03 <isr_170>:
ffffffff80003b03:	6a 00                	push   0x0
ffffffff80003b05:	68 aa 00 00 00       	push   0xaa
ffffffff80003b0a:	fc                   	cld    
ffffffff80003b0b:	e9 c0 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b10 <isr_171>:
ffffffff80003b10:	6a 00                	push   0x0
ffffffff80003b12:	68 ab 00 00 00       	push   0xab
ffffffff80003b17:	fc                   	cld    
ffffffff80003b18:	e9 b3 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b1d <isr_172>:
ffffffff80003b1d:	6a 00                	push   0x0
ffffffff80003b1f:	68 ac 00 00 00       	push   0xac
ffffffff80003b24:	fc                   	cld    
ffffffff80003b25:	e9 a6 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b2a <isr_173>:
ffffffff80003b2a:	6a 00                	push   0x0
ffffffff80003b2c:	68 ad 00 00 00       	push   0xad
ffffffff80003b31:	fc                   	cld    
ffffffff80003b32:	e9 99 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b37 <isr_174>:
ffffffff80003b37:	6a 00                	push   0x0
ffffffff80003b39:	68 ae 00 00 00       	push   0xae
ffffffff80003b3e:	fc                   	cld    
ffffffff80003b3f:	e9 8c f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b44 <isr_175>:
ffffffff80003b44:	6a 00                	push   0x0
ffffffff80003b46:	68 af 00 00 00       	push   0xaf
ffffffff80003b4b:	fc                   	cld    
ffffffff80003b4c:	e9 7f f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b51 <isr_176>:
ffffffff80003b51:	6a 00                	push   0x0
ffffffff80003b53:	68 b0 00 00 00       	push   0xb0
ffffffff80003b58:	fc                   	cld    
ffffffff80003b59:	e9 72 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b5e <isr_177>:
ffffffff80003b5e:	6a 00                	push   0x0
ffffffff80003b60:	68 b1 00 00 00       	push   0xb1
ffffffff80003b65:	fc                   	cld    
ffffffff80003b66:	e9 65 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b6b <isr_178>:
ffffffff80003b6b:	6a 00                	push   0x0
ffffffff80003b6d:	68 b2 00 00 00       	push   0xb2
ffffffff80003b72:	fc                   	cld    
ffffffff80003b73:	e9 58 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b78 <isr_179>:
ffffffff80003b78:	6a 00                	push   0x0
ffffffff80003b7a:	68 b3 00 00 00       	push   0xb3
ffffffff80003b7f:	fc                   	cld    
ffffffff80003b80:	e9 4b f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b85 <isr_180>:
ffffffff80003b85:	6a 00                	push   0x0
ffffffff80003b87:	68 b4 00 00 00       	push   0xb4
ffffffff80003b8c:	fc                   	cld    
ffffffff80003b8d:	e9 3e f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b92 <isr_181>:
ffffffff80003b92:	6a 00                	push   0x0
ffffffff80003b94:	68 b5 00 00 00       	push   0xb5
ffffffff80003b99:	fc                   	cld    
ffffffff80003b9a:	e9 31 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003b9f <isr_182>:
ffffffff80003b9f:	6a 00                	push   0x0
ffffffff80003ba1:	68 b6 00 00 00       	push   0xb6
ffffffff80003ba6:	fc                   	cld    
ffffffff80003ba7:	e9 24 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003bac <isr_183>:
ffffffff80003bac:	6a 00                	push   0x0
ffffffff80003bae:	68 b7 00 00 00       	push   0xb7
ffffffff80003bb3:	fc                   	cld    
ffffffff80003bb4:	e9 17 f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003bb9 <isr_184>:
ffffffff80003bb9:	6a 00                	push   0x0
ffffffff80003bbb:	68 b8 00 00 00       	push   0xb8
ffffffff80003bc0:	fc                   	cld    
ffffffff80003bc1:	e9 0a f8 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003bc6 <isr_185>:
ffffffff80003bc6:	6a 00                	push   0x0
ffffffff80003bc8:	68 b9 00 00 00       	push   0xb9
ffffffff80003bcd:	fc                   	cld    
ffffffff80003bce:	e9 fd f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003bd3 <isr_186>:
ffffffff80003bd3:	6a 00                	push   0x0
ffffffff80003bd5:	68 ba 00 00 00       	push   0xba
ffffffff80003bda:	fc                   	cld    
ffffffff80003bdb:	e9 f0 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003be0 <isr_187>:
ffffffff80003be0:	6a 00                	push   0x0
ffffffff80003be2:	68 bb 00 00 00       	push   0xbb
ffffffff80003be7:	fc                   	cld    
ffffffff80003be8:	e9 e3 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003bed <isr_188>:
ffffffff80003bed:	6a 00                	push   0x0
ffffffff80003bef:	68 bc 00 00 00       	push   0xbc
ffffffff80003bf4:	fc                   	cld    
ffffffff80003bf5:	e9 d6 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003bfa <isr_189>:
ffffffff80003bfa:	6a 00                	push   0x0
ffffffff80003bfc:	68 bd 00 00 00       	push   0xbd
ffffffff80003c01:	fc                   	cld    
ffffffff80003c02:	e9 c9 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c07 <isr_190>:
ffffffff80003c07:	6a 00                	push   0x0
ffffffff80003c09:	68 be 00 00 00       	push   0xbe
ffffffff80003c0e:	fc                   	cld    
ffffffff80003c0f:	e9 bc f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c14 <isr_191>:
ffffffff80003c14:	6a 00                	push   0x0
ffffffff80003c16:	68 bf 00 00 00       	push   0xbf
ffffffff80003c1b:	fc                   	cld    
ffffffff80003c1c:	e9 af f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c21 <isr_192>:
ffffffff80003c21:	6a 00                	push   0x0
ffffffff80003c23:	68 c0 00 00 00       	push   0xc0
ffffffff80003c28:	fc                   	cld    
ffffffff80003c29:	e9 a2 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c2e <isr_193>:
ffffffff80003c2e:	6a 00                	push   0x0
ffffffff80003c30:	68 c1 00 00 00       	push   0xc1
ffffffff80003c35:	fc                   	cld    
ffffffff80003c36:	e9 95 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c3b <isr_194>:
ffffffff80003c3b:	6a 00                	push   0x0
ffffffff80003c3d:	68 c2 00 00 00       	push   0xc2
ffffffff80003c42:	fc                   	cld    
ffffffff80003c43:	e9 88 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c48 <isr_195>:
ffffffff80003c48:	6a 00                	push   0x0
ffffffff80003c4a:	68 c3 00 00 00       	push   0xc3
ffffffff80003c4f:	fc                   	cld    
ffffffff80003c50:	e9 7b f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c55 <isr_196>:
ffffffff80003c55:	6a 00                	push   0x0
ffffffff80003c57:	68 c4 00 00 00       	push   0xc4
ffffffff80003c5c:	fc                   	cld    
ffffffff80003c5d:	e9 6e f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c62 <isr_197>:
ffffffff80003c62:	6a 00                	push   0x0
ffffffff80003c64:	68 c5 00 00 00       	push   0xc5
ffffffff80003c69:	fc                   	cld    
ffffffff80003c6a:	e9 61 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c6f <isr_198>:
ffffffff80003c6f:	6a 00                	push   0x0
ffffffff80003c71:	68 c6 00 00 00       	push   0xc6
ffffffff80003c76:	fc                   	cld    
ffffffff80003c77:	e9 54 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c7c <isr_199>:
ffffffff80003c7c:	6a 00                	push   0x0
ffffffff80003c7e:	68 c7 00 00 00       	push   0xc7
ffffffff80003c83:	fc                   	cld    
ffffffff80003c84:	e9 47 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c89 <isr_200>:
ffffffff80003c89:	6a 00                	push   0x0
ffffffff80003c8b:	68 c8 00 00 00       	push   0xc8
ffffffff80003c90:	fc                   	cld    
ffffffff80003c91:	e9 3a f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003c96 <isr_201>:
ffffffff80003c96:	6a 00                	push   0x0
ffffffff80003c98:	68 c9 00 00 00       	push   0xc9
ffffffff80003c9d:	fc                   	cld    
ffffffff80003c9e:	e9 2d f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ca3 <isr_202>:
ffffffff80003ca3:	6a 00                	push   0x0
ffffffff80003ca5:	68 ca 00 00 00       	push   0xca
ffffffff80003caa:	fc                   	cld    
ffffffff80003cab:	e9 20 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003cb0 <isr_203>:
ffffffff80003cb0:	6a 00                	push   0x0
ffffffff80003cb2:	68 cb 00 00 00       	push   0xcb
ffffffff80003cb7:	fc                   	cld    
ffffffff80003cb8:	e9 13 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003cbd <isr_204>:
ffffffff80003cbd:	6a 00                	push   0x0
ffffffff80003cbf:	68 cc 00 00 00       	push   0xcc
ffffffff80003cc4:	fc                   	cld    
ffffffff80003cc5:	e9 06 f7 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003cca <isr_205>:
ffffffff80003cca:	6a 00                	push   0x0
ffffffff80003ccc:	68 cd 00 00 00       	push   0xcd
ffffffff80003cd1:	fc                   	cld    
ffffffff80003cd2:	e9 f9 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003cd7 <isr_206>:
ffffffff80003cd7:	6a 00                	push   0x0
ffffffff80003cd9:	68 ce 00 00 00       	push   0xce
ffffffff80003cde:	fc                   	cld    
ffffffff80003cdf:	e9 ec f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ce4 <isr_207>:
ffffffff80003ce4:	6a 00                	push   0x0
ffffffff80003ce6:	68 cf 00 00 00       	push   0xcf
ffffffff80003ceb:	fc                   	cld    
ffffffff80003cec:	e9 df f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003cf1 <isr_208>:
ffffffff80003cf1:	6a 00                	push   0x0
ffffffff80003cf3:	68 d0 00 00 00       	push   0xd0
ffffffff80003cf8:	fc                   	cld    
ffffffff80003cf9:	e9 d2 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003cfe <isr_209>:
ffffffff80003cfe:	6a 00                	push   0x0
ffffffff80003d00:	68 d1 00 00 00       	push   0xd1
ffffffff80003d05:	fc                   	cld    
ffffffff80003d06:	e9 c5 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d0b <isr_210>:
ffffffff80003d0b:	6a 00                	push   0x0
ffffffff80003d0d:	68 d2 00 00 00       	push   0xd2
ffffffff80003d12:	fc                   	cld    
ffffffff80003d13:	e9 b8 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d18 <isr_211>:
ffffffff80003d18:	6a 00                	push   0x0
ffffffff80003d1a:	68 d3 00 00 00       	push   0xd3
ffffffff80003d1f:	fc                   	cld    
ffffffff80003d20:	e9 ab f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d25 <isr_212>:
ffffffff80003d25:	6a 00                	push   0x0
ffffffff80003d27:	68 d4 00 00 00       	push   0xd4
ffffffff80003d2c:	fc                   	cld    
ffffffff80003d2d:	e9 9e f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d32 <isr_213>:
ffffffff80003d32:	6a 00                	push   0x0
ffffffff80003d34:	68 d5 00 00 00       	push   0xd5
ffffffff80003d39:	fc                   	cld    
ffffffff80003d3a:	e9 91 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d3f <isr_214>:
ffffffff80003d3f:	6a 00                	push   0x0
ffffffff80003d41:	68 d6 00 00 00       	push   0xd6
ffffffff80003d46:	fc                   	cld    
ffffffff80003d47:	e9 84 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d4c <isr_215>:
ffffffff80003d4c:	6a 00                	push   0x0
ffffffff80003d4e:	68 d7 00 00 00       	push   0xd7
ffffffff80003d53:	fc                   	cld    
ffffffff80003d54:	e9 77 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d59 <isr_216>:
ffffffff80003d59:	6a 00                	push   0x0
ffffffff80003d5b:	68 d8 00 00 00       	push   0xd8
ffffffff80003d60:	fc                   	cld    
ffffffff80003d61:	e9 6a f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d66 <isr_217>:
ffffffff80003d66:	6a 00                	push   0x0
ffffffff80003d68:	68 d9 00 00 00       	push   0xd9
ffffffff80003d6d:	fc                   	cld    
ffffffff80003d6e:	e9 5d f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d73 <isr_218>:
ffffffff80003d73:	6a 00                	push   0x0
ffffffff80003d75:	68 da 00 00 00       	push   0xda
ffffffff80003d7a:	fc                   	cld    
ffffffff80003d7b:	e9 50 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d80 <isr_219>:
ffffffff80003d80:	6a 00                	push   0x0
ffffffff80003d82:	68 db 00 00 00       	push   0xdb
ffffffff80003d87:	fc                   	cld    
ffffffff80003d88:	e9 43 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d8d <isr_220>:
ffffffff80003d8d:	6a 00                	push   0x0
ffffffff80003d8f:	68 dc 00 00 00       	push   0xdc
ffffffff80003d94:	fc                   	cld    
ffffffff80003d95:	e9 36 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003d9a <isr_221>:
ffffffff80003d9a:	6a 00                	push   0x0
ffffffff80003d9c:	68 dd 00 00 00       	push   0xdd
ffffffff80003da1:	fc                   	cld    
ffffffff80003da2:	e9 29 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003da7 <isr_222>:
ffffffff80003da7:	6a 00                	push   0x0
ffffffff80003da9:	68 de 00 00 00       	push   0xde
ffffffff80003dae:	fc                   	cld    
ffffffff80003daf:	e9 1c f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003db4 <isr_223>:
ffffffff80003db4:	6a 00                	push   0x0
ffffffff80003db6:	68 df 00 00 00       	push   0xdf
ffffffff80003dbb:	fc                   	cld    
ffffffff80003dbc:	e9 0f f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003dc1 <isr_224>:
ffffffff80003dc1:	6a 00                	push   0x0
ffffffff80003dc3:	68 e0 00 00 00       	push   0xe0
ffffffff80003dc8:	fc                   	cld    
ffffffff80003dc9:	e9 02 f6 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003dce <isr_225>:
ffffffff80003dce:	6a 00                	push   0x0
ffffffff80003dd0:	68 e1 00 00 00       	push   0xe1
ffffffff80003dd5:	fc                   	cld    
ffffffff80003dd6:	e9 f5 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ddb <isr_226>:
ffffffff80003ddb:	6a 00                	push   0x0
ffffffff80003ddd:	68 e2 00 00 00       	push   0xe2
ffffffff80003de2:	fc                   	cld    
ffffffff80003de3:	e9 e8 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003de8 <isr_227>:
ffffffff80003de8:	6a 00                	push   0x0
ffffffff80003dea:	68 e3 00 00 00       	push   0xe3
ffffffff80003def:	fc                   	cld    
ffffffff80003df0:	e9 db f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003df5 <isr_228>:
ffffffff80003df5:	6a 00                	push   0x0
ffffffff80003df7:	68 e4 00 00 00       	push   0xe4
ffffffff80003dfc:	fc                   	cld    
ffffffff80003dfd:	e9 ce f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e02 <isr_229>:
ffffffff80003e02:	6a 00                	push   0x0
ffffffff80003e04:	68 e5 00 00 00       	push   0xe5
ffffffff80003e09:	fc                   	cld    
ffffffff80003e0a:	e9 c1 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e0f <isr_230>:
ffffffff80003e0f:	6a 00                	push   0x0
ffffffff80003e11:	68 e6 00 00 00       	push   0xe6
ffffffff80003e16:	fc                   	cld    
ffffffff80003e17:	e9 b4 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e1c <isr_231>:
ffffffff80003e1c:	6a 00                	push   0x0
ffffffff80003e1e:	68 e7 00 00 00       	push   0xe7
ffffffff80003e23:	fc                   	cld    
ffffffff80003e24:	e9 a7 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e29 <isr_232>:
ffffffff80003e29:	6a 00                	push   0x0
ffffffff80003e2b:	68 e8 00 00 00       	push   0xe8
ffffffff80003e30:	fc                   	cld    
ffffffff80003e31:	e9 9a f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e36 <isr_233>:
ffffffff80003e36:	6a 00                	push   0x0
ffffffff80003e38:	68 e9 00 00 00       	push   0xe9
ffffffff80003e3d:	fc                   	cld    
ffffffff80003e3e:	e9 8d f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e43 <isr_234>:
ffffffff80003e43:	6a 00                	push   0x0
ffffffff80003e45:	68 ea 00 00 00       	push   0xea
ffffffff80003e4a:	fc                   	cld    
ffffffff80003e4b:	e9 80 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e50 <isr_235>:
ffffffff80003e50:	6a 00                	push   0x0
ffffffff80003e52:	68 eb 00 00 00       	push   0xeb
ffffffff80003e57:	fc                   	cld    
ffffffff80003e58:	e9 73 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e5d <isr_236>:
ffffffff80003e5d:	6a 00                	push   0x0
ffffffff80003e5f:	68 ec 00 00 00       	push   0xec
ffffffff80003e64:	fc                   	cld    
ffffffff80003e65:	e9 66 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e6a <isr_237>:
ffffffff80003e6a:	6a 00                	push   0x0
ffffffff80003e6c:	68 ed 00 00 00       	push   0xed
ffffffff80003e71:	fc                   	cld    
ffffffff80003e72:	e9 59 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e77 <isr_238>:
ffffffff80003e77:	6a 00                	push   0x0
ffffffff80003e79:	68 ee 00 00 00       	push   0xee
ffffffff80003e7e:	fc                   	cld    
ffffffff80003e7f:	e9 4c f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e84 <isr_239>:
ffffffff80003e84:	6a 00                	push   0x0
ffffffff80003e86:	68 ef 00 00 00       	push   0xef
ffffffff80003e8b:	fc                   	cld    
ffffffff80003e8c:	e9 3f f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e91 <isr_240>:
ffffffff80003e91:	6a 00                	push   0x0
ffffffff80003e93:	68 f0 00 00 00       	push   0xf0
ffffffff80003e98:	fc                   	cld    
ffffffff80003e99:	e9 32 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003e9e <isr_241>:
ffffffff80003e9e:	6a 00                	push   0x0
ffffffff80003ea0:	68 f1 00 00 00       	push   0xf1
ffffffff80003ea5:	fc                   	cld    
ffffffff80003ea6:	e9 25 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003eab <isr_242>:
ffffffff80003eab:	6a 00                	push   0x0
ffffffff80003ead:	68 f2 00 00 00       	push   0xf2
ffffffff80003eb2:	fc                   	cld    
ffffffff80003eb3:	e9 18 f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003eb8 <isr_243>:
ffffffff80003eb8:	6a 00                	push   0x0
ffffffff80003eba:	68 f3 00 00 00       	push   0xf3
ffffffff80003ebf:	fc                   	cld    
ffffffff80003ec0:	e9 0b f5 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ec5 <isr_244>:
ffffffff80003ec5:	6a 00                	push   0x0
ffffffff80003ec7:	68 f4 00 00 00       	push   0xf4
ffffffff80003ecc:	fc                   	cld    
ffffffff80003ecd:	e9 fe f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ed2 <isr_245>:
ffffffff80003ed2:	6a 00                	push   0x0
ffffffff80003ed4:	68 f5 00 00 00       	push   0xf5
ffffffff80003ed9:	fc                   	cld    
ffffffff80003eda:	e9 f1 f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003edf <isr_246>:
ffffffff80003edf:	6a 00                	push   0x0
ffffffff80003ee1:	68 f6 00 00 00       	push   0xf6
ffffffff80003ee6:	fc                   	cld    
ffffffff80003ee7:	e9 e4 f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003eec <isr_247>:
ffffffff80003eec:	6a 00                	push   0x0
ffffffff80003eee:	68 f7 00 00 00       	push   0xf7
ffffffff80003ef3:	fc                   	cld    
ffffffff80003ef4:	e9 d7 f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003ef9 <isr_248>:
ffffffff80003ef9:	6a 00                	push   0x0
ffffffff80003efb:	68 f8 00 00 00       	push   0xf8
ffffffff80003f00:	fc                   	cld    
ffffffff80003f01:	e9 ca f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f06 <isr_249>:
ffffffff80003f06:	6a 00                	push   0x0
ffffffff80003f08:	68 f9 00 00 00       	push   0xf9
ffffffff80003f0d:	fc                   	cld    
ffffffff80003f0e:	e9 bd f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f13 <isr_250>:
ffffffff80003f13:	6a 00                	push   0x0
ffffffff80003f15:	68 fa 00 00 00       	push   0xfa
ffffffff80003f1a:	fc                   	cld    
ffffffff80003f1b:	e9 b0 f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f20 <isr_251>:
ffffffff80003f20:	6a 00                	push   0x0
ffffffff80003f22:	68 fb 00 00 00       	push   0xfb
ffffffff80003f27:	fc                   	cld    
ffffffff80003f28:	e9 a3 f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f2d <isr_252>:
ffffffff80003f2d:	6a 00                	push   0x0
ffffffff80003f2f:	68 fc 00 00 00       	push   0xfc
ffffffff80003f34:	fc                   	cld    
ffffffff80003f35:	e9 96 f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f3a <isr_253>:
ffffffff80003f3a:	6a 00                	push   0x0
ffffffff80003f3c:	68 fd 00 00 00       	push   0xfd
ffffffff80003f41:	fc                   	cld    
ffffffff80003f42:	e9 89 f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f47 <isr_254>:
ffffffff80003f47:	6a 00                	push   0x0
ffffffff80003f49:	68 fe 00 00 00       	push   0xfe
ffffffff80003f4e:	fc                   	cld    
ffffffff80003f4f:	e9 7c f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f54 <isr_255>:
ffffffff80003f54:	6a 00                	push   0x0
ffffffff80003f56:	68 ff 00 00 00       	push   0xff
ffffffff80003f5b:	fc                   	cld    
ffffffff80003f5c:	e9 6f f4 ff ff       	jmp    ffffffff800033d0 <isr_common>

ffffffff80003f61 <isr_table>:
ffffffff80003f61:	10 34 00             	adc    BYTE PTR [rax+rax*1],dh
ffffffff80003f64:	80 ff ff             	cmp    bh,0xff
ffffffff80003f67:	ff                   	(bad)  
ffffffff80003f68:	ff 17                	call   QWORD PTR [rdi]
ffffffff80003f6a:	34 00                	xor    al,0x0
ffffffff80003f6c:	80 ff ff             	cmp    bh,0xff
ffffffff80003f6f:	ff                   	(bad)  
ffffffff80003f70:	ff 1e                	call   FWORD PTR [rsi]
ffffffff80003f72:	34 00                	xor    al,0x0
ffffffff80003f74:	80 ff ff             	cmp    bh,0xff
ffffffff80003f77:	ff                   	(bad)  
ffffffff80003f78:	ff 25 34 00 80 ff    	jmp    QWORD PTR [rip+0xffffffffff800034]        # ffffffff7f803fb2 <malloc-0x7fc04e>
ffffffff80003f7e:	ff                   	(bad)  
ffffffff80003f7f:	ff                   	(bad)  
ffffffff80003f80:	ff 2c 34             	jmp    FWORD PTR [rsp+rsi*1]
ffffffff80003f83:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80003f89:	33 34 00             	xor    esi,DWORD PTR [rax+rax*1]
ffffffff80003f8c:	80 ff ff             	cmp    bh,0xff
ffffffff80003f8f:	ff                   	(bad)  
ffffffff80003f90:	ff                   	(bad)  
ffffffff80003f91:	3a 34 00             	cmp    dh,BYTE PTR [rax+rax*1]
ffffffff80003f94:	80 ff ff             	cmp    bh,0xff
ffffffff80003f97:	ff                   	(bad)  
ffffffff80003f98:	ff 41 34             	inc    DWORD PTR [rcx+0x34]
ffffffff80003f9b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80003fa1:	48 34 00             	rex.W xor al,0x0
ffffffff80003fa4:	80 ff ff             	cmp    bh,0xff
ffffffff80003fa7:	ff                   	(bad)  
ffffffff80003fa8:	ff 4d 34             	dec    DWORD PTR [rbp+0x34]
ffffffff80003fab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80003fb1:	57                   	push   rdi
ffffffff80003fb2:	34 00                	xor    al,0x0
ffffffff80003fb4:	80 ff ff             	cmp    bh,0xff
ffffffff80003fb7:	ff                   	(bad)  
ffffffff80003fb8:	ff 5f 34             	call   FWORD PTR [rdi+0x34]
ffffffff80003fbb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80003fc1:	67 34 00             	addr32 xor al,0x0
ffffffff80003fc4:	80 ff ff             	cmp    bh,0xff
ffffffff80003fc7:	ff                   	(bad)  
ffffffff80003fc8:	ff 6f 34             	jmp    FWORD PTR [rdi+0x34]
ffffffff80003fcb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80003fd1:	77 34                	ja     ffffffff80004007 <isr_table+0xa6>
ffffffff80003fd3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80003fd9:	7f 34                	jg     ffffffff8000400f <isr_table+0xae>
ffffffff80003fdb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80003fe1:	89 34 00             	mov    DWORD PTR [rax+rax*1],esi
ffffffff80003fe4:	80 ff ff             	cmp    bh,0xff
ffffffff80003fe7:	ff                   	(bad)  
ffffffff80003fe8:	ff 93 34 00 80 ff    	call   QWORD PTR [rbx-0x7fffcc]
ffffffff80003fee:	ff                   	(bad)  
ffffffff80003fef:	ff                   	(bad)  
ffffffff80003ff0:	ff 9b 34 00 80 ff    	call   FWORD PTR [rbx-0x7fffcc]
ffffffff80003ff6:	ff                   	(bad)  
ffffffff80003ff7:	ff                   	(bad)  
ffffffff80003ff8:	ff a5 34 00 80 ff    	jmp    QWORD PTR [rbp-0x7fffcc]
ffffffff80003ffe:	ff                   	(bad)  
ffffffff80003fff:	ff                   	(bad)  
ffffffff80004000:	ff af 34 00 80 ff    	jmp    FWORD PTR [rdi-0x7fffcc]
ffffffff80004006:	ff                   	(bad)  
ffffffff80004007:	ff                   	(bad)  
ffffffff80004008:	ff                   	(bad)  
ffffffff80004009:	b9 34 00 80 ff       	mov    ecx,0xff800034
ffffffff8000400e:	ff                   	(bad)  
ffffffff8000400f:	ff                   	(bad)  
ffffffff80004010:	ff c1                	inc    ecx
ffffffff80004012:	34 00                	xor    al,0x0
ffffffff80004014:	80 ff ff             	cmp    bh,0xff
ffffffff80004017:	ff                   	(bad)  
ffffffff80004018:	ff cb                	dec    ebx
ffffffff8000401a:	34 00                	xor    al,0x0
ffffffff8000401c:	80 ff ff             	cmp    bh,0xff
ffffffff8000401f:	ff                   	(bad)  
ffffffff80004020:	ff d5                	call   rbp
ffffffff80004022:	34 00                	xor    al,0x0
ffffffff80004024:	80 ff ff             	cmp    bh,0xff
ffffffff80004027:	ff                   	(bad)  
ffffffff80004028:	ff                   	(bad)  
ffffffff80004029:	df 34 00             	fbstp  TBYTE PTR [rax+rax*1]
ffffffff8000402c:	80 ff ff             	cmp    bh,0xff
ffffffff8000402f:	ff                   	(bad)  
ffffffff80004030:	ff                   	(bad)  
ffffffff80004031:	e9 34 00 80 ff       	jmp    ffffffff7f80406a <malloc-0x7fbf96>
ffffffff80004036:	ff                   	(bad)  
ffffffff80004037:	ff                   	(bad)  
ffffffff80004038:	ff f3                	push   rbx
ffffffff8000403a:	34 00                	xor    al,0x0
ffffffff8000403c:	80 ff ff             	cmp    bh,0xff
ffffffff8000403f:	ff                   	(bad)  
ffffffff80004040:	ff                   	(bad)  
ffffffff80004041:	fd                   	std    
ffffffff80004042:	34 00                	xor    al,0x0
ffffffff80004044:	80 ff ff             	cmp    bh,0xff
ffffffff80004047:	ff                   	(bad)  
ffffffff80004048:	ff 07                	inc    DWORD PTR [rdi]
ffffffff8000404a:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff8000404f:	ff                   	(bad)  
ffffffff80004050:	ff 0f                	dec    DWORD PTR [rdi]
ffffffff80004052:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff80004057:	ff                   	(bad)  
ffffffff80004058:	ff 17                	call   QWORD PTR [rdi]
ffffffff8000405a:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff8000405f:	ff                   	(bad)  
ffffffff80004060:	ff 21                	jmp    QWORD PTR [rcx]
ffffffff80004062:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff80004067:	ff                   	(bad)  
ffffffff80004068:	ff 2b                	jmp    FWORD PTR [rbx]
ffffffff8000406a:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff8000406f:	ff                   	(bad)  
ffffffff80004070:	ff 35 35 00 80 ff    	push   QWORD PTR [rip+0xffffffffff800035]        # ffffffff7f8040ab <malloc-0x7fbf55>
ffffffff80004076:	ff                   	(bad)  
ffffffff80004077:	ff                   	(bad)  
ffffffff80004078:	ff                   	(bad)  
ffffffff80004079:	3f                   	(bad)  
ffffffff8000407a:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff8000407f:	ff                   	(bad)  
ffffffff80004080:	ff 49 35             	dec    DWORD PTR [rcx+0x35]
ffffffff80004083:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004089:	53                   	push   rbx
ffffffff8000408a:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff8000408f:	ff                   	(bad)  
ffffffff80004090:	ff 5d 35             	call   FWORD PTR [rbp+0x35]
ffffffff80004093:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004099:	67 35 00 80 ff ff    	addr32 xor eax,0xffff8000
ffffffff8000409f:	ff                   	(bad)  
ffffffff800040a0:	ff 71 35             	push   QWORD PTR [rcx+0x35]
ffffffff800040a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800040a9:	7b 35                	jnp    ffffffff800040e0 <isr_table+0x17f>
ffffffff800040ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800040b1:	85 35 00 80 ff ff    	test   DWORD PTR [rip+0xffffffffffff8000],esi        # ffffffff7fffc0b7 <malloc-0x3f49>
ffffffff800040b7:	ff                   	(bad)  
ffffffff800040b8:	ff 8f 35 00 80 ff    	dec    DWORD PTR [rdi-0x7fffcb]
ffffffff800040be:	ff                   	(bad)  
ffffffff800040bf:	ff                   	(bad)  
ffffffff800040c0:	ff 99 35 00 80 ff    	call   FWORD PTR [rcx-0x7fffcb]
ffffffff800040c6:	ff                   	(bad)  
ffffffff800040c7:	ff                   	(bad)  
ffffffff800040c8:	ff a3 35 00 80 ff    	jmp    QWORD PTR [rbx-0x7fffcb]
ffffffff800040ce:	ff                   	(bad)  
ffffffff800040cf:	ff                   	(bad)  
ffffffff800040d0:	ff ad 35 00 80 ff    	jmp    FWORD PTR [rbp-0x7fffcb]
ffffffff800040d6:	ff                   	(bad)  
ffffffff800040d7:	ff                   	(bad)  
ffffffff800040d8:	ff b7 35 00 80 ff    	push   QWORD PTR [rdi-0x7fffcb]
ffffffff800040de:	ff                   	(bad)  
ffffffff800040df:	ff                   	(bad)  
ffffffff800040e0:	ff c1                	inc    ecx
ffffffff800040e2:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff800040e7:	ff                   	(bad)  
ffffffff800040e8:	ff cb                	dec    ebx
ffffffff800040ea:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff800040ef:	ff                   	(bad)  
ffffffff800040f0:	ff d5                	call   rbp
ffffffff800040f2:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff800040f7:	ff                   	(bad)  
ffffffff800040f8:	ff                   	(bad)  
ffffffff800040f9:	df 35 00 80 ff ff    	fbstp  TBYTE PTR [rip+0xffffffffffff8000]        # ffffffff7fffc0ff <malloc-0x3f01>
ffffffff800040ff:	ff                   	(bad)  
ffffffff80004100:	ff                   	(bad)  
ffffffff80004101:	e9 35 00 80 ff       	jmp    ffffffff7f80413b <malloc-0x7fbec5>
ffffffff80004106:	ff                   	(bad)  
ffffffff80004107:	ff                   	(bad)  
ffffffff80004108:	ff f3                	push   rbx
ffffffff8000410a:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff8000410f:	ff                   	(bad)  
ffffffff80004110:	ff                   	(bad)  
ffffffff80004111:	fd                   	std    
ffffffff80004112:	35 00 80 ff ff       	xor    eax,0xffff8000
ffffffff80004117:	ff                   	(bad)  
ffffffff80004118:	ff 07                	inc    DWORD PTR [rdi]
ffffffff8000411a:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004121:	11 36                	adc    DWORD PTR [rsi],esi
ffffffff80004123:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004129:	1b 36                	sbb    esi,DWORD PTR [rsi]
ffffffff8000412b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004131:	25 36 00 80 ff       	and    eax,0xff800036
ffffffff80004136:	ff                   	(bad)  
ffffffff80004137:	ff                   	(bad)  
ffffffff80004138:	ff 2f                	jmp    FWORD PTR [rdi]
ffffffff8000413a:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004141:	39 36                	cmp    DWORD PTR [rsi],esi
ffffffff80004143:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004149:	43                   	rex.XB
ffffffff8000414a:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004151:	4d                   	rex.WRB
ffffffff80004152:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004159:	57                   	push   rdi
ffffffff8000415a:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004161:	61                   	(bad)  
ffffffff80004162:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004169:	6b 36 00             	imul   esi,DWORD PTR [rsi],0x0
ffffffff8000416c:	80 ff ff             	cmp    bh,0xff
ffffffff8000416f:	ff                   	(bad)  
ffffffff80004170:	ff 75 36             	push   QWORD PTR [rbp+0x36]
ffffffff80004173:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004179:	7f 36                	jg     ffffffff800041b1 <isr_table+0x250>
ffffffff8000417b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004181:	89 36                	mov    DWORD PTR [rsi],esi
ffffffff80004183:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004189:	93                   	xchg   ebx,eax
ffffffff8000418a:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004191:	9d                   	popf   
ffffffff80004192:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff80004199:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
ffffffff8000419a:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff800041a1:	b1 36                	mov    cl,0x36
ffffffff800041a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800041a9:	bb 36 00 80 ff       	mov    ebx,0xff800036
ffffffff800041ae:	ff                   	(bad)  
ffffffff800041af:	ff                   	(bad)  
ffffffff800041b0:	ff c5                	inc    ebp
ffffffff800041b2:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff800041b9:	cf                   	iret   
ffffffff800041ba:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff800041c1:	d9 36                	fnstenv [rsi]
ffffffff800041c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800041c9:	e3 36                	jrcxz  ffffffff80004201 <isr_table+0x2a0>
ffffffff800041cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800041d1:	ed                   	in     eax,dx
ffffffff800041d2:	36 00 80 ff ff ff ff 	ss add BYTE PTR [rax-0x1],al
ffffffff800041d9:	f7 36                	div    DWORD PTR [rsi]
ffffffff800041db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800041e1:	01 37                	add    DWORD PTR [rdi],esi
ffffffff800041e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800041e9:	0b 37                	or     esi,DWORD PTR [rdi]
ffffffff800041eb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800041f1:	15 37 00 80 ff       	adc    eax,0xff800037
ffffffff800041f6:	ff                   	(bad)  
ffffffff800041f7:	ff                   	(bad)  
ffffffff800041f8:	ff 1f                	call   FWORD PTR [rdi]
ffffffff800041fa:	37                   	(bad)  
ffffffff800041fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004201:	29 37                	sub    DWORD PTR [rdi],esi
ffffffff80004203:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004209:	33 37                	xor    esi,DWORD PTR [rdi]
ffffffff8000420b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004211:	3d 37 00 80 ff       	cmp    eax,0xff800037
ffffffff80004216:	ff                   	(bad)  
ffffffff80004217:	ff                   	(bad)  
ffffffff80004218:	ff 47 37             	inc    DWORD PTR [rdi+0x37]
ffffffff8000421b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004221:	51                   	push   rcx
ffffffff80004222:	37                   	(bad)  
ffffffff80004223:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004229:	5b                   	pop    rbx
ffffffff8000422a:	37                   	(bad)  
ffffffff8000422b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004231:	65 37                	gs (bad) 
ffffffff80004233:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004239:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff8000423a:	37                   	(bad)  
ffffffff8000423b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004241:	79 37                	jns    ffffffff8000427a <isr_table+0x319>
ffffffff80004243:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004249:	83 37 00             	xor    DWORD PTR [rdi],0x0
ffffffff8000424c:	80 ff ff             	cmp    bh,0xff
ffffffff8000424f:	ff                   	(bad)  
ffffffff80004250:	ff 8d 37 00 80 ff    	dec    DWORD PTR [rbp-0x7fffc9]
ffffffff80004256:	ff                   	(bad)  
ffffffff80004257:	ff                   	(bad)  
ffffffff80004258:	ff 97 37 00 80 ff    	call   QWORD PTR [rdi-0x7fffc9]
ffffffff8000425e:	ff                   	(bad)  
ffffffff8000425f:	ff                   	(bad)  
ffffffff80004260:	ff a1 37 00 80 ff    	jmp    QWORD PTR [rcx-0x7fffc9]
ffffffff80004266:	ff                   	(bad)  
ffffffff80004267:	ff                   	(bad)  
ffffffff80004268:	ff ab 37 00 80 ff    	jmp    FWORD PTR [rbx-0x7fffc9]
ffffffff8000426e:	ff                   	(bad)  
ffffffff8000426f:	ff                   	(bad)  
ffffffff80004270:	ff b5 37 00 80 ff    	push   QWORD PTR [rbp-0x7fffc9]
ffffffff80004276:	ff                   	(bad)  
ffffffff80004277:	ff                   	(bad)  
ffffffff80004278:	ff                   	(bad)  
ffffffff80004279:	bf 37 00 80 ff       	mov    edi,0xff800037
ffffffff8000427e:	ff                   	(bad)  
ffffffff8000427f:	ff                   	(bad)  
ffffffff80004280:	ff c9                	dec    ecx
ffffffff80004282:	37                   	(bad)  
ffffffff80004283:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004289:	d3 37                	shl    DWORD PTR [rdi],cl
ffffffff8000428b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004291:	dd 37                	fnsave [rdi]
ffffffff80004293:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004299:	e7 37                	out    0x37,eax
ffffffff8000429b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800042a1:	f1                   	int1   
ffffffff800042a2:	37                   	(bad)  
ffffffff800042a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800042a9:	fb                   	sti    
ffffffff800042aa:	37                   	(bad)  
ffffffff800042ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800042b1:	05 38 00 80 ff       	add    eax,0xff800038
ffffffff800042b6:	ff                   	(bad)  
ffffffff800042b7:	ff                   	(bad)  
ffffffff800042b8:	ff 0f                	dec    DWORD PTR [rdi]
ffffffff800042ba:	38 00                	cmp    BYTE PTR [rax],al
ffffffff800042bc:	80 ff ff             	cmp    bh,0xff
ffffffff800042bf:	ff                   	(bad)  
ffffffff800042c0:	ff 19                	call   FWORD PTR [rcx]
ffffffff800042c2:	38 00                	cmp    BYTE PTR [rax],al
ffffffff800042c4:	80 ff ff             	cmp    bh,0xff
ffffffff800042c7:	ff                   	(bad)  
ffffffff800042c8:	ff 23                	jmp    QWORD PTR [rbx]
ffffffff800042ca:	38 00                	cmp    BYTE PTR [rax],al
ffffffff800042cc:	80 ff ff             	cmp    bh,0xff
ffffffff800042cf:	ff                   	(bad)  
ffffffff800042d0:	ff 2d 38 00 80 ff    	jmp    FWORD PTR [rip+0xffffffffff800038]        # ffffffff7f80430e <malloc-0x7fbcf2>
ffffffff800042d6:	ff                   	(bad)  
ffffffff800042d7:	ff                   	(bad)  
ffffffff800042d8:	ff 37                	push   QWORD PTR [rdi]
ffffffff800042da:	38 00                	cmp    BYTE PTR [rax],al
ffffffff800042dc:	80 ff ff             	cmp    bh,0xff
ffffffff800042df:	ff                   	(bad)  
ffffffff800042e0:	ff 41 38             	inc    DWORD PTR [rcx+0x38]
ffffffff800042e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800042e9:	4b 38 00             	rex.WXB cmp BYTE PTR [r8],al
ffffffff800042ec:	80 ff ff             	cmp    bh,0xff
ffffffff800042ef:	ff                   	(bad)  
ffffffff800042f0:	ff 55 38             	call   QWORD PTR [rbp+0x38]
ffffffff800042f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800042f9:	5f                   	pop    rdi
ffffffff800042fa:	38 00                	cmp    BYTE PTR [rax],al
ffffffff800042fc:	80 ff ff             	cmp    bh,0xff
ffffffff800042ff:	ff                   	(bad)  
ffffffff80004300:	ff 69 38             	jmp    FWORD PTR [rcx+0x38]
ffffffff80004303:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004309:	73 38                	jae    ffffffff80004343 <isr_table+0x3e2>
ffffffff8000430b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004311:	7d 38                	jge    ffffffff8000434b <isr_table+0x3ea>
ffffffff80004313:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004319:	87 38                	xchg   DWORD PTR [rax],edi
ffffffff8000431b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004321:	91                   	xchg   ecx,eax
ffffffff80004322:	38 00                	cmp    BYTE PTR [rax],al
ffffffff80004324:	80 ff ff             	cmp    bh,0xff
ffffffff80004327:	ff                   	(bad)  
ffffffff80004328:	ff 9b 38 00 80 ff    	call   FWORD PTR [rbx-0x7fffc8]
ffffffff8000432e:	ff                   	(bad)  
ffffffff8000432f:	ff                   	(bad)  
ffffffff80004330:	ff a5 38 00 80 ff    	jmp    QWORD PTR [rbp-0x7fffc8]
ffffffff80004336:	ff                   	(bad)  
ffffffff80004337:	ff                   	(bad)  
ffffffff80004338:	ff af 38 00 80 ff    	jmp    FWORD PTR [rdi-0x7fffc8]
ffffffff8000433e:	ff                   	(bad)  
ffffffff8000433f:	ff                   	(bad)  
ffffffff80004340:	ff                   	(bad)  
ffffffff80004341:	b9 38 00 80 ff       	mov    ecx,0xff800038
ffffffff80004346:	ff                   	(bad)  
ffffffff80004347:	ff                   	(bad)  
ffffffff80004348:	ff c3                	inc    ebx
ffffffff8000434a:	38 00                	cmp    BYTE PTR [rax],al
ffffffff8000434c:	80 ff ff             	cmp    bh,0xff
ffffffff8000434f:	ff                   	(bad)  
ffffffff80004350:	ff cd                	dec    ebp
ffffffff80004352:	38 00                	cmp    BYTE PTR [rax],al
ffffffff80004354:	80 ff ff             	cmp    bh,0xff
ffffffff80004357:	ff                   	(bad)  
ffffffff80004358:	ff d7                	call   rdi
ffffffff8000435a:	38 00                	cmp    BYTE PTR [rax],al
ffffffff8000435c:	80 ff ff             	cmp    bh,0xff
ffffffff8000435f:	ff                   	(bad)  
ffffffff80004360:	ff e1                	jmp    rcx
ffffffff80004362:	38 00                	cmp    BYTE PTR [rax],al
ffffffff80004364:	80 ff ff             	cmp    bh,0xff
ffffffff80004367:	ff                   	(bad)  
ffffffff80004368:	ff                   	(bad)  
ffffffff80004369:	ee                   	out    dx,al
ffffffff8000436a:	38 00                	cmp    BYTE PTR [rax],al
ffffffff8000436c:	80 ff ff             	cmp    bh,0xff
ffffffff8000436f:	ff                   	(bad)  
ffffffff80004370:	ff                   	(bad)  
ffffffff80004371:	fb                   	sti    
ffffffff80004372:	38 00                	cmp    BYTE PTR [rax],al
ffffffff80004374:	80 ff ff             	cmp    bh,0xff
ffffffff80004377:	ff                   	(bad)  
ffffffff80004378:	ff 08                	dec    DWORD PTR [rax]
ffffffff8000437a:	39 00                	cmp    DWORD PTR [rax],eax
ffffffff8000437c:	80 ff ff             	cmp    bh,0xff
ffffffff8000437f:	ff                   	(bad)  
ffffffff80004380:	ff 15 39 00 80 ff    	call   QWORD PTR [rip+0xffffffffff800039]        # ffffffff7f8043bf <malloc-0x7fbc41>
ffffffff80004386:	ff                   	(bad)  
ffffffff80004387:	ff                   	(bad)  
ffffffff80004388:	ff 22                	jmp    QWORD PTR [rdx]
ffffffff8000438a:	39 00                	cmp    DWORD PTR [rax],eax
ffffffff8000438c:	80 ff ff             	cmp    bh,0xff
ffffffff8000438f:	ff                   	(bad)  
ffffffff80004390:	ff 2f                	jmp    FWORD PTR [rdi]
ffffffff80004392:	39 00                	cmp    DWORD PTR [rax],eax
ffffffff80004394:	80 ff ff             	cmp    bh,0xff
ffffffff80004397:	ff                   	(bad)  
ffffffff80004398:	ff                   	(bad)  
ffffffff80004399:	3c 39                	cmp    al,0x39
ffffffff8000439b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800043a1:	49 39 00             	cmp    QWORD PTR [r8],rax
ffffffff800043a4:	80 ff ff             	cmp    bh,0xff
ffffffff800043a7:	ff                   	(bad)  
ffffffff800043a8:	ff 56 39             	call   QWORD PTR [rsi+0x39]
ffffffff800043ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800043b1:	63 39                	movsxd edi,DWORD PTR [rcx]
ffffffff800043b3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800043b9:	70 39                	jo     ffffffff800043f4 <isr_table+0x493>
ffffffff800043bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800043c1:	7d 39                	jge    ffffffff800043fc <isr_table+0x49b>
ffffffff800043c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800043c9:	8a 39                	mov    bh,BYTE PTR [rcx]
ffffffff800043cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800043d1:	97                   	xchg   edi,eax
ffffffff800043d2:	39 00                	cmp    DWORD PTR [rax],eax
ffffffff800043d4:	80 ff ff             	cmp    bh,0xff
ffffffff800043d7:	ff                   	(bad)  
ffffffff800043d8:	ff a4 39 00 80 ff ff 	jmp    QWORD PTR [rcx+rdi*1-0x8000]
ffffffff800043df:	ff                   	(bad)  
ffffffff800043e0:	ff b1 39 00 80 ff    	push   QWORD PTR [rcx-0x7fffc7]
ffffffff800043e6:	ff                   	(bad)  
ffffffff800043e7:	ff                   	(bad)  
ffffffff800043e8:	ff                   	(bad)  
ffffffff800043e9:	be 39 00 80 ff       	mov    esi,0xff800039
ffffffff800043ee:	ff                   	(bad)  
ffffffff800043ef:	ff                   	(bad)  
ffffffff800043f0:	ff cb                	dec    ebx
ffffffff800043f2:	39 00                	cmp    DWORD PTR [rax],eax
ffffffff800043f4:	80 ff ff             	cmp    bh,0xff
ffffffff800043f7:	ff                   	(bad)  
ffffffff800043f8:	ff                   	(bad)  
ffffffff800043f9:	d8 39                	fdivr  DWORD PTR [rcx]
ffffffff800043fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004401:	e5 39                	in     eax,0x39
ffffffff80004403:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004409:	f2 39 00             	repnz cmp DWORD PTR [rax],eax
ffffffff8000440c:	80 ff ff             	cmp    bh,0xff
ffffffff8000440f:	ff                   	(bad)  
ffffffff80004410:	ff                   	(bad)  
ffffffff80004411:	ff                   	(bad)  
ffffffff80004412:	39 00                	cmp    DWORD PTR [rax],eax
ffffffff80004414:	80 ff ff             	cmp    bh,0xff
ffffffff80004417:	ff                   	(bad)  
ffffffff80004418:	ff 0c 3a             	dec    DWORD PTR [rdx+rdi*1]
ffffffff8000441b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004421:	19 3a                	sbb    DWORD PTR [rdx],edi
ffffffff80004423:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004429:	26 3a 00             	es cmp al,BYTE PTR [rax]
ffffffff8000442c:	80 ff ff             	cmp    bh,0xff
ffffffff8000442f:	ff                   	(bad)  
ffffffff80004430:	ff 33                	push   QWORD PTR [rbx]
ffffffff80004432:	3a 00                	cmp    al,BYTE PTR [rax]
ffffffff80004434:	80 ff ff             	cmp    bh,0xff
ffffffff80004437:	ff                   	(bad)  
ffffffff80004438:	ff 40 3a             	inc    DWORD PTR [rax+0x3a]
ffffffff8000443b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004441:	4d 3a 00             	rex.WRB cmp r8b,BYTE PTR [r8]
ffffffff80004444:	80 ff ff             	cmp    bh,0xff
ffffffff80004447:	ff                   	(bad)  
ffffffff80004448:	ff 5a 3a             	call   FWORD PTR [rdx+0x3a]
ffffffff8000444b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004451:	67 3a 00             	cmp    al,BYTE PTR [eax]
ffffffff80004454:	80 ff ff             	cmp    bh,0xff
ffffffff80004457:	ff                   	(bad)  
ffffffff80004458:	ff 74 3a 00          	push   QWORD PTR [rdx+rdi*1+0x0]
ffffffff8000445c:	80 ff ff             	cmp    bh,0xff
ffffffff8000445f:	ff                   	(bad)  
ffffffff80004460:	ff 81 3a 00 80 ff    	inc    DWORD PTR [rcx-0x7fffc6]
ffffffff80004466:	ff                   	(bad)  
ffffffff80004467:	ff                   	(bad)  
ffffffff80004468:	ff 8e 3a 00 80 ff    	dec    DWORD PTR [rsi-0x7fffc6]
ffffffff8000446e:	ff                   	(bad)  
ffffffff8000446f:	ff                   	(bad)  
ffffffff80004470:	ff 9b 3a 00 80 ff    	call   FWORD PTR [rbx-0x7fffc6]
ffffffff80004476:	ff                   	(bad)  
ffffffff80004477:	ff                   	(bad)  
ffffffff80004478:	ff a8 3a 00 80 ff    	jmp    FWORD PTR [rax-0x7fffc6]
ffffffff8000447e:	ff                   	(bad)  
ffffffff8000447f:	ff                   	(bad)  
ffffffff80004480:	ff b5 3a 00 80 ff    	push   QWORD PTR [rbp-0x7fffc6]
ffffffff80004486:	ff                   	(bad)  
ffffffff80004487:	ff                   	(bad)  
ffffffff80004488:	ff c2                	inc    edx
ffffffff8000448a:	3a 00                	cmp    al,BYTE PTR [rax]
ffffffff8000448c:	80 ff ff             	cmp    bh,0xff
ffffffff8000448f:	ff                   	(bad)  
ffffffff80004490:	ff cf                	dec    edi
ffffffff80004492:	3a 00                	cmp    al,BYTE PTR [rax]
ffffffff80004494:	80 ff ff             	cmp    bh,0xff
ffffffff80004497:	ff                   	(bad)  
ffffffff80004498:	ff                   	(bad)  
ffffffff80004499:	dc 3a                	fdivr  QWORD PTR [rdx]
ffffffff8000449b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800044a1:	e9 3a 00 80 ff       	jmp    ffffffff7f8044e0 <malloc-0x7fbb20>
ffffffff800044a6:	ff                   	(bad)  
ffffffff800044a7:	ff                   	(bad)  
ffffffff800044a8:	ff f6                	push   rsi
ffffffff800044aa:	3a 00                	cmp    al,BYTE PTR [rax]
ffffffff800044ac:	80 ff ff             	cmp    bh,0xff
ffffffff800044af:	ff                   	(bad)  
ffffffff800044b0:	ff 03                	inc    DWORD PTR [rbx]
ffffffff800044b2:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff800044b4:	80 ff ff             	cmp    bh,0xff
ffffffff800044b7:	ff                   	(bad)  
ffffffff800044b8:	ff 10                	call   QWORD PTR [rax]
ffffffff800044ba:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff800044bc:	80 ff ff             	cmp    bh,0xff
ffffffff800044bf:	ff                   	(bad)  
ffffffff800044c0:	ff 1d 3b 00 80 ff    	call   FWORD PTR [rip+0xffffffffff80003b]        # ffffffff7f804501 <malloc-0x7fbaff>
ffffffff800044c6:	ff                   	(bad)  
ffffffff800044c7:	ff                   	(bad)  
ffffffff800044c8:	ff 2a                	jmp    FWORD PTR [rdx]
ffffffff800044ca:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff800044cc:	80 ff ff             	cmp    bh,0xff
ffffffff800044cf:	ff                   	(bad)  
ffffffff800044d0:	ff 37                	push   QWORD PTR [rdi]
ffffffff800044d2:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff800044d4:	80 ff ff             	cmp    bh,0xff
ffffffff800044d7:	ff                   	(bad)  
ffffffff800044d8:	ff 44 3b 00          	inc    DWORD PTR [rbx+rdi*1+0x0]
ffffffff800044dc:	80 ff ff             	cmp    bh,0xff
ffffffff800044df:	ff                   	(bad)  
ffffffff800044e0:	ff 51 3b             	call   QWORD PTR [rcx+0x3b]
ffffffff800044e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800044e9:	5e                   	pop    rsi
ffffffff800044ea:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff800044ec:	80 ff ff             	cmp    bh,0xff
ffffffff800044ef:	ff                   	(bad)  
ffffffff800044f0:	ff 6b 3b             	jmp    FWORD PTR [rbx+0x3b]
ffffffff800044f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800044f9:	78 3b                	js     ffffffff80004536 <isr_table+0x5d5>
ffffffff800044fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004501:	85 3b                	test   DWORD PTR [rbx],edi
ffffffff80004503:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004509:	92                   	xchg   edx,eax
ffffffff8000450a:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff8000450c:	80 ff ff             	cmp    bh,0xff
ffffffff8000450f:	ff                   	(bad)  
ffffffff80004510:	ff 9f 3b 00 80 ff    	call   FWORD PTR [rdi-0x7fffc5]
ffffffff80004516:	ff                   	(bad)  
ffffffff80004517:	ff                   	(bad)  
ffffffff80004518:	ff ac 3b 00 80 ff ff 	jmp    FWORD PTR [rbx+rdi*1-0x8000]
ffffffff8000451f:	ff                   	(bad)  
ffffffff80004520:	ff                   	(bad)  
ffffffff80004521:	b9 3b 00 80 ff       	mov    ecx,0xff80003b
ffffffff80004526:	ff                   	(bad)  
ffffffff80004527:	ff                   	(bad)  
ffffffff80004528:	ff c6                	inc    esi
ffffffff8000452a:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff8000452c:	80 ff ff             	cmp    bh,0xff
ffffffff8000452f:	ff                   	(bad)  
ffffffff80004530:	ff d3                	call   rbx
ffffffff80004532:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff80004534:	80 ff ff             	cmp    bh,0xff
ffffffff80004537:	ff                   	(bad)  
ffffffff80004538:	ff e0                	jmp    rax
ffffffff8000453a:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff8000453c:	80 ff ff             	cmp    bh,0xff
ffffffff8000453f:	ff                   	(bad)  
ffffffff80004540:	ff                   	(bad)  
ffffffff80004541:	ed                   	in     eax,dx
ffffffff80004542:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff80004544:	80 ff ff             	cmp    bh,0xff
ffffffff80004547:	ff                   	(bad)  
ffffffff80004548:	ff                   	(bad)  
ffffffff80004549:	fa                   	cli    
ffffffff8000454a:	3b 00                	cmp    eax,DWORD PTR [rax]
ffffffff8000454c:	80 ff ff             	cmp    bh,0xff
ffffffff8000454f:	ff                   	(bad)  
ffffffff80004550:	ff 07                	inc    DWORD PTR [rdi]
ffffffff80004552:	3c 00                	cmp    al,0x0
ffffffff80004554:	80 ff ff             	cmp    bh,0xff
ffffffff80004557:	ff                   	(bad)  
ffffffff80004558:	ff 14 3c             	call   QWORD PTR [rsp+rdi*1]
ffffffff8000455b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004561:	21 3c 00             	and    DWORD PTR [rax+rax*1],edi
ffffffff80004564:	80 ff ff             	cmp    bh,0xff
ffffffff80004567:	ff                   	(bad)  
ffffffff80004568:	ff 2e                	jmp    FWORD PTR [rsi]
ffffffff8000456a:	3c 00                	cmp    al,0x0
ffffffff8000456c:	80 ff ff             	cmp    bh,0xff
ffffffff8000456f:	ff                   	(bad)  
ffffffff80004570:	ff                   	(bad)  
ffffffff80004571:	3b 3c 00             	cmp    edi,DWORD PTR [rax+rax*1]
ffffffff80004574:	80 ff ff             	cmp    bh,0xff
ffffffff80004577:	ff                   	(bad)  
ffffffff80004578:	ff 48 3c             	dec    DWORD PTR [rax+0x3c]
ffffffff8000457b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004581:	55                   	push   rbp
ffffffff80004582:	3c 00                	cmp    al,0x0
ffffffff80004584:	80 ff ff             	cmp    bh,0xff
ffffffff80004587:	ff                   	(bad)  
ffffffff80004588:	ff 62 3c             	jmp    QWORD PTR [rdx+0x3c]
ffffffff8000458b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004591:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff80004592:	3c 00                	cmp    al,0x0
ffffffff80004594:	80 ff ff             	cmp    bh,0xff
ffffffff80004597:	ff                   	(bad)  
ffffffff80004598:	ff                   	(bad)  
ffffffff80004599:	7c 3c                	jl     ffffffff800045d7 <isr_table+0x676>
ffffffff8000459b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800045a1:	89 3c 00             	mov    DWORD PTR [rax+rax*1],edi
ffffffff800045a4:	80 ff ff             	cmp    bh,0xff
ffffffff800045a7:	ff                   	(bad)  
ffffffff800045a8:	ff 96 3c 00 80 ff    	call   QWORD PTR [rsi-0x7fffc4]
ffffffff800045ae:	ff                   	(bad)  
ffffffff800045af:	ff                   	(bad)  
ffffffff800045b0:	ff a3 3c 00 80 ff    	jmp    QWORD PTR [rbx-0x7fffc4]
ffffffff800045b6:	ff                   	(bad)  
ffffffff800045b7:	ff                   	(bad)  
ffffffff800045b8:	ff b0 3c 00 80 ff    	push   QWORD PTR [rax-0x7fffc4]
ffffffff800045be:	ff                   	(bad)  
ffffffff800045bf:	ff                   	(bad)  
ffffffff800045c0:	ff                   	(bad)  
ffffffff800045c1:	bd 3c 00 80 ff       	mov    ebp,0xff80003c
ffffffff800045c6:	ff                   	(bad)  
ffffffff800045c7:	ff                   	(bad)  
ffffffff800045c8:	ff ca                	dec    edx
ffffffff800045ca:	3c 00                	cmp    al,0x0
ffffffff800045cc:	80 ff ff             	cmp    bh,0xff
ffffffff800045cf:	ff                   	(bad)  
ffffffff800045d0:	ff d7                	call   rdi
ffffffff800045d2:	3c 00                	cmp    al,0x0
ffffffff800045d4:	80 ff ff             	cmp    bh,0xff
ffffffff800045d7:	ff                   	(bad)  
ffffffff800045d8:	ff e4                	jmp    rsp
ffffffff800045da:	3c 00                	cmp    al,0x0
ffffffff800045dc:	80 ff ff             	cmp    bh,0xff
ffffffff800045df:	ff                   	(bad)  
ffffffff800045e0:	ff f1                	push   rcx
ffffffff800045e2:	3c 00                	cmp    al,0x0
ffffffff800045e4:	80 ff ff             	cmp    bh,0xff
ffffffff800045e7:	ff                   	(bad)  
ffffffff800045e8:	ff                   	(bad)  
ffffffff800045e9:	fe                   	(bad)  
ffffffff800045ea:	3c 00                	cmp    al,0x0
ffffffff800045ec:	80 ff ff             	cmp    bh,0xff
ffffffff800045ef:	ff                   	(bad)  
ffffffff800045f0:	ff 0b                	dec    DWORD PTR [rbx]
ffffffff800045f2:	3d 00 80 ff ff       	cmp    eax,0xffff8000
ffffffff800045f7:	ff                   	(bad)  
ffffffff800045f8:	ff 18                	call   FWORD PTR [rax]
ffffffff800045fa:	3d 00 80 ff ff       	cmp    eax,0xffff8000
ffffffff800045ff:	ff                   	(bad)  
ffffffff80004600:	ff 25 3d 00 80 ff    	jmp    QWORD PTR [rip+0xffffffffff80003d]        # ffffffff7f804643 <malloc-0x7fb9bd>
ffffffff80004606:	ff                   	(bad)  
ffffffff80004607:	ff                   	(bad)  
ffffffff80004608:	ff 32                	push   QWORD PTR [rdx]
ffffffff8000460a:	3d 00 80 ff ff       	cmp    eax,0xffff8000
ffffffff8000460f:	ff                   	(bad)  
ffffffff80004610:	ff                   	(bad)  
ffffffff80004611:	3f                   	(bad)  
ffffffff80004612:	3d 00 80 ff ff       	cmp    eax,0xffff8000
ffffffff80004617:	ff                   	(bad)  
ffffffff80004618:	ff 4c 3d 00          	dec    DWORD PTR [rbp+rdi*1+0x0]
ffffffff8000461c:	80 ff ff             	cmp    bh,0xff
ffffffff8000461f:	ff                   	(bad)  
ffffffff80004620:	ff 59 3d             	call   FWORD PTR [rcx+0x3d]
ffffffff80004623:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004629:	66 3d 00 80          	cmp    ax,0x8000
ffffffff8000462d:	ff                   	(bad)  
ffffffff8000462e:	ff                   	(bad)  
ffffffff8000462f:	ff                   	(bad)  
ffffffff80004630:	ff 73 3d             	push   QWORD PTR [rbx+0x3d]
ffffffff80004633:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004639:	80 3d 00 80 ff ff ff 	cmp    BYTE PTR [rip+0xffffffffffff8000],0xff        # ffffffff7fffc640 <malloc-0x39c0>
ffffffff80004640:	ff 8d 3d 00 80 ff    	dec    DWORD PTR [rbp-0x7fffc3]
ffffffff80004646:	ff                   	(bad)  
ffffffff80004647:	ff                   	(bad)  
ffffffff80004648:	ff 9a 3d 00 80 ff    	call   FWORD PTR [rdx-0x7fffc3]
ffffffff8000464e:	ff                   	(bad)  
ffffffff8000464f:	ff                   	(bad)  
ffffffff80004650:	ff a7 3d 00 80 ff    	jmp    QWORD PTR [rdi-0x7fffc3]
ffffffff80004656:	ff                   	(bad)  
ffffffff80004657:	ff                   	(bad)  
ffffffff80004658:	ff b4 3d 00 80 ff ff 	push   QWORD PTR [rbp+rdi*1-0x8000]
ffffffff8000465f:	ff                   	(bad)  
ffffffff80004660:	ff c1                	inc    ecx
ffffffff80004662:	3d 00 80 ff ff       	cmp    eax,0xffff8000
ffffffff80004667:	ff                   	(bad)  
ffffffff80004668:	ff ce                	dec    esi
ffffffff8000466a:	3d 00 80 ff ff       	cmp    eax,0xffff8000
ffffffff8000466f:	ff                   	(bad)  
ffffffff80004670:	ff                   	(bad)  
ffffffff80004671:	db 3d 00 80 ff ff    	fstp   TBYTE PTR [rip+0xffffffffffff8000]        # ffffffff7fffc677 <malloc-0x3989>
ffffffff80004677:	ff                   	(bad)  
ffffffff80004678:	ff                   	(bad)  
ffffffff80004679:	e8 3d 00 80 ff       	call   ffffffff7f8046bb <malloc-0x7fb945>
ffffffff8000467e:	ff                   	(bad)  
ffffffff8000467f:	ff                   	(bad)  
ffffffff80004680:	ff f5                	push   rbp
ffffffff80004682:	3d 00 80 ff ff       	cmp    eax,0xffff8000
ffffffff80004687:	ff                   	(bad)  
ffffffff80004688:	ff 02                	inc    DWORD PTR [rdx]
ffffffff8000468a:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff80004691:	0f 3e                	(bad)  
ffffffff80004693:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004699:	1c 3e                	sbb    al,0x3e
ffffffff8000469b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800046a1:	29 3e                	sub    DWORD PTR [rsi],edi
ffffffff800046a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800046a9:	36 3e 00 80 ff ff ff 	ss ds add BYTE PTR [rax-0x1],al
ffffffff800046b0:	ff 
ffffffff800046b1:	43                   	rex.XB
ffffffff800046b2:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff800046b9:	50                   	push   rax
ffffffff800046ba:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff800046c1:	5d                   	pop    rbp
ffffffff800046c2:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff800046c9:	6a 3e                	push   0x3e
ffffffff800046cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800046d1:	77 3e                	ja     ffffffff80004711 <isr_table+0x7b0>
ffffffff800046d3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800046d9:	84 3e                	test   BYTE PTR [rsi],bh
ffffffff800046db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800046e1:	91                   	xchg   ecx,eax
ffffffff800046e2:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff800046e9:	9e                   	sahf   
ffffffff800046ea:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff800046f1:	ab                   	stos   DWORD PTR es:[rdi],eax
ffffffff800046f2:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff800046f9:	b8 3e 00 80 ff       	mov    eax,0xff80003e
ffffffff800046fe:	ff                   	(bad)  
ffffffff800046ff:	ff                   	(bad)  
ffffffff80004700:	ff c5                	inc    ebp
ffffffff80004702:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff80004709:	d2 3e                	sar    BYTE PTR [rsi],cl
ffffffff8000470b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004711:	df 3e                	fistp  QWORD PTR [rsi]
ffffffff80004713:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004719:	ec                   	in     al,dx
ffffffff8000471a:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff80004721:	f9                   	stc    
ffffffff80004722:	3e 00 80 ff ff ff ff 	ds add BYTE PTR [rax-0x1],al
ffffffff80004729:	06                   	(bad)  
ffffffff8000472a:	3f                   	(bad)  
ffffffff8000472b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004731:	13 3f                	adc    edi,DWORD PTR [rdi]
ffffffff80004733:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004739:	20 3f                	and    BYTE PTR [rdi],bh
ffffffff8000473b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004741:	2d 3f 00 80 ff       	sub    eax,0xff80003f
ffffffff80004746:	ff                   	(bad)  
ffffffff80004747:	ff                   	(bad)  
ffffffff80004748:	ff                   	(bad)  
ffffffff80004749:	3a 3f                	cmp    bh,BYTE PTR [rdi]
ffffffff8000474b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004751:	47 3f                	rex.RXB (bad) 
ffffffff80004753:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80004759:	54                   	push   rsp
ffffffff8000475a:	3f                   	(bad)  
ffffffff8000475b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al

ffffffff80004761 <LoadIdt>:
ffffffff80004761:	0f 01 1f             	lidt   [rdi]
ffffffff80004764:	c3                   	ret    
ffffffff80004765:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000476c:	00 00 00 
ffffffff8000476f:	90                   	nop

ffffffff80004770 <LoadGdt>:
ffffffff80004770:	0f 01 17             	lgdt   [rdi]
ffffffff80004773:	66 b8 10 00          	mov    ax,0x10
ffffffff80004777:	8e d8                	mov    ds,eax
ffffffff80004779:	8e c0                	mov    es,eax
ffffffff8000477b:	8e d0                	mov    ss,eax
ffffffff8000477d:	48 b8 8c 47 00 80 ff 	movabs rax,0xffffffff8000478c
ffffffff80004784:	ff ff ff 
ffffffff80004787:	6a 08                	push   0x8
ffffffff80004789:	50                   	push   rax
ffffffff8000478a:	48 cb                	retfq  

ffffffff8000478c <LoadGdt.trampoline>:
ffffffff8000478c:	c3                   	ret    
