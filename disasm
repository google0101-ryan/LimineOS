
hdd_root/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <getexp(unsigned int)>:
ffffffff80000000:	55                   	push   rbp
ffffffff80000001:	48 89 e5             	mov    rbp,rsp
ffffffff80000004:	48 83 ec 18          	sub    rsp,0x18
ffffffff80000008:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff8000000b:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffffffff80000012:	77 07                	ja     ffffffff8000001b <getexp(unsigned int)+0x1b>
ffffffff80000014:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff80000019:	eb 2f                	jmp    ffffffff8000004a <getexp(unsigned int)+0x4a>
ffffffff8000001b:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff80000022:	eb 17                	jmp    ffffffff8000003b <getexp(unsigned int)+0x3b>
ffffffff80000024:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000027:	ba 01 00 00 00       	mov    edx,0x1
ffffffff8000002c:	89 c1                	mov    ecx,eax
ffffffff8000002e:	d3 e2                	shl    edx,cl
ffffffff80000030:	89 d0                	mov    eax,edx
ffffffff80000032:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffffffff80000035:	72 0c                	jb     ffffffff80000043 <getexp(unsigned int)+0x43>
ffffffff80000037:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff8000003b:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffffffff8000003f:	7e e3                	jle    ffffffff80000024 <getexp(unsigned int)+0x24>
ffffffff80000041:	eb 01                	jmp    ffffffff80000044 <getexp(unsigned int)+0x44>
ffffffff80000043:	90                   	nop
ffffffff80000044:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000047:	83 e8 01             	sub    eax,0x1
ffffffff8000004a:	c9                   	leave  
ffffffff8000004b:	c3                   	ret    

ffffffff8000004c <liballoc_memset(void*, int, unsigned long)>:
ffffffff8000004c:	f3 0f 1e fa          	endbr64 
ffffffff80000050:	55                   	push   rbp
ffffffff80000051:	48 89 e5             	mov    rbp,rsp
ffffffff80000054:	48 83 ec 28          	sub    rsp,0x28
ffffffff80000058:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000005c:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff8000005f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80000063:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff8000006a:	eb 16                	jmp    ffffffff80000082 <liballoc_memset(void*, int, unsigned long)+0x36>
ffffffff8000006c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000006f:	48 63 d0             	movsxd rdx,eax
ffffffff80000072:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000076:	48 01 d0             	add    rax,rdx
ffffffff80000079:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff8000007c:	88 10                	mov    BYTE PTR [rax],dl
ffffffff8000007e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80000082:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000085:	48 98                	cdqe   
ffffffff80000087:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffffffff8000008b:	77 df                	ja     ffffffff8000006c <liballoc_memset(void*, int, unsigned long)+0x20>
ffffffff8000008d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000091:	c9                   	leave  
ffffffff80000092:	c3                   	ret    

ffffffff80000093 <liballoc_memcpy(void*, void const*, unsigned long)>:
ffffffff80000093:	f3 0f 1e fa          	endbr64 
ffffffff80000097:	55                   	push   rbp
ffffffff80000098:	48 89 e5             	mov    rbp,rsp
ffffffff8000009b:	48 83 ec 38          	sub    rsp,0x38
ffffffff8000009f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800000a3:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800000a7:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff800000ab:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800000af:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800000b3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800000b7:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800000bb:	eb 21                	jmp    ffffffff800000de <liballoc_memcpy(void*, void const*, unsigned long)+0x4b>
ffffffff800000bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800000c1:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffffffff800000c5:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff800000c9:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff800000cb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800000cf:	48 8d 48 04          	lea    rcx,[rax+0x4]
ffffffff800000d3:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff800000d7:	89 10                	mov    DWORD PTR [rax],edx
ffffffff800000d9:	48 83 6d c8 04       	sub    QWORD PTR [rbp-0x38],0x4
ffffffff800000de:	48 83 7d c8 03       	cmp    QWORD PTR [rbp-0x38],0x3
ffffffff800000e3:	77 d8                	ja     ffffffff800000bd <liballoc_memcpy(void*, void const*, unsigned long)+0x2a>
ffffffff800000e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800000e9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800000ed:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800000f1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800000f5:	eb 22                	jmp    ffffffff80000119 <liballoc_memcpy(void*, void const*, unsigned long)+0x86>
ffffffff800000f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800000fb:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800000ff:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff80000103:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80000106:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000010a:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffffffff8000010e:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff80000112:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80000114:	48 83 6d c8 01       	sub    QWORD PTR [rbp-0x38],0x1
ffffffff80000119:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffffffff8000011e:	75 d7                	jne    ffffffff800000f7 <liballoc_memcpy(void*, void const*, unsigned long)+0x64>
ffffffff80000120:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000124:	c9                   	leave  
ffffffff80000125:	c3                   	ret    

ffffffff80000126 <insert_tag(boundary_tag*, int)>:
ffffffff80000126:	55                   	push   rbp
ffffffff80000127:	48 89 e5             	mov    rbp,rsp
ffffffff8000012a:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000012e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000132:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80000135:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffffffff80000139:	79 23                	jns    ffffffff8000015e <insert_tag(boundary_tag*, int)+0x38>
ffffffff8000013b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000013f:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000142:	83 e8 30             	sub    eax,0x30
ffffffff80000145:	89 c7                	mov    edi,eax
ffffffff80000147:	e8 b4 fe ff ff       	call   ffffffff80000000 <getexp(unsigned int)>
ffffffff8000014c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000014f:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
ffffffff80000153:	7f 0f                	jg     ffffffff80000164 <insert_tag(boundary_tag*, int)+0x3e>
ffffffff80000155:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff8000015c:	eb 06                	jmp    ffffffff80000164 <insert_tag(boundary_tag*, int)+0x3e>
ffffffff8000015e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80000161:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000164:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000168:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff8000016b:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
ffffffff8000016e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000171:	48 98                	cdqe   
ffffffff80000173:	48 8b 04 c5 e0 9b 00 	mov    rax,QWORD PTR [rax*8-0x7fff6420]
ffffffff8000017a:	80 
ffffffff8000017b:	48 85 c0             	test   rax,rax
ffffffff8000017e:	74 2a                	je     ffffffff800001aa <insert_tag(boundary_tag*, int)+0x84>
ffffffff80000180:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000183:	48 98                	cdqe   
ffffffff80000185:	48 8b 04 c5 e0 9b 00 	mov    rax,QWORD PTR [rax*8-0x7fff6420]
ffffffff8000018c:	80 
ffffffff8000018d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80000191:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
ffffffff80000195:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000198:	48 98                	cdqe   
ffffffff8000019a:	48 8b 14 c5 e0 9b 00 	mov    rdx,QWORD PTR [rax*8-0x7fff6420]
ffffffff800001a1:	80 
ffffffff800001a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800001a6:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff800001aa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800001ad:	48 98                	cdqe   
ffffffff800001af:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800001b3:	48 89 14 c5 e0 9b 00 	mov    QWORD PTR [rax*8-0x7fff6420],rdx
ffffffff800001ba:	80 
ffffffff800001bb:	90                   	nop
ffffffff800001bc:	c9                   	leave  
ffffffff800001bd:	c3                   	ret    

ffffffff800001be <remove_tag(boundary_tag*)>:
ffffffff800001be:	55                   	push   rbp
ffffffff800001bf:	48 89 e5             	mov    rbp,rsp
ffffffff800001c2:	48 83 ec 08          	sub    rsp,0x8
ffffffff800001c6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800001ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800001ce:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff800001d1:	48 98                	cdqe   
ffffffff800001d3:	48 8b 04 c5 e0 9b 00 	mov    rax,QWORD PTR [rax*8-0x7fff6420]
ffffffff800001da:	80 
ffffffff800001db:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff800001df:	75 1a                	jne    ffffffff800001fb <remove_tag(boundary_tag*)+0x3d>
ffffffff800001e1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800001e5:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
ffffffff800001e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800001ec:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffffffff800001f0:	48 63 c1             	movsxd rax,ecx
ffffffff800001f3:	48 89 14 c5 e0 9b 00 	mov    QWORD PTR [rax*8-0x7fff6420],rdx
ffffffff800001fa:	80 
ffffffff800001fb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800001ff:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffffffff80000203:	48 85 c0             	test   rax,rax
ffffffff80000206:	74 14                	je     ffffffff8000021c <remove_tag(boundary_tag*)+0x5e>
ffffffff80000208:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000020c:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffffffff80000210:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80000214:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffffffff80000218:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff8000021c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000220:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80000224:	48 85 c0             	test   rax,rax
ffffffff80000227:	74 14                	je     ffffffff8000023d <remove_tag(boundary_tag*)+0x7f>
ffffffff80000229:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000022d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80000231:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80000235:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffffffff80000239:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
ffffffff8000023d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000241:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff80000248:	00 
ffffffff80000249:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000024d:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffffffff80000254:	00 
ffffffff80000255:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000259:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [rax+0xc],0xffffffff
ffffffff80000260:	90                   	nop
ffffffff80000261:	c9                   	leave  
ffffffff80000262:	c3                   	ret    

ffffffff80000263 <melt_left(boundary_tag*)>:
ffffffff80000263:	55                   	push   rbp
ffffffff80000264:	48 89 e5             	mov    rbp,rsp
ffffffff80000267:	48 83 ec 18          	sub    rsp,0x18
ffffffff8000026b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000026f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000273:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000277:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000027b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000027f:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80000282:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000286:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000289:	01 c2                	add    edx,eax
ffffffff8000028b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000028f:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff80000292:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000296:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff8000029a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000029e:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff800002a2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800002a6:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800002aa:	48 85 c0             	test   rax,rax
ffffffff800002ad:	74 10                	je     ffffffff800002bf <melt_left(boundary_tag*)+0x5c>
ffffffff800002af:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800002b3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800002b7:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800002bb:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800002bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800002c3:	c9                   	leave  
ffffffff800002c4:	c3                   	ret    

ffffffff800002c5 <absorb_right(boundary_tag*)>:
ffffffff800002c5:	55                   	push   rbp
ffffffff800002c6:	48 89 e5             	mov    rbp,rsp
ffffffff800002c9:	48 83 ec 18          	sub    rsp,0x18
ffffffff800002cd:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800002d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800002d5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800002d9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800002dd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800002e1:	48 89 c7             	mov    rdi,rax
ffffffff800002e4:	e8 d5 fe ff ff       	call   ffffffff800001be <remove_tag(boundary_tag*)>
ffffffff800002e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800002ed:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800002f0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800002f4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800002f7:	01 c2                	add    edx,eax
ffffffff800002f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800002fd:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff80000300:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000304:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff80000308:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000030c:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff80000310:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000314:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80000318:	48 85 c0             	test   rax,rax
ffffffff8000031b:	74 10                	je     ffffffff8000032d <absorb_right(boundary_tag*)+0x68>
ffffffff8000031d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000321:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80000325:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80000329:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff8000032d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000331:	c9                   	leave  
ffffffff80000332:	c3                   	ret    

ffffffff80000333 <split_tag(boundary_tag*)>:
ffffffff80000333:	55                   	push   rbp
ffffffff80000334:	48 89 e5             	mov    rbp,rsp
ffffffff80000337:	48 83 ec 18          	sub    rsp,0x18
ffffffff8000033b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000033f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000343:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80000346:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000034a:	8b 48 04             	mov    ecx,DWORD PTR [rax+0x4]
ffffffff8000034d:	89 d0                	mov    eax,edx
ffffffff8000034f:	29 c8                	sub    eax,ecx
ffffffff80000351:	83 e8 30             	sub    eax,0x30
ffffffff80000354:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000357:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000035b:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff8000035e:	89 c2                	mov    edx,eax
ffffffff80000360:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000364:	48 01 d0             	add    rax,rdx
ffffffff80000367:	48 83 c0 30          	add    rax,0x30
ffffffff8000036b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000036f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000373:	c7 00 de c0 01 c0    	mov    DWORD PTR [rax],0xc001c0de
ffffffff80000379:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000037d:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80000380:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff80000383:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000387:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff8000038e:	00 
ffffffff8000038f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000393:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffffffff8000039a:	00 
ffffffff8000039b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000039f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800003a3:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800003a7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800003ab:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff800003af:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800003b3:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff800003b7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800003bb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800003bf:	48 85 c0             	test   rax,rax
ffffffff800003c2:	74 10                	je     ffffffff800003d4 <split_tag(boundary_tag*)+0xa1>
ffffffff800003c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800003c8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800003cc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800003d0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800003d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800003d8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800003dc:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff800003e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800003e4:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800003e7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800003eb:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800003ee:	29 c2                	sub    edx,eax
ffffffff800003f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800003f4:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff800003f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800003fb:	be ff ff ff ff       	mov    esi,0xffffffff
ffffffff80000400:	48 89 c7             	mov    rdi,rax
ffffffff80000403:	e8 1e fd ff ff       	call   ffffffff80000126 <insert_tag(boundary_tag*, int)>
ffffffff80000408:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000040c:	c9                   	leave  
ffffffff8000040d:	c3                   	ret    

ffffffff8000040e <allocate_new_tag(unsigned int)>:
ffffffff8000040e:	f3 0f 1e fa          	endbr64 
ffffffff80000412:	55                   	push   rbp
ffffffff80000413:	48 89 e5             	mov    rbp,rsp
ffffffff80000416:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000041a:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff8000041d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80000420:	83 c0 30             	add    eax,0x30
ffffffff80000423:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80000426:	8b 05 34 90 00 00    	mov    eax,DWORD PTR [rip+0x9034]        # ffffffff80009460 <l_pageSize>
ffffffff8000042c:	89 c6                	mov    esi,eax
ffffffff8000042e:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80000431:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000436:	f7 f6                	div    esi
ffffffff80000438:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000043b:	8b 05 1f 90 00 00    	mov    eax,DWORD PTR [rip+0x901f]        # ffffffff80009460 <l_pageSize>
ffffffff80000441:	89 c1                	mov    ecx,eax
ffffffff80000443:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80000446:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000044b:	f7 f1                	div    ecx
ffffffff8000044d:	89 d0                	mov    eax,edx
ffffffff8000044f:	85 c0                	test   eax,eax
ffffffff80000451:	74 04                	je     ffffffff80000457 <allocate_new_tag(unsigned int)+0x49>
ffffffff80000453:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80000457:	8b 05 07 90 00 00    	mov    eax,DWORD PTR [rip+0x9007]        # ffffffff80009464 <l_pageCount>
ffffffff8000045d:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffffffff80000460:	73 09                	jae    ffffffff8000046b <allocate_new_tag(unsigned int)+0x5d>
ffffffff80000462:	8b 05 fc 8f 00 00    	mov    eax,DWORD PTR [rip+0x8ffc]        # ffffffff80009464 <l_pageCount>
ffffffff80000468:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000046b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000046e:	89 c7                	mov    edi,eax
ffffffff80000470:	e8 5f 05 00 00       	call   ffffffff800009d4 <liballoc_alloc>
ffffffff80000475:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000479:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff8000047e:	75 07                	jne    ffffffff80000487 <allocate_new_tag(unsigned int)+0x79>
ffffffff80000480:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000485:	eb 66                	jmp    ffffffff800004ed <allocate_new_tag(unsigned int)+0xdf>
ffffffff80000487:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000048b:	c7 00 de c0 01 c0    	mov    DWORD PTR [rax],0xc001c0de
ffffffff80000491:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000495:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80000498:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
ffffffff8000049b:	8b 05 bf 8f 00 00    	mov    eax,DWORD PTR [rip+0x8fbf]        # ffffffff80009460 <l_pageSize>
ffffffff800004a1:	0f af 45 fc          	imul   eax,DWORD PTR [rbp-0x4]
ffffffff800004a5:	89 c2                	mov    edx,eax
ffffffff800004a7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004ab:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff800004ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004b2:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [rax+0xc],0xffffffff
ffffffff800004b9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004bd:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff800004c4:	00 
ffffffff800004c5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004c9:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffffffff800004d0:	00 
ffffffff800004d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004d5:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffffffff800004dc:	00 
ffffffff800004dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004e1:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffffffff800004e8:	00 
ffffffff800004e9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800004ed:	c9                   	leave  
ffffffff800004ee:	c3                   	ret    

ffffffff800004ef <malloc>:
ffffffff800004ef:	f3 0f 1e fa          	endbr64 
ffffffff800004f3:	55                   	push   rbp
ffffffff800004f4:	48 89 e5             	mov    rbp,rsp
ffffffff800004f7:	48 83 ec 40          	sub    rsp,0x40
ffffffff800004fb:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff800004ff:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80000506:	00 
ffffffff80000507:	e8 aa 04 00 00       	call   ffffffff800009b6 <liballoc_lock>
ffffffff8000050c:	8b 05 4e 98 00 00    	mov    eax,DWORD PTR [rip+0x984e]        # ffffffff80009d60 <l_initialized>
ffffffff80000512:	85 c0                	test   eax,eax
ffffffff80000514:	75 3e                	jne    ffffffff80000554 <malloc+0x65>
ffffffff80000516:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff8000051d:	eb 25                	jmp    ffffffff80000544 <malloc+0x55>
ffffffff8000051f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000522:	48 98                	cdqe   
ffffffff80000524:	48 c7 04 c5 e0 9b 00 	mov    QWORD PTR [rax*8-0x7fff6420],0x0
ffffffff8000052b:	80 00 00 00 00 
ffffffff80000530:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000533:	48 98                	cdqe   
ffffffff80000535:	c7 04 85 e0 9c 00 80 	mov    DWORD PTR [rax*4-0x7fff6320],0x0
ffffffff8000053c:	00 00 00 00 
ffffffff80000540:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80000544:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffffffff80000548:	7e d5                	jle    ffffffff8000051f <malloc+0x30>
ffffffff8000054a:	c7 05 0c 98 00 00 01 	mov    DWORD PTR [rip+0x980c],0x1        # ffffffff80009d60 <l_initialized>
ffffffff80000551:	00 00 00 
ffffffff80000554:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80000558:	89 c7                	mov    edi,eax
ffffffff8000055a:	e8 a1 fa ff ff       	call   ffffffff80000000 <getexp(unsigned int)>
ffffffff8000055f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000562:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
ffffffff80000566:	7f 07                	jg     ffffffff8000056f <malloc+0x80>
ffffffff80000568:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff8000056f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000572:	48 98                	cdqe   
ffffffff80000574:	48 8b 04 c5 e0 9b 00 	mov    rax,QWORD PTR [rax*8-0x7fff6420]
ffffffff8000057b:	80 
ffffffff8000057c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000580:	eb 26                	jmp    ffffffff800005a8 <malloc+0xb9>
ffffffff80000582:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000586:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000589:	89 c0                	mov    eax,eax
ffffffff8000058b:	48 8d 50 d0          	lea    rdx,[rax-0x30]
ffffffff8000058f:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80000593:	48 83 c0 30          	add    rax,0x30
ffffffff80000597:	48 39 c2             	cmp    rdx,rax
ffffffff8000059a:	73 15                	jae    ffffffff800005b1 <malloc+0xc2>
ffffffff8000059c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005a0:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff800005a4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800005a8:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff800005ad:	75 d3                	jne    ffffffff80000582 <malloc+0x93>
ffffffff800005af:	eb 01                	jmp    ffffffff800005b2 <malloc+0xc3>
ffffffff800005b1:	90                   	nop
ffffffff800005b2:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff800005b7:	75 40                	jne    ffffffff800005f9 <malloc+0x10a>
ffffffff800005b9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800005bd:	89 c7                	mov    edi,eax
ffffffff800005bf:	e8 4a fe ff ff       	call   ffffffff8000040e <allocate_new_tag(unsigned int)>
ffffffff800005c4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800005c8:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff800005cd:	0f 94 c0             	sete   al
ffffffff800005d0:	84 c0                	test   al,al
ffffffff800005d2:	74 0f                	je     ffffffff800005e3 <malloc+0xf4>
ffffffff800005d4:	e8 ec 03 00 00       	call   ffffffff800009c5 <liballoc_unlock>
ffffffff800005d9:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800005de:	e9 b6 00 00 00       	jmp    ffffffff80000699 <malloc+0x1aa>
ffffffff800005e3:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005e7:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800005ea:	83 e8 30             	sub    eax,0x30
ffffffff800005ed:	89 c7                	mov    edi,eax
ffffffff800005ef:	e8 0c fa ff ff       	call   ffffffff80000000 <getexp(unsigned int)>
ffffffff800005f4:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800005f7:	eb 41                	jmp    ffffffff8000063a <malloc+0x14b>
ffffffff800005f9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005fd:	48 89 c7             	mov    rdi,rax
ffffffff80000600:	e8 b9 fb ff ff       	call   ffffffff800001be <remove_tag(boundary_tag*)>
ffffffff80000605:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000609:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000060d:	48 85 c0             	test   rax,rax
ffffffff80000610:	75 28                	jne    ffffffff8000063a <malloc+0x14b>
ffffffff80000612:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000616:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff8000061a:	48 85 c0             	test   rax,rax
ffffffff8000061d:	75 1b                	jne    ffffffff8000063a <malloc+0x14b>
ffffffff8000061f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000622:	48 98                	cdqe   
ffffffff80000624:	8b 04 85 e0 9c 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff6320]
ffffffff8000062b:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff8000062e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000631:	48 98                	cdqe   
ffffffff80000633:	89 14 85 e0 9c 00 80 	mov    DWORD PTR [rax*4-0x7fff6320],edx
ffffffff8000063a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000063e:	89 c2                	mov    edx,eax
ffffffff80000640:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000644:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
ffffffff80000647:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000064b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000064e:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffffffff80000652:	29 d0                	sub    eax,edx
ffffffff80000654:	83 e8 60             	sub    eax,0x60
ffffffff80000657:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff8000065a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000065d:	85 c0                	test   eax,eax
ffffffff8000065f:	7e 23                	jle    ffffffff80000684 <malloc+0x195>
ffffffff80000661:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80000664:	89 c7                	mov    edi,eax
ffffffff80000666:	e8 95 f9 ff ff       	call   ffffffff80000000 <getexp(unsigned int)>
ffffffff8000066b:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000066e:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffffffff80000672:	78 10                	js     ffffffff80000684 <malloc+0x195>
ffffffff80000674:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000678:	48 89 c7             	mov    rdi,rax
ffffffff8000067b:	e8 b3 fc ff ff       	call   ffffffff80000333 <split_tag(boundary_tag*)>
ffffffff80000680:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80000684:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000688:	48 83 c0 30          	add    rax,0x30
ffffffff8000068c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80000690:	e8 30 03 00 00       	call   ffffffff800009c5 <liballoc_unlock>
ffffffff80000695:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000699:	c9                   	leave  
ffffffff8000069a:	c3                   	ret    

ffffffff8000069b <free>:
ffffffff8000069b:	f3 0f 1e fa          	endbr64 
ffffffff8000069f:	55                   	push   rbp
ffffffff800006a0:	48 89 e5             	mov    rbp,rsp
ffffffff800006a3:	48 83 ec 30          	sub    rsp,0x30
ffffffff800006a7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800006ab:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff800006b0:	0f 84 7a 01 00 00    	je     ffffffff80000830 <free+0x195>
ffffffff800006b6:	e8 fb 02 00 00       	call   ffffffff800009b6 <liballoc_lock>
ffffffff800006bb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800006bf:	48 83 e8 30          	sub    rax,0x30
ffffffff800006c3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800006c7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006cb:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800006cd:	3d de c0 01 c0       	cmp    eax,0xc001c0de
ffffffff800006d2:	74 26                	je     ffffffff800006fa <free+0x5f>
ffffffff800006d4:	e8 ec 02 00 00       	call   ffffffff800009c5 <liballoc_unlock>
ffffffff800006d9:	e9 53 01 00 00       	jmp    ffffffff80000831 <free+0x196>
ffffffff800006de:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006e2:	48 89 c7             	mov    rdi,rax
ffffffff800006e5:	e8 79 fb ff ff       	call   ffffffff80000263 <melt_left(boundary_tag*)>
ffffffff800006ea:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800006ee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006f2:	48 89 c7             	mov    rdi,rax
ffffffff800006f5:	e8 c4 fa ff ff       	call   ffffffff800001be <remove_tag(boundary_tag*)>
ffffffff800006fa:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006fe:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000702:	48 85 c0             	test   rax,rax
ffffffff80000705:	74 21                	je     ffffffff80000728 <free+0x8d>
ffffffff80000707:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000070b:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000070f:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff80000712:	85 c0                	test   eax,eax
ffffffff80000714:	79 c8                	jns    ffffffff800006de <free+0x43>
ffffffff80000716:	eb 10                	jmp    ffffffff80000728 <free+0x8d>
ffffffff80000718:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000071c:	48 89 c7             	mov    rdi,rax
ffffffff8000071f:	e8 a1 fb ff ff       	call   ffffffff800002c5 <absorb_right(boundary_tag*)>
ffffffff80000724:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000728:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000072c:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80000730:	48 85 c0             	test   rax,rax
ffffffff80000733:	74 0f                	je     ffffffff80000744 <free+0xa9>
ffffffff80000735:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000739:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff8000073d:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff80000740:	85 c0                	test   eax,eax
ffffffff80000742:	79 d4                	jns    ffffffff80000718 <free+0x7d>
ffffffff80000744:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000748:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000074b:	83 e8 30             	sub    eax,0x30
ffffffff8000074e:	89 c7                	mov    edi,eax
ffffffff80000750:	e8 ab f8 ff ff       	call   ffffffff80000000 <getexp(unsigned int)>
ffffffff80000755:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000758:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
ffffffff8000075c:	7f 07                	jg     ffffffff80000765 <free+0xca>
ffffffff8000075e:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff80000765:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000769:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000076d:	48 85 c0             	test   rax,rax
ffffffff80000770:	0f 85 a2 00 00 00    	jne    ffffffff80000818 <free+0x17d>
ffffffff80000776:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000077a:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff8000077e:	48 85 c0             	test   rax,rax
ffffffff80000781:	0f 85 91 00 00 00    	jne    ffffffff80000818 <free+0x17d>
ffffffff80000787:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000078a:	48 98                	cdqe   
ffffffff8000078c:	8b 04 85 e0 9c 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff6320]
ffffffff80000793:	83 f8 05             	cmp    eax,0x5
ffffffff80000796:	75 65                	jne    ffffffff800007fd <free+0x162>
ffffffff80000798:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000079c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000079f:	8b 15 bb 8c 00 00    	mov    edx,DWORD PTR [rip+0x8cbb]        # ffffffff80009460 <l_pageSize>
ffffffff800007a5:	89 d1                	mov    ecx,edx
ffffffff800007a7:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800007ac:	f7 f1                	div    ecx
ffffffff800007ae:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff800007b1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800007b5:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800007b8:	8b 15 a2 8c 00 00    	mov    edx,DWORD PTR [rip+0x8ca2]        # ffffffff80009460 <l_pageSize>
ffffffff800007be:	89 d1                	mov    ecx,edx
ffffffff800007c0:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800007c5:	f7 f1                	div    ecx
ffffffff800007c7:	89 d0                	mov    eax,edx
ffffffff800007c9:	85 c0                	test   eax,eax
ffffffff800007cb:	74 04                	je     ffffffff800007d1 <free+0x136>
ffffffff800007cd:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
ffffffff800007d1:	8b 05 8d 8c 00 00    	mov    eax,DWORD PTR [rip+0x8c8d]        # ffffffff80009464 <l_pageCount>
ffffffff800007d7:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffffffff800007da:	73 09                	jae    ffffffff800007e5 <free+0x14a>
ffffffff800007dc:	8b 05 82 8c 00 00    	mov    eax,DWORD PTR [rip+0x8c82]        # ffffffff80009464 <l_pageCount>
ffffffff800007e2:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff800007e5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff800007e8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800007ec:	89 d6                	mov    esi,edx
ffffffff800007ee:	48 89 c7             	mov    rdi,rax
ffffffff800007f1:	e8 0d 02 00 00       	call   ffffffff80000a03 <liballoc_free>
ffffffff800007f6:	e8 ca 01 00 00       	call   ffffffff800009c5 <liballoc_unlock>
ffffffff800007fb:	eb 34                	jmp    ffffffff80000831 <free+0x196>
ffffffff800007fd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000800:	48 98                	cdqe   
ffffffff80000802:	8b 04 85 e0 9c 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff6320]
ffffffff80000809:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff8000080c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000080f:	48 98                	cdqe   
ffffffff80000811:	89 14 85 e0 9c 00 80 	mov    DWORD PTR [rax*4-0x7fff6320],edx
ffffffff80000818:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff8000081b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000081f:	89 d6                	mov    esi,edx
ffffffff80000821:	48 89 c7             	mov    rdi,rax
ffffffff80000824:	e8 fd f8 ff ff       	call   ffffffff80000126 <insert_tag(boundary_tag*, int)>
ffffffff80000829:	e8 97 01 00 00       	call   ffffffff800009c5 <liballoc_unlock>
ffffffff8000082e:	eb 01                	jmp    ffffffff80000831 <free+0x196>
ffffffff80000830:	90                   	nop
ffffffff80000831:	c9                   	leave  
ffffffff80000832:	c3                   	ret    

ffffffff80000833 <calloc>:
ffffffff80000833:	f3 0f 1e fa          	endbr64 
ffffffff80000837:	55                   	push   rbp
ffffffff80000838:	48 89 e5             	mov    rbp,rsp
ffffffff8000083b:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000083f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000843:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80000847:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000084b:	89 c2                	mov    edx,eax
ffffffff8000084d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80000851:	0f af c2             	imul   eax,edx
ffffffff80000854:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000857:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000085a:	48 98                	cdqe   
ffffffff8000085c:	48 89 c7             	mov    rdi,rax
ffffffff8000085f:	e8 8b fc ff ff       	call   ffffffff800004ef <malloc>
ffffffff80000864:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000868:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000086b:	48 63 d0             	movsxd rdx,eax
ffffffff8000086e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000872:	be 00 00 00 00       	mov    esi,0x0
ffffffff80000877:	48 89 c7             	mov    rdi,rax
ffffffff8000087a:	e8 cd f7 ff ff       	call   ffffffff8000004c <liballoc_memset(void*, int, unsigned long)>
ffffffff8000087f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000883:	c9                   	leave  
ffffffff80000884:	c3                   	ret    

ffffffff80000885 <realloc>:
ffffffff80000885:	f3 0f 1e fa          	endbr64 
ffffffff80000889:	55                   	push   rbp
ffffffff8000088a:	48 89 e5             	mov    rbp,rsp
ffffffff8000088d:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000891:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80000895:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80000899:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffffffff8000089e:	75 16                	jne    ffffffff800008b6 <realloc+0x31>
ffffffff800008a0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800008a4:	48 89 c7             	mov    rdi,rax
ffffffff800008a7:	e8 ef fd ff ff       	call   ffffffff8000069b <free>
ffffffff800008ac:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800008b1:	e9 80 00 00 00       	jmp    ffffffff80000936 <realloc+0xb1>
ffffffff800008b6:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff800008bb:	75 0e                	jne    ffffffff800008cb <realloc+0x46>
ffffffff800008bd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800008c1:	48 89 c7             	mov    rdi,rax
ffffffff800008c4:	e8 26 fc ff ff       	call   ffffffff800004ef <malloc>
ffffffff800008c9:	eb 6b                	jmp    ffffffff80000936 <realloc+0xb1>
ffffffff800008cb:	e8 e6 00 00 00       	call   ffffffff800009b6 <liballoc_lock>
ffffffff800008d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800008d4:	48 83 e8 30          	sub    rax,0x30
ffffffff800008d8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800008dc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800008e0:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff800008e3:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800008e6:	e8 da 00 00 00       	call   ffffffff800009c5 <liballoc_unlock>
ffffffff800008eb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800008ee:	48 98                	cdqe   
ffffffff800008f0:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffffffff800008f4:	73 07                	jae    ffffffff800008fd <realloc+0x78>
ffffffff800008f6:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800008fa:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800008fd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80000901:	48 89 c7             	mov    rdi,rax
ffffffff80000904:	e8 e6 fb ff ff       	call   ffffffff800004ef <malloc>
ffffffff80000909:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000090d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000910:	48 63 d0             	movsxd rdx,eax
ffffffff80000913:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80000917:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000091b:	48 89 ce             	mov    rsi,rcx
ffffffff8000091e:	48 89 c7             	mov    rdi,rax
ffffffff80000921:	e8 6d f7 ff ff       	call   ffffffff80000093 <liballoc_memcpy(void*, void const*, unsigned long)>
ffffffff80000926:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000092a:	48 89 c7             	mov    rdi,rax
ffffffff8000092d:	e8 69 fd ff ff       	call   ffffffff8000069b <free>
ffffffff80000932:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000936:	c9                   	leave  
ffffffff80000937:	c3                   	ret    

ffffffff80000938 <operator new(unsigned long)>:
ffffffff80000938:	f3 0f 1e fa          	endbr64 
ffffffff8000093c:	55                   	push   rbp
ffffffff8000093d:	48 89 e5             	mov    rbp,rsp
ffffffff80000940:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000944:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000948:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000094c:	48 89 c7             	mov    rdi,rax
ffffffff8000094f:	e8 9b fb ff ff       	call   ffffffff800004ef <malloc>
ffffffff80000954:	c9                   	leave  
ffffffff80000955:	c3                   	ret    

ffffffff80000956 <operator new[](unsigned long)>:
ffffffff80000956:	f3 0f 1e fa          	endbr64 
ffffffff8000095a:	55                   	push   rbp
ffffffff8000095b:	48 89 e5             	mov    rbp,rsp
ffffffff8000095e:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000962:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000966:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000096a:	48 89 c7             	mov    rdi,rax
ffffffff8000096d:	e8 7d fb ff ff       	call   ffffffff800004ef <malloc>
ffffffff80000972:	c9                   	leave  
ffffffff80000973:	c3                   	ret    

ffffffff80000974 <operator delete(void*)>:
ffffffff80000974:	f3 0f 1e fa          	endbr64 
ffffffff80000978:	55                   	push   rbp
ffffffff80000979:	48 89 e5             	mov    rbp,rsp
ffffffff8000097c:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000980:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000984:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000988:	48 89 c7             	mov    rdi,rax
ffffffff8000098b:	e8 0b fd ff ff       	call   ffffffff8000069b <free>
ffffffff80000990:	90                   	nop
ffffffff80000991:	c9                   	leave  
ffffffff80000992:	c3                   	ret    

ffffffff80000993 <operator delete(void*, unsigned long)>:
ffffffff80000993:	f3 0f 1e fa          	endbr64 
ffffffff80000997:	55                   	push   rbp
ffffffff80000998:	48 89 e5             	mov    rbp,rsp
ffffffff8000099b:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000099f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800009a3:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800009a7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800009ab:	48 89 c7             	mov    rdi,rax
ffffffff800009ae:	e8 e8 fc ff ff       	call   ffffffff8000069b <free>
ffffffff800009b3:	90                   	nop
ffffffff800009b4:	c9                   	leave  
ffffffff800009b5:	c3                   	ret    

ffffffff800009b6 <liballoc_lock>:
ffffffff800009b6:	f3 0f 1e fa          	endbr64 
ffffffff800009ba:	55                   	push   rbp
ffffffff800009bb:	48 89 e5             	mov    rbp,rsp
ffffffff800009be:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800009c3:	5d                   	pop    rbp
ffffffff800009c4:	c3                   	ret    

ffffffff800009c5 <liballoc_unlock>:
ffffffff800009c5:	f3 0f 1e fa          	endbr64 
ffffffff800009c9:	55                   	push   rbp
ffffffff800009ca:	48 89 e5             	mov    rbp,rsp
ffffffff800009cd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800009d2:	5d                   	pop    rbp
ffffffff800009d3:	c3                   	ret    

ffffffff800009d4 <liballoc_alloc>:
ffffffff800009d4:	f3 0f 1e fa          	endbr64 
ffffffff800009d8:	55                   	push   rbp
ffffffff800009d9:	48 89 e5             	mov    rbp,rsp
ffffffff800009dc:	48 83 ec 10          	sub    rsp,0x10
ffffffff800009e0:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800009e3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800009e6:	48 98                	cdqe   
ffffffff800009e8:	48 89 c7             	mov    rdi,rax
ffffffff800009eb:	e8 da 04 00 00       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff800009f0:	48 89 c2             	mov    rdx,rax
ffffffff800009f3:	48 8b 05 ee 8a 00 00 	mov    rax,QWORD PTR [rip+0x8aee]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff800009fa:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800009fe:	48 01 d0             	add    rax,rdx
ffffffff80000a01:	c9                   	leave  
ffffffff80000a02:	c3                   	ret    

ffffffff80000a03 <liballoc_free>:
ffffffff80000a03:	f3 0f 1e fa          	endbr64 
ffffffff80000a07:	55                   	push   rbp
ffffffff80000a08:	48 89 e5             	mov    rbp,rsp
ffffffff80000a0b:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000a0f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000a13:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80000a16:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80000a19:	48 98                	cdqe   
ffffffff80000a1b:	48 8b 15 c6 8a 00 00 	mov    rdx,QWORD PTR [rip+0x8ac6]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80000a22:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80000a26:	48 89 d1             	mov    rcx,rdx
ffffffff80000a29:	48 f7 d9             	neg    rcx
ffffffff80000a2c:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80000a30:	48 01 ca             	add    rdx,rcx
ffffffff80000a33:	48 89 c6             	mov    rsi,rax
ffffffff80000a36:	48 89 d7             	mov    rdi,rdx
ffffffff80000a39:	e8 7a 05 00 00       	call   ffffffff80000fb8 <PhysicalMemory::free(void*, unsigned long)>
ffffffff80000a3e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000a43:	c9                   	leave  
ffffffff80000a44:	c3                   	ret    

ffffffff80000a45 <memset(void*, int, unsigned long)>:
ffffffff80000a45:	55                   	push   rbp
ffffffff80000a46:	48 89 e5             	mov    rbp,rsp
ffffffff80000a49:	48 83 ec 28          	sub    rsp,0x28
ffffffff80000a4d:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000a51:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80000a54:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80000a58:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000a5c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80000a60:	eb 13                	jmp    ffffffff80000a75 <memset(void*, int, unsigned long)+0x30>
ffffffff80000a62:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80000a65:	89 c1                	mov    ecx,eax
ffffffff80000a67:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000a6b:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80000a6f:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80000a73:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80000a75:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000a79:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80000a7d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80000a81:	48 85 c0             	test   rax,rax
ffffffff80000a84:	0f 95 c0             	setne  al
ffffffff80000a87:	84 c0                	test   al,al
ffffffff80000a89:	75 d7                	jne    ffffffff80000a62 <memset(void*, int, unsigned long)+0x1d>
ffffffff80000a8b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000a8f:	c9                   	leave  
ffffffff80000a90:	c3                   	ret    

ffffffff80000a91 <PhysicalMemory::Initialize()>:
ffffffff80000a91:	f3 0f 1e fa          	endbr64 
ffffffff80000a95:	55                   	push   rbp
ffffffff80000a96:	48 89 e5             	mov    rbp,rsp
ffffffff80000a99:	48 83 ec 60          	sub    rsp,0x60
ffffffff80000a9d:	48 8b 05 04 8a 00 00 	mov    rax,QWORD PTR [rip+0x8a04]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff80000aa4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000aa8:	48 89 c6             	mov    rsi,rax
ffffffff80000aab:	48 c7 c7 e0 77 00 80 	mov    rdi,0xffffffff800077e0
ffffffff80000ab2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000ab7:	e8 b5 2d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80000abc:	48 8b 05 e5 89 00 00 	mov    rax,QWORD PTR [rip+0x89e5]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff80000ac3:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000ac7:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80000acb:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80000ad2:	00 
ffffffff80000ad3:	e9 a1 00 00 00       	jmp    ffffffff80000b79 <PhysicalMemory::Initialize()+0xe8>
ffffffff80000ad8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000adc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000ae3:	00 
ffffffff80000ae4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000ae8:	48 01 d0             	add    rax,rdx
ffffffff80000aeb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000aee:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000af2:	48 85 c0             	test   rax,rax
ffffffff80000af5:	75 7d                	jne    ffffffff80000b74 <PhysicalMemory::Initialize()+0xe3>
ffffffff80000af7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000afb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000b02:	00 
ffffffff80000b03:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000b07:	48 01 d0             	add    rax,rdx
ffffffff80000b0a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000b0d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80000b10:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000b14:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffffffff80000b1b:	00 
ffffffff80000b1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000b20:	48 01 c8             	add    rax,rcx
ffffffff80000b23:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000b26:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000b2a:	48 01 d0             	add    rax,rdx
ffffffff80000b2d:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80000b31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000b35:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000b3c:	00 
ffffffff80000b3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000b41:	48 01 d0             	add    rax,rdx
ffffffff80000b44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000b47:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80000b4b:	48 8b 05 36 92 00 00 	mov    rax,QWORD PTR [rip+0x9236]        # ffffffff80009d88 <freeRam>
ffffffff80000b52:	48 01 d0             	add    rax,rdx
ffffffff80000b55:	48 89 05 2c 92 00 00 	mov    QWORD PTR [rip+0x922c],rax        # ffffffff80009d88 <freeRam>
ffffffff80000b5c:	48 8b 05 0d 92 00 00 	mov    rax,QWORD PTR [rip+0x920d]        # ffffffff80009d70 <highest_addr>
ffffffff80000b63:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff80000b67:	76 0b                	jbe    ffffffff80000b74 <PhysicalMemory::Initialize()+0xe3>
ffffffff80000b69:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80000b6d:	48 89 05 fc 91 00 00 	mov    QWORD PTR [rip+0x91fc],rax        # ffffffff80009d70 <highest_addr>
ffffffff80000b74:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80000b79:	48 8b 05 28 89 00 00 	mov    rax,QWORD PTR [rip+0x8928]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff80000b80:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000b84:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80000b88:	0f 82 4a ff ff ff    	jb     ffffffff80000ad8 <PhysicalMemory::Initialize()+0x47>
ffffffff80000b8e:	48 8b 05 db 91 00 00 	mov    rax,QWORD PTR [rip+0x91db]        # ffffffff80009d70 <highest_addr>
ffffffff80000b95:	48 c1 e8 0f          	shr    rax,0xf
ffffffff80000b99:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80000b9d:	c7 45 cc 00 10 00 00 	mov    DWORD PTR [rbp-0x34],0x1000
ffffffff80000ba4:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80000ba8:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80000bac:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffffffff80000baf:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
ffffffff80000bb2:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80000bb5:	83 e8 01             	sub    eax,0x1
ffffffff80000bb8:	48 63 d0             	movsxd rdx,eax
ffffffff80000bbb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80000bbf:	48 01 d0             	add    rax,rdx
ffffffff80000bc2:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffffffff80000bc5:	48 63 fa             	movsxd rdi,edx
ffffffff80000bc8:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000bcd:	48 f7 f7             	div    rdi
ffffffff80000bd0:	48 89 c2             	mov    rdx,rax
ffffffff80000bd3:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffffffff80000bd6:	48 98                	cdqe   
ffffffff80000bd8:	48 0f af c2          	imul   rax,rdx
ffffffff80000bdc:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80000be0:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80000be7:	00 
ffffffff80000be8:	e9 18 01 00 00       	jmp    ffffffff80000d05 <PhysicalMemory::Initialize()+0x274>
ffffffff80000bed:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000bf1:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000bf8:	00 
ffffffff80000bf9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000bfd:	48 01 d0             	add    rax,rdx
ffffffff80000c00:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000c03:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000c07:	48 85 c0             	test   rax,rax
ffffffff80000c0a:	0f 85 ef 00 00 00    	jne    ffffffff80000cff <PhysicalMemory::Initialize()+0x26e>
ffffffff80000c10:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000c14:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000c1b:	00 
ffffffff80000c1c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000c20:	48 01 d0             	add    rax,rdx
ffffffff80000c23:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000c26:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000c2a:	48 39 45 b0          	cmp    QWORD PTR [rbp-0x50],rax
ffffffff80000c2e:	0f 87 cc 00 00 00    	ja     ffffffff80000d00 <PhysicalMemory::Initialize()+0x26f>
ffffffff80000c34:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000c38:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000c3f:	00 
ffffffff80000c40:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000c44:	48 01 d0             	add    rax,rdx
ffffffff80000c47:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000c4a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80000c4d:	48 8b 05 94 88 00 00 	mov    rax,QWORD PTR [rip+0x8894]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80000c54:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000c58:	48 01 d0             	add    rax,rdx
ffffffff80000c5b:	48 89 05 06 91 00 00 	mov    QWORD PTR [rip+0x9106],rax        # ffffffff80009d68 <bitmap>
ffffffff80000c62:	48 8b 05 ff 90 00 00 	mov    rax,QWORD PTR [rip+0x90ff]        # ffffffff80009d68 <bitmap>
ffffffff80000c69:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80000c6d:	be ff 00 00 00       	mov    esi,0xff
ffffffff80000c72:	48 89 c7             	mov    rdi,rax
ffffffff80000c75:	e8 cb fd ff ff       	call   ffffffff80000a45 <memset(void*, int, unsigned long)>
ffffffff80000c7a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000c7e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000c85:	00 
ffffffff80000c86:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000c8a:	48 01 d0             	add    rax,rdx
ffffffff80000c8d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000c90:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80000c94:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000c98:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffffffff80000c9f:	00 
ffffffff80000ca0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000ca4:	48 01 c8             	add    rax,rcx
ffffffff80000ca7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000caa:	48 2b 55 b0          	sub    rdx,QWORD PTR [rbp-0x50]
ffffffff80000cae:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80000cb2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000cb6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000cbd:	00 
ffffffff80000cbe:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000cc2:	48 01 d0             	add    rax,rdx
ffffffff80000cc5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000cc8:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000ccb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000ccf:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000cd6:	00 
ffffffff80000cd7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000cdb:	48 01 d0             	add    rax,rdx
ffffffff80000cde:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000ce1:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80000ce5:	48 01 ca             	add    rdx,rcx
ffffffff80000ce8:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80000ceb:	48 8b 05 96 90 00 00 	mov    rax,QWORD PTR [rip+0x9096]        # ffffffff80009d88 <freeRam>
ffffffff80000cf2:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffffffff80000cf6:	48 89 05 8b 90 00 00 	mov    QWORD PTR [rip+0x908b],rax        # ffffffff80009d88 <freeRam>
ffffffff80000cfd:	eb 1b                	jmp    ffffffff80000d1a <PhysicalMemory::Initialize()+0x289>
ffffffff80000cff:	90                   	nop
ffffffff80000d00:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80000d05:	48 8b 05 9c 87 00 00 	mov    rax,QWORD PTR [rip+0x879c]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff80000d0c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000d10:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff80000d14:	0f 82 d3 fe ff ff    	jb     ffffffff80000bed <PhysicalMemory::Initialize()+0x15c>
ffffffff80000d1a:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80000d21:	00 
ffffffff80000d22:	e9 91 00 00 00       	jmp    ffffffff80000db8 <PhysicalMemory::Initialize()+0x327>
ffffffff80000d27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000d2b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000d32:	00 
ffffffff80000d33:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000d37:	48 01 d0             	add    rax,rdx
ffffffff80000d3a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000d3d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000d41:	48 85 c0             	test   rax,rax
ffffffff80000d44:	75 6c                	jne    ffffffff80000db2 <PhysicalMemory::Initialize()+0x321>
ffffffff80000d46:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80000d4d:	00 
ffffffff80000d4e:	eb 40                	jmp    ffffffff80000d90 <PhysicalMemory::Initialize()+0x2ff>
ffffffff80000d50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000d54:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000d5b:	00 
ffffffff80000d5c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000d60:	48 01 d0             	add    rax,rdx
ffffffff80000d63:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000d66:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80000d69:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80000d6d:	48 01 d0             	add    rax,rdx
ffffffff80000d70:	48 c1 e8 0c          	shr    rax,0xc
ffffffff80000d74:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000d79:	48 89 c6             	mov    rsi,rax
ffffffff80000d7c:	48 c7 c7 68 9d 00 80 	mov    rdi,0xffffffff80009d68
ffffffff80000d83:	e8 1e 03 00 00       	call   ffffffff800010a6 <Bitmap::Set(unsigned long, bool)>
ffffffff80000d88:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffffffff80000d8f:	00 
ffffffff80000d90:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000d94:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000d9b:	00 
ffffffff80000d9c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000da0:	48 01 d0             	add    rax,rdx
ffffffff80000da3:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000da6:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000daa:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffffffff80000dae:	72 a0                	jb     ffffffff80000d50 <PhysicalMemory::Initialize()+0x2bf>
ffffffff80000db0:	eb 01                	jmp    ffffffff80000db3 <PhysicalMemory::Initialize()+0x322>
ffffffff80000db2:	90                   	nop
ffffffff80000db3:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffffffff80000db8:	48 8b 05 e9 86 00 00 	mov    rax,QWORD PTR [rip+0x86e9]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff80000dbf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000dc3:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffffffff80000dc7:	0f 82 5a ff ff ff    	jb     ffffffff80000d27 <PhysicalMemory::Initialize()+0x296>
ffffffff80000dcd:	48 8b 15 94 8f 00 00 	mov    rdx,QWORD PTR [rip+0x8f94]        # ffffffff80009d68 <bitmap>
ffffffff80000dd4:	48 8b 05 ad 8f 00 00 	mov    rax,QWORD PTR [rip+0x8fad]        # ffffffff80009d88 <freeRam>
ffffffff80000ddb:	48 c1 e8 14          	shr    rax,0x14
ffffffff80000ddf:	48 89 c6             	mov    rsi,rax
ffffffff80000de2:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80000de6:	48 89 d1             	mov    rcx,rdx
ffffffff80000de9:	48 89 c2             	mov    rdx,rax
ffffffff80000dec:	48 c7 c7 08 78 00 80 	mov    rdi,0xffffffff80007808
ffffffff80000df3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000df8:	e8 74 2a 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80000dfd:	90                   	nop
ffffffff80000dfe:	c9                   	leave  
ffffffff80000dff:	c3                   	ret    

ffffffff80000e00 <inner_alloc(unsigned long, unsigned long)>:
ffffffff80000e00:	f3 0f 1e fa          	endbr64 
ffffffff80000e04:	55                   	push   rbp
ffffffff80000e05:	48 89 e5             	mov    rbp,rsp
ffffffff80000e08:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000e0c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80000e10:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80000e14:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80000e1b:	00 
ffffffff80000e1c:	e9 91 00 00 00       	jmp    ffffffff80000eb2 <inner_alloc(unsigned long, unsigned long)+0xb2>
ffffffff80000e21:	48 8b 05 50 8f 00 00 	mov    rax,QWORD PTR [rip+0x8f50]        # ffffffff80009d78 <lastI>
ffffffff80000e28:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80000e2c:	48 89 15 45 8f 00 00 	mov    QWORD PTR [rip+0x8f45],rdx        # ffffffff80009d78 <lastI>
ffffffff80000e33:	48 89 c6             	mov    rsi,rax
ffffffff80000e36:	48 c7 c7 68 9d 00 80 	mov    rdi,0xffffffff80009d68
ffffffff80000e3d:	e8 3a 02 00 00       	call   ffffffff8000107c <Bitmap::operator[](unsigned long)>
ffffffff80000e42:	83 f0 01             	xor    eax,0x1
ffffffff80000e45:	84 c0                	test   al,al
ffffffff80000e47:	74 61                	je     ffffffff80000eaa <inner_alloc(unsigned long, unsigned long)+0xaa>
ffffffff80000e49:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80000e4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000e52:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffffffff80000e56:	0f 94 c0             	sete   al
ffffffff80000e59:	84 c0                	test   al,al
ffffffff80000e5b:	74 55                	je     ffffffff80000eb2 <inner_alloc(unsigned long, unsigned long)+0xb2>
ffffffff80000e5d:	48 8b 05 14 8f 00 00 	mov    rax,QWORD PTR [rip+0x8f14]        # ffffffff80009d78 <lastI>
ffffffff80000e64:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
ffffffff80000e68:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80000e6c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000e70:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000e74:	eb 1d                	jmp    ffffffff80000e93 <inner_alloc(unsigned long, unsigned long)+0x93>
ffffffff80000e76:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000e7a:	ba 01 00 00 00       	mov    edx,0x1
ffffffff80000e7f:	48 89 c6             	mov    rsi,rax
ffffffff80000e82:	48 c7 c7 68 9d 00 80 	mov    rdi,0xffffffff80009d68
ffffffff80000e89:	e8 18 02 00 00       	call   ffffffff800010a6 <Bitmap::Set(unsigned long, bool)>
ffffffff80000e8e:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80000e93:	48 8b 05 de 8e 00 00 	mov    rax,QWORD PTR [rip+0x8ede]        # ffffffff80009d78 <lastI>
ffffffff80000e9a:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff80000e9e:	72 d6                	jb     ffffffff80000e76 <inner_alloc(unsigned long, unsigned long)+0x76>
ffffffff80000ea0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000ea4:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80000ea8:	eb 1e                	jmp    ffffffff80000ec8 <inner_alloc(unsigned long, unsigned long)+0xc8>
ffffffff80000eaa:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80000eb1:	00 
ffffffff80000eb2:	48 8b 05 bf 8e 00 00 	mov    rax,QWORD PTR [rip+0x8ebf]        # ffffffff80009d78 <lastI>
ffffffff80000eb9:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffffffff80000ebd:	0f 87 5e ff ff ff    	ja     ffffffff80000e21 <inner_alloc(unsigned long, unsigned long)+0x21>
ffffffff80000ec3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000ec8:	c9                   	leave  
ffffffff80000ec9:	c3                   	ret    

ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>:
ffffffff80000eca:	f3 0f 1e fa          	endbr64 
ffffffff80000ece:	55                   	push   rbp
ffffffff80000ecf:	48 89 e5             	mov    rbp,rsp
ffffffff80000ed2:	48 83 ec 20          	sub    rsp,0x20
ffffffff80000ed6:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000eda:	48 8b 05 97 8e 00 00 	mov    rax,QWORD PTR [rip+0x8e97]        # ffffffff80009d78 <lastI>
ffffffff80000ee1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000ee5:	48 8b 05 84 8e 00 00 	mov    rax,QWORD PTR [rip+0x8e84]        # ffffffff80009d70 <highest_addr>
ffffffff80000eec:	48 c1 e8 0c          	shr    rax,0xc
ffffffff80000ef0:	48 89 c2             	mov    rdx,rax
ffffffff80000ef3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000ef7:	48 89 d6             	mov    rsi,rdx
ffffffff80000efa:	48 89 c7             	mov    rdi,rax
ffffffff80000efd:	e8 fe fe ff ff       	call   ffffffff80000e00 <inner_alloc(unsigned long, unsigned long)>
ffffffff80000f02:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80000f06:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80000f0b:	0f 85 a1 00 00 00    	jne    ffffffff80000fb2 <PhysicalMemory::alloc(unsigned long)+0xe8>
ffffffff80000f11:	48 c7 05 5c 8e 00 00 	mov    QWORD PTR [rip+0x8e5c],0x0        # ffffffff80009d78 <lastI>
ffffffff80000f18:	00 00 00 00 
ffffffff80000f1c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80000f20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000f24:	48 89 d6             	mov    rsi,rdx
ffffffff80000f27:	48 89 c7             	mov    rdi,rax
ffffffff80000f2a:	e8 d1 fe ff ff       	call   ffffffff80000e00 <inner_alloc(unsigned long, unsigned long)>
ffffffff80000f2f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80000f33:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80000f38:	75 16                	jne    ffffffff80000f50 <PhysicalMemory::alloc(unsigned long)+0x86>
ffffffff80000f3a:	48 c7 c7 45 78 00 80 	mov    rdi,0xffffffff80007845
ffffffff80000f41:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000f46:	e8 26 29 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80000f4b:	e8 1c 01 00 00       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff80000f50:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000f54:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80000f58:	48 8b 15 89 85 00 00 	mov    rdx,QWORD PTR [rip+0x8589]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80000f5f:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
ffffffff80000f63:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80000f67:	48 01 ca             	add    rdx,rcx
ffffffff80000f6a:	48 89 d1             	mov    rcx,rdx
ffffffff80000f6d:	48 89 c2             	mov    rdx,rax
ffffffff80000f70:	be 00 00 00 00       	mov    esi,0x0
ffffffff80000f75:	48 89 cf             	mov    rdi,rcx
ffffffff80000f78:	e8 c8 fa ff ff       	call   ffffffff80000a45 <memset(void*, int, unsigned long)>
ffffffff80000f7d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000f81:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80000f85:	48 89 c2             	mov    rdx,rax
ffffffff80000f88:	48 8b 05 f1 8d 00 00 	mov    rax,QWORD PTR [rip+0x8df1]        # ffffffff80009d80 <usedRam>
ffffffff80000f8f:	48 01 d0             	add    rax,rdx
ffffffff80000f92:	48 89 05 e7 8d 00 00 	mov    QWORD PTR [rip+0x8de7],rax        # ffffffff80009d80 <usedRam>
ffffffff80000f99:	48 8b 05 e8 8d 00 00 	mov    rax,QWORD PTR [rip+0x8de8]        # ffffffff80009d88 <freeRam>
ffffffff80000fa0:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80000fa4:	48 c1 e2 0c          	shl    rdx,0xc
ffffffff80000fa8:	48 29 d0             	sub    rax,rdx
ffffffff80000fab:	48 89 05 d6 8d 00 00 	mov    QWORD PTR [rip+0x8dd6],rax        # ffffffff80009d88 <freeRam>
ffffffff80000fb2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000fb6:	c9                   	leave  
ffffffff80000fb7:	c3                   	ret    

ffffffff80000fb8 <PhysicalMemory::free(void*, unsigned long)>:
ffffffff80000fb8:	f3 0f 1e fa          	endbr64 
ffffffff80000fbc:	55                   	push   rbp
ffffffff80000fbd:	48 89 e5             	mov    rbp,rsp
ffffffff80000fc0:	48 83 ec 20          	sub    rsp,0x20
ffffffff80000fc4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000fc8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80000fcc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000fd0:	48 c1 e8 0c          	shr    rax,0xc
ffffffff80000fd4:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000fd8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000fdc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80000fe0:	eb 1d                	jmp    ffffffff80000fff <PhysicalMemory::free(void*, unsigned long)+0x47>
ffffffff80000fe2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000fe6:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000feb:	48 89 c6             	mov    rsi,rax
ffffffff80000fee:	48 c7 c7 68 9d 00 80 	mov    rdi,0xffffffff80009d68
ffffffff80000ff5:	e8 ac 00 00 00       	call   ffffffff800010a6 <Bitmap::Set(unsigned long, bool)>
ffffffff80000ffa:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80000fff:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001003:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001007:	48 01 d0             	add    rax,rdx
ffffffff8000100a:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff8000100e:	72 d2                	jb     ffffffff80000fe2 <PhysicalMemory::free(void*, unsigned long)+0x2a>
ffffffff80001010:	48 8b 05 61 8d 00 00 	mov    rax,QWORD PTR [rip+0x8d61]        # ffffffff80009d78 <lastI>
ffffffff80001017:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff8000101b:	73 0b                	jae    ffffffff80001028 <PhysicalMemory::free(void*, unsigned long)+0x70>
ffffffff8000101d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001021:	48 89 05 50 8d 00 00 	mov    QWORD PTR [rip+0x8d50],rax        # ffffffff80009d78 <lastI>
ffffffff80001028:	48 8b 05 51 8d 00 00 	mov    rax,QWORD PTR [rip+0x8d51]        # ffffffff80009d80 <usedRam>
ffffffff8000102f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80001033:	48 c1 e2 0c          	shl    rdx,0xc
ffffffff80001037:	48 29 d0             	sub    rax,rdx
ffffffff8000103a:	48 89 05 3f 8d 00 00 	mov    QWORD PTR [rip+0x8d3f],rax        # ffffffff80009d80 <usedRam>
ffffffff80001041:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001045:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80001049:	48 89 c2             	mov    rdx,rax
ffffffff8000104c:	48 8b 05 35 8d 00 00 	mov    rax,QWORD PTR [rip+0x8d35]        # ffffffff80009d88 <freeRam>
ffffffff80001053:	48 01 d0             	add    rax,rdx
ffffffff80001056:	48 89 05 2b 8d 00 00 	mov    QWORD PTR [rip+0x8d2b],rax        # ffffffff80009d88 <freeRam>
ffffffff8000105d:	90                   	nop
ffffffff8000105e:	c9                   	leave  
ffffffff8000105f:	c3                   	ret    

ffffffff80001060 <Utils::DisableInts()>:
ffffffff80001060:	f3 0f 1e fa          	endbr64 
ffffffff80001064:	55                   	push   rbp
ffffffff80001065:	48 89 e5             	mov    rbp,rsp
ffffffff80001068:	fa                   	cli    
ffffffff80001069:	90                   	nop
ffffffff8000106a:	5d                   	pop    rbp
ffffffff8000106b:	c3                   	ret    

ffffffff8000106c <Utils::HaltCatchFire()>:
ffffffff8000106c:	f3 0f 1e fa          	endbr64 
ffffffff80001070:	55                   	push   rbp
ffffffff80001071:	48 89 e5             	mov    rbp,rsp
ffffffff80001074:	e8 e7 ff ff ff       	call   ffffffff80001060 <Utils::DisableInts()>
ffffffff80001079:	f4                   	hlt    
ffffffff8000107a:	eb fd                	jmp    ffffffff80001079 <Utils::HaltCatchFire()+0xd>

ffffffff8000107c <Bitmap::operator[](unsigned long)>:
ffffffff8000107c:	f3 0f 1e fa          	endbr64 
ffffffff80001080:	55                   	push   rbp
ffffffff80001081:	48 89 e5             	mov    rbp,rsp
ffffffff80001084:	48 83 ec 10          	sub    rsp,0x10
ffffffff80001088:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000108c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80001090:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001094:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001098:	48 89 d6             	mov    rsi,rdx
ffffffff8000109b:	48 89 c7             	mov    rdi,rax
ffffffff8000109e:	e8 a5 00 00 00       	call   ffffffff80001148 <Bitmap::Get(unsigned long)>
ffffffff800010a3:	c9                   	leave  
ffffffff800010a4:	c3                   	ret    
ffffffff800010a5:	90                   	nop

ffffffff800010a6 <Bitmap::Set(unsigned long, bool)>:
ffffffff800010a6:	f3 0f 1e fa          	endbr64 
ffffffff800010aa:	55                   	push   rbp
ffffffff800010ab:	48 89 e5             	mov    rbp,rsp
ffffffff800010ae:	48 83 ec 28          	sub    rsp,0x28
ffffffff800010b2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800010b6:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800010ba:	89 d0                	mov    eax,edx
ffffffff800010bc:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
ffffffff800010bf:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800010c3:	48 c1 e8 03          	shr    rax,0x3
ffffffff800010c7:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800010cb:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800010cf:	83 e0 07             	and    eax,0x7
ffffffff800010d2:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
ffffffff800010d5:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
ffffffff800010d9:	ba 80 00 00 00       	mov    edx,0x80
ffffffff800010de:	89 c1                	mov    ecx,eax
ffffffff800010e0:	d3 fa                	sar    edx,cl
ffffffff800010e2:	89 d0                	mov    eax,edx
ffffffff800010e4:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
ffffffff800010e7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800010eb:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff800010ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800010f2:	48 01 d0             	add    rax,rdx
ffffffff800010f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800010f8:	89 c2                	mov    edx,eax
ffffffff800010fa:	0f b6 45 f6          	movzx  eax,BYTE PTR [rbp-0xa]
ffffffff800010fe:	f7 d0                	not    eax
ffffffff80001100:	89 d1                	mov    ecx,edx
ffffffff80001102:	21 c1                	and    ecx,eax
ffffffff80001104:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001108:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff8000110b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000110f:	48 01 d0             	add    rax,rdx
ffffffff80001112:	89 ca                	mov    edx,ecx
ffffffff80001114:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80001116:	80 7d dc 00          	cmp    BYTE PTR [rbp-0x24],0x0
ffffffff8000111a:	74 24                	je     ffffffff80001140 <Bitmap::Set(unsigned long, bool)+0x9a>
ffffffff8000111c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001120:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80001123:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001127:	48 01 d0             	add    rax,rdx
ffffffff8000112a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8000112d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80001131:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffffffff80001134:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80001138:	48 01 ca             	add    rdx,rcx
ffffffff8000113b:	0a 45 f6             	or     al,BYTE PTR [rbp-0xa]
ffffffff8000113e:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80001140:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80001145:	c9                   	leave  
ffffffff80001146:	c3                   	ret    
ffffffff80001147:	90                   	nop

ffffffff80001148 <Bitmap::Get(unsigned long)>:
ffffffff80001148:	f3 0f 1e fa          	endbr64 
ffffffff8000114c:	55                   	push   rbp
ffffffff8000114d:	48 89 e5             	mov    rbp,rsp
ffffffff80001150:	48 83 ec 20          	sub    rsp,0x20
ffffffff80001154:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001158:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff8000115c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001160:	48 c1 e8 03          	shr    rax,0x3
ffffffff80001164:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001168:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000116c:	83 e0 07             	and    eax,0x7
ffffffff8000116f:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
ffffffff80001172:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
ffffffff80001176:	ba 80 00 00 00       	mov    edx,0x80
ffffffff8000117b:	89 c1                	mov    ecx,eax
ffffffff8000117d:	d3 fa                	sar    edx,cl
ffffffff8000117f:	89 d0                	mov    eax,edx
ffffffff80001181:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
ffffffff80001184:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001188:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff8000118b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000118f:	48 01 d0             	add    rax,rdx
ffffffff80001192:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001195:	22 45 f6             	and    al,BYTE PTR [rbp-0xa]
ffffffff80001198:	84 c0                	test   al,al
ffffffff8000119a:	74 07                	je     ffffffff800011a3 <Bitmap::Get(unsigned long)+0x5b>
ffffffff8000119c:	b8 01 00 00 00       	mov    eax,0x1
ffffffff800011a1:	eb 05                	jmp    ffffffff800011a8 <Bitmap::Get(unsigned long)+0x60>
ffffffff800011a3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800011a8:	c9                   	leave  
ffffffff800011a9:	c3                   	ret    

ffffffff800011aa <memset(void*, int, unsigned long)>:
ffffffff800011aa:	55                   	push   rbp
ffffffff800011ab:	48 89 e5             	mov    rbp,rsp
ffffffff800011ae:	48 83 ec 28          	sub    rsp,0x28
ffffffff800011b2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800011b6:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800011b9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800011bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800011c1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800011c5:	eb 13                	jmp    ffffffff800011da <memset(void*, int, unsigned long)+0x30>
ffffffff800011c7:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff800011ca:	89 c1                	mov    ecx,eax
ffffffff800011cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800011d0:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800011d4:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff800011d8:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800011da:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800011de:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff800011e2:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800011e6:	48 85 c0             	test   rax,rax
ffffffff800011e9:	0f 95 c0             	setne  al
ffffffff800011ec:	84 c0                	test   al,al
ffffffff800011ee:	75 d7                	jne    ffffffff800011c7 <memset(void*, int, unsigned long)+0x1d>
ffffffff800011f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800011f4:	c9                   	leave  
ffffffff800011f5:	c3                   	ret    

ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>:
ffffffff800011f6:	f3 0f 1e fa          	endbr64 
ffffffff800011fa:	55                   	push   rbp
ffffffff800011fb:	48 89 e5             	mov    rbp,rsp
ffffffff800011fe:	48 83 ec 70          	sub    rsp,0x70
ffffffff80001202:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80001206:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffffffff8000120a:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffffffff8000120e:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffffffff80001212:	48 8b 05 cf 82 00 00 	mov    rax,QWORD PTR [rip+0x82cf]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80001219:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000121d:	48 01 45 a8          	add    QWORD PTR [rbp-0x58],rax
ffffffff80001221:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001225:	48 c1 e8 27          	shr    rax,0x27
ffffffff80001229:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff8000122e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001232:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001236:	48 c1 e8 1e          	shr    rax,0x1e
ffffffff8000123a:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff8000123f:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001243:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001247:	48 c1 e8 15          	shr    rax,0x15
ffffffff8000124b:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff80001250:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80001254:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001258:	48 c1 e8 0c          	shr    rax,0xc
ffffffff8000125c:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff80001261:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80001265:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80001269:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000126d:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80001271:	48 85 c0             	test   rax,rax
ffffffff80001274:	75 47                	jne    ffffffff800012bd <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0xc7>
ffffffff80001276:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000127b:	e8 4a fc ff ff       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff80001280:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80001284:	48 8b 05 5d 82 00 00 	mov    rax,QWORD PTR [rip+0x825d]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff8000128b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8000128f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80001293:	48 01 d0             	add    rax,rdx
ffffffff80001296:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff8000129b:	be 00 00 00 00       	mov    esi,0x0
ffffffff800012a0:	48 89 c7             	mov    rdi,rax
ffffffff800012a3:	e8 02 ff ff ff       	call   ffffffff800011aa <memset(void*, int, unsigned long)>
ffffffff800012a8:	48 83 4d d8 07       	or     QWORD PTR [rbp-0x28],0x7
ffffffff800012ad:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800012b1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800012b5:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff800012b9:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff800012bd:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800012c1:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800012c5:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff800012c9:	48 ba 80 ff ff ff ff 	movabs rdx,0x7fffffffffffff80
ffffffff800012d0:	ff ff 7f 
ffffffff800012d3:	48 21 d0             	and    rax,rdx
ffffffff800012d6:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800012da:	48 8b 05 07 82 00 00 	mov    rax,QWORD PTR [rip+0x8207]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff800012e1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800012e5:	48 01 45 d0          	add    QWORD PTR [rbp-0x30],rax
ffffffff800012e9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800012ed:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800012f1:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff800012f5:	48 85 c0             	test   rax,rax
ffffffff800012f8:	75 47                	jne    ffffffff80001341 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x14b>
ffffffff800012fa:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800012ff:	e8 c6 fb ff ff       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff80001304:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80001308:	48 8b 05 d9 81 00 00 	mov    rax,QWORD PTR [rip+0x81d9]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff8000130f:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80001313:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80001317:	48 01 d0             	add    rax,rdx
ffffffff8000131a:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff8000131f:	be 00 00 00 00       	mov    esi,0x0
ffffffff80001324:	48 89 c7             	mov    rdi,rax
ffffffff80001327:	e8 7e fe ff ff       	call   ffffffff800011aa <memset(void*, int, unsigned long)>
ffffffff8000132c:	48 83 4d c8 07       	or     QWORD PTR [rbp-0x38],0x7
ffffffff80001331:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80001335:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001339:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8000133d:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff80001341:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80001345:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001349:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff8000134d:	48 ba 80 ff ff ff ff 	movabs rdx,0x7fffffffffffff80
ffffffff80001354:	ff ff 7f 
ffffffff80001357:	48 21 d0             	and    rax,rdx
ffffffff8000135a:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff8000135e:	48 8b 05 83 81 00 00 	mov    rax,QWORD PTR [rip+0x8183]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80001365:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001369:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
ffffffff8000136d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001371:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80001375:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80001379:	48 85 c0             	test   rax,rax
ffffffff8000137c:	75 47                	jne    ffffffff800013c5 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x1cf>
ffffffff8000137e:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80001383:	e8 42 fb ff ff       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff80001388:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8000138c:	48 8b 05 55 81 00 00 	mov    rax,QWORD PTR [rip+0x8155]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80001393:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80001397:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff8000139b:	48 01 d0             	add    rax,rdx
ffffffff8000139e:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff800013a3:	be 00 00 00 00       	mov    esi,0x0
ffffffff800013a8:	48 89 c7             	mov    rdi,rax
ffffffff800013ab:	e8 fa fd ff ff       	call   ffffffff800011aa <memset(void*, int, unsigned long)>
ffffffff800013b0:	48 83 4d b8 07       	or     QWORD PTR [rbp-0x48],0x7
ffffffff800013b5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800013b9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800013bd:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff800013c1:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff800013c5:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800013c9:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800013cd:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff800013d1:	48 ba 80 ff ff ff ff 	movabs rdx,0x7fffffffffffff80
ffffffff800013d8:	ff ff 7f 
ffffffff800013db:	48 21 d0             	and    rax,rdx
ffffffff800013de:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800013e2:	48 8b 05 ff 80 00 00 	mov    rax,QWORD PTR [rip+0x80ff]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff800013e9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800013ed:	48 01 45 b0          	add    QWORD PTR [rbp-0x50],rax
ffffffff800013f1:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff800013f5:	48 0b 45 90          	or     rax,QWORD PTR [rbp-0x70]
ffffffff800013f9:	48 89 c1             	mov    rcx,rax
ffffffff800013fc:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80001400:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80001404:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff80001408:	90                   	nop
ffffffff80001409:	c9                   	leave  
ffffffff8000140a:	c3                   	ret    

ffffffff8000140b <VirtualMemory::Initialize()>:
ffffffff8000140b:	f3 0f 1e fa          	endbr64 
ffffffff8000140f:	55                   	push   rbp
ffffffff80001410:	48 89 e5             	mov    rbp,rsp
ffffffff80001413:	53                   	push   rbx
ffffffff80001414:	48 83 ec 48          	sub    rsp,0x48
ffffffff80001418:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000141d:	e8 a8 fa ff ff       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff80001422:	48 89 05 67 89 00 00 	mov    QWORD PTR [rip+0x8967],rax        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff80001429:	48 8b 05 60 89 00 00 	mov    rax,QWORD PTR [rip+0x8960]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff80001430:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80001435:	be 00 00 00 00       	mov    esi,0x0
ffffffff8000143a:	48 89 c7             	mov    rdi,rax
ffffffff8000143d:	e8 68 fd ff ff       	call   ffffffff800011aa <memset(void*, int, unsigned long)>
ffffffff80001442:	48 8b 05 47 89 00 00 	mov    rax,QWORD PTR [rip+0x8947]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff80001449:	48 89 c6             	mov    rsi,rax
ffffffff8000144c:	48 c7 c7 68 78 00 80 	mov    rdi,0xffffffff80007868
ffffffff80001453:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001458:	e8 14 24 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000145d:	48 8b 05 c4 80 00 00 	mov    rax,QWORD PTR [rip+0x80c4]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff80001464:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80001468:	48 8b 05 f9 80 00 00 	mov    rax,QWORD PTR [rip+0x80f9]        # ffffffff80009568 <kernel_file+0x28>
ffffffff8000146f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001473:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80001477:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffffffff8000147b:	48 8b 05 a6 80 00 00 	mov    rax,QWORD PTR [rip+0x80a6]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff80001482:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80001486:	48 8b 05 9b 80 00 00 	mov    rax,QWORD PTR [rip+0x809b]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff8000148d:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
ffffffff80001491:	48 8b 05 d0 80 00 00 	mov    rax,QWORD PTR [rip+0x80d0]        # ffffffff80009568 <kernel_file+0x28>
ffffffff80001498:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000149c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800014a0:	48 01 c6             	add    rsi,rax
ffffffff800014a3:	48 8b 05 7e 80 00 00 	mov    rax,QWORD PTR [rip+0x807e]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff800014aa:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800014ae:	49 89 c8             	mov    r8,rcx
ffffffff800014b1:	48 89 d1             	mov    rcx,rdx
ffffffff800014b4:	48 89 f2             	mov    rdx,rsi
ffffffff800014b7:	48 89 c6             	mov    rsi,rax
ffffffff800014ba:	48 c7 c7 90 78 00 80 	mov    rdi,0xffffffff80007890
ffffffff800014c1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800014c6:	e8 a6 23 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800014cb:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800014d2:	00 
ffffffff800014d3:	eb 41                	jmp    ffffffff80001516 <VirtualMemory::Initialize()+0x10b>
ffffffff800014d5:	48 8b 05 4c 80 00 00 	mov    rax,QWORD PTR [rip+0x804c]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff800014dc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff800014e0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800014e4:	48 01 c2             	add    rdx,rax
ffffffff800014e7:	48 8b 05 3a 80 00 00 	mov    rax,QWORD PTR [rip+0x803a]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff800014ee:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff800014f2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800014f6:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffffffff800014fa:	48 8b 05 8f 88 00 00 	mov    rax,QWORD PTR [rip+0x888f]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff80001501:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001506:	48 89 c7             	mov    rdi,rax
ffffffff80001509:	e8 e8 fc ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff8000150e:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffffffff80001515:	00 
ffffffff80001516:	48 8b 05 4b 80 00 00 	mov    rax,QWORD PTR [rip+0x804b]        # ffffffff80009568 <kernel_file+0x28>
ffffffff8000151d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001521:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80001525:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffffffff80001529:	72 aa                	jb     ffffffff800014d5 <VirtualMemory::Initialize()+0xca>
ffffffff8000152b:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80001532:	00 
ffffffff80001533:	eb 33                	jmp    ffffffff80001568 <VirtualMemory::Initialize()+0x15d>
ffffffff80001535:	48 8b 05 ac 7f 00 00 	mov    rax,QWORD PTR [rip+0x7fac]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff8000153c:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80001540:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001544:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff80001548:	48 8b 05 41 88 00 00 	mov    rax,QWORD PTR [rip+0x8841]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff8000154f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80001553:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001558:	48 89 c7             	mov    rdi,rax
ffffffff8000155b:	e8 96 fc ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80001560:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffffffff80001567:	00 
ffffffff80001568:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff8000156d:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffffffff80001571:	76 c2                	jbe    ffffffff80001535 <VirtualMemory::Initialize()+0x12a>
ffffffff80001573:	48 8b 05 2e 7f 00 00 	mov    rax,QWORD PTR [rip+0x7f2e]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff8000157a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000157e:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80001582:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff80001589:	00 
ffffffff8000158a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80001591:	00 
ffffffff80001592:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff80001599:	00 
ffffffff8000159a:	eb 63                	jmp    ffffffff800015ff <VirtualMemory::Initialize()+0x1f4>
ffffffff8000159c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800015a0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff800015a7:	00 
ffffffff800015a8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800015ac:	48 01 d0             	add    rax,rdx
ffffffff800015af:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800015b2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800015b6:	48 83 f8 07          	cmp    rax,0x7
ffffffff800015ba:	75 3d                	jne    ffffffff800015f9 <VirtualMemory::Initialize()+0x1ee>
ffffffff800015bc:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800015c0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff800015c7:	00 
ffffffff800015c8:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800015cc:	48 01 d0             	add    rax,rdx
ffffffff800015cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800015d2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800015d5:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800015d9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800015dd:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff800015e4:	00 
ffffffff800015e5:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800015e9:	48 01 d0             	add    rax,rdx
ffffffff800015ec:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800015ef:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800015f3:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800015f7:	eb 17                	jmp    ffffffff80001610 <VirtualMemory::Initialize()+0x205>
ffffffff800015f9:	90                   	nop
ffffffff800015fa:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
ffffffff800015ff:	48 8b 05 a2 7e 00 00 	mov    rax,QWORD PTR [rip+0x7ea2]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff80001606:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000160a:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffffffff8000160e:	72 8c                	jb     ffffffff8000159c <VirtualMemory::Initialize()+0x191>
ffffffff80001610:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff80001615:	75 16                	jne    ffffffff8000162d <VirtualMemory::Initialize()+0x222>
ffffffff80001617:	48 c7 c7 c0 78 00 80 	mov    rdi,0xffffffff800078c0
ffffffff8000161e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001623:	e8 49 22 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80001628:	e8 3f fa ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff8000162d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80001631:	48 89 c6             	mov    rsi,rax
ffffffff80001634:	48 c7 c7 e8 78 00 80 	mov    rdi,0xffffffff800078e8
ffffffff8000163b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001640:	e8 2c 22 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80001645:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffffffff8000164c:	00 
ffffffff8000164d:	eb 3b                	jmp    ffffffff8000168a <VirtualMemory::Initialize()+0x27f>
ffffffff8000164f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80001653:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001657:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
ffffffff8000165b:	e8 95 1d 00 00       	call   ffffffff800033f5 <Screen::GetFramebuffer()>
ffffffff80001660:	48 89 c2             	mov    rdx,rax
ffffffff80001663:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001667:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff8000166b:	48 8b 05 1e 87 00 00 	mov    rax,QWORD PTR [rip+0x871e]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff80001672:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001677:	48 89 da             	mov    rdx,rbx
ffffffff8000167a:	48 89 c7             	mov    rdi,rax
ffffffff8000167d:	e8 74 fb ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80001682:	48 81 45 c0 00 10 00 	add    QWORD PTR [rbp-0x40],0x1000
ffffffff80001689:	00 
ffffffff8000168a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000168e:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
ffffffff80001692:	72 bb                	jb     ffffffff8000164f <VirtualMemory::Initialize()+0x244>
ffffffff80001694:	48 8b 05 f5 86 00 00 	mov    rax,QWORD PTR [rip+0x86f5]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff8000169b:	48 89 c7             	mov    rdi,rax
ffffffff8000169e:	e8 21 00 00 00       	call   ffffffff800016c4 <VirtualMemory::SwapToPageTable(PML4Table*)>
ffffffff800016a3:	90                   	nop
ffffffff800016a4:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800016a8:	c9                   	leave  
ffffffff800016a9:	c3                   	ret    

ffffffff800016aa <VirtualMemory::SwapToKernelPT()>:
ffffffff800016aa:	f3 0f 1e fa          	endbr64 
ffffffff800016ae:	55                   	push   rbp
ffffffff800016af:	48 89 e5             	mov    rbp,rsp
ffffffff800016b2:	48 8b 05 d7 86 00 00 	mov    rax,QWORD PTR [rip+0x86d7]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff800016b9:	48 89 c7             	mov    rdi,rax
ffffffff800016bc:	e8 03 00 00 00       	call   ffffffff800016c4 <VirtualMemory::SwapToPageTable(PML4Table*)>
ffffffff800016c1:	90                   	nop
ffffffff800016c2:	5d                   	pop    rbp
ffffffff800016c3:	c3                   	ret    

ffffffff800016c4 <VirtualMemory::SwapToPageTable(PML4Table*)>:
ffffffff800016c4:	f3 0f 1e fa          	endbr64 
ffffffff800016c8:	55                   	push   rbp
ffffffff800016c9:	48 89 e5             	mov    rbp,rsp
ffffffff800016cc:	48 83 ec 08          	sub    rsp,0x8
ffffffff800016d0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800016d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800016d8:	0f 22 d8             	mov    cr3,rax
ffffffff800016db:	90                   	nop
ffffffff800016dc:	c9                   	leave  
ffffffff800016dd:	c3                   	ret    

ffffffff800016de <Utils::inb(unsigned short)>:
ffffffff800016de:	55                   	push   rbp
ffffffff800016df:	48 89 e5             	mov    rbp,rsp
ffffffff800016e2:	48 83 ec 18          	sub    rsp,0x18
ffffffff800016e6:	89 f8                	mov    eax,edi
ffffffff800016e8:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff800016ec:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff800016f0:	89 c2                	mov    edx,eax
ffffffff800016f2:	ec                   	in     al,dx
ffffffff800016f3:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff800016f6:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff800016fa:	c9                   	leave  
ffffffff800016fb:	c3                   	ret    

ffffffff800016fc <Utils::inw(unsigned short)>:
ffffffff800016fc:	55                   	push   rbp
ffffffff800016fd:	48 89 e5             	mov    rbp,rsp
ffffffff80001700:	48 83 ec 18          	sub    rsp,0x18
ffffffff80001704:	89 f8                	mov    eax,edi
ffffffff80001706:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff8000170a:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff8000170e:	89 c2                	mov    edx,eax
ffffffff80001710:	66 ed                	in     ax,dx
ffffffff80001712:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80001716:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
ffffffff8000171a:	c9                   	leave  
ffffffff8000171b:	c3                   	ret    

ffffffff8000171c <udelay(unsigned long)>:
ffffffff8000171c:	55                   	push   rbp
ffffffff8000171d:	48 89 e5             	mov    rbp,rsp
ffffffff80001720:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001724:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80001728:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff8000172d:	74 11                	je     ffffffff80001740 <udelay(unsigned long)+0x24>
ffffffff8000172f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001733:	48 69 c0 e8 03 00 00 	imul   rax,rax,0x3e8
ffffffff8000173a:	ff c8                	dec    eax
ffffffff8000173c:	75 fc                	jne    ffffffff8000173a <udelay(unsigned long)+0x1e>
ffffffff8000173e:	eb 01                	jmp    ffffffff80001741 <udelay(unsigned long)+0x25>
ffffffff80001740:	90                   	nop
ffffffff80001741:	c9                   	leave  
ffffffff80001742:	c3                   	ret    

ffffffff80001743 <mdelay(unsigned long)>:
ffffffff80001743:	55                   	push   rbp
ffffffff80001744:	48 89 e5             	mov    rbp,rsp
ffffffff80001747:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000174b:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000174f:	eb 0a                	jmp    ffffffff8000175b <mdelay(unsigned long)+0x18>
ffffffff80001751:	bf e8 03 00 00       	mov    edi,0x3e8
ffffffff80001756:	e8 c1 ff ff ff       	call   ffffffff8000171c <udelay(unsigned long)>
ffffffff8000175b:	48 83 6d f8 01       	sub    QWORD PTR [rbp-0x8],0x1
ffffffff80001760:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80001765:	0f 95 c0             	setne  al
ffffffff80001768:	84 c0                	test   al,al
ffffffff8000176a:	75 e5                	jne    ffffffff80001751 <mdelay(unsigned long)+0xe>
ffffffff8000176c:	90                   	nop
ffffffff8000176d:	90                   	nop
ffffffff8000176e:	c9                   	leave  
ffffffff8000176f:	c3                   	ret    

ffffffff80001770 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>:
ffffffff80001770:	f3 0f 1e fa          	endbr64 
ffffffff80001774:	55                   	push   rbp
ffffffff80001775:	48 89 e5             	mov    rbp,rsp
ffffffff80001778:	48 83 ec 28          	sub    rsp,0x28
ffffffff8000177c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001780:	89 d0                	mov    eax,edx
ffffffff80001782:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff80001786:	89 f2                	mov    edx,esi
ffffffff80001788:	88 55 e4             	mov    BYTE PTR [rbp-0x1c],dl
ffffffff8000178b:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
ffffffff8000178e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001792:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001795:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff80001798:	83 c0 07             	add    eax,0x7
ffffffff8000179b:	0f b7 c0             	movzx  eax,ax
ffffffff8000179e:	89 c7                	mov    edi,eax
ffffffff800017a0:	e8 39 ff ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff800017a5:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff800017a8:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800017ad:	e8 6a ff ff ff       	call   ffffffff8000171c <udelay(unsigned long)>
ffffffff800017b2:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff800017b6:	22 45 e4             	and    al,BYTE PTR [rbp-0x1c]
ffffffff800017b9:	38 45 e0             	cmp    BYTE PTR [rbp-0x20],al
ffffffff800017bc:	74 13                	je     ffffffff800017d1 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x61>
ffffffff800017be:	48 83 6d d8 01       	sub    QWORD PTR [rbp-0x28],0x1
ffffffff800017c3:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff800017c8:	74 07                	je     ffffffff800017d1 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x61>
ffffffff800017ca:	b8 01 00 00 00       	mov    eax,0x1
ffffffff800017cf:	eb 05                	jmp    ffffffff800017d6 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x66>
ffffffff800017d1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800017d6:	84 c0                	test   al,al
ffffffff800017d8:	75 b4                	jne    ffffffff8000178e <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x1e>
ffffffff800017da:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff800017df:	0f 95 c0             	setne  al
ffffffff800017e2:	c9                   	leave  
ffffffff800017e3:	c3                   	ret    

ffffffff800017e4 <ResetController(IDEDevice*)>:
ffffffff800017e4:	f3 0f 1e fa          	endbr64 
ffffffff800017e8:	55                   	push   rbp
ffffffff800017e9:	48 89 e5             	mov    rbp,rsp
ffffffff800017ec:	48 83 ec 20          	sub    rsp,0x20
ffffffff800017f0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800017f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800017f8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800017fb:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff800017fe:	0f b7 c0             	movzx  eax,ax
ffffffff80001801:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80001804:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001807:	66 05 06 02          	add    ax,0x206
ffffffff8000180b:	0f b7 c0             	movzx  eax,ax
ffffffff8000180e:	be 04 00 00 00       	mov    esi,0x4
ffffffff80001813:	89 c7                	mov    edi,eax
ffffffff80001815:	e8 dc 07 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000181a:	bf 02 00 00 00       	mov    edi,0x2
ffffffff8000181f:	e8 1f ff ff ff       	call   ffffffff80001743 <mdelay(unsigned long)>
ffffffff80001824:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001828:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff8000182d:	ba 80 00 00 00       	mov    edx,0x80
ffffffff80001832:	be 80 00 00 00       	mov    esi,0x80
ffffffff80001837:	48 89 c7             	mov    rdi,rax
ffffffff8000183a:	e8 31 ff ff ff       	call   ffffffff80001770 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff8000183f:	83 f0 01             	xor    eax,0x1
ffffffff80001842:	84 c0                	test   al,al
ffffffff80001844:	74 07                	je     ffffffff8000184d <ResetController(IDEDevice*)+0x69>
ffffffff80001846:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000184b:	eb 3f                	jmp    ffffffff8000188c <ResetController(IDEDevice*)+0xa8>
ffffffff8000184d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001850:	66 05 06 02          	add    ax,0x206
ffffffff80001854:	0f b7 c0             	movzx  eax,ax
ffffffff80001857:	be 00 00 00 00       	mov    esi,0x0
ffffffff8000185c:	89 c7                	mov    edi,eax
ffffffff8000185e:	e8 93 07 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001863:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001867:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff8000186c:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001871:	be 80 00 00 00       	mov    esi,0x80
ffffffff80001876:	48 89 c7             	mov    rdi,rax
ffffffff80001879:	e8 f2 fe ff ff       	call   ffffffff80001770 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff8000187e:	83 f0 01             	xor    eax,0x1
ffffffff80001881:	84 c0                	test   al,al
ffffffff80001883:	74 07                	je     ffffffff8000188c <ResetController(IDEDevice*)+0xa8>
ffffffff80001885:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000188a:	eb 00                	jmp    ffffffff8000188c <ResetController(IDEDevice*)+0xa8>
ffffffff8000188c:	c9                   	leave  
ffffffff8000188d:	c3                   	ret    

ffffffff8000188e <SelectDevice(IDEDevice*)>:
ffffffff8000188e:	f3 0f 1e fa          	endbr64 
ffffffff80001892:	55                   	push   rbp
ffffffff80001893:	48 89 e5             	mov    rbp,rsp
ffffffff80001896:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000189a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000189e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800018a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800018a5:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff800018a8:	0f b7 c0             	movzx  eax,ax
ffffffff800018ab:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800018ae:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800018b1:	83 c0 07             	add    eax,0x7
ffffffff800018b4:	0f b7 c0             	movzx  eax,ax
ffffffff800018b7:	89 c7                	mov    edi,eax
ffffffff800018b9:	e8 20 fe ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff800018be:	0f b6 c0             	movzx  eax,al
ffffffff800018c1:	25 88 00 00 00       	and    eax,0x88
ffffffff800018c6:	85 c0                	test   eax,eax
ffffffff800018c8:	0f 95 c0             	setne  al
ffffffff800018cb:	84 c0                	test   al,al
ffffffff800018cd:	74 07                	je     ffffffff800018d6 <SelectDevice(IDEDevice*)+0x48>
ffffffff800018cf:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800018d4:	eb 5d                	jmp    ffffffff80001933 <SelectDevice(IDEDevice*)+0xa5>
ffffffff800018d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800018da:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff800018de:	0f b6 c0             	movzx  eax,al
ffffffff800018e1:	c1 e0 04             	shl    eax,0x4
ffffffff800018e4:	83 c8 a0             	or     eax,0xffffffa0
ffffffff800018e7:	0f b6 d0             	movzx  edx,al
ffffffff800018ea:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800018ed:	83 c0 06             	add    eax,0x6
ffffffff800018f0:	0f b7 c0             	movzx  eax,ax
ffffffff800018f3:	89 d6                	mov    esi,edx
ffffffff800018f5:	89 c7                	mov    edi,eax
ffffffff800018f7:	e8 fa 06 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800018fc:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80001901:	e8 16 fe ff ff       	call   ffffffff8000171c <udelay(unsigned long)>
ffffffff80001906:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001909:	83 c0 07             	add    eax,0x7
ffffffff8000190c:	0f b7 c0             	movzx  eax,ax
ffffffff8000190f:	89 c7                	mov    edi,eax
ffffffff80001911:	e8 c8 fd ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff80001916:	0f b6 c0             	movzx  eax,al
ffffffff80001919:	25 88 00 00 00       	and    eax,0x88
ffffffff8000191e:	85 c0                	test   eax,eax
ffffffff80001920:	0f 95 c0             	setne  al
ffffffff80001923:	84 c0                	test   al,al
ffffffff80001925:	74 07                	je     ffffffff8000192e <SelectDevice(IDEDevice*)+0xa0>
ffffffff80001927:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000192c:	eb 05                	jmp    ffffffff80001933 <SelectDevice(IDEDevice*)+0xa5>
ffffffff8000192e:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80001933:	c9                   	leave  
ffffffff80001934:	c3                   	ret    

ffffffff80001935 <IdentifyAtaDevice(IDEDevice*)>:
ffffffff80001935:	f3 0f 1e fa          	endbr64 
ffffffff80001939:	55                   	push   rbp
ffffffff8000193a:	48 89 e5             	mov    rbp,rsp
ffffffff8000193d:	48 81 ec 30 02 00 00 	sub    rsp,0x230
ffffffff80001944:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffffffff8000194b:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001952:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001955:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff80001958:	0f b7 c0             	movzx  eax,ax
ffffffff8000195b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000195e:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001965:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff80001969:	84 c0                	test   al,al
ffffffff8000196b:	74 09                	je     ffffffff80001976 <IdentifyAtaDevice(IDEDevice*)+0x41>
ffffffff8000196d:	48 c7 c0 10 79 00 80 	mov    rax,0xffffffff80007910
ffffffff80001974:	eb 07                	jmp    ffffffff8000197d <IdentifyAtaDevice(IDEDevice*)+0x48>
ffffffff80001976:	48 c7 c0 16 79 00 80 	mov    rax,0xffffffff80007916
ffffffff8000197d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001981:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001988:	c6 40 08 00          	mov    BYTE PTR [rax+0x8],0x0
ffffffff8000198c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff8000198f:	83 c0 02             	add    eax,0x2
ffffffff80001992:	0f b7 c0             	movzx  eax,ax
ffffffff80001995:	be ab 00 00 00       	mov    esi,0xab
ffffffff8000199a:	89 c7                	mov    edi,eax
ffffffff8000199c:	e8 55 06 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800019a1:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800019a4:	83 c0 02             	add    eax,0x2
ffffffff800019a7:	0f b7 c0             	movzx  eax,ax
ffffffff800019aa:	89 c7                	mov    edi,eax
ffffffff800019ac:	e8 2d fd ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff800019b1:	3c ab                	cmp    al,0xab
ffffffff800019b3:	0f 95 c0             	setne  al
ffffffff800019b6:	84 c0                	test   al,al
ffffffff800019b8:	74 20                	je     ffffffff800019da <IdentifyAtaDevice(IDEDevice*)+0xa5>
ffffffff800019ba:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff800019bd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800019c1:	48 89 c6             	mov    rsi,rax
ffffffff800019c4:	48 c7 c7 20 79 00 80 	mov    rdi,0xffffffff80007920
ffffffff800019cb:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800019d0:	e8 9c 1e 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800019d5:	e9 49 02 00 00       	jmp    ffffffff80001c23 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff800019da:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff800019e1:	48 89 c7             	mov    rdi,rax
ffffffff800019e4:	e8 fb fd ff ff       	call   ffffffff800017e4 <ResetController(IDEDevice*)>
ffffffff800019e9:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff800019f0:	48 89 c7             	mov    rdi,rax
ffffffff800019f3:	e8 96 fe ff ff       	call   ffffffff8000188e <SelectDevice(IDEDevice*)>
ffffffff800019f8:	83 f0 01             	xor    eax,0x1
ffffffff800019fb:	84 c0                	test   al,al
ffffffff800019fd:	74 20                	je     ffffffff80001a1f <IdentifyAtaDevice(IDEDevice*)+0xea>
ffffffff800019ff:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80001a02:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001a06:	48 89 c6             	mov    rsi,rax
ffffffff80001a09:	48 c7 c7 68 79 00 80 	mov    rdi,0xffffffff80007968
ffffffff80001a10:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001a15:	e8 57 1e 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80001a1a:	e9 04 02 00 00       	jmp    ffffffff80001c23 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80001a1f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001a22:	83 c0 02             	add    eax,0x2
ffffffff80001a25:	0f b7 c0             	movzx  eax,ax
ffffffff80001a28:	89 c7                	mov    edi,eax
ffffffff80001a2a:	e8 af fc ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff80001a2f:	3c 01                	cmp    al,0x1
ffffffff80001a31:	75 1b                	jne    ffffffff80001a4e <IdentifyAtaDevice(IDEDevice*)+0x119>
ffffffff80001a33:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001a36:	83 c0 03             	add    eax,0x3
ffffffff80001a39:	0f b7 c0             	movzx  eax,ax
ffffffff80001a3c:	89 c7                	mov    edi,eax
ffffffff80001a3e:	e8 9b fc ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff80001a43:	3c 01                	cmp    al,0x1
ffffffff80001a45:	75 07                	jne    ffffffff80001a4e <IdentifyAtaDevice(IDEDevice*)+0x119>
ffffffff80001a47:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80001a4c:	eb 05                	jmp    ffffffff80001a53 <IdentifyAtaDevice(IDEDevice*)+0x11e>
ffffffff80001a4e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001a53:	84 c0                	test   al,al
ffffffff80001a55:	74 7a                	je     ffffffff80001ad1 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80001a57:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001a5a:	83 c0 04             	add    eax,0x4
ffffffff80001a5d:	0f b7 c0             	movzx  eax,ax
ffffffff80001a60:	89 c7                	mov    edi,eax
ffffffff80001a62:	e8 77 fc ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff80001a67:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff80001a6a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001a6d:	83 c0 05             	add    eax,0x5
ffffffff80001a70:	0f b7 c0             	movzx  eax,ax
ffffffff80001a73:	89 c7                	mov    edi,eax
ffffffff80001a75:	e8 64 fc ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff80001a7a:	88 45 ee             	mov    BYTE PTR [rbp-0x12],al
ffffffff80001a7d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001a80:	83 c0 07             	add    eax,0x7
ffffffff80001a83:	0f b7 c0             	movzx  eax,ax
ffffffff80001a86:	89 c7                	mov    edi,eax
ffffffff80001a88:	e8 51 fc ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff80001a8d:	88 45 ed             	mov    BYTE PTR [rbp-0x13],al
ffffffff80001a90:	80 7d ef 14          	cmp    BYTE PTR [rbp-0x11],0x14
ffffffff80001a94:	75 1e                	jne    ffffffff80001ab4 <IdentifyAtaDevice(IDEDevice*)+0x17f>
ffffffff80001a96:	80 7d ee eb          	cmp    BYTE PTR [rbp-0x12],0xeb
ffffffff80001a9a:	75 18                	jne    ffffffff80001ab4 <IdentifyAtaDevice(IDEDevice*)+0x17f>
ffffffff80001a9c:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001aa3:	c6 40 0a 01          	mov    BYTE PTR [rax+0xa],0x1
ffffffff80001aa7:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001aae:	c6 40 08 01          	mov    BYTE PTR [rax+0x8],0x1
ffffffff80001ab2:	eb 1d                	jmp    ffffffff80001ad1 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80001ab4:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffffffff80001ab8:	75 17                	jne    ffffffff80001ad1 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80001aba:	80 7d ee 00          	cmp    BYTE PTR [rbp-0x12],0x0
ffffffff80001abe:	75 11                	jne    ffffffff80001ad1 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80001ac0:	80 7d ed 00          	cmp    BYTE PTR [rbp-0x13],0x0
ffffffff80001ac4:	74 0b                	je     ffffffff80001ad1 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80001ac6:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001acd:	c6 40 08 01          	mov    BYTE PTR [rax+0x8],0x1
ffffffff80001ad1:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001ad8:	0f b6 40 08          	movzx  eax,BYTE PTR [rax+0x8]
ffffffff80001adc:	83 f0 01             	xor    eax,0x1
ffffffff80001adf:	84 c0                	test   al,al
ffffffff80001ae1:	0f 85 3b 01 00 00    	jne    ffffffff80001c22 <IdentifyAtaDevice(IDEDevice*)+0x2ed>
ffffffff80001ae7:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001aee:	0f b6 40 0a          	movzx  eax,BYTE PTR [rax+0xa]
ffffffff80001af2:	84 c0                	test   al,al
ffffffff80001af4:	74 07                	je     ffffffff80001afd <IdentifyAtaDevice(IDEDevice*)+0x1c8>
ffffffff80001af6:	b8 a1 ff ff ff       	mov    eax,0xffffffa1
ffffffff80001afb:	eb 05                	jmp    ffffffff80001b02 <IdentifyAtaDevice(IDEDevice*)+0x1cd>
ffffffff80001afd:	b8 ec ff ff ff       	mov    eax,0xffffffec
ffffffff80001b02:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
ffffffff80001b05:	0f b6 55 ec          	movzx  edx,BYTE PTR [rbp-0x14]
ffffffff80001b09:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001b0c:	83 c0 07             	add    eax,0x7
ffffffff80001b0f:	0f b7 c0             	movzx  eax,ax
ffffffff80001b12:	89 d6                	mov    esi,edx
ffffffff80001b14:	89 c7                	mov    edi,eax
ffffffff80001b16:	e8 db 04 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001b1b:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80001b20:	e8 f7 fb ff ff       	call   ffffffff8000171c <udelay(unsigned long)>
ffffffff80001b25:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001b2c:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff80001b31:	ba 08 00 00 00       	mov    edx,0x8
ffffffff80001b36:	be 89 00 00 00       	mov    esi,0x89
ffffffff80001b3b:	48 89 c7             	mov    rdi,rax
ffffffff80001b3e:	e8 2d fc ff ff       	call   ffffffff80001770 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff80001b43:	83 f0 01             	xor    eax,0x1
ffffffff80001b46:	84 c0                	test   al,al
ffffffff80001b48:	74 10                	je     ffffffff80001b5a <IdentifyAtaDevice(IDEDevice*)+0x225>
ffffffff80001b4a:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001b51:	c6 40 08 00          	mov    BYTE PTR [rax+0x8],0x0
ffffffff80001b55:	e9 c9 00 00 00       	jmp    ffffffff80001c23 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80001b5a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80001b61:	eb 1f                	jmp    ffffffff80001b82 <IdentifyAtaDevice(IDEDevice*)+0x24d>
ffffffff80001b63:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001b66:	0f b7 c0             	movzx  eax,ax
ffffffff80001b69:	89 c7                	mov    edi,eax
ffffffff80001b6b:	e8 8c fb ff ff       	call   ffffffff800016fc <Utils::inw(unsigned short)>
ffffffff80001b70:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80001b73:	48 63 d2             	movsxd rdx,edx
ffffffff80001b76:	66 89 84 55 ec fd ff 	mov    WORD PTR [rbp+rdx*2-0x214],ax
ffffffff80001b7d:	ff 
ffffffff80001b7e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80001b82:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffffffff80001b89:	7e d8                	jle    ffffffff80001b63 <IdentifyAtaDevice(IDEDevice*)+0x22e>
ffffffff80001b8b:	0f b7 85 ee fd ff ff 	movzx  eax,WORD PTR [rbp-0x212]
ffffffff80001b92:	0f b7 d0             	movzx  edx,ax
ffffffff80001b95:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001b9c:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
ffffffff80001b9f:	0f b7 85 f2 fd ff ff 	movzx  eax,WORD PTR [rbp-0x20e]
ffffffff80001ba6:	0f b7 d0             	movzx  edx,ax
ffffffff80001ba9:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001bb0:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
ffffffff80001bb3:	0f b7 85 f8 fd ff ff 	movzx  eax,WORD PTR [rbp-0x208]
ffffffff80001bba:	0f b7 d0             	movzx  edx,ax
ffffffff80001bbd:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001bc4:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
ffffffff80001bc7:	0f b7 85 4e fe ff ff 	movzx  eax,WORD PTR [rbp-0x1b2]
ffffffff80001bce:	66 c1 e8 09          	shr    ax,0x9
ffffffff80001bd2:	0f b7 c0             	movzx  eax,ax
ffffffff80001bd5:	83 e0 01             	and    eax,0x1
ffffffff80001bd8:	85 c0                	test   eax,eax
ffffffff80001bda:	74 16                	je     ffffffff80001bf2 <IdentifyAtaDevice(IDEDevice*)+0x2bd>
ffffffff80001bdc:	0f b7 85 64 fe ff ff 	movzx  eax,WORD PTR [rbp-0x19c]
ffffffff80001be3:	0f b7 d0             	movzx  edx,ax
ffffffff80001be6:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001bed:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff80001bf0:	eb 31                	jmp    ffffffff80001c23 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80001bf2:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001bf9:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffffffff80001bfc:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001c03:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffffffff80001c06:	0f af d0             	imul   edx,eax
ffffffff80001c09:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001c10:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff80001c13:	0f af d0             	imul   edx,eax
ffffffff80001c16:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80001c1d:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff80001c20:	eb 01                	jmp    ffffffff80001c23 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80001c22:	90                   	nop
ffffffff80001c23:	c9                   	leave  
ffffffff80001c24:	c3                   	ret    
ffffffff80001c25:	90                   	nop

ffffffff80001c26 <PATA::PATA()>:
ffffffff80001c26:	f3 0f 1e fa          	endbr64 
ffffffff80001c2a:	55                   	push   rbp
ffffffff80001c2b:	48 89 e5             	mov    rbp,rsp
ffffffff80001c2e:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001c32:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80001c36:	66 c7 05 61 81 00 00 	mov    WORD PTR [rip+0x8161],0x1f0        # ffffffff80009da0 <controllers>
ffffffff80001c3d:	f0 01 
ffffffff80001c3f:	c6 05 6b 81 00 00 00 	mov    BYTE PTR [rip+0x816b],0x0        # ffffffff80009db1 <controllers+0x11>
ffffffff80001c46:	c6 05 84 81 00 00 01 	mov    BYTE PTR [rip+0x8184],0x1        # ffffffff80009dd1 <controllers+0x31>
ffffffff80001c4d:	66 c7 05 92 81 00 00 	mov    WORD PTR [rip+0x8192],0x170        # ffffffff80009de8 <controllers+0x48>
ffffffff80001c54:	70 01 
ffffffff80001c56:	c6 05 9c 81 00 00 00 	mov    BYTE PTR [rip+0x819c],0x0        # ffffffff80009df9 <controllers+0x59>
ffffffff80001c5d:	c6 05 b5 81 00 00 01 	mov    BYTE PTR [rip+0x81b5],0x1        # ffffffff80009e19 <controllers+0x79>
ffffffff80001c64:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80001c6b:	e9 f7 00 00 00       	jmp    ffffffff80001d67 <PATA::PATA()+0x141>
ffffffff80001c70:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001c73:	48 63 d0             	movsxd rdx,eax
ffffffff80001c76:	48 89 d0             	mov    rax,rdx
ffffffff80001c79:	48 c1 e0 03          	shl    rax,0x3
ffffffff80001c7d:	48 01 d0             	add    rax,rdx
ffffffff80001c80:	48 c1 e0 03          	shl    rax,0x3
ffffffff80001c84:	48 05 a0 9d 00 80    	add    rax,0xffffffff80009da0
ffffffff80001c8a:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001c8e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffffffff80001c95:	e9 bf 00 00 00       	jmp    ffffffff80001d59 <PATA::PATA()+0x133>
ffffffff80001c9a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80001c9d:	48 98                	cdqe   
ffffffff80001c9f:	48 c1 e0 05          	shl    rax,0x5
ffffffff80001ca3:	48 89 c2             	mov    rdx,rax
ffffffff80001ca6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001caa:	48 01 d0             	add    rax,rdx
ffffffff80001cad:	48 83 c0 08          	add    rax,0x8
ffffffff80001cb1:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80001cb5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001cb9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001cbd:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80001cc0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001cc4:	48 89 c7             	mov    rdi,rax
ffffffff80001cc7:	e8 69 fc ff ff       	call   ffffffff80001935 <IdentifyAtaDevice(IDEDevice*)>
ffffffff80001ccc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001cd0:	0f b6 40 08          	movzx  eax,BYTE PTR [rax+0x8]
ffffffff80001cd4:	83 f0 01             	xor    eax,0x1
ffffffff80001cd7:	84 c0                	test   al,al
ffffffff80001cd9:	75 79                	jne    ffffffff80001d54 <PATA::PATA()+0x12e>
ffffffff80001cdb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001cdf:	0f b6 40 0a          	movzx  eax,BYTE PTR [rax+0xa]
ffffffff80001ce3:	84 c0                	test   al,al
ffffffff80001ce5:	75 6d                	jne    ffffffff80001d54 <PATA::PATA()+0x12e>
ffffffff80001ce7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001ceb:	8b 70 18             	mov    esi,DWORD PTR [rax+0x18]
ffffffff80001cee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001cf2:	8b 48 14             	mov    ecx,DWORD PTR [rax+0x14]
ffffffff80001cf5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001cf9:	44 8b 40 10          	mov    r8d,DWORD PTR [rax+0x10]
ffffffff80001cfd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001d01:	8b 78 0c             	mov    edi,DWORD PTR [rax+0xc]
ffffffff80001d04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001d08:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff80001d0c:	0f b6 d0             	movzx  edx,al
ffffffff80001d0f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001d13:	0f b6 40 0a          	movzx  eax,BYTE PTR [rax+0xa]
ffffffff80001d17:	84 c0                	test   al,al
ffffffff80001d19:	74 09                	je     ffffffff80001d24 <PATA::PATA()+0xfe>
ffffffff80001d1b:	49 c7 c2 93 79 00 80 	mov    r10,0xffffffff80007993
ffffffff80001d22:	eb 07                	jmp    ffffffff80001d2b <PATA::PATA()+0x105>
ffffffff80001d24:	49 c7 c2 9a 79 00 80 	mov    r10,0xffffffff8000799a
ffffffff80001d2b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80001d2e:	56                   	push   rsi
ffffffff80001d2f:	51                   	push   rcx
ffffffff80001d30:	45 89 c1             	mov    r9d,r8d
ffffffff80001d33:	41 89 f8             	mov    r8d,edi
ffffffff80001d36:	89 d1                	mov    ecx,edx
ffffffff80001d38:	89 c2                	mov    edx,eax
ffffffff80001d3a:	4c 89 d6             	mov    rsi,r10
ffffffff80001d3d:	48 c7 c7 a8 79 00 80 	mov    rdi,0xffffffff800079a8
ffffffff80001d44:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001d49:	e8 23 1b 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80001d4e:	48 83 c4 10          	add    rsp,0x10
ffffffff80001d52:	eb 01                	jmp    ffffffff80001d55 <PATA::PATA()+0x12f>
ffffffff80001d54:	90                   	nop
ffffffff80001d55:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
ffffffff80001d59:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
ffffffff80001d5d:	0f 8e 37 ff ff ff    	jle    ffffffff80001c9a <PATA::PATA()+0x74>
ffffffff80001d63:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80001d67:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80001d6b:	0f 8e ff fe ff ff    	jle    ffffffff80001c70 <PATA::PATA()+0x4a>
ffffffff80001d71:	90                   	nop
ffffffff80001d72:	90                   	nop
ffffffff80001d73:	c9                   	leave  
ffffffff80001d74:	c3                   	ret    
ffffffff80001d75:	90                   	nop

ffffffff80001d76 <PATA::Read(unsigned long, unsigned int, void*)>:
ffffffff80001d76:	f3 0f 1e fa          	endbr64 
ffffffff80001d7a:	55                   	push   rbp
ffffffff80001d7b:	48 89 e5             	mov    rbp,rsp
ffffffff80001d7e:	48 83 ec 50          	sub    rsp,0x50
ffffffff80001d82:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff80001d86:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff80001d8a:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffffffff80001d8d:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff80001d91:	48 c7 45 e8 a8 9d 00 	mov    QWORD PTR [rbp-0x18],0xffffffff80009da8
ffffffff80001d98:	80 
ffffffff80001d99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001d9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001da0:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80001da4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80001da8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001dac:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffffffff80001db0:	75 0a                	jne    ffffffff80001dbc <PATA::Read(unsigned long, unsigned int, void*)+0x46>
ffffffff80001db2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001db7:	e9 b4 01 00 00       	jmp    ffffffff80001f70 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80001dbc:	81 7d bc ff 00 00 00 	cmp    DWORD PTR [rbp-0x44],0xff
ffffffff80001dc3:	76 07                	jbe    ffffffff80001dcc <PATA::Read(unsigned long, unsigned int, void*)+0x56>
ffffffff80001dc5:	c7 45 bc 00 01 00 00 	mov    DWORD PTR [rbp-0x44],0x100
ffffffff80001dcc:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffffffff80001dcf:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001dd3:	48 01 c2             	add    rdx,rax
ffffffff80001dd6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001dda:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80001ddd:	89 c0                	mov    eax,eax
ffffffff80001ddf:	48 39 c2             	cmp    rdx,rax
ffffffff80001de2:	76 0a                	jbe    ffffffff80001dee <PATA::Read(unsigned long, unsigned int, void*)+0x78>
ffffffff80001de4:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001de9:	e9 82 01 00 00       	jmp    ffffffff80001f70 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80001dee:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001df2:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff80001df5:	0f b7 c0             	movzx  eax,ax
ffffffff80001df8:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffffffff80001dfb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001dff:	48 89 c7             	mov    rdi,rax
ffffffff80001e02:	e8 87 fa ff ff       	call   ffffffff8000188e <SelectDevice(IDEDevice*)>
ffffffff80001e07:	83 f0 01             	xor    eax,0x1
ffffffff80001e0a:	84 c0                	test   al,al
ffffffff80001e0c:	74 0a                	je     ffffffff80001e18 <PATA::Read(unsigned long, unsigned int, void*)+0xa2>
ffffffff80001e0e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001e13:	e9 58 01 00 00       	jmp    ffffffff80001f70 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80001e18:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001e1c:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
ffffffff80001e1f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001e23:	48 c1 e8 08          	shr    rax,0x8
ffffffff80001e27:	88 45 da             	mov    BYTE PTR [rbp-0x26],al
ffffffff80001e2a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001e2e:	48 c1 e8 10          	shr    rax,0x10
ffffffff80001e32:	88 45 d9             	mov    BYTE PTR [rbp-0x27],al
ffffffff80001e35:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001e39:	48 c1 e8 18          	shr    rax,0x18
ffffffff80001e3d:	83 e0 0f             	and    eax,0xf
ffffffff80001e40:	88 45 d8             	mov    BYTE PTR [rbp-0x28],al
ffffffff80001e43:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80001e46:	0f b6 d0             	movzx  edx,al
ffffffff80001e49:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001e4c:	83 c0 02             	add    eax,0x2
ffffffff80001e4f:	0f b7 c0             	movzx  eax,ax
ffffffff80001e52:	89 d6                	mov    esi,edx
ffffffff80001e54:	89 c7                	mov    edi,eax
ffffffff80001e56:	e8 9b 01 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001e5b:	0f b6 55 db          	movzx  edx,BYTE PTR [rbp-0x25]
ffffffff80001e5f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001e62:	83 c0 03             	add    eax,0x3
ffffffff80001e65:	0f b7 c0             	movzx  eax,ax
ffffffff80001e68:	89 d6                	mov    esi,edx
ffffffff80001e6a:	89 c7                	mov    edi,eax
ffffffff80001e6c:	e8 85 01 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001e71:	0f b6 55 da          	movzx  edx,BYTE PTR [rbp-0x26]
ffffffff80001e75:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001e78:	83 c0 04             	add    eax,0x4
ffffffff80001e7b:	0f b7 c0             	movzx  eax,ax
ffffffff80001e7e:	89 d6                	mov    esi,edx
ffffffff80001e80:	89 c7                	mov    edi,eax
ffffffff80001e82:	e8 6f 01 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001e87:	0f b6 55 d9          	movzx  edx,BYTE PTR [rbp-0x27]
ffffffff80001e8b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001e8e:	83 c0 05             	add    eax,0x5
ffffffff80001e91:	0f b7 c0             	movzx  eax,ax
ffffffff80001e94:	89 d6                	mov    esi,edx
ffffffff80001e96:	89 c7                	mov    edi,eax
ffffffff80001e98:	e8 59 01 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001e9d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001ea1:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff80001ea5:	0f b6 c0             	movzx  eax,al
ffffffff80001ea8:	c1 e0 04             	shl    eax,0x4
ffffffff80001eab:	0a 45 d8             	or     al,BYTE PTR [rbp-0x28]
ffffffff80001eae:	83 c8 40             	or     eax,0x40
ffffffff80001eb1:	0f b6 d0             	movzx  edx,al
ffffffff80001eb4:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001eb7:	83 c0 06             	add    eax,0x6
ffffffff80001eba:	0f b7 c0             	movzx  eax,ax
ffffffff80001ebd:	89 d6                	mov    esi,edx
ffffffff80001ebf:	89 c7                	mov    edi,eax
ffffffff80001ec1:	e8 30 01 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001ec6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001ec9:	83 c0 07             	add    eax,0x7
ffffffff80001ecc:	0f b7 c0             	movzx  eax,ax
ffffffff80001ecf:	be 20 00 00 00       	mov    esi,0x20
ffffffff80001ed4:	89 c7                	mov    edi,eax
ffffffff80001ed6:	e8 1b 01 00 00       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80001edb:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80001ee0:	e8 37 f8 ff ff       	call   ffffffff8000171c <udelay(unsigned long)>
ffffffff80001ee5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001ee9:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff80001eee:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80001ef3:	be 80 00 00 00       	mov    esi,0x80
ffffffff80001ef8:	48 89 c7             	mov    rdi,rax
ffffffff80001efb:	e8 70 f8 ff ff       	call   ffffffff80001770 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff80001f00:	83 f0 01             	xor    eax,0x1
ffffffff80001f03:	84 c0                	test   al,al
ffffffff80001f05:	74 07                	je     ffffffff80001f0e <PATA::Read(unsigned long, unsigned int, void*)+0x198>
ffffffff80001f07:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001f0c:	eb 62                	jmp    ffffffff80001f70 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80001f0e:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001f11:	83 c0 07             	add    eax,0x7
ffffffff80001f14:	0f b7 c0             	movzx  eax,ax
ffffffff80001f17:	89 c7                	mov    edi,eax
ffffffff80001f19:	e8 c0 f7 ff ff       	call   ffffffff800016de <Utils::inb(unsigned short)>
ffffffff80001f1e:	0f b6 c0             	movzx  eax,al
ffffffff80001f21:	83 e0 01             	and    eax,0x1
ffffffff80001f24:	85 c0                	test   eax,eax
ffffffff80001f26:	0f 95 c0             	setne  al
ffffffff80001f29:	84 c0                	test   al,al
ffffffff80001f2b:	74 07                	je     ffffffff80001f34 <PATA::Read(unsigned long, unsigned int, void*)+0x1be>
ffffffff80001f2d:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001f32:	eb 3c                	jmp    ffffffff80001f70 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80001f34:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80001f37:	c1 e0 08             	shl    eax,0x8
ffffffff80001f3a:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
ffffffff80001f3d:	eb 1e                	jmp    ffffffff80001f5d <PATA::Read(unsigned long, unsigned int, void*)+0x1e7>
ffffffff80001f3f:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001f42:	0f b7 c0             	movzx  eax,ax
ffffffff80001f45:	89 c7                	mov    edi,eax
ffffffff80001f47:	e8 b0 f7 ff ff       	call   ffffffff800016fc <Utils::inw(unsigned short)>
ffffffff80001f4c:	89 c2                	mov    edx,eax
ffffffff80001f4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001f52:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffffffff80001f56:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff80001f5a:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80001f5d:	83 6d f4 01          	sub    DWORD PTR [rbp-0xc],0x1
ffffffff80001f61:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80001f64:	f7 d0                	not    eax
ffffffff80001f66:	c1 e8 1f             	shr    eax,0x1f
ffffffff80001f69:	84 c0                	test   al,al
ffffffff80001f6b:	75 d2                	jne    ffffffff80001f3f <PATA::Read(unsigned long, unsigned int, void*)+0x1c9>
ffffffff80001f6d:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80001f70:	c9                   	leave  
ffffffff80001f71:	c3                   	ret    

ffffffff80001f72 <__static_initialization_and_destruction_0(int, int)>:
ffffffff80001f72:	f3 0f 1e fa          	endbr64 
ffffffff80001f76:	55                   	push   rbp
ffffffff80001f77:	48 89 e5             	mov    rbp,rsp
ffffffff80001f7a:	41 54                	push   r12
ffffffff80001f7c:	53                   	push   rbx
ffffffff80001f7d:	48 83 ec 10          	sub    rsp,0x10
ffffffff80001f81:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80001f84:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff80001f87:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
ffffffff80001f8b:	75 46                	jne    ffffffff80001fd3 <__static_initialization_and_destruction_0(int, int)+0x61>
ffffffff80001f8d:	81 7d e8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x18],0xffff
ffffffff80001f94:	75 3d                	jne    ffffffff80001fd3 <__static_initialization_and_destruction_0(int, int)+0x61>
ffffffff80001f96:	48 c7 c0 a0 9d 00 80 	mov    rax,0xffffffff80009da0
ffffffff80001f9d:	41 bc 01 00 00 00    	mov    r12d,0x1
ffffffff80001fa3:	48 89 c3             	mov    rbx,rax
ffffffff80001fa6:	eb 26                	jmp    ffffffff80001fce <__static_initialization_and_destruction_0(int, int)+0x5c>
ffffffff80001fa8:	48 89 de             	mov    rsi,rbx
ffffffff80001fab:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001fb0:	ba 09 00 00 00       	mov    edx,0x9
ffffffff80001fb5:	48 89 f7             	mov    rdi,rsi
ffffffff80001fb8:	48 89 d1             	mov    rcx,rdx
ffffffff80001fbb:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffffffff80001fbe:	48 89 df             	mov    rdi,rbx
ffffffff80001fc1:	e8 72 00 00 00       	call   ffffffff80002038 <IDEController::IDEController()>
ffffffff80001fc6:	48 83 c3 48          	add    rbx,0x48
ffffffff80001fca:	49 83 ec 01          	sub    r12,0x1
ffffffff80001fce:	4d 85 e4             	test   r12,r12
ffffffff80001fd1:	79 d5                	jns    ffffffff80001fa8 <__static_initialization_and_destruction_0(int, int)+0x36>
ffffffff80001fd3:	90                   	nop
ffffffff80001fd4:	48 83 c4 10          	add    rsp,0x10
ffffffff80001fd8:	5b                   	pop    rbx
ffffffff80001fd9:	41 5c                	pop    r12
ffffffff80001fdb:	5d                   	pop    rbp
ffffffff80001fdc:	c3                   	ret    

ffffffff80001fdd <_GLOBAL__sub_I_controllers>:
ffffffff80001fdd:	f3 0f 1e fa          	endbr64 
ffffffff80001fe1:	55                   	push   rbp
ffffffff80001fe2:	48 89 e5             	mov    rbp,rsp
ffffffff80001fe5:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80001fea:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80001fef:	e8 7e ff ff ff       	call   ffffffff80001f72 <__static_initialization_and_destruction_0(int, int)>
ffffffff80001ff4:	5d                   	pop    rbp
ffffffff80001ff5:	c3                   	ret    

ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>:
ffffffff80001ff6:	f3 0f 1e fa          	endbr64 
ffffffff80001ffa:	55                   	push   rbp
ffffffff80001ffb:	48 89 e5             	mov    rbp,rsp
ffffffff80001ffe:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002002:	89 f8                	mov    eax,edi
ffffffff80002004:	89 f2                	mov    edx,esi
ffffffff80002006:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff8000200a:	89 d0                	mov    eax,edx
ffffffff8000200c:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff8000200f:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80002013:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80002017:	ee                   	out    dx,al
ffffffff80002018:	90                   	nop
ffffffff80002019:	c9                   	leave  
ffffffff8000201a:	c3                   	ret    
ffffffff8000201b:	90                   	nop

ffffffff8000201c <IDEDevice::IDEDevice()>:
ffffffff8000201c:	f3 0f 1e fa          	endbr64 
ffffffff80002020:	55                   	push   rbp
ffffffff80002021:	48 89 e5             	mov    rbp,rsp
ffffffff80002024:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002028:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000202c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002030:	c6 40 0a 00          	mov    BYTE PTR [rax+0xa],0x0
ffffffff80002034:	90                   	nop
ffffffff80002035:	c9                   	leave  
ffffffff80002036:	c3                   	ret    
ffffffff80002037:	90                   	nop

ffffffff80002038 <IDEController::IDEController()>:
ffffffff80002038:	f3 0f 1e fa          	endbr64 
ffffffff8000203c:	55                   	push   rbp
ffffffff8000203d:	48 89 e5             	mov    rbp,rsp
ffffffff80002040:	41 54                	push   r12
ffffffff80002042:	53                   	push   rbx
ffffffff80002043:	48 83 ec 10          	sub    rsp,0x10
ffffffff80002047:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000204b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000204f:	48 83 c0 08          	add    rax,0x8
ffffffff80002053:	41 bc 01 00 00 00    	mov    r12d,0x1
ffffffff80002059:	48 89 c3             	mov    rbx,rax
ffffffff8000205c:	eb 2f                	jmp    ffffffff8000208d <IDEController::IDEController()+0x55>
ffffffff8000205e:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
ffffffff80002065:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
ffffffff8000206c:	00 
ffffffff8000206d:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
ffffffff80002074:	00 
ffffffff80002075:	48 c7 43 18 00 00 00 	mov    QWORD PTR [rbx+0x18],0x0
ffffffff8000207c:	00 
ffffffff8000207d:	48 89 df             	mov    rdi,rbx
ffffffff80002080:	e8 97 ff ff ff       	call   ffffffff8000201c <IDEDevice::IDEDevice()>
ffffffff80002085:	48 83 c3 20          	add    rbx,0x20
ffffffff80002089:	49 83 ec 01          	sub    r12,0x1
ffffffff8000208d:	4d 85 e4             	test   r12,r12
ffffffff80002090:	79 cc                	jns    ffffffff8000205e <IDEController::IDEController()+0x26>
ffffffff80002092:	90                   	nop
ffffffff80002093:	90                   	nop
ffffffff80002094:	48 83 c4 10          	add    rsp,0x10
ffffffff80002098:	5b                   	pop    rbx
ffffffff80002099:	41 5c                	pop    r12
ffffffff8000209b:	5d                   	pop    rbp
ffffffff8000209c:	c3                   	ret    

ffffffff8000209d <memset(void*, int, unsigned long)>:
ffffffff8000209d:	55                   	push   rbp
ffffffff8000209e:	48 89 e5             	mov    rbp,rsp
ffffffff800020a1:	48 83 ec 28          	sub    rsp,0x28
ffffffff800020a5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800020a9:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800020ac:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800020b0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800020b4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800020b8:	eb 13                	jmp    ffffffff800020cd <memset(void*, int, unsigned long)+0x30>
ffffffff800020ba:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff800020bd:	89 c1                	mov    ecx,eax
ffffffff800020bf:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800020c3:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800020c7:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff800020cb:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800020cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800020d1:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff800020d5:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800020d9:	48 85 c0             	test   rax,rax
ffffffff800020dc:	0f 95 c0             	setne  al
ffffffff800020df:	84 c0                	test   al,al
ffffffff800020e1:	75 d7                	jne    ffffffff800020ba <memset(void*, int, unsigned long)+0x1d>
ffffffff800020e3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800020e7:	c9                   	leave  
ffffffff800020e8:	c3                   	ret    

ffffffff800020e9 <Utils::inw(unsigned short)>:
ffffffff800020e9:	55                   	push   rbp
ffffffff800020ea:	48 89 e5             	mov    rbp,rsp
ffffffff800020ed:	48 83 ec 18          	sub    rsp,0x18
ffffffff800020f1:	89 f8                	mov    eax,edi
ffffffff800020f3:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff800020f7:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff800020fb:	89 c2                	mov    edx,eax
ffffffff800020fd:	66 ed                	in     ax,dx
ffffffff800020ff:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80002103:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
ffffffff80002107:	c9                   	leave  
ffffffff80002108:	c3                   	ret    

ffffffff80002109 <Utils::ind(unsigned short)>:
ffffffff80002109:	55                   	push   rbp
ffffffff8000210a:	48 89 e5             	mov    rbp,rsp
ffffffff8000210d:	48 83 ec 18          	sub    rsp,0x18
ffffffff80002111:	89 f8                	mov    eax,edi
ffffffff80002113:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff80002117:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff8000211b:	89 c2                	mov    edx,eax
ffffffff8000211d:	ed                   	in     eax,dx
ffffffff8000211e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80002121:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002124:	c9                   	leave  
ffffffff80002125:	c3                   	ret    

ffffffff80002126 <ReadPciRegister16(int, int, int, unsigned char)>:
ffffffff80002126:	f3 0f 1e fa          	endbr64 
ffffffff8000212a:	55                   	push   rbp
ffffffff8000212b:	48 89 e5             	mov    rbp,rsp
ffffffff8000212e:	48 83 ec 10          	sub    rsp,0x10
ffffffff80002132:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80002135:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80002138:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff8000213b:	89 c8                	mov    eax,ecx
ffffffff8000213d:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff80002140:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002143:	c1 e0 10             	shl    eax,0x10
ffffffff80002146:	89 c2                	mov    edx,eax
ffffffff80002148:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff8000214b:	c1 e0 0b             	shl    eax,0xb
ffffffff8000214e:	09 c2                	or     edx,eax
ffffffff80002150:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80002153:	c1 e0 08             	shl    eax,0x8
ffffffff80002156:	09 c2                	or     edx,eax
ffffffff80002158:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff8000215c:	09 d0                	or     eax,edx
ffffffff8000215e:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff80002163:	89 c6                	mov    esi,eax
ffffffff80002165:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff8000216a:	e8 e1 0a 00 00       	call   ffffffff80002c50 <Utils::outd(unsigned short, unsigned int)>
ffffffff8000216f:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff80002174:	e8 70 ff ff ff       	call   ffffffff800020e9 <Utils::inw(unsigned short)>
ffffffff80002179:	c9                   	leave  
ffffffff8000217a:	c3                   	ret    

ffffffff8000217b <ReadPciRegister32(int, int, int, unsigned char)>:
ffffffff8000217b:	f3 0f 1e fa          	endbr64 
ffffffff8000217f:	55                   	push   rbp
ffffffff80002180:	48 89 e5             	mov    rbp,rsp
ffffffff80002183:	48 83 ec 10          	sub    rsp,0x10
ffffffff80002187:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff8000218a:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff8000218d:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff80002190:	89 c8                	mov    eax,ecx
ffffffff80002192:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff80002195:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002198:	c1 e0 10             	shl    eax,0x10
ffffffff8000219b:	89 c2                	mov    edx,eax
ffffffff8000219d:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800021a0:	c1 e0 0b             	shl    eax,0xb
ffffffff800021a3:	09 c2                	or     edx,eax
ffffffff800021a5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800021a8:	c1 e0 08             	shl    eax,0x8
ffffffff800021ab:	09 c2                	or     edx,eax
ffffffff800021ad:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff800021b1:	09 d0                	or     eax,edx
ffffffff800021b3:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff800021b8:	89 c6                	mov    esi,eax
ffffffff800021ba:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff800021bf:	e8 8c 0a 00 00       	call   ffffffff80002c50 <Utils::outd(unsigned short, unsigned int)>
ffffffff800021c4:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff800021c9:	e8 3b ff ff ff       	call   ffffffff80002109 <Utils::ind(unsigned short)>
ffffffff800021ce:	c9                   	leave  
ffffffff800021cf:	c3                   	ret    

ffffffff800021d0 <ReadPciRegister64(int, int, int, unsigned char)>:
ffffffff800021d0:	f3 0f 1e fa          	endbr64 
ffffffff800021d4:	55                   	push   rbp
ffffffff800021d5:	48 89 e5             	mov    rbp,rsp
ffffffff800021d8:	53                   	push   rbx
ffffffff800021d9:	48 83 ec 18          	sub    rsp,0x18
ffffffff800021dd:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff800021e0:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff800021e3:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffffffff800021e6:	89 c8                	mov    eax,ecx
ffffffff800021e8:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
ffffffff800021eb:	0f b6 45 e0          	movzx  eax,BYTE PTR [rbp-0x20]
ffffffff800021ef:	83 c0 04             	add    eax,0x4
ffffffff800021f2:	0f b6 c8             	movzx  ecx,al
ffffffff800021f5:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff800021f8:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff800021fb:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800021fe:	89 c7                	mov    edi,eax
ffffffff80002200:	e8 76 ff ff ff       	call   ffffffff8000217b <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff80002205:	89 c0                	mov    eax,eax
ffffffff80002207:	48 c1 e0 20          	shl    rax,0x20
ffffffff8000220b:	48 89 c3             	mov    rbx,rax
ffffffff8000220e:	0f b6 4d e0          	movzx  ecx,BYTE PTR [rbp-0x20]
ffffffff80002212:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80002215:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff80002218:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000221b:	89 c7                	mov    edi,eax
ffffffff8000221d:	e8 59 ff ff ff       	call   ffffffff8000217b <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff80002222:	89 c0                	mov    eax,eax
ffffffff80002224:	48 09 d8             	or     rax,rbx
ffffffff80002227:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000222b:	c9                   	leave  
ffffffff8000222c:	c3                   	ret    

ffffffff8000222d <WritePciRegister16(int, int, int, unsigned char, unsigned short)>:
ffffffff8000222d:	f3 0f 1e fa          	endbr64 
ffffffff80002231:	55                   	push   rbp
ffffffff80002232:	48 89 e5             	mov    rbp,rsp
ffffffff80002235:	48 83 ec 20          	sub    rsp,0x20
ffffffff80002239:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff8000223c:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff8000223f:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff80002242:	89 ca                	mov    edx,ecx
ffffffff80002244:	44 89 c0             	mov    eax,r8d
ffffffff80002247:	88 55 f0             	mov    BYTE PTR [rbp-0x10],dl
ffffffff8000224a:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff8000224e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002251:	c1 e0 10             	shl    eax,0x10
ffffffff80002254:	89 c2                	mov    edx,eax
ffffffff80002256:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002259:	c1 e0 0b             	shl    eax,0xb
ffffffff8000225c:	09 c2                	or     edx,eax
ffffffff8000225e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80002261:	c1 e0 08             	shl    eax,0x8
ffffffff80002264:	09 c2                	or     edx,eax
ffffffff80002266:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff8000226a:	09 d0                	or     eax,edx
ffffffff8000226c:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff80002271:	89 c6                	mov    esi,eax
ffffffff80002273:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff80002278:	e8 d3 09 00 00       	call   ffffffff80002c50 <Utils::outd(unsigned short, unsigned int)>
ffffffff8000227d:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff80002281:	89 c6                	mov    esi,eax
ffffffff80002283:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff80002288:	e8 9e 09 00 00       	call   ffffffff80002c2b <Utils::outw(unsigned short, unsigned short)>
ffffffff8000228d:	90                   	nop
ffffffff8000228e:	c9                   	leave  
ffffffff8000228f:	c3                   	ret    

ffffffff80002290 <WritePciRegister32(int, int, int, unsigned char, unsigned int)>:
ffffffff80002290:	f3 0f 1e fa          	endbr64 
ffffffff80002294:	55                   	push   rbp
ffffffff80002295:	48 89 e5             	mov    rbp,rsp
ffffffff80002298:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000229c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff8000229f:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff800022a2:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff800022a5:	89 c8                	mov    eax,ecx
ffffffff800022a7:	44 89 45 ec          	mov    DWORD PTR [rbp-0x14],r8d
ffffffff800022ab:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff800022ae:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800022b1:	c1 e0 10             	shl    eax,0x10
ffffffff800022b4:	89 c2                	mov    edx,eax
ffffffff800022b6:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800022b9:	c1 e0 0b             	shl    eax,0xb
ffffffff800022bc:	09 c2                	or     edx,eax
ffffffff800022be:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800022c1:	c1 e0 08             	shl    eax,0x8
ffffffff800022c4:	09 c2                	or     edx,eax
ffffffff800022c6:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff800022ca:	09 d0                	or     eax,edx
ffffffff800022cc:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff800022d1:	89 c6                	mov    esi,eax
ffffffff800022d3:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff800022d8:	e8 73 09 00 00       	call   ffffffff80002c50 <Utils::outd(unsigned short, unsigned int)>
ffffffff800022dd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800022e0:	89 c6                	mov    esi,eax
ffffffff800022e2:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff800022e7:	e8 64 09 00 00       	call   ffffffff80002c50 <Utils::outd(unsigned short, unsigned int)>
ffffffff800022ec:	90                   	nop
ffffffff800022ed:	c9                   	leave  
ffffffff800022ee:	c3                   	ret    

ffffffff800022ef <ReadIgpu32(unsigned int)>:
ffffffff800022ef:	f3 0f 1e fa          	endbr64 
ffffffff800022f3:	55                   	push   rbp
ffffffff800022f4:	48 89 e5             	mov    rbp,rsp
ffffffff800022f7:	48 83 ec 08          	sub    rsp,0x8
ffffffff800022fb:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800022fe:	48 8b 15 3b 7b 00 00 	mov    rdx,QWORD PTR [rip+0x7b3b]        # ffffffff80009e40 <iobase>
ffffffff80002305:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002308:	c1 e8 02             	shr    eax,0x2
ffffffff8000230b:	89 c0                	mov    eax,eax
ffffffff8000230d:	48 c1 e0 02          	shl    rax,0x2
ffffffff80002311:	48 01 d0             	add    rax,rdx
ffffffff80002314:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80002316:	c9                   	leave  
ffffffff80002317:	c3                   	ret    

ffffffff80002318 <PciReadBar(int, int, int, int, unsigned int*, unsigned int*)>:
ffffffff80002318:	f3 0f 1e fa          	endbr64 
ffffffff8000231c:	55                   	push   rbp
ffffffff8000231d:	48 89 e5             	mov    rbp,rsp
ffffffff80002320:	48 83 ec 30          	sub    rsp,0x30
ffffffff80002324:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80002327:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff8000232a:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffffffff8000232d:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
ffffffff80002330:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffffffff80002334:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
ffffffff80002338:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000233b:	48 98                	cdqe   
ffffffff8000233d:	48 83 c0 04          	add    rax,0x4
ffffffff80002341:	c1 e0 02             	shl    eax,0x2
ffffffff80002344:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80002347:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000234a:	0f b6 c8             	movzx  ecx,al
ffffffff8000234d:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80002350:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff80002353:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80002356:	89 c7                	mov    edi,eax
ffffffff80002358:	e8 1e fe ff ff       	call   ffffffff8000217b <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff8000235d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80002361:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80002363:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002366:	0f b6 c8             	movzx  ecx,al
ffffffff80002369:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff8000236c:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff8000236f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80002372:	41 b8 ff ff ff ff    	mov    r8d,0xffffffff
ffffffff80002378:	89 c7                	mov    edi,eax
ffffffff8000237a:	e8 11 ff ff ff       	call   ffffffff80002290 <WritePciRegister32(int, int, int, unsigned char, unsigned int)>
ffffffff8000237f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002382:	0f b6 c8             	movzx  ecx,al
ffffffff80002385:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80002388:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff8000238b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000238e:	89 c7                	mov    edi,eax
ffffffff80002390:	e8 e6 fd ff ff       	call   ffffffff8000217b <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff80002395:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80002399:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff8000239b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000239f:	8b 38                	mov    edi,DWORD PTR [rax]
ffffffff800023a1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800023a4:	0f b6 c8             	movzx  ecx,al
ffffffff800023a7:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff800023aa:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff800023ad:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800023b0:	41 89 f8             	mov    r8d,edi
ffffffff800023b3:	89 c7                	mov    edi,eax
ffffffff800023b5:	e8 d6 fe ff ff       	call   ffffffff80002290 <WritePciRegister32(int, int, int, unsigned char, unsigned int)>
ffffffff800023ba:	90                   	nop
ffffffff800023bb:	c9                   	leave  
ffffffff800023bc:	c3                   	ret    

ffffffff800023bd <PciGetBar(PciBar*, int, int, int, int)>:
ffffffff800023bd:	f3 0f 1e fa          	endbr64 
ffffffff800023c1:	55                   	push   rbp
ffffffff800023c2:	48 89 e5             	mov    rbp,rsp
ffffffff800023c5:	48 83 ec 30          	sub    rsp,0x30
ffffffff800023c9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800023cd:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800023d0:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff800023d3:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
ffffffff800023d6:	44 89 45 d8          	mov    DWORD PTR [rbp-0x28],r8d
ffffffff800023da:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
ffffffff800023de:	48 8d 7d fc          	lea    rdi,[rbp-0x4]
ffffffff800023e2:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffffffff800023e5:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffffffff800023e8:	8b 75 e0             	mov    esi,DWORD PTR [rbp-0x20]
ffffffff800023eb:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff800023ee:	4d 89 c1             	mov    r9,r8
ffffffff800023f1:	49 89 f8             	mov    r8,rdi
ffffffff800023f4:	89 c7                	mov    edi,eax
ffffffff800023f6:	e8 1d ff ff ff       	call   ffffffff80002318 <PciReadBar(int, int, int, int, unsigned int*, unsigned int*)>
ffffffff800023fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800023fe:	83 e0 04             	and    eax,0x4
ffffffff80002401:	85 c0                	test   eax,eax
ffffffff80002403:	74 71                	je     ffffffff80002476 <PciGetBar(PciBar*, int, int, int, int)+0xb9>
ffffffff80002405:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff80002408:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff8000240b:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
ffffffff8000240f:	48 8d 7d f4          	lea    rdi,[rbp-0xc]
ffffffff80002413:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffffffff80002416:	8b 75 e0             	mov    esi,DWORD PTR [rbp-0x20]
ffffffff80002419:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000241c:	4d 89 c1             	mov    r9,r8
ffffffff8000241f:	49 89 f8             	mov    r8,rdi
ffffffff80002422:	89 c7                	mov    edi,eax
ffffffff80002424:	e8 ef fe ff ff       	call   ffffffff80002318 <PciReadBar(int, int, int, int, unsigned int*, unsigned int*)>
ffffffff80002429:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff8000242c:	89 c0                	mov    eax,eax
ffffffff8000242e:	48 c1 e0 20          	shl    rax,0x20
ffffffff80002432:	48 89 c2             	mov    rdx,rax
ffffffff80002435:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002438:	89 c0                	mov    eax,eax
ffffffff8000243a:	83 e0 f0             	and    eax,0xfffffff0
ffffffff8000243d:	48 09 c2             	or     rdx,rax
ffffffff80002440:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002444:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80002447:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffffffff8000244a:	89 c0                	mov    eax,eax
ffffffff8000244c:	48 c1 e0 20          	shl    rax,0x20
ffffffff80002450:	48 89 c2             	mov    rdx,rax
ffffffff80002453:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002456:	89 c0                	mov    eax,eax
ffffffff80002458:	83 e0 f0             	and    eax,0xfffffff0
ffffffff8000245b:	48 09 d0             	or     rax,rdx
ffffffff8000245e:	48 f7 d8             	neg    rax
ffffffff80002461:	48 89 c2             	mov    rdx,rax
ffffffff80002464:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002468:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff8000246c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002470:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
ffffffff80002474:	eb 68                	jmp    ffffffff800024de <PciGetBar(PciBar*, int, int, int, int)+0x121>
ffffffff80002476:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002479:	83 e0 01             	and    eax,0x1
ffffffff8000247c:	85 c0                	test   eax,eax
ffffffff8000247e:	74 32                	je     ffffffff800024b2 <PciGetBar(PciBar*, int, int, int, int)+0xf5>
ffffffff80002480:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002483:	0f b7 c0             	movzx  eax,ax
ffffffff80002486:	25 fc ff 00 00       	and    eax,0xfffc
ffffffff8000248b:	48 89 c2             	mov    rdx,rax
ffffffff8000248e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002492:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80002495:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002498:	83 e0 fc             	and    eax,0xfffffffc
ffffffff8000249b:	f7 d8                	neg    eax
ffffffff8000249d:	0f b7 d0             	movzx  edx,ax
ffffffff800024a0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800024a4:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff800024a8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800024ac:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
ffffffff800024b0:	eb 2c                	jmp    ffffffff800024de <PciGetBar(PciBar*, int, int, int, int)+0x121>
ffffffff800024b2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800024b5:	89 c0                	mov    eax,eax
ffffffff800024b7:	83 e0 f0             	and    eax,0xfffffff0
ffffffff800024ba:	48 89 c2             	mov    rdx,rax
ffffffff800024bd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800024c1:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff800024c4:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800024c7:	83 e0 f0             	and    eax,0xfffffff0
ffffffff800024ca:	f7 d8                	neg    eax
ffffffff800024cc:	89 c2                	mov    edx,eax
ffffffff800024ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800024d2:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff800024d6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800024da:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
ffffffff800024de:	90                   	nop
ffffffff800024df:	c9                   	leave  
ffffffff800024e0:	c3                   	ret    

ffffffff800024e1 <GfxInitMemManager()>:
ffffffff800024e1:	f3 0f 1e fa          	endbr64 
ffffffff800024e5:	55                   	push   rbp
ffffffff800024e6:	48 89 e5             	mov    rbp,rsp
ffffffff800024e9:	48 83 ec 10          	sub    rsp,0x10
ffffffff800024ed:	48 c7 05 88 79 00 00 	mov    QWORD PTR [rip+0x7988],0x0        # ffffffff80009e80 <mem_manager>
ffffffff800024f4:	00 00 00 00 
ffffffff800024f8:	48 c7 05 8d 79 00 00 	mov    QWORD PTR [rip+0x798d],0x0        # ffffffff80009e90 <mem_manager+0x10>
ffffffff800024ff:	00 00 00 00 
ffffffff80002503:	8b 05 47 79 00 00    	mov    eax,DWORD PTR [rip+0x7947]        # ffffffff80009e50 <stolenMemSize>
ffffffff80002509:	89 c0                	mov    eax,eax
ffffffff8000250b:	48 89 05 76 79 00 00 	mov    QWORD PTR [rip+0x7976],rax        # ffffffff80009e88 <mem_manager+0x8>
ffffffff80002512:	8b 05 38 79 00 00    	mov    eax,DWORD PTR [rip+0x7938]        # ffffffff80009e50 <stolenMemSize>
ffffffff80002518:	89 c0                	mov    eax,eax
ffffffff8000251a:	48 89 05 77 79 00 00 	mov    QWORD PTR [rip+0x7977],rax        # ffffffff80009e98 <mem_manager+0x18>
ffffffff80002521:	48 8b 05 70 79 00 00 	mov    rax,QWORD PTR [rip+0x7970]        # ffffffff80009e98 <mem_manager+0x18>
ffffffff80002528:	48 89 05 79 79 00 00 	mov    QWORD PTR [rip+0x7979],rax        # ffffffff80009ea8 <mem_manager+0x28>
ffffffff8000252f:	8b 05 2b 79 00 00    	mov    eax,DWORD PTR [rip+0x792b]        # ffffffff80009e60 <gttMappableEntries>
ffffffff80002535:	c1 e0 0c             	shl    eax,0xc
ffffffff80002538:	89 c0                	mov    eax,eax
ffffffff8000253a:	48 89 05 5f 79 00 00 	mov    QWORD PTR [rip+0x795f],rax        # ffffffff80009ea0 <mem_manager+0x20>
ffffffff80002541:	8b 05 19 79 00 00    	mov    eax,DWORD PTR [rip+0x7919]        # ffffffff80009e60 <gttMappableEntries>
ffffffff80002547:	c1 e0 0c             	shl    eax,0xc
ffffffff8000254a:	89 c0                	mov    eax,eax
ffffffff8000254c:	48 89 05 5d 79 00 00 	mov    QWORD PTR [rip+0x795d],rax        # ffffffff80009eb0 <mem_manager+0x30>
ffffffff80002553:	48 8b 05 56 79 00 00 	mov    rax,QWORD PTR [rip+0x7956]        # ffffffff80009eb0 <mem_manager+0x30>
ffffffff8000255a:	48 89 05 5f 79 00 00 	mov    QWORD PTR [rip+0x795f],rax        # ffffffff80009ec0 <mem_manager+0x40>
ffffffff80002561:	8b 05 f9 78 00 00    	mov    eax,DWORD PTR [rip+0x78f9]        # ffffffff80009e60 <gttMappableEntries>
ffffffff80002567:	89 c0                	mov    eax,eax
ffffffff80002569:	48 c1 e0 0c          	shl    rax,0xc
ffffffff8000256d:	48 89 05 44 79 00 00 	mov    QWORD PTR [rip+0x7944],rax        # ffffffff80009eb8 <mem_manager+0x38>
ffffffff80002574:	c6 45 ff 00          	mov    BYTE PTR [rbp-0x1],0x0
ffffffff80002578:	eb 23                	jmp    ffffffff8000259d <GfxInitMemManager()+0xbc>
ffffffff8000257a:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff8000257e:	48 05 00 00 02 00    	add    rax,0x20000
ffffffff80002584:	c1 e0 03             	shl    eax,0x3
ffffffff80002587:	be 00 00 00 00       	mov    esi,0x0
ffffffff8000258c:	89 c7                	mov    edi,eax
ffffffff8000258e:	e8 0d 07 00 00       	call   ffffffff80002ca0 <WriteIgpu64(unsigned int, unsigned long)>
ffffffff80002593:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80002597:	83 c0 01             	add    eax,0x1
ffffffff8000259a:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff8000259d:	80 7d ff 0f          	cmp    BYTE PTR [rbp-0x1],0xf
ffffffff800025a1:	76 d7                	jbe    ffffffff8000257a <GfxInitMemManager()+0x99>
ffffffff800025a3:	48 8b 05 3e 6f 00 00 	mov    rax,QWORD PTR [rip+0x6f3e]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff800025aa:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff800025ae:	48 8b 05 b3 78 00 00 	mov    rax,QWORD PTR [rip+0x78b3]        # ffffffff80009e68 <arpertureBar>
ffffffff800025b5:	48 01 d0             	add    rax,rdx
ffffffff800025b8:	48 05 00 08 40 00    	add    rax,0x400800
ffffffff800025be:	48 89 05 03 79 00 00 	mov    QWORD PTR [rip+0x7903],rax        # ffffffff80009ec8 <mem_manager+0x48>
ffffffff800025c5:	48 8b 05 fc 78 00 00 	mov    rax,QWORD PTR [rip+0x78fc]        # ffffffff80009ec8 <mem_manager+0x48>
ffffffff800025cc:	48 05 00 40 00 00    	add    rax,0x4000
ffffffff800025d2:	48 89 05 f7 78 00 00 	mov    QWORD PTR [rip+0x78f7],rax        # ffffffff80009ed0 <mem_manager+0x50>
ffffffff800025d9:	90                   	nop
ffffffff800025da:	c9                   	leave  
ffffffff800025db:	c3                   	ret    

ffffffff800025dc <GfxAlloc(GfxObject*, unsigned int, unsigned int)>:
ffffffff800025dc:	f3 0f 1e fa          	endbr64 
ffffffff800025e0:	55                   	push   rbp
ffffffff800025e1:	48 89 e5             	mov    rbp,rsp
ffffffff800025e4:	48 83 ec 20          	sub    rsp,0x20
ffffffff800025e8:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800025ec:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800025ef:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff800025f2:	48 8b 05 d7 78 00 00 	mov    rax,QWORD PTR [rip+0x78d7]        # ffffffff80009ed0 <mem_manager+0x50>
ffffffff800025f9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800025fd:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff80002600:	83 e8 01             	sub    eax,0x1
ffffffff80002603:	89 c2                	mov    edx,eax
ffffffff80002605:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002609:	48 21 d0             	and    rax,rdx
ffffffff8000260c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80002610:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff80002615:	74 0b                	je     ffffffff80002622 <GfxAlloc(GfxObject*, unsigned int, unsigned int)+0x46>
ffffffff80002617:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000261a:	48 2b 45 f0          	sub    rax,QWORD PTR [rbp-0x10]
ffffffff8000261e:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
ffffffff80002622:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80002625:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002629:	48 01 d0             	add    rax,rdx
ffffffff8000262c:	48 89 05 9d 78 00 00 	mov    QWORD PTR [rip+0x789d],rax        # ffffffff80009ed0 <mem_manager+0x50>
ffffffff80002633:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002637:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000263b:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff8000263e:	48 8b 15 83 78 00 00 	mov    rdx,QWORD PTR [rip+0x7883]        # ffffffff80009ec8 <mem_manager+0x48>
ffffffff80002645:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002649:	48 29 d0             	sub    rax,rdx
ffffffff8000264c:	48 89 c2             	mov    rdx,rax
ffffffff8000264f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002653:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80002657:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000265c:	c9                   	leave  
ffffffff8000265d:	c3                   	ret    

ffffffff8000265e <EnterForceWake()>:
ffffffff8000265e:	f3 0f 1e fa          	endbr64 
ffffffff80002662:	55                   	push   rbp
ffffffff80002663:	48 89 e5             	mov    rbp,rsp
ffffffff80002666:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000266a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80002671:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80002675:	bf 40 00 13 00       	mov    edi,0x130040
ffffffff8000267a:	e8 70 fc ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff8000267f:	83 e0 01             	and    eax,0x1
ffffffff80002682:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80002685:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
ffffffff80002689:	74 06                	je     ffffffff80002691 <EnterForceWake()+0x33>
ffffffff8000268b:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
ffffffff8000268f:	7e e0                	jle    ffffffff80002671 <EnterForceWake()+0x13>
ffffffff80002691:	be 01 00 01 00       	mov    esi,0x10001
ffffffff80002696:	bf 88 a1 00 00       	mov    edi,0xa188
ffffffff8000269b:	e8 d0 05 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff800026a0:	bf 80 a1 00 00       	mov    edi,0xa180
ffffffff800026a5:	e8 45 fc ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff800026aa:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff800026ae:	bf 40 00 13 00       	mov    edi,0x130040
ffffffff800026b3:	e8 37 fc ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff800026b8:	83 e0 01             	and    eax,0x1
ffffffff800026bb:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800026be:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff800026c1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800026c4:	89 c6                	mov    esi,eax
ffffffff800026c6:	48 c7 c7 48 7a 00 80 	mov    rdi,0xffffffff80007a48
ffffffff800026cd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800026d2:	e8 9a 11 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800026d7:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
ffffffff800026db:	74 cd                	je     ffffffff800026aa <EnterForceWake()+0x4c>
ffffffff800026dd:	90                   	nop
ffffffff800026de:	90                   	nop
ffffffff800026df:	c9                   	leave  
ffffffff800026e0:	c3                   	ret    

ffffffff800026e1 <ExitForceWake()>:
ffffffff800026e1:	f3 0f 1e fa          	endbr64 
ffffffff800026e5:	55                   	push   rbp
ffffffff800026e6:	48 89 e5             	mov    rbp,rsp
ffffffff800026e9:	be 00 00 01 00       	mov    esi,0x10000
ffffffff800026ee:	bf 88 a1 00 00       	mov    edi,0xa188
ffffffff800026f3:	e8 78 05 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff800026f8:	bf 80 a1 00 00       	mov    edi,0xa180
ffffffff800026fd:	e8 ed fb ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff80002702:	90                   	nop
ffffffff80002703:	5d                   	pop    rbp
ffffffff80002704:	c3                   	ret    

ffffffff80002705 <IntelGpu::Initialize()>:
ffffffff80002705:	f3 0f 1e fa          	endbr64 
ffffffff80002709:	55                   	push   rbp
ffffffff8000270a:	48 89 e5             	mov    rbp,rsp
ffffffff8000270d:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffffffff80002711:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80002716:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000271b:	be 02 00 00 00       	mov    esi,0x2
ffffffff80002720:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80002725:	e8 fc f9 ff ff       	call   ffffffff80002126 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff8000272a:	0f b7 c0             	movzx  eax,ax
ffffffff8000272d:	89 c6                	mov    esi,eax
ffffffff8000272f:	48 c7 c7 7c 7a 00 80 	mov    rdi,0xffffffff80007a7c
ffffffff80002736:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000273b:	e8 31 11 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002740:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80002745:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000274a:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000274f:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80002754:	e8 cd f9 ff ff       	call   ffffffff80002126 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff80002759:	83 c8 04             	or     eax,0x4
ffffffff8000275c:	0f b7 c0             	movzx  eax,ax
ffffffff8000275f:	41 89 c0             	mov    r8d,eax
ffffffff80002762:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80002767:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000276c:	be 02 00 00 00       	mov    esi,0x2
ffffffff80002771:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80002776:	e8 b2 fa ff ff       	call   ffffffff8000222d <WritePciRegister16(int, int, int, unsigned char, unsigned short)>
ffffffff8000277b:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80002780:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80002785:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000278a:	bf 00 00 00 00       	mov    edi,0x0
ffffffff8000278f:	e8 92 f9 ff ff       	call   ffffffff80002126 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff80002794:	0f b7 c0             	movzx  eax,ax
ffffffff80002797:	89 c6                	mov    esi,eax
ffffffff80002799:	48 c7 c7 7c 7a 00 80 	mov    rdi,0xffffffff80007a7c
ffffffff800027a0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800027a5:	e8 c7 10 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800027aa:	b9 10 00 00 00       	mov    ecx,0x10
ffffffff800027af:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800027b4:	be 02 00 00 00       	mov    esi,0x2
ffffffff800027b9:	bf 00 00 00 00       	mov    edi,0x0
ffffffff800027be:	e8 0d fa ff ff       	call   ffffffff800021d0 <ReadPciRegister64(int, int, int, unsigned char)>
ffffffff800027c3:	48 83 e0 f8          	and    rax,0xfffffffffffffff8
ffffffff800027c7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800027cb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff800027d2:	eb 3e                	jmp    ffffffff80002812 <IntelGpu::Initialize()+0x10d>
ffffffff800027d4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800027d7:	c1 e0 0c             	shl    eax,0xc
ffffffff800027da:	48 63 d0             	movsxd rdx,eax
ffffffff800027dd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800027e1:	48 01 c2             	add    rdx,rax
ffffffff800027e4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800027e7:	c1 e0 0c             	shl    eax,0xc
ffffffff800027ea:	48 98                	cdqe   
ffffffff800027ec:	48 b9 00 00 00 00 00 	movabs rcx,0xffffc00000000000
ffffffff800027f3:	c0 ff ff 
ffffffff800027f6:	48 8d 34 08          	lea    rsi,[rax+rcx*1]
ffffffff800027fa:	48 8b 05 8f 75 00 00 	mov    rax,QWORD PTR [rip+0x758f]        # ffffffff80009d90 <VirtualMemory::kernelDir>
ffffffff80002801:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80002806:	48 89 c7             	mov    rdi,rax
ffffffff80002809:	e8 e8 e9 ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff8000280e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80002812:	81 7d fc ff 03 00 00 	cmp    DWORD PTR [rbp-0x4],0x3ff
ffffffff80002819:	7e b9                	jle    ffffffff800027d4 <IntelGpu::Initialize()+0xcf>
ffffffff8000281b:	b9 10 00 00 00       	mov    ecx,0x10
ffffffff80002820:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80002825:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000282a:	bf 00 00 00 00       	mov    edi,0x0
ffffffff8000282f:	e8 9c f9 ff ff       	call   ffffffff800021d0 <ReadPciRegister64(int, int, int, unsigned char)>
ffffffff80002834:	48 89 c6             	mov    rsi,rax
ffffffff80002837:	48 c7 c7 98 7a 00 80 	mov    rdi,0xffffffff80007a98
ffffffff8000283e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002843:	e8 29 10 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002848:	48 b8 00 00 00 00 00 	movabs rax,0xffffc00000000000
ffffffff8000284f:	c0 ff ff 
ffffffff80002852:	48 89 05 e7 75 00 00 	mov    QWORD PTR [rip+0x75e7],rax        # ffffffff80009e40 <iobase>
ffffffff80002859:	48 b8 00 00 20 00 00 	movabs rax,0xffffc00000200000
ffffffff80002860:	c0 ff ff 
ffffffff80002863:	48 89 05 de 75 00 00 	mov    QWORD PTR [rip+0x75de],rax        # ffffffff80009e48 <gttAddr>
ffffffff8000286a:	bf 80 11 0e 00       	mov    edi,0xe1180
ffffffff8000286f:	e8 7b fa ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff80002874:	83 e0 02             	and    eax,0x2
ffffffff80002877:	85 c0                	test   eax,eax
ffffffff80002879:	0f 95 c0             	setne  al
ffffffff8000287c:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff8000287f:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffffffff80002883:	83 f0 01             	xor    eax,0x1
ffffffff80002886:	84 c0                	test   al,al
ffffffff80002888:	74 16                	je     ffffffff800028a0 <IntelGpu::Initialize()+0x19b>
ffffffff8000288a:	48 c7 c7 be 7a 00 80 	mov    rdi,0xffffffff80007abe
ffffffff80002891:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002896:	e8 d6 0f 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000289b:	e9 89 03 00 00       	jmp    ffffffff80002c29 <IntelGpu::Initialize()+0x524>
ffffffff800028a0:	48 8d 45 ac          	lea    rax,[rbp-0x54]
ffffffff800028a4:	48 89 c7             	mov    rdi,rax
ffffffff800028a7:	e8 28 04 00 00       	call   ffffffff80002cd4 <DisplayInfo::DisplayInfo()>
ffffffff800028ac:	c7 45 ac 01 00 00 00 	mov    DWORD PTR [rbp-0x54],0x1
ffffffff800028b3:	c6 45 b0 01          	mov    BYTE PTR [rbp-0x50],0x1
ffffffff800028b7:	48 c7 c7 db 7a 00 80 	mov    rdi,0xffffffff80007adb
ffffffff800028be:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800028c3:	e8 a9 0f 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800028c8:	bf 04 72 0c 00       	mov    edi,0xc7204
ffffffff800028cd:	e8 1d fa ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff800028d2:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff800028d5:	83 4d e8 04          	or     DWORD PTR [rbp-0x18],0x4
ffffffff800028d9:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff800028dc:	89 c6                	mov    esi,eax
ffffffff800028de:	bf 04 72 0c 00       	mov    edi,0xc7204
ffffffff800028e3:	e8 88 03 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff800028e8:	c6 45 b1 01          	mov    BYTE PTR [rbp-0x4f],0x1
ffffffff800028ec:	48 c7 c7 ef 7a 00 80 	mov    rdi,0xffffffff80007aef
ffffffff800028f3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800028f8:	e8 74 0f 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800028fd:	bf 50 82 04 00       	mov    edi,0x48250
ffffffff80002902:	e8 e8 f9 ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff80002907:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000290a:	81 4d e8 00 00 00 80 	or     DWORD PTR [rbp-0x18],0x80000000
ffffffff80002911:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff80002914:	c1 e8 1d             	shr    eax,0x1d
ffffffff80002917:	83 e0 01             	and    eax,0x1
ffffffff8000291a:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
ffffffff8000291d:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff80002920:	89 c6                	mov    esi,eax
ffffffff80002922:	bf 50 82 04 00       	mov    edi,0x48250
ffffffff80002927:	e8 44 03 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff8000292c:	48 c7 c7 02 7b 00 80 	mov    rdi,0xffffffff80007b02
ffffffff80002933:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002938:	e8 34 0f 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000293d:	bf 54 82 0c 00       	mov    edi,0xc8254
ffffffff80002942:	e8 a8 f9 ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff80002947:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff8000294a:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000294d:	c1 e8 10             	shr    eax,0x10
ffffffff80002950:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
ffffffff80002953:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffffffff80002956:	d1 e8                	shr    eax,1
ffffffff80002958:	89 c6                	mov    esi,eax
ffffffff8000295a:	bf 54 82 04 00       	mov    edi,0x48254
ffffffff8000295f:	e8 0c 03 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80002964:	48 c7 c7 0f 7b 00 80 	mov    rdi,0xffffffff80007b0f
ffffffff8000296b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002970:	e8 fc 0e 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002975:	b9 50 00 00 00       	mov    ecx,0x50
ffffffff8000297a:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000297f:	be 02 00 00 00       	mov    esi,0x2
ffffffff80002984:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80002989:	e8 98 f7 ff ff       	call   ffffffff80002126 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff8000298e:	66 89 45 e2          	mov    WORD PTR [rbp-0x1e],ax
ffffffff80002992:	b9 5c 00 00 00       	mov    ecx,0x5c
ffffffff80002997:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000299c:	be 02 00 00 00       	mov    esi,0x2
ffffffff800029a1:	bf 00 00 00 00       	mov    edi,0x0
ffffffff800029a6:	e8 d0 f7 ff ff       	call   ffffffff8000217b <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff800029ab:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffffffff800029ae:	0f b7 45 e2          	movzx  eax,WORD PTR [rbp-0x1e]
ffffffff800029b2:	66 c1 e8 03          	shr    ax,0x3
ffffffff800029b6:	0f b7 c0             	movzx  eax,ax
ffffffff800029b9:	83 e0 1f             	and    eax,0x1f
ffffffff800029bc:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff800029bf:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff800029c2:	8b 04 85 00 7a 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff8600]
ffffffff800029c9:	89 05 81 74 00 00    	mov    DWORD PTR [rip+0x7481],eax        # ffffffff80009e50 <stolenMemSize>
ffffffff800029cf:	0f b7 45 e2          	movzx  eax,WORD PTR [rbp-0x1e]
ffffffff800029d3:	66 c1 e8 08          	shr    ax,0x8
ffffffff800029d7:	0f b7 c0             	movzx  eax,ax
ffffffff800029da:	83 e0 03             	and    eax,0x3
ffffffff800029dd:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffffffff800029e0:	83 7d d4 02          	cmp    DWORD PTR [rbp-0x2c],0x2
ffffffff800029e4:	74 2c                	je     ffffffff80002a12 <IntelGpu::Initialize()+0x30d>
ffffffff800029e6:	83 7d d4 02          	cmp    DWORD PTR [rbp-0x2c],0x2
ffffffff800029ea:	77 32                	ja     ffffffff80002a1e <IntelGpu::Initialize()+0x319>
ffffffff800029ec:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffffffff800029f0:	74 08                	je     ffffffff800029fa <IntelGpu::Initialize()+0x2f5>
ffffffff800029f2:	83 7d d4 01          	cmp    DWORD PTR [rbp-0x2c],0x1
ffffffff800029f6:	74 0e                	je     ffffffff80002a06 <IntelGpu::Initialize()+0x301>
ffffffff800029f8:	eb 24                	jmp    ffffffff80002a1e <IntelGpu::Initialize()+0x319>
ffffffff800029fa:	c7 05 54 74 00 00 00 	mov    DWORD PTR [rip+0x7454],0x0        # ffffffff80009e58 <gttMemSize>
ffffffff80002a01:	00 00 00 
ffffffff80002a04:	eb 23                	jmp    ffffffff80002a29 <IntelGpu::Initialize()+0x324>
ffffffff80002a06:	c7 05 48 74 00 00 00 	mov    DWORD PTR [rip+0x7448],0x100000        # ffffffff80009e58 <gttMemSize>
ffffffff80002a0d:	00 10 00 
ffffffff80002a10:	eb 17                	jmp    ffffffff80002a29 <IntelGpu::Initialize()+0x324>
ffffffff80002a12:	c7 05 3c 74 00 00 00 	mov    DWORD PTR [rip+0x743c],0x200000        # ffffffff80009e58 <gttMemSize>
ffffffff80002a19:	00 20 00 
ffffffff80002a1c:	eb 0b                	jmp    ffffffff80002a29 <IntelGpu::Initialize()+0x324>
ffffffff80002a1e:	c7 05 30 74 00 00 ff 	mov    DWORD PTR [rip+0x7430],0xffffffff        # ffffffff80009e58 <gttMemSize>
ffffffff80002a25:	ff ff ff 
ffffffff80002a28:	90                   	nop
ffffffff80002a29:	48 8d 45 90          	lea    rax,[rbp-0x70]
ffffffff80002a2d:	41 b8 02 00 00 00    	mov    r8d,0x2
ffffffff80002a33:	b9 00 00 00 00       	mov    ecx,0x0
ffffffff80002a38:	ba 02 00 00 00       	mov    edx,0x2
ffffffff80002a3d:	be 00 00 00 00       	mov    esi,0x0
ffffffff80002a42:	48 89 c7             	mov    rdi,rax
ffffffff80002a45:	e8 73 f9 ff ff       	call   ffffffff800023bd <PciGetBar(PciBar*, int, int, int, int)>
ffffffff80002a4a:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80002a4e:	48 89 05 13 74 00 00 	mov    QWORD PTR [rip+0x7413],rax        # ffffffff80009e68 <arpertureBar>
ffffffff80002a55:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80002a59:	48 c1 e8 14          	shr    rax,0x14
ffffffff80002a5d:	48 89 c2             	mov    rdx,rax
ffffffff80002a60:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80002a64:	48 89 c6             	mov    rsi,rax
ffffffff80002a67:	48 c7 c7 29 7b 00 80 	mov    rdi,0xffffffff80007b29
ffffffff80002a6e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002a73:	e8 f9 0d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002a78:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80002a7b:	25 00 00 f0 ff       	and    eax,0xfff00000
ffffffff80002a80:	89 05 ce 73 00 00    	mov    DWORD PTR [rip+0x73ce],eax        # ffffffff80009e54 <stolenMemBase>
ffffffff80002a86:	8b 05 cc 73 00 00    	mov    eax,DWORD PTR [rip+0x73cc]        # ffffffff80009e58 <gttMemSize>
ffffffff80002a8c:	c1 e8 02             	shr    eax,0x2
ffffffff80002a8f:	89 05 c7 73 00 00    	mov    DWORD PTR [rip+0x73c7],eax        # ffffffff80009e5c <gttEntryCount>
ffffffff80002a95:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80002a99:	48 c1 e8 0c          	shr    rax,0xc
ffffffff80002a9d:	89 05 bd 73 00 00    	mov    DWORD PTR [rip+0x73bd],eax        # ffffffff80009e60 <gttMappableEntries>
ffffffff80002aa3:	48 c7 c7 3e 7b 00 80 	mov    rdi,0xffffffff80007b3e
ffffffff80002aaa:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002aaf:	e8 bd 0d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002ab4:	8b 05 9a 73 00 00    	mov    eax,DWORD PTR [rip+0x739a]        # ffffffff80009e54 <stolenMemBase>
ffffffff80002aba:	89 c6                	mov    esi,eax
ffffffff80002abc:	48 c7 c7 4b 7b 00 80 	mov    rdi,0xffffffff80007b4b
ffffffff80002ac3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002ac8:	e8 a4 0d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002acd:	8b 05 7d 73 00 00    	mov    eax,DWORD PTR [rip+0x737d]        # ffffffff80009e50 <stolenMemSize>
ffffffff80002ad3:	89 c6                	mov    esi,eax
ffffffff80002ad5:	48 c7 c7 68 7b 00 80 	mov    rdi,0xffffffff80007b68
ffffffff80002adc:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002ae1:	e8 8b 0d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002ae6:	8b 05 6c 73 00 00    	mov    eax,DWORD PTR [rip+0x736c]        # ffffffff80009e58 <gttMemSize>
ffffffff80002aec:	89 c6                	mov    esi,eax
ffffffff80002aee:	48 c7 c7 85 7b 00 80 	mov    rdi,0xffffffff80007b85
ffffffff80002af5:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002afa:	e8 72 0d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002aff:	8b 05 57 73 00 00    	mov    eax,DWORD PTR [rip+0x7357]        # ffffffff80009e5c <gttEntryCount>
ffffffff80002b05:	89 c6                	mov    esi,eax
ffffffff80002b07:	48 c7 c7 a2 7b 00 80 	mov    rdi,0xffffffff80007ba2
ffffffff80002b0e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002b13:	e8 59 0d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002b18:	8b 05 42 73 00 00    	mov    eax,DWORD PTR [rip+0x7342]        # ffffffff80009e60 <gttMappableEntries>
ffffffff80002b1e:	89 c6                	mov    esi,eax
ffffffff80002b20:	48 c7 c7 bf 7b 00 80 	mov    rdi,0xffffffff80007bbf
ffffffff80002b27:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002b2c:	e8 40 0d 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002b31:	e8 ab f9 ff ff       	call   ffffffff800024e1 <GfxInitMemManager()>
ffffffff80002b36:	48 8d 45 80          	lea    rax,[rbp-0x80]
ffffffff80002b3a:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80002b3f:	be 00 10 00 00       	mov    esi,0x1000
ffffffff80002b44:	48 89 c7             	mov    rdi,rax
ffffffff80002b47:	e8 90 fa ff ff       	call   ffffffff800025dc <GfxAlloc(GfxObject*, unsigned int, unsigned int)>
ffffffff80002b4c:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80002b50:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80002b54:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80002b58:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80002b5d:	be 00 00 00 00       	mov    esi,0x0
ffffffff80002b62:	48 89 c7             	mov    rdi,rax
ffffffff80002b65:	e8 33 f5 ff ff       	call   ffffffff8000209d <memset(void*, int, unsigned long)>
ffffffff80002b6a:	e8 ef fa ff ff       	call   ffffffff8000265e <EnterForceWake()>
ffffffff80002b6f:	be 00 00 00 00       	mov    esi,0x0
ffffffff80002b74:	bf 30 20 00 00       	mov    edi,0x2030
ffffffff80002b79:	e8 f2 00 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80002b7e:	be 00 00 00 00       	mov    esi,0x0
ffffffff80002b83:	bf 34 20 00 00       	mov    edi,0x2034
ffffffff80002b88:	e8 e3 00 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80002b8d:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80002b91:	89 c6                	mov    esi,eax
ffffffff80002b93:	bf 38 20 00 00       	mov    edi,0x2038
ffffffff80002b98:	e8 d3 00 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80002b9d:	be 01 00 00 00       	mov    esi,0x1
ffffffff80002ba2:	bf 3c 20 00 00       	mov    edi,0x203c
ffffffff80002ba7:	e8 c4 00 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80002bac:	e8 30 fb ff ff       	call   ffffffff800026e1 <ExitForceWake()>
ffffffff80002bb1:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80002bb5:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80002bb9:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002bbd:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffffffff80002bc1:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80002bc5:	c7 00 ef be 40 00    	mov    DWORD PTR [rax],0x40beef
ffffffff80002bcb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002bcf:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffffffff80002bd3:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80002bd7:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffffffff80002bdd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002be1:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80002be5:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffffffff80002be9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80002bed:	48 29 d0             	sub    rax,rdx
ffffffff80002bf0:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
ffffffff80002bf3:	e8 66 fa ff ff       	call   ffffffff8000265e <EnterForceWake()>
ffffffff80002bf8:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80002bfb:	89 c6                	mov    esi,eax
ffffffff80002bfd:	bf 30 20 00 00       	mov    edi,0x2030
ffffffff80002c02:	e8 69 00 00 00       	call   ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80002c07:	e8 d5 fa ff ff       	call   ffffffff800026e1 <ExitForceWake()>
ffffffff80002c0c:	bf 94 20 00 00       	mov    edi,0x2094
ffffffff80002c11:	e8 d9 f6 ff ff       	call   ffffffff800022ef <ReadIgpu32(unsigned int)>
ffffffff80002c16:	89 c6                	mov    esi,eax
ffffffff80002c18:	48 c7 c7 dc 7b 00 80 	mov    rdi,0xffffffff80007bdc
ffffffff80002c1f:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002c24:	e8 48 0c 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002c29:	c9                   	leave  
ffffffff80002c2a:	c3                   	ret    

ffffffff80002c2b <Utils::outw(unsigned short, unsigned short)>:
ffffffff80002c2b:	f3 0f 1e fa          	endbr64 
ffffffff80002c2f:	55                   	push   rbp
ffffffff80002c30:	48 89 e5             	mov    rbp,rsp
ffffffff80002c33:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002c37:	89 fa                	mov    edx,edi
ffffffff80002c39:	89 f0                	mov    eax,esi
ffffffff80002c3b:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
ffffffff80002c3f:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
ffffffff80002c43:	0f b7 45 f8          	movzx  eax,WORD PTR [rbp-0x8]
ffffffff80002c47:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80002c4b:	66 ef                	out    dx,ax
ffffffff80002c4d:	90                   	nop
ffffffff80002c4e:	c9                   	leave  
ffffffff80002c4f:	c3                   	ret    

ffffffff80002c50 <Utils::outd(unsigned short, unsigned int)>:
ffffffff80002c50:	f3 0f 1e fa          	endbr64 
ffffffff80002c54:	55                   	push   rbp
ffffffff80002c55:	48 89 e5             	mov    rbp,rsp
ffffffff80002c58:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002c5c:	89 f8                	mov    eax,edi
ffffffff80002c5e:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80002c61:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff80002c65:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002c68:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80002c6c:	ef                   	out    dx,eax
ffffffff80002c6d:	90                   	nop
ffffffff80002c6e:	c9                   	leave  
ffffffff80002c6f:	c3                   	ret    

ffffffff80002c70 <WriteIgpu32(unsigned int, unsigned int)>:
ffffffff80002c70:	f3 0f 1e fa          	endbr64 
ffffffff80002c74:	55                   	push   rbp
ffffffff80002c75:	48 89 e5             	mov    rbp,rsp
ffffffff80002c78:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002c7c:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80002c7f:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80002c82:	48 8b 15 b7 71 00 00 	mov    rdx,QWORD PTR [rip+0x71b7]        # ffffffff80009e40 <iobase>
ffffffff80002c89:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002c8c:	c1 e8 02             	shr    eax,0x2
ffffffff80002c8f:	89 c0                	mov    eax,eax
ffffffff80002c91:	48 c1 e0 02          	shl    rax,0x2
ffffffff80002c95:	48 01 c2             	add    rdx,rax
ffffffff80002c98:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002c9b:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80002c9d:	90                   	nop
ffffffff80002c9e:	c9                   	leave  
ffffffff80002c9f:	c3                   	ret    

ffffffff80002ca0 <WriteIgpu64(unsigned int, unsigned long)>:
ffffffff80002ca0:	f3 0f 1e fa          	endbr64 
ffffffff80002ca4:	55                   	push   rbp
ffffffff80002ca5:	48 89 e5             	mov    rbp,rsp
ffffffff80002ca8:	48 83 ec 10          	sub    rsp,0x10
ffffffff80002cac:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80002caf:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80002cb3:	48 8b 15 86 71 00 00 	mov    rdx,QWORD PTR [rip+0x7186]        # ffffffff80009e40 <iobase>
ffffffff80002cba:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002cbd:	c1 e8 02             	shr    eax,0x2
ffffffff80002cc0:	89 c0                	mov    eax,eax
ffffffff80002cc2:	48 c1 e0 02          	shl    rax,0x2
ffffffff80002cc6:	48 01 c2             	add    rdx,rax
ffffffff80002cc9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002ccd:	48 89 02             	mov    QWORD PTR [rdx],rax
ffffffff80002cd0:	90                   	nop
ffffffff80002cd1:	c9                   	leave  
ffffffff80002cd2:	c3                   	ret    
ffffffff80002cd3:	90                   	nop

ffffffff80002cd4 <DisplayInfo::DisplayInfo()>:
ffffffff80002cd4:	f3 0f 1e fa          	endbr64 
ffffffff80002cd8:	55                   	push   rbp
ffffffff80002cd9:	48 89 e5             	mov    rbp,rsp
ffffffff80002cdc:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002ce0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002ce4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002ce8:	c6 40 04 00          	mov    BYTE PTR [rax+0x4],0x0
ffffffff80002cec:	90                   	nop
ffffffff80002ced:	c9                   	leave  
ffffffff80002cee:	c3                   	ret    

ffffffff80002cef <Utils::ReadCr2()>:
ffffffff80002cef:	55                   	push   rbp
ffffffff80002cf0:	48 89 e5             	mov    rbp,rsp
ffffffff80002cf3:	48 83 ec 10          	sub    rsp,0x10
ffffffff80002cf7:	0f 20 d0             	mov    rax,cr2
ffffffff80002cfa:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80002cfd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002d00:	c9                   	leave  
ffffffff80002d01:	c3                   	ret    

ffffffff80002d02 <SetIDTEntry(int, unsigned long, unsigned char, unsigned short, unsigned char, unsigned char)>:
ffffffff80002d02:	f3 0f 1e fa          	endbr64 
ffffffff80002d06:	55                   	push   rbp
ffffffff80002d07:	48 89 e5             	mov    rbp,rsp
ffffffff80002d0a:	48 83 ec 20          	sub    rsp,0x20
ffffffff80002d0e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80002d11:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80002d15:	89 c8                	mov    eax,ecx
ffffffff80002d17:	44 89 c6             	mov    esi,r8d
ffffffff80002d1a:	44 89 c9             	mov    ecx,r9d
ffffffff80002d1d:	88 55 f8             	mov    BYTE PTR [rbp-0x8],dl
ffffffff80002d20:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff80002d24:	89 f0                	mov    eax,esi
ffffffff80002d26:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
ffffffff80002d29:	89 c8                	mov    eax,ecx
ffffffff80002d2b:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff80002d2e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002d32:	89 c2                	mov    edx,eax
ffffffff80002d34:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002d37:	48 98                	cdqe   
ffffffff80002d39:	48 c1 e0 04          	shl    rax,0x4
ffffffff80002d3d:	48 05 e0 a6 00 80    	add    rax,0xffffffff8000a6e0
ffffffff80002d43:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80002d46:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002d4a:	48 c1 e8 10          	shr    rax,0x10
ffffffff80002d4e:	89 c2                	mov    edx,eax
ffffffff80002d50:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002d53:	48 98                	cdqe   
ffffffff80002d55:	48 c1 e0 04          	shl    rax,0x4
ffffffff80002d59:	48 05 e6 a6 00 80    	add    rax,0xffffffff8000a6e6
ffffffff80002d5f:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80002d62:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002d66:	48 c1 e8 20          	shr    rax,0x20
ffffffff80002d6a:	89 c2                	mov    edx,eax
ffffffff80002d6c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002d6f:	48 98                	cdqe   
ffffffff80002d71:	48 c1 e0 04          	shl    rax,0x4
ffffffff80002d75:	48 05 e8 a6 00 80    	add    rax,0xffffffff8000a6e8
ffffffff80002d7b:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80002d7d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002d80:	48 98                	cdqe   
ffffffff80002d82:	48 c1 e0 04          	shl    rax,0x4
ffffffff80002d86:	48 8d 90 e4 a6 00 80 	lea    rdx,[rax-0x7fff591c]
ffffffff80002d8d:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80002d91:	88 02                	mov    BYTE PTR [rdx],al
ffffffff80002d93:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
ffffffff80002d97:	c1 e0 05             	shl    eax,0x5
ffffffff80002d9a:	0a 45 e8             	or     al,BYTE PTR [rbp-0x18]
ffffffff80002d9d:	83 c8 80             	or     eax,0xffffff80
ffffffff80002da0:	89 c2                	mov    edx,eax
ffffffff80002da2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002da5:	48 98                	cdqe   
ffffffff80002da7:	48 c1 e0 04          	shl    rax,0x4
ffffffff80002dab:	48 05 e5 a6 00 80    	add    rax,0xffffffff8000a6e5
ffffffff80002db1:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80002db3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002db6:	48 98                	cdqe   
ffffffff80002db8:	48 c1 e0 04          	shl    rax,0x4
ffffffff80002dbc:	48 8d 90 e2 a6 00 80 	lea    rdx,[rax-0x7fff591e]
ffffffff80002dc3:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff80002dc7:	66 89 02             	mov    WORD PTR [rdx],ax
ffffffff80002dca:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002dcd:	48 98                	cdqe   
ffffffff80002dcf:	48 c1 e0 04          	shl    rax,0x4
ffffffff80002dd3:	48 05 ec a6 00 80    	add    rax,0xffffffff8000a6ec
ffffffff80002dd9:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffffffff80002ddf:	90                   	nop
ffffffff80002de0:	c9                   	leave  
ffffffff80002de1:	c3                   	ret    

ffffffff80002de2 <interrupt_handler>:
ffffffff80002de2:	f3 0f 1e fa          	endbr64 
ffffffff80002de6:	55                   	push   rbp
ffffffff80002de7:	48 89 e5             	mov    rbp,rsp
ffffffff80002dea:	48 83 ec 20          	sub    rsp,0x20
ffffffff80002dee:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80002df2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002df6:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80002dfa:	48 83 f8 1f          	cmp    rax,0x1f
ffffffff80002dfe:	0f 87 b0 01 00 00    	ja     ffffffff80002fb4 <interrupt_handler+0x1d2>
ffffffff80002e04:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e08:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80002e0c:	48 8b 04 c5 80 95 00 	mov    rax,QWORD PTR [rax*8-0x7fff6a80]
ffffffff80002e13:	80 
ffffffff80002e14:	48 89 c6             	mov    rsi,rax
ffffffff80002e17:	48 c7 c7 e8 7d 00 80 	mov    rdi,0xffffffff80007de8
ffffffff80002e1e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002e23:	e8 49 0a 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002e28:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e2c:	48 8b 70 58          	mov    rsi,QWORD PTR [rax+0x58]
ffffffff80002e30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e34:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
ffffffff80002e38:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e3c:	48 8b 50 68          	mov    rdx,QWORD PTR [rax+0x68]
ffffffff80002e40:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e44:	48 8b 40 70          	mov    rax,QWORD PTR [rax+0x70]
ffffffff80002e48:	49 89 f0             	mov    r8,rsi
ffffffff80002e4b:	48 89 c6             	mov    rsi,rax
ffffffff80002e4e:	48 c7 c7 10 7e 00 80 	mov    rdi,0xffffffff80007e10
ffffffff80002e55:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002e5a:	e8 12 0a 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002e5f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e63:	48 8b b0 a0 00 00 00 	mov    rsi,QWORD PTR [rax+0xa0]
ffffffff80002e6a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e6e:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffffffff80002e72:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e76:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
ffffffff80002e7a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e7e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffffffff80002e82:	49 89 f0             	mov    r8,rsi
ffffffff80002e85:	48 89 c6             	mov    rsi,rax
ffffffff80002e88:	48 c7 c7 38 7e 00 80 	mov    rdi,0xffffffff80007e38
ffffffff80002e8f:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002e94:	e8 d8 09 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002e99:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e9d:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffffffff80002ea1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002ea5:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffffffff80002ea9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002ead:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffffffff80002eb1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002eb5:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffffffff80002eb9:	49 89 f0             	mov    r8,rsi
ffffffff80002ebc:	48 89 c6             	mov    rsi,rax
ffffffff80002ebf:	48 c7 c7 60 7e 00 80 	mov    rdi,0xffffffff80007e60
ffffffff80002ec6:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002ecb:	e8 a1 09 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002ed0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002ed4:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff80002ed7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002edb:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff80002edf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002ee3:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80002ee7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002eeb:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80002eef:	49 89 f0             	mov    r8,rsi
ffffffff80002ef2:	48 89 c6             	mov    rsi,rax
ffffffff80002ef5:	48 c7 c7 88 7e 00 80 	mov    rdi,0xffffffff80007e88
ffffffff80002efc:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002f01:	e8 6b 09 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002f06:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002f0a:	48 8b 90 80 00 00 00 	mov    rdx,QWORD PTR [rax+0x80]
ffffffff80002f11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002f15:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffffffff80002f1c:	48 89 c6             	mov    rsi,rax
ffffffff80002f1f:	48 c7 c7 b0 7e 00 80 	mov    rdi,0xffffffff80007eb0
ffffffff80002f26:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002f2b:	e8 41 09 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002f30:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002f34:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80002f38:	48 83 f8 0e          	cmp    rax,0xe
ffffffff80002f3c:	75 18                	jne    ffffffff80002f56 <interrupt_handler+0x174>
ffffffff80002f3e:	e8 ac fd ff ff       	call   ffffffff80002cef <Utils::ReadCr2()>
ffffffff80002f43:	89 c6                	mov    esi,eax
ffffffff80002f45:	48 c7 c7 da 7e 00 80 	mov    rdi,0xffffffff80007eda
ffffffff80002f4c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002f51:	e8 1b 09 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002f56:	48 c7 c7 e4 7e 00 80 	mov    rdi,0xffffffff80007ee4
ffffffff80002f5d:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002f62:	e8 0a 09 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002f67:	48 89 e8             	mov    rax,rbp
ffffffff80002f6a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80002f6e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffffffff80002f75:	eb 2b                	jmp    ffffffff80002fa2 <interrupt_handler+0x1c0>
ffffffff80002f77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002f7b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80002f7f:	48 89 c6             	mov    rsi,rax
ffffffff80002f82:	48 c7 c7 f2 7e 00 80 	mov    rdi,0xffffffff80007ef2
ffffffff80002f89:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002f8e:	e8 de 08 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002f93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002f97:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002f9a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80002f9e:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
ffffffff80002fa2:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80002fa7:	74 06                	je     ffffffff80002faf <interrupt_handler+0x1cd>
ffffffff80002fa9:	83 7d f4 09          	cmp    DWORD PTR [rbp-0xc],0x9
ffffffff80002fad:	76 c8                	jbe    ffffffff80002f77 <interrupt_handler+0x195>
ffffffff80002faf:	e8 b8 e0 ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff80002fb4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002fb8:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80002fbc:	48 8b 04 c5 e0 9e 00 	mov    rax,QWORD PTR [rax*8-0x7fff6120]
ffffffff80002fc3:	80 
ffffffff80002fc4:	48 85 c0             	test   rax,rax
ffffffff80002fc7:	75 21                	jne    ffffffff80002fea <interrupt_handler+0x208>
ffffffff80002fc9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002fcd:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80002fd1:	48 89 c6             	mov    rsi,rax
ffffffff80002fd4:	48 c7 c7 00 7f 00 80 	mov    rdi,0xffffffff80007f00
ffffffff80002fdb:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002fe0:	e8 8c 08 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80002fe5:	e8 82 e0 ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff80002fea:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002fee:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80002ff2:	48 8b 14 c5 e0 9e 00 	mov    rdx,QWORD PTR [rax*8-0x7fff6120]
ffffffff80002ff9:	80 
ffffffff80002ffa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002ffe:	48 89 c7             	mov    rdi,rax
ffffffff80003001:	ff d2                	call   rdx
ffffffff80003003:	c9                   	leave  
ffffffff80003004:	c3                   	ret    

ffffffff80003005 <IDT::Initialize()>:
ffffffff80003005:	f3 0f 1e fa          	endbr64 
ffffffff80003009:	55                   	push   rbp
ffffffff8000300a:	48 89 e5             	mov    rbp,rsp
ffffffff8000300d:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003011:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80003018:	eb 34                	jmp    ffffffff8000304e <IDT::Initialize()+0x49>
ffffffff8000301a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000301d:	48 98                	cdqe   
ffffffff8000301f:	48 8b 04 c5 b1 5f 00 	mov    rax,QWORD PTR [rax*8-0x7fffa04f]
ffffffff80003026:	80 
ffffffff80003027:	48 89 c6             	mov    rsi,rax
ffffffff8000302a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000302d:	41 b9 00 00 00 00    	mov    r9d,0x0
ffffffff80003033:	41 b8 0e 00 00 00    	mov    r8d,0xe
ffffffff80003039:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff8000303e:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003043:	89 c7                	mov    edi,eax
ffffffff80003045:	e8 b8 fc ff ff       	call   ffffffff80002d02 <SetIDTEntry(int, unsigned long, unsigned char, unsigned short, unsigned char, unsigned char)>
ffffffff8000304a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff8000304e:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffffffff80003055:	7e c3                	jle    ffffffff8000301a <IDT::Initialize()+0x15>
ffffffff80003057:	48 c7 c0 e0 a6 00 80 	mov    rax,0xffffffff8000a6e0
ffffffff8000305e:	48 89 05 7d 86 00 00 	mov    QWORD PTR [rip+0x867d],rax        # ffffffff8000b6e2 <idtr+0x2>
ffffffff80003065:	66 c7 05 72 86 00 00 	mov    WORD PTR [rip+0x8672],0xfff        # ffffffff8000b6e0 <idtr>
ffffffff8000306c:	ff 0f 
ffffffff8000306e:	48 c7 c0 e0 b6 00 80 	mov    rax,0xffffffff8000b6e0
ffffffff80003075:	48 89 c7             	mov    rdi,rax
ffffffff80003078:	e8 34 37 00 00       	call   ffffffff800067b1 <LoadIdt>
ffffffff8000307d:	fb                   	sti    
ffffffff8000307e:	90                   	nop
ffffffff8000307f:	c9                   	leave  
ffffffff80003080:	c3                   	ret    

ffffffff80003081 <IDT::AddHandler(int, SavedRegs* (*)(SavedRegs*))>:
ffffffff80003081:	f3 0f 1e fa          	endbr64 
ffffffff80003085:	55                   	push   rbp
ffffffff80003086:	48 89 e5             	mov    rbp,rsp
ffffffff80003089:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000308d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80003090:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80003094:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003097:	48 98                	cdqe   
ffffffff80003099:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff8000309d:	48 89 14 c5 e0 9e 00 	mov    QWORD PTR [rax*8-0x7fff6120],rdx
ffffffff800030a4:	80 
ffffffff800030a5:	90                   	nop
ffffffff800030a6:	c9                   	leave  
ffffffff800030a7:	c3                   	ret    

ffffffff800030a8 <PIC::RemapAndDisable()>:
ffffffff800030a8:	f3 0f 1e fa          	endbr64 
ffffffff800030ac:	55                   	push   rbp
ffffffff800030ad:	48 89 e5             	mov    rbp,rsp
ffffffff800030b0:	be 11 00 00 00       	mov    esi,0x11
ffffffff800030b5:	bf 20 00 00 00       	mov    edi,0x20
ffffffff800030ba:	e8 37 ef ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800030bf:	be 11 00 00 00       	mov    esi,0x11
ffffffff800030c4:	bf a0 00 00 00       	mov    edi,0xa0
ffffffff800030c9:	e8 28 ef ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800030ce:	be 20 00 00 00       	mov    esi,0x20
ffffffff800030d3:	bf 21 00 00 00       	mov    edi,0x21
ffffffff800030d8:	e8 19 ef ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800030dd:	be 28 00 00 00       	mov    esi,0x28
ffffffff800030e2:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff800030e7:	e8 0a ef ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800030ec:	be 04 00 00 00       	mov    esi,0x4
ffffffff800030f1:	bf 21 00 00 00       	mov    edi,0x21
ffffffff800030f6:	e8 fb ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800030fb:	be 02 00 00 00       	mov    esi,0x2
ffffffff80003100:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80003105:	e8 ec ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000310a:	be 01 00 00 00       	mov    esi,0x1
ffffffff8000310f:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80003114:	e8 dd ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003119:	be 01 00 00 00       	mov    esi,0x1
ffffffff8000311e:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80003123:	e8 ce ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003128:	be ff 00 00 00       	mov    esi,0xff
ffffffff8000312d:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80003132:	e8 bf ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003137:	be ff 00 00 00       	mov    esi,0xff
ffffffff8000313c:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80003141:	e8 b0 ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003146:	90                   	nop
ffffffff80003147:	5d                   	pop    rbp
ffffffff80003148:	c3                   	ret    

ffffffff80003149 <InitCom0()>:
ffffffff80003149:	f3 0f 1e fa          	endbr64 
ffffffff8000314d:	55                   	push   rbp
ffffffff8000314e:	48 89 e5             	mov    rbp,rsp
ffffffff80003151:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003156:	bf f9 03 00 00       	mov    edi,0x3f9
ffffffff8000315b:	e8 96 ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003160:	be 80 00 00 00       	mov    esi,0x80
ffffffff80003165:	bf fb 03 00 00       	mov    edi,0x3fb
ffffffff8000316a:	e8 87 ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000316f:	be 03 00 00 00       	mov    esi,0x3
ffffffff80003174:	bf f8 03 00 00       	mov    edi,0x3f8
ffffffff80003179:	e8 78 ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000317e:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003183:	bf f9 03 00 00       	mov    edi,0x3f9
ffffffff80003188:	e8 69 ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000318d:	be 03 00 00 00       	mov    esi,0x3
ffffffff80003192:	bf fb 03 00 00       	mov    edi,0x3fb
ffffffff80003197:	e8 5a ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000319c:	be c7 00 00 00       	mov    esi,0xc7
ffffffff800031a1:	bf fa 03 00 00       	mov    edi,0x3fa
ffffffff800031a6:	e8 4b ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800031ab:	be 0b 00 00 00       	mov    esi,0xb
ffffffff800031b0:	bf fc 03 00 00       	mov    edi,0x3fc
ffffffff800031b5:	e8 3c ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800031ba:	be 0f 00 00 00       	mov    esi,0xf
ffffffff800031bf:	bf fc 03 00 00       	mov    edi,0x3fc
ffffffff800031c4:	e8 2d ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800031c9:	90                   	nop
ffffffff800031ca:	5d                   	pop    rbp
ffffffff800031cb:	c3                   	ret    

ffffffff800031cc <putc_com0(char)>:
ffffffff800031cc:	f3 0f 1e fa          	endbr64 
ffffffff800031d0:	55                   	push   rbp
ffffffff800031d1:	48 89 e5             	mov    rbp,rsp
ffffffff800031d4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800031d8:	89 f8                	mov    eax,edi
ffffffff800031da:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
ffffffff800031dd:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffffffff800031e1:	0f b6 c0             	movzx  eax,al
ffffffff800031e4:	89 c6                	mov    esi,eax
ffffffff800031e6:	bf f8 03 00 00       	mov    edi,0x3f8
ffffffff800031eb:	e8 06 ee ff ff       	call   ffffffff80001ff6 <Utils::outb(unsigned short, unsigned char)>
ffffffff800031f0:	90                   	nop
ffffffff800031f1:	c9                   	leave  
ffffffff800031f2:	c3                   	ret    

ffffffff800031f3 <puts_com0(char const*)>:
ffffffff800031f3:	f3 0f 1e fa          	endbr64 
ffffffff800031f7:	55                   	push   rbp
ffffffff800031f8:	48 89 e5             	mov    rbp,rsp
ffffffff800031fb:	48 83 ec 10          	sub    rsp,0x10
ffffffff800031ff:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80003203:	eb 19                	jmp    ffffffff8000321e <puts_com0(char const*)+0x2b>
ffffffff80003205:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003209:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8000320d:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80003211:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003214:	0f be c0             	movsx  eax,al
ffffffff80003217:	89 c7                	mov    edi,eax
ffffffff80003219:	e8 ae ff ff ff       	call   ffffffff800031cc <putc_com0(char)>
ffffffff8000321e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003222:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003225:	84 c0                	test   al,al
ffffffff80003227:	75 dc                	jne    ffffffff80003205 <puts_com0(char const*)+0x12>
ffffffff80003229:	90                   	nop
ffffffff8000322a:	90                   	nop
ffffffff8000322b:	c9                   	leave  
ffffffff8000322c:	c3                   	ret    

ffffffff8000322d <itoa(long, int)>:
ffffffff8000322d:	f3 0f 1e fa          	endbr64 
ffffffff80003231:	55                   	push   rbp
ffffffff80003232:	48 89 e5             	mov    rbp,rsp
ffffffff80003235:	48 83 ec 20          	sub    rsp,0x20
ffffffff80003239:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000323d:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80003240:	c7 45 fc 3e 00 00 00 	mov    DWORD PTR [rbp-0x4],0x3e
ffffffff80003247:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff8000324c:	75 44                	jne    ffffffff80003292 <itoa(long, int)+0x65>
ffffffff8000324e:	48 c7 c0 20 7f 00 80 	mov    rax,0xffffffff80007f20
ffffffff80003255:	eb 56                	jmp    ffffffff800032ad <itoa(long, int)+0x80>
ffffffff80003257:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000325a:	48 63 c8             	movsxd rcx,eax
ffffffff8000325d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003261:	48 99                	cqo    
ffffffff80003263:	48 f7 f9             	idiv   rcx
ffffffff80003266:	48 89 d0             	mov    rax,rdx
ffffffff80003269:	0f b6 90 22 7f 00 80 	movzx  edx,BYTE PTR [rax-0x7fff80de]
ffffffff80003270:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003273:	48 98                	cdqe   
ffffffff80003275:	88 90 20 b7 00 80    	mov    BYTE PTR [rax-0x7fff48e0],dl
ffffffff8000327b:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffffffff8000327f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003282:	48 63 f0             	movsxd rsi,eax
ffffffff80003285:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003289:	48 99                	cqo    
ffffffff8000328b:	48 f7 fe             	idiv   rsi
ffffffff8000328e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80003292:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80003297:	74 06                	je     ffffffff8000329f <itoa(long, int)+0x72>
ffffffff80003299:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffffffff8000329d:	75 b8                	jne    ffffffff80003257 <itoa(long, int)+0x2a>
ffffffff8000329f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800032a2:	83 c0 01             	add    eax,0x1
ffffffff800032a5:	48 98                	cdqe   
ffffffff800032a7:	48 05 20 b7 00 80    	add    rax,0xffffffff8000b720
ffffffff800032ad:	c9                   	leave  
ffffffff800032ae:	c3                   	ret    

ffffffff800032af <utoa(unsigned long, int)>:
ffffffff800032af:	f3 0f 1e fa          	endbr64 
ffffffff800032b3:	55                   	push   rbp
ffffffff800032b4:	48 89 e5             	mov    rbp,rsp
ffffffff800032b7:	48 83 ec 20          	sub    rsp,0x20
ffffffff800032bb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800032bf:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800032c2:	c7 45 fc 3e 00 00 00 	mov    DWORD PTR [rbp-0x4],0x3e
ffffffff800032c9:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff800032ce:	75 4a                	jne    ffffffff8000331a <utoa(unsigned long, int)+0x6b>
ffffffff800032d0:	48 c7 c0 20 7f 00 80 	mov    rax,0xffffffff80007f20
ffffffff800032d7:	eb 5c                	jmp    ffffffff80003335 <utoa(unsigned long, int)+0x86>
ffffffff800032d9:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff800032dc:	48 63 c8             	movsxd rcx,eax
ffffffff800032df:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800032e3:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800032e8:	48 f7 f1             	div    rcx
ffffffff800032eb:	48 89 d0             	mov    rax,rdx
ffffffff800032ee:	0f b6 90 22 7f 00 80 	movzx  edx,BYTE PTR [rax-0x7fff80de]
ffffffff800032f5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800032f8:	48 98                	cdqe   
ffffffff800032fa:	88 90 60 b7 00 80    	mov    BYTE PTR [rax-0x7fff48a0],dl
ffffffff80003300:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffffffff80003304:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003307:	48 63 f0             	movsxd rsi,eax
ffffffff8000330a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000330e:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003313:	48 f7 f6             	div    rsi
ffffffff80003316:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000331a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff8000331f:	74 06                	je     ffffffff80003327 <utoa(unsigned long, int)+0x78>
ffffffff80003321:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffffffff80003325:	75 b2                	jne    ffffffff800032d9 <utoa(unsigned long, int)+0x2a>
ffffffff80003327:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000332a:	83 c0 01             	add    eax,0x1
ffffffff8000332d:	48 98                	cdqe   
ffffffff8000332f:	48 05 60 b7 00 80    	add    rax,0xffffffff8000b760
ffffffff80003335:	c9                   	leave  
ffffffff80003336:	c3                   	ret    

ffffffff80003337 <PutPixel(int, int, unsigned char, unsigned char, unsigned char)>:
ffffffff80003337:	f3 0f 1e fa          	endbr64 
ffffffff8000333b:	55                   	push   rbp
ffffffff8000333c:	48 89 e5             	mov    rbp,rsp
ffffffff8000333f:	48 83 ec 38          	sub    rsp,0x38
ffffffff80003343:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffffffff80003346:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffffffff80003349:	89 c8                	mov    eax,ecx
ffffffff8000334b:	44 89 c1             	mov    ecx,r8d
ffffffff8000334e:	88 55 d4             	mov    BYTE PTR [rbp-0x2c],dl
ffffffff80003351:	88 45 d0             	mov    BYTE PTR [rbp-0x30],al
ffffffff80003354:	89 c8                	mov    eax,ecx
ffffffff80003356:	88 45 cc             	mov    BYTE PTR [rbp-0x34],al
ffffffff80003359:	0f b6 55 d4          	movzx  edx,BYTE PTR [rbp-0x2c]
ffffffff8000335d:	48 8b 05 ac 83 00 00 	mov    rax,QWORD PTR [rip+0x83ac]        # ffffffff8000b710 <chosen_fb>
ffffffff80003364:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffffffff80003368:	0f b6 c0             	movzx  eax,al
ffffffff8000336b:	89 c1                	mov    ecx,eax
ffffffff8000336d:	d3 e2                	shl    edx,cl
ffffffff8000336f:	89 d0                	mov    eax,edx
ffffffff80003371:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80003374:	0f b6 55 d0          	movzx  edx,BYTE PTR [rbp-0x30]
ffffffff80003378:	48 8b 05 91 83 00 00 	mov    rax,QWORD PTR [rip+0x8391]        # ffffffff8000b710 <chosen_fb>
ffffffff8000337f:	0f b6 40 26          	movzx  eax,BYTE PTR [rax+0x26]
ffffffff80003383:	0f b6 c0             	movzx  eax,al
ffffffff80003386:	89 c1                	mov    ecx,eax
ffffffff80003388:	d3 e2                	shl    edx,cl
ffffffff8000338a:	89 d0                	mov    eax,edx
ffffffff8000338c:	09 45 fc             	or     DWORD PTR [rbp-0x4],eax
ffffffff8000338f:	0f b6 55 cc          	movzx  edx,BYTE PTR [rbp-0x34]
ffffffff80003393:	48 8b 05 76 83 00 00 	mov    rax,QWORD PTR [rip+0x8376]        # ffffffff8000b710 <chosen_fb>
ffffffff8000339a:	0f b6 40 28          	movzx  eax,BYTE PTR [rax+0x28]
ffffffff8000339e:	0f b6 c0             	movzx  eax,al
ffffffff800033a1:	89 c1                	mov    ecx,eax
ffffffff800033a3:	d3 e2                	shl    edx,cl
ffffffff800033a5:	89 d0                	mov    eax,edx
ffffffff800033a7:	09 45 fc             	or     DWORD PTR [rbp-0x4],eax
ffffffff800033aa:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff800033ad:	48 63 d0             	movsxd rdx,eax
ffffffff800033b0:	48 8b 05 59 83 00 00 	mov    rax,QWORD PTR [rip+0x8359]        # ffffffff8000b710 <chosen_fb>
ffffffff800033b7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800033bb:	48 c1 e8 02          	shr    rax,0x2
ffffffff800033bf:	48 0f af d0          	imul   rdx,rax
ffffffff800033c3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff800033c6:	48 98                	cdqe   
ffffffff800033c8:	48 01 d0             	add    rax,rdx
ffffffff800033cb:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800033cf:	48 8b 05 32 83 00 00 	mov    rax,QWORD PTR [rip+0x8332]        # ffffffff8000b708 <fb_address>
ffffffff800033d6:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800033da:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800033de:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffffffff800033e5:	00 
ffffffff800033e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800033ea:	48 01 c2             	add    rdx,rax
ffffffff800033ed:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800033f0:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff800033f2:	90                   	nop
ffffffff800033f3:	c9                   	leave  
ffffffff800033f4:	c3                   	ret    

ffffffff800033f5 <Screen::GetFramebuffer()>:
ffffffff800033f5:	f3 0f 1e fa          	endbr64 
ffffffff800033f9:	55                   	push   rbp
ffffffff800033fa:	48 89 e5             	mov    rbp,rsp
ffffffff800033fd:	48 8b 05 04 83 00 00 	mov    rax,QWORD PTR [rip+0x8304]        # ffffffff8000b708 <fb_address>
ffffffff80003404:	5d                   	pop    rbp
ffffffff80003405:	c3                   	ret    

ffffffff80003406 <putc(char)>:
ffffffff80003406:	f3 0f 1e fa          	endbr64 
ffffffff8000340a:	55                   	push   rbp
ffffffff8000340b:	48 89 e5             	mov    rbp,rsp
ffffffff8000340e:	48 83 ec 40          	sub    rsp,0x40
ffffffff80003412:	89 f8                	mov    eax,edi
ffffffff80003414:	88 45 cc             	mov    BYTE PTR [rbp-0x34],al
ffffffff80003417:	0f be 45 cc          	movsx  eax,BYTE PTR [rbp-0x34]
ffffffff8000341b:	89 c7                	mov    edi,eax
ffffffff8000341d:	e8 aa fd ff ff       	call   ffffffff800031cc <putc_com0(char)>
ffffffff80003422:	80 7d cc 0a          	cmp    BYTE PTR [rbp-0x34],0xa
ffffffff80003426:	75 1e                	jne    ffffffff80003446 <putc(char)+0x40>
ffffffff80003428:	8b 05 ee 82 00 00    	mov    eax,DWORD PTR [rip+0x82ee]        # ffffffff8000b71c <y>
ffffffff8000342e:	83 c0 01             	add    eax,0x1
ffffffff80003431:	89 05 e5 82 00 00    	mov    DWORD PTR [rip+0x82e5],eax        # ffffffff8000b71c <y>
ffffffff80003437:	c7 05 d7 82 00 00 00 	mov    DWORD PTR [rip+0x82d7],0x0        # ffffffff8000b718 <x>
ffffffff8000343e:	00 00 00 
ffffffff80003441:	e9 55 01 00 00       	jmp    ffffffff8000359b <putc(char)+0x195>
ffffffff80003446:	80 7d cc 09          	cmp    BYTE PTR [rbp-0x34],0x9
ffffffff8000344a:	75 32                	jne    ffffffff8000347e <putc(char)+0x78>
ffffffff8000344c:	8b 05 c6 82 00 00    	mov    eax,DWORD PTR [rip+0x82c6]        # ffffffff8000b718 <x>
ffffffff80003452:	83 c0 01             	add    eax,0x1
ffffffff80003455:	89 05 bd 82 00 00    	mov    DWORD PTR [rip+0x82bd],eax        # ffffffff8000b718 <x>
ffffffff8000345b:	eb 0f                	jmp    ffffffff8000346c <putc(char)+0x66>
ffffffff8000345d:	8b 05 b5 82 00 00    	mov    eax,DWORD PTR [rip+0x82b5]        # ffffffff8000b718 <x>
ffffffff80003463:	83 c0 01             	add    eax,0x1
ffffffff80003466:	89 05 ac 82 00 00    	mov    DWORD PTR [rip+0x82ac],eax        # ffffffff8000b718 <x>
ffffffff8000346c:	8b 05 a6 82 00 00    	mov    eax,DWORD PTR [rip+0x82a6]        # ffffffff8000b718 <x>
ffffffff80003472:	83 e0 03             	and    eax,0x3
ffffffff80003475:	85 c0                	test   eax,eax
ffffffff80003477:	75 e4                	jne    ffffffff8000345d <putc(char)+0x57>
ffffffff80003479:	e9 1d 01 00 00       	jmp    ffffffff8000359b <putc(char)+0x195>
ffffffff8000347e:	0f be 45 cc          	movsx  eax,BYTE PTR [rbp-0x34]
ffffffff80003482:	48 98                	cdqe   
ffffffff80003484:	48 c1 e0 03          	shl    rax,0x3
ffffffff80003488:	48 05 80 96 00 80    	add    rax,0xffffffff80009680
ffffffff8000348e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80003492:	8b 05 80 82 00 00    	mov    eax,DWORD PTR [rip+0x8280]        # ffffffff8000b718 <x>
ffffffff80003498:	c1 e0 03             	shl    eax,0x3
ffffffff8000349b:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff8000349e:	8b 05 78 82 00 00    	mov    eax,DWORD PTR [rip+0x8278]        # ffffffff8000b71c <y>
ffffffff800034a4:	c1 e0 03             	shl    eax,0x3
ffffffff800034a7:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff800034aa:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff800034ad:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800034b0:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff800034b3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800034b6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffffffff800034bd:	e9 8e 00 00 00       	jmp    ffffffff80003550 <putc(char)+0x14a>
ffffffff800034c2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffffffff800034c9:	eb 71                	jmp    ffffffff8000353c <putc(char)+0x136>
ffffffff800034cb:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800034ce:	48 63 d0             	movsxd rdx,eax
ffffffff800034d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800034d5:	48 01 d0             	add    rax,rdx
ffffffff800034d8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800034db:	0f b6 d0             	movzx  edx,al
ffffffff800034de:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffffffff800034e1:	89 c1                	mov    ecx,eax
ffffffff800034e3:	d3 fa                	sar    edx,cl
ffffffff800034e5:	89 d0                	mov    eax,edx
ffffffff800034e7:	83 e0 01             	and    eax,0x1
ffffffff800034ea:	85 c0                	test   eax,eax
ffffffff800034ec:	0f 95 c0             	setne  al
ffffffff800034ef:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff800034f2:	80 7d df 00          	cmp    BYTE PTR [rbp-0x21],0x0
ffffffff800034f6:	74 1f                	je     ffffffff80003517 <putc(char)+0x111>
ffffffff800034f8:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
ffffffff800034fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800034fe:	41 b8 ff 00 00 00    	mov    r8d,0xff
ffffffff80003504:	b9 ff 00 00 00       	mov    ecx,0xff
ffffffff80003509:	ba ff 00 00 00       	mov    edx,0xff
ffffffff8000350e:	89 c7                	mov    edi,eax
ffffffff80003510:	e8 22 fe ff ff       	call   ffffffff80003337 <PutPixel(int, int, unsigned char, unsigned char, unsigned char)>
ffffffff80003515:	eb 1d                	jmp    ffffffff80003534 <putc(char)+0x12e>
ffffffff80003517:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
ffffffff8000351a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000351d:	41 b8 00 00 00 00    	mov    r8d,0x0
ffffffff80003523:	b9 00 00 00 00       	mov    ecx,0x0
ffffffff80003528:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000352d:	89 c7                	mov    edi,eax
ffffffff8000352f:	e8 03 fe ff ff       	call   ffffffff80003337 <PutPixel(int, int, unsigned char, unsigned char, unsigned char)>
ffffffff80003534:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80003538:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
ffffffff8000353c:	83 7d f0 07          	cmp    DWORD PTR [rbp-0x10],0x7
ffffffff80003540:	7e 89                	jle    ffffffff800034cb <putc(char)+0xc5>
ffffffff80003542:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
ffffffff80003546:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003549:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000354c:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
ffffffff80003550:	83 7d f4 07          	cmp    DWORD PTR [rbp-0xc],0x7
ffffffff80003554:	0f 8e 68 ff ff ff    	jle    ffffffff800034c2 <putc(char)+0xbc>
ffffffff8000355a:	8b 05 b8 81 00 00    	mov    eax,DWORD PTR [rip+0x81b8]        # ffffffff8000b718 <x>
ffffffff80003560:	83 c0 01             	add    eax,0x1
ffffffff80003563:	89 05 af 81 00 00    	mov    DWORD PTR [rip+0x81af],eax        # ffffffff8000b718 <x>
ffffffff80003569:	8b 05 a9 81 00 00    	mov    eax,DWORD PTR [rip+0x81a9]        # ffffffff8000b718 <x>
ffffffff8000356f:	48 63 d0             	movsxd rdx,eax
ffffffff80003572:	48 8b 05 97 81 00 00 	mov    rax,QWORD PTR [rip+0x8197]        # ffffffff8000b710 <chosen_fb>
ffffffff80003579:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000357d:	48 39 c2             	cmp    rdx,rax
ffffffff80003580:	75 19                	jne    ffffffff8000359b <putc(char)+0x195>
ffffffff80003582:	c7 05 8c 81 00 00 00 	mov    DWORD PTR [rip+0x818c],0x0        # ffffffff8000b718 <x>
ffffffff80003589:	00 00 00 
ffffffff8000358c:	8b 05 8a 81 00 00    	mov    eax,DWORD PTR [rip+0x818a]        # ffffffff8000b71c <y>
ffffffff80003592:	83 c0 01             	add    eax,0x1
ffffffff80003595:	89 05 81 81 00 00    	mov    DWORD PTR [rip+0x8181],eax        # ffffffff8000b71c <y>
ffffffff8000359b:	90                   	nop
ffffffff8000359c:	c9                   	leave  
ffffffff8000359d:	c3                   	ret    

ffffffff8000359e <puts(char const*)>:
ffffffff8000359e:	f3 0f 1e fa          	endbr64 
ffffffff800035a2:	55                   	push   rbp
ffffffff800035a3:	48 89 e5             	mov    rbp,rsp
ffffffff800035a6:	48 83 ec 20          	sub    rsp,0x20
ffffffff800035aa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800035ae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff800035b5:	eb 1d                	jmp    ffffffff800035d4 <puts(char const*)+0x36>
ffffffff800035b7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800035bb:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800035bf:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff800035c3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800035c6:	0f be c0             	movsx  eax,al
ffffffff800035c9:	89 c7                	mov    edi,eax
ffffffff800035cb:	e8 36 fe ff ff       	call   ffffffff80003406 <putc(char)>
ffffffff800035d0:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff800035d4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800035d8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800035db:	84 c0                	test   al,al
ffffffff800035dd:	75 d8                	jne    ffffffff800035b7 <puts(char const*)+0x19>
ffffffff800035df:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800035e2:	c9                   	leave  
ffffffff800035e3:	c3                   	ret    

ffffffff800035e4 <vprintf(char const*, __va_list_tag*)>:
ffffffff800035e4:	f3 0f 1e fa          	endbr64 
ffffffff800035e8:	55                   	push   rbp
ffffffff800035e9:	48 89 e5             	mov    rbp,rsp
ffffffff800035ec:	48 83 ec 30          	sub    rsp,0x30
ffffffff800035f0:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800035f4:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800035f8:	e9 5e 02 00 00       	jmp    ffffffff8000385b <vprintf(char const*, __va_list_tag*)+0x277>
ffffffff800035fd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80003601:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003604:	3c 25                	cmp    al,0x25
ffffffff80003606:	0f 85 36 02 00 00    	jne    ffffffff80003842 <vprintf(char const*, __va_list_tag*)+0x25e>
ffffffff8000360c:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
ffffffff80003611:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80003615:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003618:	0f be c0             	movsx  eax,al
ffffffff8000361b:	83 e8 63             	sub    eax,0x63
ffffffff8000361e:	83 f8 15             	cmp    eax,0x15
ffffffff80003621:	0f 87 f2 01 00 00    	ja     ffffffff80003819 <vprintf(char const*, __va_list_tag*)+0x235>
ffffffff80003627:	89 c0                	mov    eax,eax
ffffffff80003629:	48 8b 04 c5 50 7f 00 	mov    rax,QWORD PTR [rax*8-0x7fff80b0]
ffffffff80003630:	80 
ffffffff80003631:	3e ff e0             	notrack jmp rax
ffffffff80003634:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003638:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000363a:	83 f8 2f             	cmp    eax,0x2f
ffffffff8000363d:	77 24                	ja     ffffffff80003663 <vprintf(char const*, __va_list_tag*)+0x7f>
ffffffff8000363f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003643:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80003647:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000364b:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000364d:	89 c0                	mov    eax,eax
ffffffff8000364f:	48 01 d0             	add    rax,rdx
ffffffff80003652:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003656:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff80003658:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff8000365b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000365f:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff80003661:	eb 14                	jmp    ffffffff80003677 <vprintf(char const*, __va_list_tag*)+0x93>
ffffffff80003663:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003667:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000366b:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff8000366f:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003673:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff80003677:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000367a:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000367e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003682:	be 10 00 00 00       	mov    esi,0x10
ffffffff80003687:	48 89 c7             	mov    rdi,rax
ffffffff8000368a:	e8 20 fc ff ff       	call   ffffffff800032af <utoa(unsigned long, int)>
ffffffff8000368f:	48 89 c7             	mov    rdi,rax
ffffffff80003692:	e8 07 ff ff ff       	call   ffffffff8000359e <puts(char const*)>
ffffffff80003697:	e9 9f 01 00 00       	jmp    ffffffff8000383b <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff8000369c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800036a0:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800036a2:	83 f8 2f             	cmp    eax,0x2f
ffffffff800036a5:	77 24                	ja     ffffffff800036cb <vprintf(char const*, __va_list_tag*)+0xe7>
ffffffff800036a7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800036ab:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff800036af:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800036b3:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800036b5:	89 c0                	mov    eax,eax
ffffffff800036b7:	48 01 d0             	add    rax,rdx
ffffffff800036ba:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800036be:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff800036c0:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff800036c3:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800036c7:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff800036c9:	eb 14                	jmp    ffffffff800036df <vprintf(char const*, __va_list_tag*)+0xfb>
ffffffff800036cb:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800036cf:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800036d3:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff800036d7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800036db:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff800036df:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800036e2:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800036e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800036ea:	48 89 c7             	mov    rdi,rax
ffffffff800036ed:	e8 ac fe ff ff       	call   ffffffff8000359e <puts(char const*)>
ffffffff800036f2:	e9 44 01 00 00       	jmp    ffffffff8000383b <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff800036f7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800036fb:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800036fd:	83 f8 2f             	cmp    eax,0x2f
ffffffff80003700:	77 24                	ja     ffffffff80003726 <vprintf(char const*, __va_list_tag*)+0x142>
ffffffff80003702:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003706:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff8000370a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000370e:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80003710:	89 c0                	mov    eax,eax
ffffffff80003712:	48 01 d0             	add    rax,rdx
ffffffff80003715:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003719:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff8000371b:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff8000371e:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003722:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff80003724:	eb 14                	jmp    ffffffff8000373a <vprintf(char const*, __va_list_tag*)+0x156>
ffffffff80003726:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000372a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000372e:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff80003732:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003736:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff8000373a:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000373c:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff8000373f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003742:	48 98                	cdqe   
ffffffff80003744:	be 0a 00 00 00       	mov    esi,0xa
ffffffff80003749:	48 89 c7             	mov    rdi,rax
ffffffff8000374c:	e8 dc fa ff ff       	call   ffffffff8000322d <itoa(long, int)>
ffffffff80003751:	48 89 c7             	mov    rdi,rax
ffffffff80003754:	e8 45 fe ff ff       	call   ffffffff8000359e <puts(char const*)>
ffffffff80003759:	e9 dd 00 00 00       	jmp    ffffffff8000383b <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff8000375e:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003762:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80003764:	83 f8 2f             	cmp    eax,0x2f
ffffffff80003767:	77 24                	ja     ffffffff8000378d <vprintf(char const*, __va_list_tag*)+0x1a9>
ffffffff80003769:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000376d:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80003771:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003775:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80003777:	89 c0                	mov    eax,eax
ffffffff80003779:	48 01 d0             	add    rax,rdx
ffffffff8000377c:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003780:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff80003782:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff80003785:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003789:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff8000378b:	eb 14                	jmp    ffffffff800037a1 <vprintf(char const*, __va_list_tag*)+0x1bd>
ffffffff8000378d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80003791:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003795:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff80003799:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000379d:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff800037a1:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800037a3:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
ffffffff800037a6:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800037a9:	48 98                	cdqe   
ffffffff800037ab:	be 0a 00 00 00       	mov    esi,0xa
ffffffff800037b0:	48 89 c7             	mov    rdi,rax
ffffffff800037b3:	e8 f7 fa ff ff       	call   ffffffff800032af <utoa(unsigned long, int)>
ffffffff800037b8:	48 89 c7             	mov    rdi,rax
ffffffff800037bb:	e8 de fd ff ff       	call   ffffffff8000359e <puts(char const*)>
ffffffff800037c0:	eb 79                	jmp    ffffffff8000383b <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff800037c2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800037c6:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800037c8:	83 f8 2f             	cmp    eax,0x2f
ffffffff800037cb:	77 24                	ja     ffffffff800037f1 <vprintf(char const*, __va_list_tag*)+0x20d>
ffffffff800037cd:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800037d1:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff800037d5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800037d9:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800037db:	89 c0                	mov    eax,eax
ffffffff800037dd:	48 01 d0             	add    rax,rdx
ffffffff800037e0:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800037e4:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff800037e6:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff800037e9:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800037ed:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff800037ef:	eb 14                	jmp    ffffffff80003805 <vprintf(char const*, __va_list_tag*)+0x221>
ffffffff800037f1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800037f5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800037f9:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff800037fd:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80003801:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff80003805:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80003807:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff8000380a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000380d:	0f be c0             	movsx  eax,al
ffffffff80003810:	89 c7                	mov    edi,eax
ffffffff80003812:	e8 ef fb ff ff       	call   ffffffff80003406 <putc(char)>
ffffffff80003817:	eb 22                	jmp    ffffffff8000383b <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff80003819:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000381d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003820:	0f be c0             	movsx  eax,al
ffffffff80003823:	89 c6                	mov    esi,eax
ffffffff80003825:	48 c7 c7 33 7f 00 80 	mov    rdi,0xffffffff80007f33
ffffffff8000382c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003831:	e8 3b 00 00 00       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80003836:	e8 31 d8 ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff8000383b:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
ffffffff80003840:	eb 19                	jmp    ffffffff8000385b <vprintf(char const*, __va_list_tag*)+0x277>
ffffffff80003842:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80003846:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8000384a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff8000384e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003851:	0f be c0             	movsx  eax,al
ffffffff80003854:	89 c7                	mov    edi,eax
ffffffff80003856:	e8 ab fb ff ff       	call   ffffffff80003406 <putc(char)>
ffffffff8000385b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000385f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003862:	84 c0                	test   al,al
ffffffff80003864:	0f 85 93 fd ff ff    	jne    ffffffff800035fd <vprintf(char const*, __va_list_tag*)+0x19>
ffffffff8000386a:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000386f:	c9                   	leave  
ffffffff80003870:	c3                   	ret    

ffffffff80003871 <_printf(char const*, ...)>:
ffffffff80003871:	f3 0f 1e fa          	endbr64 
ffffffff80003875:	55                   	push   rbp
ffffffff80003876:	48 89 e5             	mov    rbp,rsp
ffffffff80003879:	48 83 ec 60          	sub    rsp,0x60
ffffffff8000387d:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80003881:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff80003885:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff80003889:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff8000388d:	4c 89 45 f0          	mov    QWORD PTR [rbp-0x10],r8
ffffffff80003891:	4c 89 4d f8          	mov    QWORD PTR [rbp-0x8],r9
ffffffff80003895:	48 c7 c7 00 b7 00 80 	mov    rdi,0xffffffff8000b700
ffffffff8000389c:	e8 4b 01 00 00       	call   ffffffff800039ec <spinlock::lock()>
ffffffff800038a1:	c7 45 b0 08 00 00 00 	mov    DWORD PTR [rbp-0x50],0x8
ffffffff800038a8:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffffffff800038ac:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff800038b0:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffffffff800038b4:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff800038b8:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
ffffffff800038bc:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800038c0:	48 89 d6             	mov    rsi,rdx
ffffffff800038c3:	48 89 c7             	mov    rdi,rax
ffffffff800038c6:	e8 19 fd ff ff       	call   ffffffff800035e4 <vprintf(char const*, __va_list_tag*)>
ffffffff800038cb:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
ffffffff800038ce:	48 c7 c7 00 b7 00 80 	mov    rdi,0xffffffff8000b700
ffffffff800038d5:	e8 44 01 00 00       	call   ffffffff80003a1e <spinlock::unlock()>
ffffffff800038da:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffffffff800038dd:	c9                   	leave  
ffffffff800038de:	c3                   	ret    

ffffffff800038df <Screen::Initialize()>:
ffffffff800038df:	f3 0f 1e fa          	endbr64 
ffffffff800038e3:	55                   	push   rbp
ffffffff800038e4:	48 89 e5             	mov    rbp,rsp
ffffffff800038e7:	48 83 ec 10          	sub    rsp,0x10
ffffffff800038eb:	48 c7 45 f8 a8 9a 00 	mov    QWORD PTR [rbp-0x8],0xffffffff80009aa8
ffffffff800038f2:	80 
ffffffff800038f3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800038f7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800038fa:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800038fe:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003901:	48 89 05 08 7e 00 00 	mov    QWORD PTR [rip+0x7e08],rax        # ffffffff8000b710 <chosen_fb>
ffffffff80003908:	48 8b 05 01 7e 00 00 	mov    rax,QWORD PTR [rip+0x7e01]        # ffffffff8000b710 <chosen_fb>
ffffffff8000390f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003912:	48 89 05 ef 7d 00 00 	mov    QWORD PTR [rip+0x7def],rax        # ffffffff8000b708 <fb_address>
ffffffff80003919:	48 8b 05 f0 7d 00 00 	mov    rax,QWORD PTR [rip+0x7df0]        # ffffffff8000b710 <chosen_fb>
ffffffff80003920:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff80003924:	48 8b 05 e5 7d 00 00 	mov    rax,QWORD PTR [rip+0x7de5]        # ffffffff8000b710 <chosen_fb>
ffffffff8000392b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8000392f:	48 8b 05 d2 7d 00 00 	mov    rax,QWORD PTR [rip+0x7dd2]        # ffffffff8000b708 <fb_address>
ffffffff80003936:	48 89 c6             	mov    rsi,rax
ffffffff80003939:	48 c7 c7 00 80 00 80 	mov    rdi,0xffffffff80008000
ffffffff80003940:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003945:	e8 27 ff ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000394a:	48 c7 c7 20 80 00 80 	mov    rdi,0xffffffff80008020
ffffffff80003951:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003956:	e8 16 ff ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000395b:	48 8b 05 ae 7d 00 00 	mov    rax,QWORD PTR [rip+0x7dae]        # ffffffff8000b710 <chosen_fb>
ffffffff80003962:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffffffff80003966:	48 85 c0             	test   rax,rax
ffffffff80003969:	75 11                	jne    ffffffff8000397c <Screen::Initialize()+0x9d>
ffffffff8000396b:	48 c7 c7 44 80 00 80 	mov    rdi,0xffffffff80008044
ffffffff80003972:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003977:	e8 f5 fe ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000397c:	90                   	nop
ffffffff8000397d:	c9                   	leave  
ffffffff8000397e:	c3                   	ret    

ffffffff8000397f <__static_initialization_and_destruction_0(int, int)>:
ffffffff8000397f:	f3 0f 1e fa          	endbr64 
ffffffff80003983:	55                   	push   rbp
ffffffff80003984:	48 89 e5             	mov    rbp,rsp
ffffffff80003987:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000398b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff8000398e:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80003991:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80003995:	75 15                	jne    ffffffff800039ac <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80003997:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff8000399e:	75 0c                	jne    ffffffff800039ac <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff800039a0:	48 c7 c7 00 b7 00 80 	mov    rdi,0xffffffff8000b700
ffffffff800039a7:	e8 1c 00 00 00       	call   ffffffff800039c8 <spinlock::spinlock()>
ffffffff800039ac:	90                   	nop
ffffffff800039ad:	c9                   	leave  
ffffffff800039ae:	c3                   	ret    

ffffffff800039af <_GLOBAL__sub_I_font8x8_basic>:
ffffffff800039af:	f3 0f 1e fa          	endbr64 
ffffffff800039b3:	55                   	push   rbp
ffffffff800039b4:	48 89 e5             	mov    rbp,rsp
ffffffff800039b7:	be ff ff 00 00       	mov    esi,0xffff
ffffffff800039bc:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800039c1:	e8 b9 ff ff ff       	call   ffffffff8000397f <__static_initialization_and_destruction_0(int, int)>
ffffffff800039c6:	5d                   	pop    rbp
ffffffff800039c7:	c3                   	ret    

ffffffff800039c8 <spinlock::spinlock()>:
ffffffff800039c8:	f3 0f 1e fa          	endbr64 
ffffffff800039cc:	55                   	push   rbp
ffffffff800039cd:	48 89 e5             	mov    rbp,rsp
ffffffff800039d0:	48 83 ec 10          	sub    rsp,0x10
ffffffff800039d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800039d8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800039dc:	be 00 00 00 00       	mov    esi,0x0
ffffffff800039e1:	48 89 c7             	mov    rdi,rax
ffffffff800039e4:	e8 59 00 00 00       	call   ffffffff80003a42 <atomic::atomic<int>::atomic(int)>
ffffffff800039e9:	90                   	nop
ffffffff800039ea:	c9                   	leave  
ffffffff800039eb:	c3                   	ret    

ffffffff800039ec <spinlock::lock()>:
ffffffff800039ec:	f3 0f 1e fa          	endbr64 
ffffffff800039f0:	55                   	push   rbp
ffffffff800039f1:	48 89 e5             	mov    rbp,rsp
ffffffff800039f4:	48 83 ec 10          	sub    rsp,0x10
ffffffff800039f8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800039fc:	90                   	nop
ffffffff800039fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003a01:	ba 01 00 00 00       	mov    edx,0x1
ffffffff80003a06:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003a0b:	48 89 c7             	mov    rdi,rax
ffffffff80003a0e:	e8 4f 00 00 00       	call   ffffffff80003a62 <atomic::atomic<int>::compare_exchange(int, int)>
ffffffff80003a13:	83 f0 01             	xor    eax,0x1
ffffffff80003a16:	84 c0                	test   al,al
ffffffff80003a18:	75 e3                	jne    ffffffff800039fd <spinlock::lock()+0x11>
ffffffff80003a1a:	90                   	nop
ffffffff80003a1b:	90                   	nop
ffffffff80003a1c:	c9                   	leave  
ffffffff80003a1d:	c3                   	ret    

ffffffff80003a1e <spinlock::unlock()>:
ffffffff80003a1e:	f3 0f 1e fa          	endbr64 
ffffffff80003a22:	55                   	push   rbp
ffffffff80003a23:	48 89 e5             	mov    rbp,rsp
ffffffff80003a26:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003a2a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80003a2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003a32:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003a37:	48 89 c7             	mov    rdi,rax
ffffffff80003a3a:	e8 5d 00 00 00       	call   ffffffff80003a9c <atomic::atomic<int>::store(int)>
ffffffff80003a3f:	90                   	nop
ffffffff80003a40:	c9                   	leave  
ffffffff80003a41:	c3                   	ret    

ffffffff80003a42 <atomic::atomic<int>::atomic(int)>:
ffffffff80003a42:	f3 0f 1e fa          	endbr64 
ffffffff80003a46:	55                   	push   rbp
ffffffff80003a47:	48 89 e5             	mov    rbp,rsp
ffffffff80003a4a:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003a4e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80003a52:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80003a55:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003a59:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80003a5c:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80003a5e:	90                   	nop
ffffffff80003a5f:	c9                   	leave  
ffffffff80003a60:	c3                   	ret    
ffffffff80003a61:	90                   	nop

ffffffff80003a62 <atomic::atomic<int>::compare_exchange(int, int)>:
ffffffff80003a62:	f3 0f 1e fa          	endbr64 
ffffffff80003a66:	55                   	push   rbp
ffffffff80003a67:	48 89 e5             	mov    rbp,rsp
ffffffff80003a6a:	48 83 ec 20          	sub    rsp,0x20
ffffffff80003a6e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80003a72:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80003a75:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80003a78:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003a7b:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80003a7e:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
ffffffff80003a81:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffffffff80003a85:	48 8d 55 fc          	lea    rdx,[rbp-0x4]
ffffffff80003a89:	8b 02                	mov    eax,DWORD PTR [rdx]
ffffffff80003a8b:	f0 0f b1 0e          	lock cmpxchg DWORD PTR [rsi],ecx
ffffffff80003a8f:	89 c1                	mov    ecx,eax
ffffffff80003a91:	0f 94 c0             	sete   al
ffffffff80003a94:	84 c0                	test   al,al
ffffffff80003a96:	75 02                	jne    ffffffff80003a9a <atomic::atomic<int>::compare_exchange(int, int)+0x38>
ffffffff80003a98:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff80003a9a:	c9                   	leave  
ffffffff80003a9b:	c3                   	ret    

ffffffff80003a9c <atomic::atomic<int>::store(int)>:
ffffffff80003a9c:	f3 0f 1e fa          	endbr64 
ffffffff80003aa0:	55                   	push   rbp
ffffffff80003aa1:	48 89 e5             	mov    rbp,rsp
ffffffff80003aa4:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003aa8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80003aac:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80003aaf:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80003ab2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003ab6:	87 10                	xchg   DWORD PTR [rax],edx
ffffffff80003ab8:	90                   	nop
ffffffff80003ab9:	c9                   	leave  
ffffffff80003aba:	c3                   	ret    

ffffffff80003abb <HPET::SetupHPET()>:
ffffffff80003abb:	f3 0f 1e fa          	endbr64 
ffffffff80003abf:	55                   	push   rbp
ffffffff80003ac0:	48 89 e5             	mov    rbp,rsp
ffffffff80003ac3:	48 c7 c7 58 80 00 80 	mov    rdi,0xffffffff80008058
ffffffff80003aca:	e8 30 0f 00 00       	call   ffffffff800049ff <ACPI::FindTable(char const*)>
ffffffff80003acf:	48 89 05 ca 7c 00 00 	mov    QWORD PTR [rip+0x7cca],rax        # ffffffff8000b7a0 <hpetTable>
ffffffff80003ad6:	48 8b 05 c3 7c 00 00 	mov    rax,QWORD PTR [rip+0x7cc3]        # ffffffff8000b7a0 <hpetTable>
ffffffff80003add:	48 85 c0             	test   rax,rax
ffffffff80003ae0:	75 1b                	jne    ffffffff80003afd <HPET::SetupHPET()+0x42>
ffffffff80003ae2:	48 8b 05 b7 7c 00 00 	mov    rax,QWORD PTR [rip+0x7cb7]        # ffffffff8000b7a0 <hpetTable>
ffffffff80003ae9:	48 89 c6             	mov    rsi,rax
ffffffff80003aec:	48 c7 c7 60 80 00 80 	mov    rdi,0xffffffff80008060
ffffffff80003af3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003af8:	e8 74 fd ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80003afd:	48 8b 05 9c 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c9c]        # ffffffff8000b7a0 <hpetTable>
ffffffff80003b04:	48 8b 40 2c          	mov    rax,QWORD PTR [rax+0x2c]
ffffffff80003b08:	48 89 c6             	mov    rsi,rax
ffffffff80003b0b:	48 c7 c7 89 80 00 80 	mov    rdi,0xffffffff80008089
ffffffff80003b12:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003b17:	e8 55 fd ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80003b1c:	48 8b 05 7d 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c7d]        # ffffffff8000b7a0 <hpetTable>
ffffffff80003b23:	48 8b 48 2c          	mov    rcx,QWORD PTR [rax+0x2c]
ffffffff80003b27:	48 8b 05 ba 59 00 00 	mov    rax,QWORD PTR [rip+0x59ba]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80003b2e:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80003b32:	48 8b 05 67 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c67]        # ffffffff8000b7a0 <hpetTable>
ffffffff80003b39:	48 01 ca             	add    rdx,rcx
ffffffff80003b3c:	48 89 50 2c          	mov    QWORD PTR [rax+0x2c],rdx
ffffffff80003b40:	48 8b 05 59 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c59]        # ffffffff8000b7a0 <hpetTable>
ffffffff80003b47:	48 8b 40 2c          	mov    rax,QWORD PTR [rax+0x2c]
ffffffff80003b4b:	48 89 05 56 7c 00 00 	mov    QWORD PTR [rip+0x7c56],rax        # ffffffff8000b7a8 <hpetRegs>
ffffffff80003b52:	48 8b 05 4f 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c4f]        # ffffffff8000b7a8 <hpetRegs>
ffffffff80003b59:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffffffff80003b60:	00 00 00 00 
ffffffff80003b64:	48 8b 05 3d 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c3d]        # ffffffff8000b7a8 <hpetRegs>
ffffffff80003b6b:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffffffff80003b72:	00 
ffffffff80003b73:	90                   	nop
ffffffff80003b74:	5d                   	pop    rbp
ffffffff80003b75:	c3                   	ret    

ffffffff80003b76 <msleep(unsigned long)>:
ffffffff80003b76:	f3 0f 1e fa          	endbr64 
ffffffff80003b7a:	55                   	push   rbp
ffffffff80003b7b:	48 89 e5             	mov    rbp,rsp
ffffffff80003b7e:	48 83 ec 18          	sub    rsp,0x18
ffffffff80003b82:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80003b86:	48 8b 05 1b 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c1b]        # ffffffff8000b7a8 <hpetRegs>
ffffffff80003b8d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003b90:	48 c1 e8 20          	shr    rax,0x20
ffffffff80003b94:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80003b97:	48 8b 05 0a 7c 00 00 	mov    rax,QWORD PTR [rip+0x7c0a]        # ffffffff8000b7a8 <hpetRegs>
ffffffff80003b9e:	48 8b 88 f0 00 00 00 	mov    rcx,QWORD PTR [rax+0xf0]
ffffffff80003ba5:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffffffff80003ba8:	48 b8 00 10 a5 d4 e8 	movabs rax,0xe8d4a51000
ffffffff80003baf:	00 00 00 
ffffffff80003bb2:	48 99                	cqo    
ffffffff80003bb4:	48 f7 fe             	idiv   rsi
ffffffff80003bb7:	48 0f af 45 e8       	imul   rax,QWORD PTR [rbp-0x18]
ffffffff80003bbc:	48 01 c8             	add    rax,rcx
ffffffff80003bbf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80003bc3:	eb 02                	jmp    ffffffff80003bc7 <msleep(unsigned long)+0x51>
ffffffff80003bc5:	f3 90                	pause  
ffffffff80003bc7:	48 8b 05 da 7b 00 00 	mov    rax,QWORD PTR [rip+0x7bda]        # ffffffff8000b7a8 <hpetRegs>
ffffffff80003bce:	48 8b 90 f0 00 00 00 	mov    rdx,QWORD PTR [rax+0xf0]
ffffffff80003bd5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80003bd9:	48 39 c2             	cmp    rdx,rax
ffffffff80003bdc:	0f 92 c0             	setb   al
ffffffff80003bdf:	84 c0                	test   al,al
ffffffff80003be1:	75 e2                	jne    ffffffff80003bc5 <msleep(unsigned long)+0x4f>
ffffffff80003be3:	90                   	nop
ffffffff80003be4:	90                   	nop
ffffffff80003be5:	c9                   	leave  
ffffffff80003be6:	c3                   	ret    
ffffffff80003be7:	90                   	nop

ffffffff80003be8 <Scheduler::AddThread(unsigned long, bool)>:
ffffffff80003be8:	f3 0f 1e fa          	endbr64 
ffffffff80003bec:	55                   	push   rbp
ffffffff80003bed:	48 89 e5             	mov    rbp,rsp
ffffffff80003bf0:	53                   	push   rbx
ffffffff80003bf1:	48 83 ec 28          	sub    rsp,0x28
ffffffff80003bf5:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80003bf9:	89 f0                	mov    eax,esi
ffffffff80003bfb:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
ffffffff80003bfe:	48 c7 c7 b0 b7 00 80 	mov    rdi,0xffffffff8000b7b0
ffffffff80003c05:	e8 e2 fd ff ff       	call   ffffffff800039ec <spinlock::lock()>
ffffffff80003c0a:	bf c8 00 00 00       	mov    edi,0xc8
ffffffff80003c0f:	e8 24 cd ff ff       	call   ffffffff80000938 <operator new(unsigned long)>
ffffffff80003c14:	48 89 c3             	mov    rbx,rax
ffffffff80003c17:	0f b6 55 d4          	movzx  edx,BYTE PTR [rbp-0x2c]
ffffffff80003c1b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80003c1f:	48 89 c6             	mov    rsi,rax
ffffffff80003c22:	48 89 df             	mov    rdi,rbx
ffffffff80003c25:	e8 a4 03 00 00       	call   ffffffff80003fce <Thread::Thread(unsigned long, bool)>
ffffffff80003c2a:	48 89 5d e8          	mov    QWORD PTR [rbp-0x18],rbx
ffffffff80003c2e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80003c32:	8b 05 7c 7b 00 00    	mov    eax,DWORD PTR [rip+0x7b7c]        # ffffffff8000b7b4 <curPid>
ffffffff80003c38:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff80003c3b:	89 0d 73 7b 00 00    	mov    DWORD PTR [rip+0x7b73],ecx        # ffffffff8000b7b4 <curPid>
ffffffff80003c41:	89 c6                	mov    esi,eax
ffffffff80003c43:	48 89 d7             	mov    rdi,rdx
ffffffff80003c46:	e8 13 03 00 00       	call   ffffffff80003f5e <Thread::SetPID(int)>
ffffffff80003c4b:	8b 05 67 7b 00 00    	mov    eax,DWORD PTR [rip+0x7b67]        # ffffffff8000b7b8 <curCpuCore>
ffffffff80003c51:	48 63 d0             	movsxd rdx,eax
ffffffff80003c54:	48 89 d0             	mov    rax,rdx
ffffffff80003c57:	48 01 c0             	add    rax,rax
ffffffff80003c5a:	48 01 d0             	add    rax,rdx
ffffffff80003c5d:	48 c1 e0 04          	shl    rax,0x4
ffffffff80003c61:	48 05 c0 b7 00 80    	add    rax,0xffffffff8000b7c0
ffffffff80003c67:	48 83 c0 08          	add    rax,0x8
ffffffff80003c6b:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80003c6f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80003c73:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003c76:	48 85 c0             	test   rax,rax
ffffffff80003c79:	75 0b                	jne    ffffffff80003c86 <Scheduler::AddThread(unsigned long, bool)+0x9e>
ffffffff80003c7b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80003c7f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80003c83:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80003c86:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80003c8a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003c8e:	48 85 c0             	test   rax,rax
ffffffff80003c91:	74 13                	je     ffffffff80003ca6 <Scheduler::AddThread(unsigned long, bool)+0xbe>
ffffffff80003c93:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80003c97:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80003c9b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80003c9f:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
ffffffff80003ca6:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80003caa:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80003cae:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80003cb2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80003cb6:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80003cb9:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80003cbc:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80003cc0:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff80003cc3:	8b 05 ef 7a 00 00    	mov    eax,DWORD PTR [rip+0x7aef]        # ffffffff8000b7b8 <curCpuCore>
ffffffff80003cc9:	83 c0 01             	add    eax,0x1
ffffffff80003ccc:	89 05 e6 7a 00 00    	mov    DWORD PTR [rip+0x7ae6],eax        # ffffffff8000b7b8 <curCpuCore>
ffffffff80003cd2:	48 c7 c7 b0 b7 00 80 	mov    rdi,0xffffffff8000b7b0
ffffffff80003cd9:	e8 40 fd ff ff       	call   ffffffff80003a1e <spinlock::unlock()>
ffffffff80003cde:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003ce2:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff80003ce6:	c9                   	leave  
ffffffff80003ce7:	c3                   	ret    

ffffffff80003ce8 <GetNextThread(unsigned long)>:
ffffffff80003ce8:	f3 0f 1e fa          	endbr64 
ffffffff80003cec:	55                   	push   rbp
ffffffff80003ced:	48 89 e5             	mov    rbp,rsp
ffffffff80003cf0:	48 83 ec 18          	sub    rsp,0x18
ffffffff80003cf4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80003cf8:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80003cfc:	48 89 d0             	mov    rax,rdx
ffffffff80003cff:	48 01 c0             	add    rax,rax
ffffffff80003d02:	48 01 d0             	add    rax,rdx
ffffffff80003d05:	48 c1 e0 04          	shl    rax,0x4
ffffffff80003d09:	48 05 c0 b7 00 80    	add    rax,0xffffffff8000b7c0
ffffffff80003d0f:	48 83 c0 08          	add    rax,0x8
ffffffff80003d13:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80003d17:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d1b:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80003d1e:	85 c0                	test   eax,eax
ffffffff80003d20:	75 07                	jne    ffffffff80003d29 <GetNextThread(unsigned long)+0x41>
ffffffff80003d22:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003d27:	eb 72                	jmp    ffffffff80003d9b <GetNextThread(unsigned long)+0xb3>
ffffffff80003d29:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d2d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003d31:	48 85 c0             	test   rax,rax
ffffffff80003d34:	75 19                	jne    ffffffff80003d4f <GetNextThread(unsigned long)+0x67>
ffffffff80003d36:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d3a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80003d3d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d41:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80003d45:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d49:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003d4d:	eb 4c                	jmp    ffffffff80003d9b <GetNextThread(unsigned long)+0xb3>
ffffffff80003d4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d53:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003d57:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffffffff80003d5e:	48 85 c0             	test   rax,rax
ffffffff80003d61:	74 21                	je     ffffffff80003d84 <GetNextThread(unsigned long)+0x9c>
ffffffff80003d63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d67:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003d6b:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffffffff80003d72:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d76:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80003d7a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d7e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003d82:	eb 17                	jmp    ffffffff80003d9b <GetNextThread(unsigned long)+0xb3>
ffffffff80003d84:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d88:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80003d8b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d8f:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80003d93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003d97:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003d9b:	c9                   	leave  
ffffffff80003d9c:	c3                   	ret    
ffffffff80003d9d:	90                   	nop

ffffffff80003d9e <Scheduler::Schedule(SavedRegs*)>:
ffffffff80003d9e:	f3 0f 1e fa          	endbr64 
ffffffff80003da2:	55                   	push   rbp
ffffffff80003da3:	48 89 e5             	mov    rbp,rsp
ffffffff80003da6:	48 83 ec 20          	sub    rsp,0x20
ffffffff80003daa:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80003dae:	e8 01 06 00 00       	call   ffffffff800043b4 <GetCurCPU()>
ffffffff80003db3:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80003db7:	48 c7 c7 b0 b7 00 80 	mov    rdi,0xffffffff8000b7b0
ffffffff80003dbe:	e8 29 fc ff ff       	call   ffffffff800039ec <spinlock::lock()>
ffffffff80003dc3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003dc7:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80003dcb:	48 85 c0             	test   rax,rax
ffffffff80003dce:	74 1d                	je     ffffffff80003ded <Scheduler::Schedule(SavedRegs*)+0x4f>
ffffffff80003dd0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003dd4:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff80003dd8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003ddc:	48 89 c6             	mov    rsi,rax
ffffffff80003ddf:	b8 16 00 00 00       	mov    eax,0x16
ffffffff80003de4:	48 89 d7             	mov    rdi,rdx
ffffffff80003de7:	48 89 c1             	mov    rcx,rax
ffffffff80003dea:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
ffffffff80003ded:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003df1:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffffffff80003df4:	48 98                	cdqe   
ffffffff80003df6:	48 89 c7             	mov    rdi,rax
ffffffff80003df9:	e8 ea fe ff ff       	call   ffffffff80003ce8 <GetNextThread(unsigned long)>
ffffffff80003dfe:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80003e02:	48 c7 c7 b0 b7 00 80 	mov    rdi,0xffffffff8000b7b0
ffffffff80003e09:	e8 10 fc ff ff       	call   ffffffff80003a1e <spinlock::unlock()>
ffffffff80003e0e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff80003e13:	74 3c                	je     ffffffff80003e51 <Scheduler::Schedule(SavedRegs*)+0xb3>
ffffffff80003e15:	e8 87 10 00 00       	call   ffffffff80004ea1 <LAPIC::EOI()>
ffffffff80003e1a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80003e1e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80003e22:	48 8b 92 b0 00 00 00 	mov    rdx,QWORD PTR [rdx+0xb0]
ffffffff80003e29:	48 89 c4             	mov    rsp,rax
ffffffff80003e2c:	48 89 d0             	mov    rax,rdx
ffffffff80003e2f:	41 5f                	pop    r15
ffffffff80003e31:	41 5e                	pop    r14
ffffffff80003e33:	41 5d                	pop    r13
ffffffff80003e35:	41 5c                	pop    r12
ffffffff80003e37:	41 5b                	pop    r11
ffffffff80003e39:	41 5a                	pop    r10
ffffffff80003e3b:	41 59                	pop    r9
ffffffff80003e3d:	41 58                	pop    r8
ffffffff80003e3f:	5d                   	pop    rbp
ffffffff80003e40:	5f                   	pop    rdi
ffffffff80003e41:	5e                   	pop    rsi
ffffffff80003e42:	5a                   	pop    rdx
ffffffff80003e43:	59                   	pop    rcx
ffffffff80003e44:	5b                   	pop    rbx
ffffffff80003e45:	0f 22 d8             	mov    cr3,rax
ffffffff80003e48:	58                   	pop    rax
ffffffff80003e49:	48 83 c4 10          	add    rsp,0x10
ffffffff80003e4d:	48 cf                	iretq  
ffffffff80003e4f:	eb 01                	jmp    ffffffff80003e52 <Scheduler::Schedule(SavedRegs*)+0xb4>
ffffffff80003e51:	90                   	nop
ffffffff80003e52:	c9                   	leave  
ffffffff80003e53:	c3                   	ret    

ffffffff80003e54 <Scheduler::Initialize()>:
ffffffff80003e54:	f3 0f 1e fa          	endbr64 
ffffffff80003e58:	55                   	push   rbp
ffffffff80003e59:	48 89 e5             	mov    rbp,rsp
ffffffff80003e5c:	48 83 ec 20          	sub    rsp,0x20
ffffffff80003e60:	48 c7 c7 b0 b7 00 80 	mov    rdi,0xffffffff8000b7b0
ffffffff80003e67:	e8 b2 fb ff ff       	call   ffffffff80003a1e <spinlock::unlock()>
ffffffff80003e6c:	48 c7 45 f0 88 9b 00 	mov    QWORD PTR [rbp-0x10],0xffffffff80009b88
ffffffff80003e73:	80 
ffffffff80003e74:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80003e7b:	eb 7a                	jmp    ffffffff80003ef7 <Scheduler::Initialize()+0xa3>
ffffffff80003e7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80003e81:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003e84:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff80003e88:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003e8b:	48 98                	cdqe   
ffffffff80003e8d:	48 c1 e0 03          	shl    rax,0x3
ffffffff80003e91:	48 01 d0             	add    rax,rdx
ffffffff80003e94:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003e97:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80003e99:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff80003e9c:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80003e9f:	48 89 d0             	mov    rax,rdx
ffffffff80003ea2:	48 01 c0             	add    rax,rax
ffffffff80003ea5:	48 01 d0             	add    rax,rdx
ffffffff80003ea8:	48 c1 e0 04          	shl    rax,0x4
ffffffff80003eac:	48 05 d8 b7 00 80    	add    rax,0xffffffff8000b7d8
ffffffff80003eb2:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80003eb9:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80003ebc:	48 89 d0             	mov    rax,rdx
ffffffff80003ebf:	48 01 c0             	add    rax,rax
ffffffff80003ec2:	48 01 d0             	add    rax,rdx
ffffffff80003ec5:	48 c1 e0 04          	shl    rax,0x4
ffffffff80003ec9:	48 05 c8 b7 00 80    	add    rax,0xffffffff8000b7c8
ffffffff80003ecf:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80003ed6:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80003ed9:	48 89 d0             	mov    rax,rdx
ffffffff80003edc:	48 01 c0             	add    rax,rax
ffffffff80003edf:	48 01 d0             	add    rax,rdx
ffffffff80003ee2:	48 c1 e0 04          	shl    rax,0x4
ffffffff80003ee6:	48 05 d0 b7 00 80    	add    rax,0xffffffff8000b7d0
ffffffff80003eec:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80003ef3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80003ef7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003efa:	48 63 d0             	movsxd rdx,eax
ffffffff80003efd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80003f01:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80003f04:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80003f08:	48 39 c2             	cmp    rdx,rax
ffffffff80003f0b:	0f 82 6c ff ff ff    	jb     ffffffff80003e7d <Scheduler::Initialize()+0x29>
ffffffff80003f11:	90                   	nop
ffffffff80003f12:	90                   	nop
ffffffff80003f13:	c9                   	leave  
ffffffff80003f14:	c3                   	ret    

ffffffff80003f15 <__static_initialization_and_destruction_0(int, int)>:
ffffffff80003f15:	f3 0f 1e fa          	endbr64 
ffffffff80003f19:	55                   	push   rbp
ffffffff80003f1a:	48 89 e5             	mov    rbp,rsp
ffffffff80003f1d:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003f21:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80003f24:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80003f27:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80003f2b:	75 15                	jne    ffffffff80003f42 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80003f2d:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80003f34:	75 0c                	jne    ffffffff80003f42 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80003f36:	48 c7 c7 b0 b7 00 80 	mov    rdi,0xffffffff8000b7b0
ffffffff80003f3d:	e8 86 fa ff ff       	call   ffffffff800039c8 <spinlock::spinlock()>
ffffffff80003f42:	90                   	nop
ffffffff80003f43:	c9                   	leave  
ffffffff80003f44:	c3                   	ret    

ffffffff80003f45 <_GLOBAL__sub_I_sched_mutex>:
ffffffff80003f45:	f3 0f 1e fa          	endbr64 
ffffffff80003f49:	55                   	push   rbp
ffffffff80003f4a:	48 89 e5             	mov    rbp,rsp
ffffffff80003f4d:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80003f52:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80003f57:	e8 b9 ff ff ff       	call   ffffffff80003f15 <__static_initialization_and_destruction_0(int, int)>
ffffffff80003f5c:	5d                   	pop    rbp
ffffffff80003f5d:	c3                   	ret    

ffffffff80003f5e <Thread::SetPID(int)>:
ffffffff80003f5e:	f3 0f 1e fa          	endbr64 
ffffffff80003f62:	55                   	push   rbp
ffffffff80003f63:	48 89 e5             	mov    rbp,rsp
ffffffff80003f66:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003f6a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80003f6e:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80003f71:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003f75:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80003f78:	89 90 b8 00 00 00    	mov    DWORD PTR [rax+0xb8],edx
ffffffff80003f7e:	90                   	nop
ffffffff80003f7f:	c9                   	leave  
ffffffff80003f80:	c3                   	ret    
ffffffff80003f81:	90                   	nop

ffffffff80003f82 <memset(void*, int, unsigned long)>:
ffffffff80003f82:	55                   	push   rbp
ffffffff80003f83:	48 89 e5             	mov    rbp,rsp
ffffffff80003f86:	48 83 ec 28          	sub    rsp,0x28
ffffffff80003f8a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80003f8e:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80003f91:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80003f95:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003f99:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80003f9d:	eb 13                	jmp    ffffffff80003fb2 <memset(void*, int, unsigned long)+0x30>
ffffffff80003f9f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003fa2:	89 c1                	mov    ecx,eax
ffffffff80003fa4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003fa8:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80003fac:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80003fb0:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80003fb2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80003fb6:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80003fba:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80003fbe:	48 85 c0             	test   rax,rax
ffffffff80003fc1:	0f 95 c0             	setne  al
ffffffff80003fc4:	84 c0                	test   al,al
ffffffff80003fc6:	75 d7                	jne    ffffffff80003f9f <memset(void*, int, unsigned long)+0x1d>
ffffffff80003fc8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003fcc:	c9                   	leave  
ffffffff80003fcd:	c3                   	ret    

ffffffff80003fce <Thread::Thread(unsigned long, bool)>:
ffffffff80003fce:	f3 0f 1e fa          	endbr64 
ffffffff80003fd2:	55                   	push   rbp
ffffffff80003fd3:	48 89 e5             	mov    rbp,rsp
ffffffff80003fd6:	53                   	push   rbx
ffffffff80003fd7:	48 81 ec 98 00 00 00 	sub    rsp,0x98
ffffffff80003fde:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
ffffffff80003fe5:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffffffff80003fec:	89 d0                	mov    eax,edx
ffffffff80003fee:	88 85 6c ff ff ff    	mov    BYTE PTR [rbp-0x94],al
ffffffff80003ff4:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80003ffb:	ba b0 00 00 00       	mov    edx,0xb0
ffffffff80004000:	be 00 00 00 00       	mov    esi,0x0
ffffffff80004005:	48 89 c7             	mov    rdi,rax
ffffffff80004008:	e8 75 ff ff ff       	call   ffffffff80003f82 <memset(void*, int, unsigned long)>
ffffffff8000400d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004014:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffffffff8000401b:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
ffffffff80004022:	80 bd 6c ff ff ff 00 	cmp    BYTE PTR [rbp-0x94],0x0
ffffffff80004029:	74 07                	je     ffffffff80004032 <Thread::Thread(unsigned long, bool)+0x64>
ffffffff8000402b:	ba 1b 00 00 00       	mov    edx,0x1b
ffffffff80004030:	eb 05                	jmp    ffffffff80004037 <Thread::Thread(unsigned long, bool)+0x69>
ffffffff80004032:	ba 08 00 00 00       	mov    edx,0x8
ffffffff80004037:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff8000403e:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
ffffffff80004045:	80 bd 6c ff ff ff 00 	cmp    BYTE PTR [rbp-0x94],0x0
ffffffff8000404c:	74 07                	je     ffffffff80004055 <Thread::Thread(unsigned long, bool)+0x87>
ffffffff8000404e:	ba 23 00 00 00       	mov    edx,0x23
ffffffff80004053:	eb 05                	jmp    ffffffff8000405a <Thread::Thread(unsigned long, bool)+0x8c>
ffffffff80004055:	ba 10 00 00 00       	mov    edx,0x10
ffffffff8000405a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004061:	48 89 90 a8 00 00 00 	mov    QWORD PTR [rax+0xa8],rdx
ffffffff80004068:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff8000406f:	48 bb 00 00 01 00 00 	movabs rbx,0xffffa00000010000
ffffffff80004076:	a0 ff ff 
ffffffff80004079:	48 89 98 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],rbx
ffffffff80004080:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004087:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x202
ffffffff8000408e:	02 02 00 00 
ffffffff80004092:	c7 45 a4 00 00 01 00 	mov    DWORD PTR [rbp-0x5c],0x10000
ffffffff80004099:	c7 45 a0 00 10 00 00 	mov    DWORD PTR [rbp-0x60],0x1000
ffffffff800040a0:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffffffff800040a3:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
ffffffff800040a6:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffffffff800040a9:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
ffffffff800040ac:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffffffff800040af:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff800040b2:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffffffff800040b5:	01 d0                	add    eax,edx
ffffffff800040b7:	99                   	cdq    
ffffffff800040b8:	f7 7d 98             	idiv   DWORD PTR [rbp-0x68]
ffffffff800040bb:	0f af 45 a0          	imul   eax,DWORD PTR [rbp-0x60]
ffffffff800040bf:	48 98                	cdqe   
ffffffff800040c1:	48 89 c7             	mov    rdi,rax
ffffffff800040c4:	e8 01 ce ff ff       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff800040c9:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff800040cd:	48 8b 05 14 54 00 00 	mov    rax,QWORD PTR [rip+0x5414]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff800040d4:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff800040d8:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff800040dc:	48 01 d0             	add    rax,rdx
ffffffff800040df:	48 89 c6             	mov    rsi,rax
ffffffff800040e2:	48 c7 c7 b0 80 00 80 	mov    rdi,0xffffffff800080b0
ffffffff800040e9:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800040ee:	e8 7e f7 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800040f3:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff800040fa:	00 
ffffffff800040fb:	eb 21                	jmp    ffffffff8000411e <Thread::Thread(unsigned long, bool)+0x150>
ffffffff800040fd:	48 8b 05 e4 53 00 00 	mov    rax,QWORD PTR [rip+0x53e4]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004104:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004108:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff8000410c:	48 01 c2             	add    rdx,rax
ffffffff8000410f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80004113:	48 01 d0             	add    rax,rdx
ffffffff80004116:	c6 00 00             	mov    BYTE PTR [rax],0x0
ffffffff80004119:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
ffffffff8000411e:	48 81 7d d8 ff ff 00 	cmp    QWORD PTR [rbp-0x28],0xffff
ffffffff80004125:	00 
ffffffff80004126:	76 d5                	jbe    ffffffff800040fd <Thread::Thread(unsigned long, bool)+0x12f>
ffffffff80004128:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000412d:	e8 98 cd ff ff       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff80004132:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff80004139:	48 89 82 b0 00 00 00 	mov    QWORD PTR [rdx+0xb0],rax
ffffffff80004140:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80004147:	00 
ffffffff80004148:	eb 2e                	jmp    ffffffff80004178 <Thread::Thread(unsigned long, bool)+0x1aa>
ffffffff8000414a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004151:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff80004158:	48 89 c2             	mov    rdx,rax
ffffffff8000415b:	48 8b 05 86 53 00 00 	mov    rax,QWORD PTR [rip+0x5386]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004162:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004166:	48 01 c2             	add    rdx,rax
ffffffff80004169:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000416d:	48 01 d0             	add    rax,rdx
ffffffff80004170:	c6 00 00             	mov    BYTE PTR [rax],0x0
ffffffff80004173:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
ffffffff80004178:	48 81 7d d0 ff 0f 00 	cmp    QWORD PTR [rbp-0x30],0xfff
ffffffff8000417f:	00 
ffffffff80004180:	76 c8                	jbe    ffffffff8000414a <Thread::Thread(unsigned long, bool)+0x17c>
ffffffff80004182:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff80004189:	00 
ffffffff8000418a:	eb 48                	jmp    ffffffff800041d4 <Thread::Thread(unsigned long, bool)+0x206>
ffffffff8000418c:	48 8b 05 95 53 00 00 	mov    rax,QWORD PTR [rip+0x5395]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff80004193:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004197:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000419b:	48 01 c2             	add    rdx,rax
ffffffff8000419e:	48 8b 05 83 53 00 00 	mov    rax,QWORD PTR [rip+0x5383]        # ffffffff80009528 <kernel_addr+0x28>
ffffffff800041a5:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff800041a9:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800041ad:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffffffff800041b1:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff800041b8:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff800041bf:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800041c4:	48 89 c7             	mov    rdi,rax
ffffffff800041c7:	e8 2a d0 ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff800041cc:	48 81 45 c8 00 10 00 	add    QWORD PTR [rbp-0x38],0x1000
ffffffff800041d3:	00 
ffffffff800041d4:	48 8b 05 8d 53 00 00 	mov    rax,QWORD PTR [rip+0x538d]        # ffffffff80009568 <kernel_file+0x28>
ffffffff800041db:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800041df:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800041e3:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffffffff800041e7:	72 a3                	jb     ffffffff8000418c <Thread::Thread(unsigned long, bool)+0x1be>
ffffffff800041e9:	48 8b 05 b8 52 00 00 	mov    rax,QWORD PTR [rip+0x52b8]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff800041f0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800041f4:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff800041f8:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800041ff:	00 
ffffffff80004200:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80004207:	00 
ffffffff80004208:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffffffff8000420f:	00 
ffffffff80004210:	eb 63                	jmp    ffffffff80004275 <Thread::Thread(unsigned long, bool)+0x2a7>
ffffffff80004212:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80004216:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff8000421d:	00 
ffffffff8000421e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80004222:	48 01 d0             	add    rax,rdx
ffffffff80004225:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004228:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000422c:	48 83 f8 07          	cmp    rax,0x7
ffffffff80004230:	75 3d                	jne    ffffffff8000426f <Thread::Thread(unsigned long, bool)+0x2a1>
ffffffff80004232:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80004236:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff8000423d:	00 
ffffffff8000423e:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80004242:	48 01 d0             	add    rax,rdx
ffffffff80004245:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004248:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000424b:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000424f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80004253:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff8000425a:	00 
ffffffff8000425b:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff8000425f:	48 01 d0             	add    rax,rdx
ffffffff80004262:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004265:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004269:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8000426d:	eb 17                	jmp    ffffffff80004286 <Thread::Thread(unsigned long, bool)+0x2b8>
ffffffff8000426f:	90                   	nop
ffffffff80004270:	48 83 45 c0 01       	add    QWORD PTR [rbp-0x40],0x1
ffffffff80004275:	48 8b 05 2c 52 00 00 	mov    rax,QWORD PTR [rip+0x522c]        # ffffffff800094a8 <mmap_req+0x28>
ffffffff8000427c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004280:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffffffff80004284:	72 8c                	jb     ffffffff80004212 <Thread::Thread(unsigned long, bool)+0x244>
ffffffff80004286:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff8000428d:	00 
ffffffff8000428e:	eb 42                	jmp    ffffffff800042d2 <Thread::Thread(unsigned long, bool)+0x304>
ffffffff80004290:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80004294:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80004298:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
ffffffff8000429c:	e8 54 f1 ff ff       	call   ffffffff800033f5 <Screen::GetFramebuffer()>
ffffffff800042a1:	48 89 c2             	mov    rdx,rax
ffffffff800042a4:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800042a8:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff800042ac:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff800042b3:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff800042ba:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff800042bf:	48 89 da             	mov    rdx,rbx
ffffffff800042c2:	48 89 c7             	mov    rdi,rax
ffffffff800042c5:	e8 2c cf ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff800042ca:	48 81 45 b8 00 10 00 	add    QWORD PTR [rbp-0x48],0x1000
ffffffff800042d1:	00 
ffffffff800042d2:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800042d6:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
ffffffff800042da:	72 b4                	jb     ffffffff80004290 <Thread::Thread(unsigned long, bool)+0x2c2>
ffffffff800042dc:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffffffff800042e3:	00 
ffffffff800042e4:	eb 40                	jmp    ffffffff80004326 <Thread::Thread(unsigned long, bool)+0x358>
ffffffff800042e6:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffffffff800042ea:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800042ee:	48 01 c2             	add    rdx,rax
ffffffff800042f1:	48 b9 00 00 00 00 00 	movabs rcx,0xffffa00000000000
ffffffff800042f8:	a0 ff ff 
ffffffff800042fb:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800042ff:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffffffff80004303:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff8000430a:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff80004311:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80004316:	48 89 c7             	mov    rdi,rax
ffffffff80004319:	e8 d8 ce ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff8000431e:	48 81 45 b0 00 10 00 	add    QWORD PTR [rbp-0x50],0x1000
ffffffff80004325:	00 
ffffffff80004326:	48 81 7d b0 ff ff 00 	cmp    QWORD PTR [rbp-0x50],0xffff
ffffffff8000432d:	00 
ffffffff8000432e:	76 b6                	jbe    ffffffff800042e6 <Thread::Thread(unsigned long, bool)+0x318>
ffffffff80004330:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffffffff80004337:	00 
ffffffff80004338:	eb 3a                	jmp    ffffffff80004374 <Thread::Thread(unsigned long, bool)+0x3a6>
ffffffff8000433a:	48 8b 05 a7 51 00 00 	mov    rax,QWORD PTR [rip+0x51a7]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004341:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004345:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80004349:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff8000434d:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004354:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff8000435b:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffffffff8000435f:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80004364:	48 89 c7             	mov    rdi,rax
ffffffff80004367:	e8 8a ce ff ff       	call   ffffffff800011f6 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff8000436c:	48 81 45 a8 00 10 00 	add    QWORD PTR [rbp-0x58],0x1000
ffffffff80004373:	00 
ffffffff80004374:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff80004379:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff8000437d:	76 bb                	jbe    ffffffff8000433a <Thread::Thread(unsigned long, bool)+0x36c>
ffffffff8000437f:	90                   	nop
ffffffff80004380:	90                   	nop
ffffffff80004381:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff80004385:	c9                   	leave  
ffffffff80004386:	c3                   	ret    

ffffffff80004387 <Utils::rdmsr(unsigned long)>:
ffffffff80004387:	55                   	push   rbp
ffffffff80004388:	48 89 e5             	mov    rbp,rsp
ffffffff8000438b:	48 83 ec 18          	sub    rsp,0x18
ffffffff8000438f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004393:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004397:	48 89 c1             	mov    rcx,rax
ffffffff8000439a:	0f 32                	rdmsr  
ffffffff8000439c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000439f:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
ffffffff800043a2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800043a5:	48 c1 e0 20          	shl    rax,0x20
ffffffff800043a9:	48 89 c2             	mov    rdx,rax
ffffffff800043ac:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800043af:	48 09 d0             	or     rax,rdx
ffffffff800043b2:	c9                   	leave  
ffffffff800043b3:	c3                   	ret    

ffffffff800043b4 <GetCurCPU()>:
ffffffff800043b4:	f3 0f 1e fa          	endbr64 
ffffffff800043b8:	55                   	push   rbp
ffffffff800043b9:	48 89 e5             	mov    rbp,rsp
ffffffff800043bc:	b8 02 01 00 c0       	mov    eax,0xc0000102
ffffffff800043c1:	48 89 c7             	mov    rdi,rax
ffffffff800043c4:	e8 be ff ff ff       	call   ffffffff80004387 <Utils::rdmsr(unsigned long)>
ffffffff800043c9:	5d                   	pop    rbp
ffffffff800043ca:	c3                   	ret    

ffffffff800043cb <__static_initialization_and_destruction_0(int, int)>:
ffffffff800043cb:	f3 0f 1e fa          	endbr64 
ffffffff800043cf:	55                   	push   rbp
ffffffff800043d0:	48 89 e5             	mov    rbp,rsp
ffffffff800043d3:	41 54                	push   r12
ffffffff800043d5:	53                   	push   rbx
ffffffff800043d6:	48 83 ec 10          	sub    rsp,0x10
ffffffff800043da:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff800043dd:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff800043e0:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
ffffffff800043e4:	75 5d                	jne    ffffffff80004443 <__static_initialization_and_destruction_0(int, int)+0x78>
ffffffff800043e6:	81 7d e8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x18],0xffff
ffffffff800043ed:	75 54                	jne    ffffffff80004443 <__static_initialization_and_destruction_0(int, int)+0x78>
ffffffff800043ef:	48 c7 c0 c0 b7 00 80 	mov    rax,0xffffffff8000b7c0
ffffffff800043f6:	41 bc ff 00 00 00    	mov    r12d,0xff
ffffffff800043fc:	48 89 c3             	mov    rbx,rax
ffffffff800043ff:	eb 3d                	jmp    ffffffff8000443e <__static_initialization_and_destruction_0(int, int)+0x73>
ffffffff80004401:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
ffffffff80004408:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
ffffffff8000440f:	00 
ffffffff80004410:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
ffffffff80004417:	00 
ffffffff80004418:	48 c7 43 18 00 00 00 	mov    QWORD PTR [rbx+0x18],0x0
ffffffff8000441f:	00 
ffffffff80004420:	c7 43 20 00 00 00 00 	mov    DWORD PTR [rbx+0x20],0x0
ffffffff80004427:	c7 43 28 00 00 00 00 	mov    DWORD PTR [rbx+0x28],0x0
ffffffff8000442e:	48 89 df             	mov    rdi,rbx
ffffffff80004431:	e8 4e 00 00 00       	call   ffffffff80004484 <CPU::CPU()>
ffffffff80004436:	48 83 c3 30          	add    rbx,0x30
ffffffff8000443a:	49 83 ec 01          	sub    r12,0x1
ffffffff8000443e:	4d 85 e4             	test   r12,r12
ffffffff80004441:	79 be                	jns    ffffffff80004401 <__static_initialization_and_destruction_0(int, int)+0x36>
ffffffff80004443:	90                   	nop
ffffffff80004444:	48 83 c4 10          	add    rsp,0x10
ffffffff80004448:	5b                   	pop    rbx
ffffffff80004449:	41 5c                	pop    r12
ffffffff8000444b:	5d                   	pop    rbp
ffffffff8000444c:	c3                   	ret    

ffffffff8000444d <_GLOBAL__sub_I__Z9GetCurCPUv>:
ffffffff8000444d:	f3 0f 1e fa          	endbr64 
ffffffff80004451:	55                   	push   rbp
ffffffff80004452:	48 89 e5             	mov    rbp,rsp
ffffffff80004455:	be ff ff 00 00       	mov    esi,0xffff
ffffffff8000445a:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000445f:	e8 67 ff ff ff       	call   ffffffff800043cb <__static_initialization_and_destruction_0(int, int)>
ffffffff80004464:	5d                   	pop    rbp
ffffffff80004465:	c3                   	ret    

ffffffff80004466 <TaskQueue::TaskQueue()>:
ffffffff80004466:	f3 0f 1e fa          	endbr64 
ffffffff8000446a:	55                   	push   rbp
ffffffff8000446b:	48 89 e5             	mov    rbp,rsp
ffffffff8000446e:	48 83 ec 08          	sub    rsp,0x8
ffffffff80004472:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80004476:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000447a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
ffffffff80004481:	90                   	nop
ffffffff80004482:	c9                   	leave  
ffffffff80004483:	c3                   	ret    

ffffffff80004484 <CPU::CPU()>:
ffffffff80004484:	f3 0f 1e fa          	endbr64 
ffffffff80004488:	55                   	push   rbp
ffffffff80004489:	48 89 e5             	mov    rbp,rsp
ffffffff8000448c:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004490:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80004494:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004498:	48 83 c0 08          	add    rax,0x8
ffffffff8000449c:	48 89 c7             	mov    rdi,rax
ffffffff8000449f:	e8 c2 ff ff ff       	call   ffffffff80004466 <TaskQueue::TaskQueue()>
ffffffff800044a4:	90                   	nop
ffffffff800044a5:	c9                   	leave  
ffffffff800044a6:	c3                   	ret    

ffffffff800044a7 <Utils::ReadCr0()>:
ffffffff800044a7:	55                   	push   rbp
ffffffff800044a8:	48 89 e5             	mov    rbp,rsp
ffffffff800044ab:	48 83 ec 10          	sub    rsp,0x10
ffffffff800044af:	0f 20 c0             	mov    rax,cr0
ffffffff800044b2:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800044b5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800044b8:	c9                   	leave  
ffffffff800044b9:	c3                   	ret    

ffffffff800044ba <Utils::WriteCr0(unsigned int)>:
ffffffff800044ba:	55                   	push   rbp
ffffffff800044bb:	48 89 e5             	mov    rbp,rsp
ffffffff800044be:	48 83 ec 08          	sub    rsp,0x8
ffffffff800044c2:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800044c5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800044c8:	0f 22 c0             	mov    cr0,rax
ffffffff800044cb:	90                   	nop
ffffffff800044cc:	c9                   	leave  
ffffffff800044cd:	c3                   	ret    

ffffffff800044ce <Utils::ReadCr4()>:
ffffffff800044ce:	55                   	push   rbp
ffffffff800044cf:	48 89 e5             	mov    rbp,rsp
ffffffff800044d2:	48 83 ec 10          	sub    rsp,0x10
ffffffff800044d6:	0f 20 e0             	mov    rax,cr4
ffffffff800044d9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800044dc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800044df:	c9                   	leave  
ffffffff800044e0:	c3                   	ret    

ffffffff800044e1 <Utils::WriteCr4(unsigned int)>:
ffffffff800044e1:	55                   	push   rbp
ffffffff800044e2:	48 89 e5             	mov    rbp,rsp
ffffffff800044e5:	48 83 ec 08          	sub    rsp,0x8
ffffffff800044e9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800044ec:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800044ef:	0f 22 e0             	mov    cr4,rax
ffffffff800044f2:	90                   	nop
ffffffff800044f3:	c9                   	leave  
ffffffff800044f4:	c3                   	ret    

ffffffff800044f5 <Features::DetectAndInit()>:
ffffffff800044f5:	f3 0f 1e fa          	endbr64 
ffffffff800044f9:	55                   	push   rbp
ffffffff800044fa:	48 89 e5             	mov    rbp,rsp
ffffffff800044fd:	53                   	push   rbx
ffffffff800044fe:	48 83 ec 28          	sub    rsp,0x28
ffffffff80004502:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80004507:	0f a2                	cpuid  
ffffffff80004509:	89 de                	mov    esi,ebx
ffffffff8000450b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff8000450e:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff80004511:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
ffffffff80004514:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80004517:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000451a:	25 00 00 00 02       	and    eax,0x2000000
ffffffff8000451f:	85 c0                	test   eax,eax
ffffffff80004521:	75 16                	jne    ffffffff80004539 <Features::DetectAndInit()+0x44>
ffffffff80004523:	48 c7 c7 d0 80 00 80 	mov    rdi,0xffffffff800080d0
ffffffff8000452a:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000452f:	e8 3d f3 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004534:	e8 33 cb ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff80004539:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000453c:	25 00 00 00 04       	and    eax,0x4000000
ffffffff80004541:	85 c0                	test   eax,eax
ffffffff80004543:	75 16                	jne    ffffffff8000455b <Features::DetectAndInit()+0x66>
ffffffff80004545:	48 c7 c7 00 81 00 80 	mov    rdi,0xffffffff80008100
ffffffff8000454c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004551:	e8 1b f3 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004556:	e8 11 cb ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff8000455b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000455e:	83 e0 01             	and    eax,0x1
ffffffff80004561:	85 c0                	test   eax,eax
ffffffff80004563:	75 16                	jne    ffffffff8000457b <Features::DetectAndInit()+0x86>
ffffffff80004565:	48 c7 c7 38 81 00 80 	mov    rdi,0xffffffff80008138
ffffffff8000456c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004571:	e8 fb f2 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004576:	e8 f1 ca ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff8000457b:	b8 07 00 00 00       	mov    eax,0x7
ffffffff80004580:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80004585:	89 d1                	mov    ecx,edx
ffffffff80004587:	0f a2                	cpuid  
ffffffff80004589:	89 de                	mov    esi,ebx
ffffffff8000458b:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff8000458e:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff80004591:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
ffffffff80004594:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80004597:	e8 0b ff ff ff       	call   ffffffff800044a7 <Utils::ReadCr0()>
ffffffff8000459c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffffffff8000459f:	83 65 dc fb          	and    DWORD PTR [rbp-0x24],0xfffffffb
ffffffff800045a3:	83 4d dc 02          	or     DWORD PTR [rbp-0x24],0x2
ffffffff800045a7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff800045aa:	89 c7                	mov    edi,eax
ffffffff800045ac:	e8 09 ff ff ff       	call   ffffffff800044ba <Utils::WriteCr0(unsigned int)>
ffffffff800045b1:	e8 18 ff ff ff       	call   ffffffff800044ce <Utils::ReadCr4()>
ffffffff800045b6:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff800045b9:	81 4d d8 00 06 04 00 	or     DWORD PTR [rbp-0x28],0x40600
ffffffff800045c0:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff800045c3:	89 c7                	mov    edi,eax
ffffffff800045c5:	e8 17 ff ff ff       	call   ffffffff800044e1 <Utils::WriteCr4(unsigned int)>
ffffffff800045ca:	48 c7 c7 69 81 00 80 	mov    rdi,0xffffffff80008169
ffffffff800045d1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800045d6:	e8 96 f2 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800045db:	db e3                	fninit 
ffffffff800045dd:	48 c7 c7 76 81 00 80 	mov    rdi,0xffffffff80008176
ffffffff800045e4:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800045e9:	e8 83 f2 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800045ee:	90                   	nop
ffffffff800045ef:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800045f3:	c9                   	leave  
ffffffff800045f4:	c3                   	ret    

ffffffff800045f5 <GDT::SetupGdt(int)>:
ffffffff800045f5:	f3 0f 1e fa          	endbr64 
ffffffff800045f9:	55                   	push   rbp
ffffffff800045fa:	48 89 e5             	mov    rbp,rsp
ffffffff800045fd:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004601:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80004604:	48 c7 c7 c0 e7 00 80 	mov    rdi,0xffffffff8000e7c0
ffffffff8000460b:	e8 dc f3 ff ff       	call   ffffffff800039ec <spinlock::lock()>
ffffffff80004610:	bf 04 00 00 00       	mov    edi,0x4
ffffffff80004615:	e8 b0 c8 ff ff       	call   ffffffff80000eca <PhysicalMemory::alloc(unsigned long)>
ffffffff8000461a:	48 89 c2             	mov    rdx,rax
ffffffff8000461d:	48 8b 05 c4 4e 00 00 	mov    rax,QWORD PTR [rip+0x4ec4]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004624:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004628:	48 01 d0             	add    rax,rdx
ffffffff8000462b:	48 8d 88 00 40 00 00 	lea    rcx,[rax+0x4000]
ffffffff80004632:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80004635:	48 63 d0             	movsxd rdx,eax
ffffffff80004638:	48 89 d0             	mov    rax,rdx
ffffffff8000463b:	48 01 c0             	add    rax,rax
ffffffff8000463e:	48 01 d0             	add    rax,rdx
ffffffff80004641:	48 c1 e0 02          	shl    rax,0x2
ffffffff80004645:	48 01 d0             	add    rax,rdx
ffffffff80004648:	48 c1 e0 03          	shl    rax,0x3
ffffffff8000464c:	48 05 40 e8 00 80    	add    rax,0xffffffff8000e840
ffffffff80004652:	48 89 48 04          	mov    QWORD PTR [rax+0x4],rcx
ffffffff80004656:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80004659:	48 63 d0             	movsxd rdx,eax
ffffffff8000465c:	48 89 d0             	mov    rax,rdx
ffffffff8000465f:	48 01 c0             	add    rax,rax
ffffffff80004662:	48 01 d0             	add    rax,rdx
ffffffff80004665:	48 c1 e0 02          	shl    rax,0x2
ffffffff80004669:	48 01 d0             	add    rax,rdx
ffffffff8000466c:	48 c1 e0 03          	shl    rax,0x3
ffffffff80004670:	48 05 a6 e8 00 80    	add    rax,0xffffffff8000e8a6
ffffffff80004676:	66 c7 00 68 00       	mov    WORD PTR [rax],0x68
ffffffff8000467b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000467e:	48 63 d0             	movsxd rdx,eax
ffffffff80004681:	48 89 d0             	mov    rax,rdx
ffffffff80004684:	48 01 c0             	add    rax,rax
ffffffff80004687:	48 01 d0             	add    rax,rdx
ffffffff8000468a:	48 c1 e0 02          	shl    rax,0x2
ffffffff8000468e:	48 01 d0             	add    rax,rdx
ffffffff80004691:	48 c1 e0 03          	shl    rax,0x3
ffffffff80004695:	48 05 40 e8 00 80    	add    rax,0xffffffff8000e840
ffffffff8000469b:	48 8b 40 04          	mov    rax,QWORD PTR [rax+0x4]
ffffffff8000469f:	48 2d 00 40 00 00    	sub    rax,0x4000
ffffffff800046a5:	48 89 c6             	mov    rsi,rax
ffffffff800046a8:	48 c7 c7 90 81 00 80 	mov    rdi,0xffffffff80008190
ffffffff800046af:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800046b4:	e8 b8 f1 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800046b9:	c6 05 25 a1 00 00 00 	mov    BYTE PTR [rip+0xa125],0x0        # ffffffff8000e7e5 <gdt+0x5>
ffffffff800046c0:	66 c7 05 19 a1 00 00 	mov    WORD PTR [rip+0xa119],0x0        # ffffffff8000e7e2 <gdt+0x2>
ffffffff800046c7:	00 00 
ffffffff800046c9:	c6 05 14 a1 00 00 00 	mov    BYTE PTR [rip+0xa114],0x0        # ffffffff8000e7e4 <gdt+0x4>
ffffffff800046d0:	c6 05 10 a1 00 00 00 	mov    BYTE PTR [rip+0xa110],0x0        # ffffffff8000e7e7 <gdt+0x7>
ffffffff800046d7:	0f b6 05 08 a1 00 00 	movzx  eax,BYTE PTR [rip+0xa108]        # ffffffff8000e7e6 <gdt+0x6>
ffffffff800046de:	83 e0 0f             	and    eax,0xf
ffffffff800046e1:	88 05 ff a0 00 00    	mov    BYTE PTR [rip+0xa0ff],al        # ffffffff8000e7e6 <gdt+0x6>
ffffffff800046e7:	66 c7 05 f0 a0 00 00 	mov    WORD PTR [rip+0xa0f0],0x0        # ffffffff8000e7e0 <gdt>
ffffffff800046ee:	00 00 
ffffffff800046f0:	0f b6 05 ef a0 00 00 	movzx  eax,BYTE PTR [rip+0xa0ef]        # ffffffff8000e7e6 <gdt+0x6>
ffffffff800046f7:	83 e0 f0             	and    eax,0xfffffff0
ffffffff800046fa:	88 05 e6 a0 00 00    	mov    BYTE PTR [rip+0xa0e6],al        # ffffffff8000e7e6 <gdt+0x6>
ffffffff80004700:	c6 05 e6 a0 00 00 9a 	mov    BYTE PTR [rip+0xa0e6],0x9a        # ffffffff8000e7ed <gdt+0xd>
ffffffff80004707:	66 c7 05 da a0 00 00 	mov    WORD PTR [rip+0xa0da],0x0        # ffffffff8000e7ea <gdt+0xa>
ffffffff8000470e:	00 00 
ffffffff80004710:	c6 05 d5 a0 00 00 00 	mov    BYTE PTR [rip+0xa0d5],0x0        # ffffffff8000e7ec <gdt+0xc>
ffffffff80004717:	c6 05 d1 a0 00 00 00 	mov    BYTE PTR [rip+0xa0d1],0x0        # ffffffff8000e7ef <gdt+0xf>
ffffffff8000471e:	0f b6 05 c9 a0 00 00 	movzx  eax,BYTE PTR [rip+0xa0c9]        # ffffffff8000e7ee <gdt+0xe>
ffffffff80004725:	83 e0 0f             	and    eax,0xf
ffffffff80004728:	83 c8 a0             	or     eax,0xffffffa0
ffffffff8000472b:	88 05 bd a0 00 00    	mov    BYTE PTR [rip+0xa0bd],al        # ffffffff8000e7ee <gdt+0xe>
ffffffff80004731:	66 c7 05 ae a0 00 00 	mov    WORD PTR [rip+0xa0ae],0xffff        # ffffffff8000e7e8 <gdt+0x8>
ffffffff80004738:	ff ff 
ffffffff8000473a:	0f b6 05 ad a0 00 00 	movzx  eax,BYTE PTR [rip+0xa0ad]        # ffffffff8000e7ee <gdt+0xe>
ffffffff80004741:	83 c8 0f             	or     eax,0xf
ffffffff80004744:	88 05 a4 a0 00 00    	mov    BYTE PTR [rip+0xa0a4],al        # ffffffff8000e7ee <gdt+0xe>
ffffffff8000474a:	c6 05 a4 a0 00 00 92 	mov    BYTE PTR [rip+0xa0a4],0x92        # ffffffff8000e7f5 <gdt+0x15>
ffffffff80004751:	66 c7 05 98 a0 00 00 	mov    WORD PTR [rip+0xa098],0x0        # ffffffff8000e7f2 <gdt+0x12>
ffffffff80004758:	00 00 
ffffffff8000475a:	c6 05 93 a0 00 00 00 	mov    BYTE PTR [rip+0xa093],0x0        # ffffffff8000e7f4 <gdt+0x14>
ffffffff80004761:	c6 05 8f a0 00 00 00 	mov    BYTE PTR [rip+0xa08f],0x0        # ffffffff8000e7f7 <gdt+0x17>
ffffffff80004768:	0f b6 05 87 a0 00 00 	movzx  eax,BYTE PTR [rip+0xa087]        # ffffffff8000e7f6 <gdt+0x16>
ffffffff8000476f:	83 e0 0f             	and    eax,0xf
ffffffff80004772:	83 c8 c0             	or     eax,0xffffffc0
ffffffff80004775:	88 05 7b a0 00 00    	mov    BYTE PTR [rip+0xa07b],al        # ffffffff8000e7f6 <gdt+0x16>
ffffffff8000477b:	66 c7 05 6c a0 00 00 	mov    WORD PTR [rip+0xa06c],0xffff        # ffffffff8000e7f0 <gdt+0x10>
ffffffff80004782:	ff ff 
ffffffff80004784:	0f b6 05 6b a0 00 00 	movzx  eax,BYTE PTR [rip+0xa06b]        # ffffffff8000e7f6 <gdt+0x16>
ffffffff8000478b:	83 c8 0f             	or     eax,0xf
ffffffff8000478e:	88 05 62 a0 00 00    	mov    BYTE PTR [rip+0xa062],al        # ffffffff8000e7f6 <gdt+0x16>
ffffffff80004794:	c6 05 62 a0 00 00 fa 	mov    BYTE PTR [rip+0xa062],0xfa        # ffffffff8000e7fd <gdt+0x1d>
ffffffff8000479b:	66 c7 05 56 a0 00 00 	mov    WORD PTR [rip+0xa056],0x0        # ffffffff8000e7fa <gdt+0x1a>
ffffffff800047a2:	00 00 
ffffffff800047a4:	c6 05 51 a0 00 00 00 	mov    BYTE PTR [rip+0xa051],0x0        # ffffffff8000e7fc <gdt+0x1c>
ffffffff800047ab:	c6 05 4d a0 00 00 00 	mov    BYTE PTR [rip+0xa04d],0x0        # ffffffff8000e7ff <gdt+0x1f>
ffffffff800047b2:	0f b6 05 45 a0 00 00 	movzx  eax,BYTE PTR [rip+0xa045]        # ffffffff8000e7fe <gdt+0x1e>
ffffffff800047b9:	83 e0 0f             	and    eax,0xf
ffffffff800047bc:	83 c8 a0             	or     eax,0xffffffa0
ffffffff800047bf:	88 05 39 a0 00 00    	mov    BYTE PTR [rip+0xa039],al        # ffffffff8000e7fe <gdt+0x1e>
ffffffff800047c5:	66 c7 05 2a a0 00 00 	mov    WORD PTR [rip+0xa02a],0xffff        # ffffffff8000e7f8 <gdt+0x18>
ffffffff800047cc:	ff ff 
ffffffff800047ce:	0f b6 05 29 a0 00 00 	movzx  eax,BYTE PTR [rip+0xa029]        # ffffffff8000e7fe <gdt+0x1e>
ffffffff800047d5:	83 c8 0f             	or     eax,0xf
ffffffff800047d8:	88 05 20 a0 00 00    	mov    BYTE PTR [rip+0xa020],al        # ffffffff8000e7fe <gdt+0x1e>
ffffffff800047de:	c6 05 20 a0 00 00 f2 	mov    BYTE PTR [rip+0xa020],0xf2        # ffffffff8000e805 <gdt+0x25>
ffffffff800047e5:	66 c7 05 14 a0 00 00 	mov    WORD PTR [rip+0xa014],0x0        # ffffffff8000e802 <gdt+0x22>
ffffffff800047ec:	00 00 
ffffffff800047ee:	c6 05 0f a0 00 00 00 	mov    BYTE PTR [rip+0xa00f],0x0        # ffffffff8000e804 <gdt+0x24>
ffffffff800047f5:	c6 05 0b a0 00 00 00 	mov    BYTE PTR [rip+0xa00b],0x0        # ffffffff8000e807 <gdt+0x27>
ffffffff800047fc:	0f b6 05 03 a0 00 00 	movzx  eax,BYTE PTR [rip+0xa003]        # ffffffff8000e806 <gdt+0x26>
ffffffff80004803:	83 e0 0f             	and    eax,0xf
ffffffff80004806:	83 c8 c0             	or     eax,0xffffffc0
ffffffff80004809:	88 05 f7 9f 00 00    	mov    BYTE PTR [rip+0x9ff7],al        # ffffffff8000e806 <gdt+0x26>
ffffffff8000480f:	66 c7 05 e8 9f 00 00 	mov    WORD PTR [rip+0x9fe8],0xffff        # ffffffff8000e800 <gdt+0x20>
ffffffff80004816:	ff ff 
ffffffff80004818:	0f b6 05 e7 9f 00 00 	movzx  eax,BYTE PTR [rip+0x9fe7]        # ffffffff8000e806 <gdt+0x26>
ffffffff8000481f:	83 c8 0f             	or     eax,0xf
ffffffff80004822:	88 05 de 9f 00 00    	mov    BYTE PTR [rip+0x9fde],al        # ffffffff8000e806 <gdt+0x26>
ffffffff80004828:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000482b:	48 63 d0             	movsxd rdx,eax
ffffffff8000482e:	48 89 d0             	mov    rax,rdx
ffffffff80004831:	48 01 c0             	add    rax,rax
ffffffff80004834:	48 01 d0             	add    rax,rdx
ffffffff80004837:	48 c1 e0 02          	shl    rax,0x2
ffffffff8000483b:	48 01 d0             	add    rax,rdx
ffffffff8000483e:	48 c1 e0 03          	shl    rax,0x3
ffffffff80004842:	48 05 40 e8 00 80    	add    rax,0xffffffff8000e840
ffffffff80004848:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000484c:	66 c7 45 f6 68 00    	mov    WORD PTR [rbp-0xa],0x68
ffffffff80004852:	c6 05 b4 9f 00 00 89 	mov    BYTE PTR [rip+0x9fb4],0x89        # ffffffff8000e80d <gdt+0x2d>
ffffffff80004859:	0f b6 05 ae 9f 00 00 	movzx  eax,BYTE PTR [rip+0x9fae]        # ffffffff8000e80e <gdt+0x2e>
ffffffff80004860:	83 e0 0f             	and    eax,0xf
ffffffff80004863:	88 05 a5 9f 00 00    	mov    BYTE PTR [rip+0x9fa5],al        # ffffffff8000e80e <gdt+0x2e>
ffffffff80004869:	c7 05 a1 9f 00 00 00 	mov    DWORD PTR [rip+0x9fa1],0x0        # ffffffff8000e814 <gdt+0x34>
ffffffff80004870:	00 00 00 
ffffffff80004873:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004877:	66 89 05 8c 9f 00 00 	mov    WORD PTR [rip+0x9f8c],ax        # ffffffff8000e80a <gdt+0x2a>
ffffffff8000487e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004882:	48 c1 e8 10          	shr    rax,0x10
ffffffff80004886:	88 05 80 9f 00 00    	mov    BYTE PTR [rip+0x9f80],al        # ffffffff8000e80c <gdt+0x2c>
ffffffff8000488c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004890:	48 c1 e8 18          	shr    rax,0x18
ffffffff80004894:	88 05 75 9f 00 00    	mov    BYTE PTR [rip+0x9f75],al        # ffffffff8000e80f <gdt+0x2f>
ffffffff8000489a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000489e:	48 c1 e8 20          	shr    rax,0x20
ffffffff800048a2:	89 05 68 9f 00 00    	mov    DWORD PTR [rip+0x9f68],eax        # ffffffff8000e810 <gdt+0x30>
ffffffff800048a8:	0f b7 45 f6          	movzx  eax,WORD PTR [rbp-0xa]
ffffffff800048ac:	66 89 05 55 9f 00 00 	mov    WORD PTR [rip+0x9f55],ax        # ffffffff8000e808 <gdt+0x28>
ffffffff800048b3:	0f b6 05 54 9f 00 00 	movzx  eax,BYTE PTR [rip+0x9f54]        # ffffffff8000e80e <gdt+0x2e>
ffffffff800048ba:	83 e0 f0             	and    eax,0xfffffff0
ffffffff800048bd:	88 05 4b 9f 00 00    	mov    BYTE PTR [rip+0x9f4b],al        # ffffffff8000e80e <gdt+0x2e>
ffffffff800048c3:	48 c7 c0 e0 e7 00 80 	mov    rax,0xffffffff8000e7e0
ffffffff800048ca:	48 89 05 49 9f 00 00 	mov    QWORD PTR [rip+0x9f49],rax        # ffffffff8000e81a <gdtr+0x2>
ffffffff800048d1:	66 c7 05 3e 9f 00 00 	mov    WORD PTR [rip+0x9f3e],0x37        # ffffffff8000e818 <gdtr>
ffffffff800048d8:	37 00 
ffffffff800048da:	48 c7 c0 18 e8 00 80 	mov    rax,0xffffffff8000e818
ffffffff800048e1:	48 89 c7             	mov    rdi,rax
ffffffff800048e4:	e8 d7 1e 00 00       	call   ffffffff800067c0 <LoadGdt>
ffffffff800048e9:	b8 28 00 00 00       	mov    eax,0x28
ffffffff800048ee:	0f 00 d8             	ltr    ax
ffffffff800048f1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800048f4:	48 63 d0             	movsxd rdx,eax
ffffffff800048f7:	48 89 d0             	mov    rax,rdx
ffffffff800048fa:	48 01 c0             	add    rax,rax
ffffffff800048fd:	48 01 d0             	add    rax,rdx
ffffffff80004900:	48 c1 e0 02          	shl    rax,0x2
ffffffff80004904:	48 01 d0             	add    rax,rdx
ffffffff80004907:	48 c1 e0 03          	shl    rax,0x3
ffffffff8000490b:	48 8d 88 40 e8 00 80 	lea    rcx,[rax-0x7fff17c0]
ffffffff80004912:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80004915:	48 63 d0             	movsxd rdx,eax
ffffffff80004918:	48 89 d0             	mov    rax,rdx
ffffffff8000491b:	48 01 c0             	add    rax,rax
ffffffff8000491e:	48 01 d0             	add    rax,rdx
ffffffff80004921:	48 c1 e0 04          	shl    rax,0x4
ffffffff80004925:	48 05 c0 b7 00 80    	add    rax,0xffffffff8000b7c0
ffffffff8000492b:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff8000492e:	48 c7 c7 c0 e7 00 80 	mov    rdi,0xffffffff8000e7c0
ffffffff80004935:	e8 e4 f0 ff ff       	call   ffffffff80003a1e <spinlock::unlock()>
ffffffff8000493a:	90                   	nop
ffffffff8000493b:	c9                   	leave  
ffffffff8000493c:	c3                   	ret    

ffffffff8000493d <__static_initialization_and_destruction_0(int, int)>:
ffffffff8000493d:	f3 0f 1e fa          	endbr64 
ffffffff80004941:	55                   	push   rbp
ffffffff80004942:	48 89 e5             	mov    rbp,rsp
ffffffff80004945:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004949:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff8000494c:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff8000494f:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80004953:	75 15                	jne    ffffffff8000496a <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80004955:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff8000495c:	75 0c                	jne    ffffffff8000496a <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff8000495e:	48 c7 c7 c0 e7 00 80 	mov    rdi,0xffffffff8000e7c0
ffffffff80004965:	e8 5e f0 ff ff       	call   ffffffff800039c8 <spinlock::spinlock()>
ffffffff8000496a:	90                   	nop
ffffffff8000496b:	c9                   	leave  
ffffffff8000496c:	c3                   	ret    

ffffffff8000496d <_GLOBAL__sub_I_stack_size>:
ffffffff8000496d:	f3 0f 1e fa          	endbr64 
ffffffff80004971:	55                   	push   rbp
ffffffff80004972:	48 89 e5             	mov    rbp,rsp
ffffffff80004975:	be ff ff 00 00       	mov    esi,0xffff
ffffffff8000497a:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000497f:	e8 b9 ff ff ff       	call   ffffffff8000493d <__static_initialization_and_destruction_0(int, int)>
ffffffff80004984:	5d                   	pop    rbp
ffffffff80004985:	c3                   	ret    

ffffffff80004986 <strncmp(char const*, char const*, unsigned long)>:
ffffffff80004986:	55                   	push   rbp
ffffffff80004987:	48 89 e5             	mov    rbp,rsp
ffffffff8000498a:	48 83 ec 28          	sub    rsp,0x28
ffffffff8000498e:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004992:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80004996:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff8000499a:	eb 46                	jmp    ffffffff800049e2 <strncmp(char const*, char const*, unsigned long)+0x5c>
ffffffff8000499c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800049a0:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800049a4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff800049a8:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800049ab:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff800049ae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800049b2:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800049b6:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff800049ba:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800049bd:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
ffffffff800049c0:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff800049c4:	3a 45 fe             	cmp    al,BYTE PTR [rbp-0x2]
ffffffff800049c7:	74 0c                	je     ffffffff800049d5 <strncmp(char const*, char const*, unsigned long)+0x4f>
ffffffff800049c9:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff800049cd:	0f b6 55 fe          	movzx  edx,BYTE PTR [rbp-0x2]
ffffffff800049d1:	29 d0                	sub    eax,edx
ffffffff800049d3:	eb 28                	jmp    ffffffff800049fd <strncmp(char const*, char const*, unsigned long)+0x77>
ffffffff800049d5:	80 7d ff 00          	cmp    BYTE PTR [rbp-0x1],0x0
ffffffff800049d9:	75 07                	jne    ffffffff800049e2 <strncmp(char const*, char const*, unsigned long)+0x5c>
ffffffff800049db:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800049e0:	eb 1b                	jmp    ffffffff800049fd <strncmp(char const*, char const*, unsigned long)+0x77>
ffffffff800049e2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800049e6:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff800049ea:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800049ee:	48 85 c0             	test   rax,rax
ffffffff800049f1:	0f 95 c0             	setne  al
ffffffff800049f4:	84 c0                	test   al,al
ffffffff800049f6:	75 a4                	jne    ffffffff8000499c <strncmp(char const*, char const*, unsigned long)+0x16>
ffffffff800049f8:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800049fd:	c9                   	leave  
ffffffff800049fe:	c3                   	ret    

ffffffff800049ff <ACPI::FindTable(char const*)>:
ffffffff800049ff:	f3 0f 1e fa          	endbr64 
ffffffff80004a03:	55                   	push   rbp
ffffffff80004a04:	48 89 e5             	mov    rbp,rsp
ffffffff80004a07:	48 83 ec 18          	sub    rsp,0x18
ffffffff80004a0b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004a0f:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80004a16:	00 
ffffffff80004a17:	eb 53                	jmp    ffffffff80004a6c <ACPI::FindTable(char const*)+0x6d>
ffffffff80004a19:	48 8b 05 20 06 01 00 	mov    rax,QWORD PTR [rip+0x10620]        # ffffffff80015040 <rsdt>
ffffffff80004a20:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80004a24:	48 83 c2 08          	add    rdx,0x8
ffffffff80004a28:	8b 44 90 04          	mov    eax,DWORD PTR [rax+rdx*4+0x4]
ffffffff80004a2c:	89 c2                	mov    edx,eax
ffffffff80004a2e:	48 8b 05 b3 4a 00 00 	mov    rax,QWORD PTR [rip+0x4ab3]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004a35:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004a39:	48 01 d0             	add    rax,rdx
ffffffff80004a3c:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80004a40:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004a44:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80004a48:	ba 04 00 00 00       	mov    edx,0x4
ffffffff80004a4d:	48 89 ce             	mov    rsi,rcx
ffffffff80004a50:	48 89 c7             	mov    rdi,rax
ffffffff80004a53:	e8 2e ff ff ff       	call   ffffffff80004986 <strncmp(char const*, char const*, unsigned long)>
ffffffff80004a58:	85 c0                	test   eax,eax
ffffffff80004a5a:	0f 94 c0             	sete   al
ffffffff80004a5d:	84 c0                	test   al,al
ffffffff80004a5f:	74 06                	je     ffffffff80004a67 <ACPI::FindTable(char const*)+0x68>
ffffffff80004a61:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004a65:	eb 24                	jmp    ffffffff80004a8b <ACPI::FindTable(char const*)+0x8c>
ffffffff80004a67:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80004a6c:	48 8b 05 cd 05 01 00 	mov    rax,QWORD PTR [rip+0x105cd]        # ffffffff80015040 <rsdt>
ffffffff80004a73:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff80004a76:	89 c0                	mov    eax,eax
ffffffff80004a78:	48 83 e8 24          	sub    rax,0x24
ffffffff80004a7c:	48 c1 e8 02          	shr    rax,0x2
ffffffff80004a80:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80004a84:	72 93                	jb     ffffffff80004a19 <ACPI::FindTable(char const*)+0x1a>
ffffffff80004a86:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004a8b:	c9                   	leave  
ffffffff80004a8c:	c3                   	ret    

ffffffff80004a8d <ParseAPIC()>:
ffffffff80004a8d:	f3 0f 1e fa          	endbr64 
ffffffff80004a91:	55                   	push   rbp
ffffffff80004a92:	48 89 e5             	mov    rbp,rsp
ffffffff80004a95:	48 83 ec 30          	sub    rsp,0x30
ffffffff80004a99:	48 c7 c7 b8 81 00 80 	mov    rdi,0xffffffff800081b8
ffffffff80004aa0:	e8 5a ff ff ff       	call   ffffffff800049ff <ACPI::FindTable(char const*)>
ffffffff80004aa5:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80004aa9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004aad:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80004ab1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80004ab6:	75 16                	jne    ffffffff80004ace <ParseAPIC()+0x41>
ffffffff80004ab8:	48 c7 c7 bd 81 00 80 	mov    rdi,0xffffffff800081bd
ffffffff80004abf:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004ac4:	e8 a8 ed ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004ac9:	e9 6b 01 00 00       	jmp    ffffffff80004c39 <ParseAPIC()+0x1ac>
ffffffff80004ace:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004ad2:	48 83 c0 24          	add    rax,0x24
ffffffff80004ad6:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004ad8:	89 05 6a 05 01 00    	mov    DWORD PTR [rip+0x1056a],eax        # ffffffff80015048 <lapic_addr>
ffffffff80004ade:	48 c7 45 f8 2c 00 00 	mov    QWORD PTR [rbp-0x8],0x2c
ffffffff80004ae5:	00 
ffffffff80004ae6:	e9 3b 01 00 00       	jmp    ffffffff80004c26 <ParseAPIC()+0x199>
ffffffff80004aeb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004aef:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004af3:	48 01 d0             	add    rax,rdx
ffffffff80004af6:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004af9:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
ffffffff80004afc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004b00:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004b04:	48 01 d0             	add    rax,rdx
ffffffff80004b07:	48 83 c0 01          	add    rax,0x1
ffffffff80004b0b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004b0e:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
ffffffff80004b11:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffffffff80004b15:	83 f8 02             	cmp    eax,0x2
ffffffff80004b18:	0f 84 9a 00 00 00    	je     ffffffff80004bb8 <ParseAPIC()+0x12b>
ffffffff80004b1e:	83 f8 02             	cmp    eax,0x2
ffffffff80004b21:	0f 8f f7 00 00 00    	jg     ffffffff80004c1e <ParseAPIC()+0x191>
ffffffff80004b27:	85 c0                	test   eax,eax
ffffffff80004b29:	74 0a                	je     ffffffff80004b35 <ParseAPIC()+0xa8>
ffffffff80004b2b:	83 f8 01             	cmp    eax,0x1
ffffffff80004b2e:	74 49                	je     ffffffff80004b79 <ParseAPIC()+0xec>
ffffffff80004b30:	e9 e9 00 00 00       	jmp    ffffffff80004c1e <ParseAPIC()+0x191>
ffffffff80004b35:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004b39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004b3d:	48 01 d0             	add    rax,rdx
ffffffff80004b40:	48 83 c0 02          	add    rax,0x2
ffffffff80004b44:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004b47:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
ffffffff80004b4a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004b4e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004b52:	48 01 d0             	add    rax,rdx
ffffffff80004b55:	48 83 c0 03          	add    rax,0x3
ffffffff80004b59:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004b5c:	88 45 d2             	mov    BYTE PTR [rbp-0x2e],al
ffffffff80004b5f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004b63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004b67:	48 01 d0             	add    rax,rdx
ffffffff80004b6a:	48 83 c0 04          	add    rax,0x4
ffffffff80004b6e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004b71:	88 45 d1             	mov    BYTE PTR [rbp-0x2f],al
ffffffff80004b74:	e9 a5 00 00 00       	jmp    ffffffff80004c1e <ParseAPIC()+0x191>
ffffffff80004b79:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004b7d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004b81:	48 01 d0             	add    rax,rdx
ffffffff80004b84:	48 83 c0 02          	add    rax,0x2
ffffffff80004b88:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004b8b:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff80004b8e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004b92:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004b96:	48 01 d0             	add    rax,rdx
ffffffff80004b99:	48 83 c0 04          	add    rax,0x4
ffffffff80004b9d:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004b9f:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff80004ba2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004ba6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004baa:	48 01 d0             	add    rax,rdx
ffffffff80004bad:	48 83 c0 08          	add    rax,0x8
ffffffff80004bb1:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004bb3:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffffffff80004bb6:	eb 66                	jmp    ffffffff80004c1e <ParseAPIC()+0x191>
ffffffff80004bb8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004bbc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004bc0:	48 01 d0             	add    rax,rdx
ffffffff80004bc3:	48 83 c0 02          	add    rax,0x2
ffffffff80004bc7:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004bca:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
ffffffff80004bcd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004bd1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004bd5:	48 01 d0             	add    rax,rdx
ffffffff80004bd8:	48 83 c0 03          	add    rax,0x3
ffffffff80004bdc:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004bdf:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff80004be2:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004be6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004bea:	48 01 d0             	add    rax,rdx
ffffffff80004bed:	48 83 c0 04          	add    rax,0x4
ffffffff80004bf1:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004bf3:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80004bf6:	48 8b 05 63 0c 01 00 	mov    rax,QWORD PTR [rip+0x10c63]        # ffffffff80015860 <numGSIs>
ffffffff80004bfd:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80004c01:	48 89 15 58 0c 01 00 	mov    QWORD PTR [rip+0x10c58],rdx        # ffffffff80015860 <numGSIs>
ffffffff80004c08:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffffffff80004c0c:	88 14 c5 60 50 01 80 	mov    BYTE PTR [rax*8-0x7ffeafa0],dl
ffffffff80004c13:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffffffff80004c16:	89 14 c5 64 50 01 80 	mov    DWORD PTR [rax*8-0x7ffeaf9c],edx
ffffffff80004c1d:	90                   	nop
ffffffff80004c1e:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffffffff80004c22:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
ffffffff80004c26:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004c2a:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff80004c2d:	89 c0                	mov    eax,eax
ffffffff80004c2f:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80004c33:	0f 82 b2 fe ff ff    	jb     ffffffff80004aeb <ParseAPIC()+0x5e>
ffffffff80004c39:	c9                   	leave  
ffffffff80004c3a:	c3                   	ret    

ffffffff80004c3b <ACPI::ParseTables()>:
ffffffff80004c3b:	f3 0f 1e fa          	endbr64 
ffffffff80004c3f:	55                   	push   rbp
ffffffff80004c40:	48 89 e5             	mov    rbp,rsp
ffffffff80004c43:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004c47:	48 8b 05 da 4e 00 00 	mov    rax,QWORD PTR [rip+0x4eda]        # ffffffff80009b28 <rsdp+0x28>
ffffffff80004c4e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004c52:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80004c56:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004c5a:	48 89 c6             	mov    rsi,rax
ffffffff80004c5d:	48 c7 c7 db 81 00 80 	mov    rdi,0xffffffff800081db
ffffffff80004c64:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004c69:	e8 03 ec ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004c6e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004c72:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80004c76:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004c7a:	ba 08 00 00 00       	mov    edx,0x8
ffffffff80004c7f:	48 c7 c6 ec 81 00 80 	mov    rsi,0xffffffff800081ec
ffffffff80004c86:	48 89 c7             	mov    rdi,rax
ffffffff80004c89:	e8 f8 fc ff ff       	call   ffffffff80004986 <strncmp(char const*, char const*, unsigned long)>
ffffffff80004c8e:	85 c0                	test   eax,eax
ffffffff80004c90:	0f 95 c0             	setne  al
ffffffff80004c93:	84 c0                	test   al,al
ffffffff80004c95:	74 16                	je     ffffffff80004cad <ACPI::ParseTables()+0x72>
ffffffff80004c97:	48 c7 c7 f8 81 00 80 	mov    rdi,0xffffffff800081f8
ffffffff80004c9e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004ca3:	e8 c9 eb ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004ca8:	e8 bf c3 ff ff       	call   ffffffff8000106c <Utils::HaltCatchFire()>
ffffffff80004cad:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004cb1:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffffffff80004cb4:	89 c2                	mov    edx,eax
ffffffff80004cb6:	48 8b 05 2b 48 00 00 	mov    rax,QWORD PTR [rip+0x482b]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004cbd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004cc1:	48 01 d0             	add    rax,rdx
ffffffff80004cc4:	48 89 05 75 03 01 00 	mov    QWORD PTR [rip+0x10375],rax        # ffffffff80015040 <rsdt>
ffffffff80004ccb:	e8 bd fd ff ff       	call   ffffffff80004a8d <ParseAPIC()>
ffffffff80004cd0:	90                   	nop
ffffffff80004cd1:	c9                   	leave  
ffffffff80004cd2:	c3                   	ret    

ffffffff80004cd3 <Utils::wrmsr(unsigned long, unsigned long)>:
ffffffff80004cd3:	55                   	push   rbp
ffffffff80004cd4:	48 89 e5             	mov    rbp,rsp
ffffffff80004cd7:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004cdb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004cdf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80004ce3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004ce7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80004cea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004cee:	48 c1 e8 20          	shr    rax,0x20
ffffffff80004cf2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80004cf5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80004cf9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004cfc:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80004cff:	0f 30                	wrmsr  
ffffffff80004d01:	90                   	nop
ffffffff80004d02:	c9                   	leave  
ffffffff80004d03:	c3                   	ret    

ffffffff80004d04 <Utils::rdmsr(unsigned long)>:
ffffffff80004d04:	55                   	push   rbp
ffffffff80004d05:	48 89 e5             	mov    rbp,rsp
ffffffff80004d08:	48 83 ec 18          	sub    rsp,0x18
ffffffff80004d0c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004d10:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004d14:	48 89 c1             	mov    rcx,rax
ffffffff80004d17:	0f 32                	rdmsr  
ffffffff80004d19:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80004d1c:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
ffffffff80004d1f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80004d22:	48 c1 e0 20          	shl    rax,0x20
ffffffff80004d26:	48 89 c2             	mov    rdx,rax
ffffffff80004d29:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004d2c:	48 09 d0             	or     rax,rdx
ffffffff80004d2f:	c9                   	leave  
ffffffff80004d30:	c3                   	ret    

ffffffff80004d31 <LAPIC::Initialize()>:
ffffffff80004d31:	f3 0f 1e fa          	endbr64 
ffffffff80004d35:	55                   	push   rbp
ffffffff80004d36:	48 89 e5             	mov    rbp,rsp
ffffffff80004d39:	bf 1b 00 00 00       	mov    edi,0x1b
ffffffff80004d3e:	e8 c1 ff ff ff       	call   ffffffff80004d04 <Utils::rdmsr(unsigned long)>
ffffffff80004d43:	80 cc 08             	or     ah,0x8
ffffffff80004d46:	48 89 c6             	mov    rsi,rax
ffffffff80004d49:	bf 1b 00 00 00       	mov    edi,0x1b
ffffffff80004d4e:	e8 80 ff ff ff       	call   ffffffff80004cd3 <Utils::wrmsr(unsigned long, unsigned long)>
ffffffff80004d53:	be ff 01 00 00       	mov    esi,0x1ff
ffffffff80004d58:	bf f0 00 00 00       	mov    edi,0xf0
ffffffff80004d5d:	e8 d9 00 00 00       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004d62:	90                   	nop
ffffffff80004d63:	5d                   	pop    rbp
ffffffff80004d64:	c3                   	ret    

ffffffff80004d65 <HandleTick(SavedRegs*)>:
ffffffff80004d65:	f3 0f 1e fa          	endbr64 
ffffffff80004d69:	55                   	push   rbp
ffffffff80004d6a:	48 89 e5             	mov    rbp,rsp
ffffffff80004d6d:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004d71:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80004d75:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004d79:	48 89 c7             	mov    rdi,rax
ffffffff80004d7c:	e8 1d f0 ff ff       	call   ffffffff80003d9e <Scheduler::Schedule(SavedRegs*)>
ffffffff80004d81:	e8 1b 01 00 00       	call   ffffffff80004ea1 <LAPIC::EOI()>
ffffffff80004d86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004d8a:	c9                   	leave  
ffffffff80004d8b:	c3                   	ret    

ffffffff80004d8c <LAPIC::InitTimer(bool)>:
ffffffff80004d8c:	f3 0f 1e fa          	endbr64 
ffffffff80004d90:	55                   	push   rbp
ffffffff80004d91:	48 89 e5             	mov    rbp,rsp
ffffffff80004d94:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004d98:	89 f8                	mov    eax,edi
ffffffff80004d9a:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
ffffffff80004d9d:	be 03 00 00 00       	mov    esi,0x3
ffffffff80004da2:	bf e0 03 00 00       	mov    edi,0x3e0
ffffffff80004da7:	e8 8f 00 00 00       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004dac:	be ff ff ff ff       	mov    esi,0xffffffff
ffffffff80004db1:	bf 80 03 00 00       	mov    edi,0x380
ffffffff80004db6:	e8 80 00 00 00       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004dbb:	bf 0a 00 00 00       	mov    edi,0xa
ffffffff80004dc0:	e8 b1 ed ff ff       	call   ffffffff80003b76 <msleep(unsigned long)>
ffffffff80004dc5:	be 00 00 01 00       	mov    esi,0x10000
ffffffff80004dca:	bf 20 03 00 00       	mov    edi,0x320
ffffffff80004dcf:	e8 67 00 00 00       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004dd4:	bf 90 03 00 00       	mov    edi,0x390
ffffffff80004dd9:	e8 95 00 00 00       	call   ffffffff80004e73 <LAPIC::ReadReg(unsigned int)>
ffffffff80004dde:	f7 d0                	not    eax
ffffffff80004de0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80004de3:	be 20 00 02 00       	mov    esi,0x20020
ffffffff80004de8:	bf 20 03 00 00       	mov    edi,0x320
ffffffff80004ded:	e8 49 00 00 00       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004df2:	be 03 00 00 00       	mov    esi,0x3
ffffffff80004df7:	bf e0 03 00 00       	mov    edi,0x3e0
ffffffff80004dfc:	e8 3a 00 00 00       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004e01:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004e04:	89 c6                	mov    esi,eax
ffffffff80004e06:	bf 80 03 00 00       	mov    edi,0x380
ffffffff80004e0b:	e8 2b 00 00 00       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004e10:	80 7d ec 00          	cmp    BYTE PTR [rbp-0x14],0x0
ffffffff80004e14:	74 11                	je     ffffffff80004e27 <LAPIC::InitTimer(bool)+0x9b>
ffffffff80004e16:	48 c7 c6 65 4d 00 80 	mov    rsi,0xffffffff80004d65
ffffffff80004e1d:	bf 20 00 00 00       	mov    edi,0x20
ffffffff80004e22:	e8 5a e2 ff ff       	call   ffffffff80003081 <IDT::AddHandler(int, SavedRegs* (*)(SavedRegs*))>
ffffffff80004e27:	48 c7 c7 20 82 00 80 	mov    rdi,0xffffffff80008220
ffffffff80004e2e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004e33:	e8 39 ea ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004e38:	90                   	nop
ffffffff80004e39:	c9                   	leave  
ffffffff80004e3a:	c3                   	ret    

ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>:
ffffffff80004e3b:	f3 0f 1e fa          	endbr64 
ffffffff80004e3f:	55                   	push   rbp
ffffffff80004e40:	48 89 e5             	mov    rbp,rsp
ffffffff80004e43:	48 83 ec 08          	sub    rsp,0x8
ffffffff80004e47:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80004e4a:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80004e4d:	48 8b 05 94 46 00 00 	mov    rax,QWORD PTR [rip+0x4694]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004e54:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004e58:	48 8b 05 e9 01 01 00 	mov    rax,QWORD PTR [rip+0x101e9]        # ffffffff80015048 <lapic_addr>
ffffffff80004e5f:	48 01 c2             	add    rdx,rax
ffffffff80004e62:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004e65:	48 01 d0             	add    rax,rdx
ffffffff80004e68:	48 89 c2             	mov    rdx,rax
ffffffff80004e6b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80004e6e:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80004e70:	90                   	nop
ffffffff80004e71:	c9                   	leave  
ffffffff80004e72:	c3                   	ret    

ffffffff80004e73 <LAPIC::ReadReg(unsigned int)>:
ffffffff80004e73:	f3 0f 1e fa          	endbr64 
ffffffff80004e77:	55                   	push   rbp
ffffffff80004e78:	48 89 e5             	mov    rbp,rsp
ffffffff80004e7b:	48 83 ec 08          	sub    rsp,0x8
ffffffff80004e7f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80004e82:	48 8b 05 5f 46 00 00 	mov    rax,QWORD PTR [rip+0x465f]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004e89:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004e8d:	48 8b 05 b4 01 01 00 	mov    rax,QWORD PTR [rip+0x101b4]        # ffffffff80015048 <lapic_addr>
ffffffff80004e94:	48 01 c2             	add    rdx,rax
ffffffff80004e97:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004e9a:	48 01 d0             	add    rax,rdx
ffffffff80004e9d:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004e9f:	c9                   	leave  
ffffffff80004ea0:	c3                   	ret    

ffffffff80004ea1 <LAPIC::EOI()>:
ffffffff80004ea1:	f3 0f 1e fa          	endbr64 
ffffffff80004ea5:	55                   	push   rbp
ffffffff80004ea6:	48 89 e5             	mov    rbp,rsp
ffffffff80004ea9:	be 00 00 00 00       	mov    esi,0x0
ffffffff80004eae:	bf b0 00 00 00       	mov    edi,0xb0
ffffffff80004eb3:	e8 83 ff ff ff       	call   ffffffff80004e3b <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004eb8:	90                   	nop
ffffffff80004eb9:	5d                   	pop    rbp
ffffffff80004eba:	c3                   	ret    

ffffffff80004ebb <IOAPIC::ReadReg(unsigned int)>:
ffffffff80004ebb:	f3 0f 1e fa          	endbr64 
ffffffff80004ebf:	55                   	push   rbp
ffffffff80004ec0:	48 89 e5             	mov    rbp,rsp
ffffffff80004ec3:	48 83 ec 08          	sub    rsp,0x8
ffffffff80004ec7:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80004eca:	48 8b 05 17 46 00 00 	mov    rax,QWORD PTR [rip+0x4617]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004ed1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004ed5:	ba 00 00 c0 fe       	mov    edx,0xfec00000
ffffffff80004eda:	48 01 d0             	add    rax,rdx
ffffffff80004edd:	48 89 c2             	mov    rdx,rax
ffffffff80004ee0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004ee3:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80004ee5:	48 8b 05 fc 45 00 00 	mov    rax,QWORD PTR [rip+0x45fc]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004eec:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004ef0:	ba 10 00 c0 fe       	mov    edx,0xfec00010
ffffffff80004ef5:	48 01 d0             	add    rax,rdx
ffffffff80004ef8:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004efa:	c9                   	leave  
ffffffff80004efb:	c3                   	ret    

ffffffff80004efc <IOAPIC::WriteReg(unsigned int, unsigned int)>:
ffffffff80004efc:	f3 0f 1e fa          	endbr64 
ffffffff80004f00:	55                   	push   rbp
ffffffff80004f01:	48 89 e5             	mov    rbp,rsp
ffffffff80004f04:	48 83 ec 08          	sub    rsp,0x8
ffffffff80004f08:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80004f0b:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80004f0e:	48 8b 05 d3 45 00 00 	mov    rax,QWORD PTR [rip+0x45d3]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004f15:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004f19:	ba 00 00 c0 fe       	mov    edx,0xfec00000
ffffffff80004f1e:	48 01 d0             	add    rax,rdx
ffffffff80004f21:	48 89 c2             	mov    rdx,rax
ffffffff80004f24:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004f27:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80004f29:	48 8b 05 b8 45 00 00 	mov    rax,QWORD PTR [rip+0x45b8]        # ffffffff800094e8 <hhdm_req+0x28>
ffffffff80004f30:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004f34:	ba 10 00 c0 fe       	mov    edx,0xfec00010
ffffffff80004f39:	48 01 d0             	add    rax,rdx
ffffffff80004f3c:	48 89 c2             	mov    rdx,rax
ffffffff80004f3f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80004f42:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80004f44:	90                   	nop
ffffffff80004f45:	c9                   	leave  
ffffffff80004f46:	c3                   	ret    

ffffffff80004f47 <RedirectGSI(unsigned int, unsigned char)>:
ffffffff80004f47:	f3 0f 1e fa          	endbr64 
ffffffff80004f4b:	55                   	push   rbp
ffffffff80004f4c:	48 89 e5             	mov    rbp,rsp
ffffffff80004f4f:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004f53:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80004f56:	89 f0                	mov    eax,esi
ffffffff80004f58:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
ffffffff80004f5b:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
ffffffff80004f5f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80004f62:	89 c6                	mov    esi,eax
ffffffff80004f64:	48 c7 c7 39 82 00 80 	mov    rdi,0xffffffff80008239
ffffffff80004f6b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004f70:	e8 fc e8 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80004f75:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80004f78:	83 c0 08             	add    eax,0x8
ffffffff80004f7b:	01 c0                	add    eax,eax
ffffffff80004f7d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80004f80:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004f83:	83 c0 01             	add    eax,0x1
ffffffff80004f86:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80004f89:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80004f8c:	89 c7                	mov    edi,eax
ffffffff80004f8e:	e8 28 ff ff ff       	call   ffffffff80004ebb <IOAPIC::ReadReg(unsigned int)>
ffffffff80004f93:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
ffffffff80004f96:	81 65 f4 ff ff ff 00 	and    DWORD PTR [rbp-0xc],0xffffff
ffffffff80004f9d:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80004fa2:	e8 14 ff ff ff       	call   ffffffff80004ebb <IOAPIC::ReadReg(unsigned int)>
ffffffff80004fa7:	c1 e0 18             	shl    eax,0x18
ffffffff80004faa:	09 45 f4             	or     DWORD PTR [rbp-0xc],eax
ffffffff80004fad:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80004fb0:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80004fb3:	89 d6                	mov    esi,edx
ffffffff80004fb5:	89 c7                	mov    edi,eax
ffffffff80004fb7:	e8 40 ff ff ff       	call   ffffffff80004efc <IOAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004fbc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004fbf:	89 c7                	mov    edi,eax
ffffffff80004fc1:	e8 f5 fe ff ff       	call   ffffffff80004ebb <IOAPIC::ReadReg(unsigned int)>
ffffffff80004fc6:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff80004fc9:	81 65 f0 ff ff fe ff 	and    DWORD PTR [rbp-0x10],0xfffeffff
ffffffff80004fd0:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [rbp-0x10],0xfffff7ff
ffffffff80004fd7:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [rbp-0x10],0xfffff8ff
ffffffff80004fde:	81 65 f0 00 ff ff ff 	and    DWORD PTR [rbp-0x10],0xffffff00
ffffffff80004fe5:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
ffffffff80004fe9:	09 45 f0             	or     DWORD PTR [rbp-0x10],eax
ffffffff80004fec:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffffffff80004fef:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004ff2:	89 d6                	mov    esi,edx
ffffffff80004ff4:	89 c7                	mov    edi,eax
ffffffff80004ff6:	e8 01 ff ff ff       	call   ffffffff80004efc <IOAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80004ffb:	90                   	nop
ffffffff80004ffc:	c9                   	leave  
ffffffff80004ffd:	c3                   	ret    

ffffffff80004ffe <IOAPIC::Initialize()>:
ffffffff80004ffe:	f3 0f 1e fa          	endbr64 
ffffffff80005002:	55                   	push   rbp
ffffffff80005003:	48 89 e5             	mov    rbp,rsp
ffffffff80005006:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000500a:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80005011:	00 
ffffffff80005012:	eb 28                	jmp    ffffffff8000503c <IOAPIC::Initialize()+0x3e>
ffffffff80005014:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005018:	0f b6 04 c5 60 50 01 	movzx  eax,BYTE PTR [rax*8-0x7ffeafa0]
ffffffff8000501f:	80 
ffffffff80005020:	0f b6 d0             	movzx  edx,al
ffffffff80005023:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005027:	8b 04 c5 64 50 01 80 	mov    eax,DWORD PTR [rax*8-0x7ffeaf9c]
ffffffff8000502e:	89 d6                	mov    esi,edx
ffffffff80005030:	89 c7                	mov    edi,eax
ffffffff80005032:	e8 10 ff ff ff       	call   ffffffff80004f47 <RedirectGSI(unsigned int, unsigned char)>
ffffffff80005037:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff8000503c:	48 8b 05 1d 08 01 00 	mov    rax,QWORD PTR [rip+0x1081d]        # ffffffff80015860 <numGSIs>
ffffffff80005043:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80005047:	72 cb                	jb     ffffffff80005014 <IOAPIC::Initialize()+0x16>
ffffffff80005049:	90                   	nop
ffffffff8000504a:	90                   	nop
ffffffff8000504b:	c9                   	leave  
ffffffff8000504c:	c3                   	ret    

ffffffff8000504d <Utils::wrmsr(unsigned long, unsigned long)>:
ffffffff8000504d:	55                   	push   rbp
ffffffff8000504e:	48 89 e5             	mov    rbp,rsp
ffffffff80005051:	48 83 ec 20          	sub    rsp,0x20
ffffffff80005055:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80005059:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff8000505d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80005061:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80005064:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80005068:	48 c1 e8 20          	shr    rax,0x20
ffffffff8000506c:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000506f:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80005073:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005076:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80005079:	0f 30                	wrmsr  
ffffffff8000507b:	90                   	nop
ffffffff8000507c:	c9                   	leave  
ffffffff8000507d:	c3                   	ret    

ffffffff8000507e <start_ap(limine_smp_info*)>:
ffffffff8000507e:	f3 0f 1e fa          	endbr64 
ffffffff80005082:	55                   	push   rbp
ffffffff80005083:	48 89 e5             	mov    rbp,rsp
ffffffff80005086:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000508a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000508e:	48 c7 c7 80 98 01 80 	mov    rdi,0xffffffff80019880
ffffffff80005095:	e8 52 e9 ff ff       	call   ffffffff800039ec <spinlock::lock()>
ffffffff8000509a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000509e:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800050a0:	89 c7                	mov    edi,eax
ffffffff800050a2:	e8 4e f5 ff ff       	call   ffffffff800045f5 <GDT::SetupGdt(int)>
ffffffff800050a7:	e8 59 df ff ff       	call   ffffffff80003005 <IDT::Initialize()>
ffffffff800050ac:	e8 f9 c5 ff ff       	call   ffffffff800016aa <VirtualMemory::SwapToKernelPT()>
ffffffff800050b1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800050b5:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800050b7:	89 c2                	mov    edx,eax
ffffffff800050b9:	48 89 d0             	mov    rax,rdx
ffffffff800050bc:	48 01 c0             	add    rax,rax
ffffffff800050bf:	48 01 d0             	add    rax,rdx
ffffffff800050c2:	48 c1 e0 04          	shl    rax,0x4
ffffffff800050c6:	48 05 c0 b7 00 80    	add    rax,0xffffffff8000b7c0
ffffffff800050cc:	48 89 c6             	mov    rsi,rax
ffffffff800050cf:	b8 02 01 00 c0       	mov    eax,0xc0000102
ffffffff800050d4:	48 89 c7             	mov    rdi,rax
ffffffff800050d7:	e8 71 ff ff ff       	call   ffffffff8000504d <Utils::wrmsr(unsigned long, unsigned long)>
ffffffff800050dc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800050e0:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff800050e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800050e6:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800050e8:	89 c1                	mov    ecx,eax
ffffffff800050ea:	48 89 c8             	mov    rax,rcx
ffffffff800050ed:	48 01 c0             	add    rax,rax
ffffffff800050f0:	48 01 c8             	add    rax,rcx
ffffffff800050f3:	48 c1 e0 04          	shl    rax,0x4
ffffffff800050f7:	48 05 e8 b7 00 80    	add    rax,0xffffffff8000b7e8
ffffffff800050fd:	89 10                	mov    DWORD PTR [rax],edx
ffffffff800050ff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005103:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80005105:	89 c6                	mov    esi,eax
ffffffff80005107:	48 c7 c7 60 82 00 80 	mov    rdi,0xffffffff80008260
ffffffff8000510e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005113:	e8 59 e7 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80005118:	e8 14 fc ff ff       	call   ffffffff80004d31 <LAPIC::Initialize()>
ffffffff8000511d:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80005122:	e8 65 fc ff ff       	call   ffffffff80004d8c <LAPIC::InitTimer(bool)>
ffffffff80005127:	48 8b 05 12 4a 00 00 	mov    rax,QWORD PTR [rip+0x4a12]        # ffffffff80009b40 <cpus_arrived>
ffffffff8000512e:	48 83 c0 01          	add    rax,0x1
ffffffff80005132:	48 89 05 07 4a 00 00 	mov    QWORD PTR [rip+0x4a07],rax        # ffffffff80009b40 <cpus_arrived>
ffffffff80005139:	48 c7 c7 80 98 01 80 	mov    rdi,0xffffffff80019880
ffffffff80005140:	e8 d9 e8 ff ff       	call   ffffffff80003a1e <spinlock::unlock()>
ffffffff80005145:	e8 a9 02 00 00       	call   ffffffff800053f3 <Utils::Halt()>
ffffffff8000514a:	90                   	nop
ffffffff8000514b:	c9                   	leave  
ffffffff8000514c:	c3                   	ret    

ffffffff8000514d <BspKernelThread()>:
ffffffff8000514d:	f3 0f 1e fa          	endbr64 
ffffffff80005151:	55                   	push   rbp
ffffffff80005152:	48 89 e5             	mov    rbp,rsp
ffffffff80005155:	48 c7 c7 76 82 00 80 	mov    rdi,0xffffffff80008276
ffffffff8000515c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005161:	e8 0b e7 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80005166:	f4                   	hlt    
ffffffff80005167:	eb fd                	jmp    ffffffff80005166 <BspKernelThread()+0x19>

ffffffff80005169 <kernel_entry>:
ffffffff80005169:	f3 0f 1e fa          	endbr64 
ffffffff8000516d:	55                   	push   rbp
ffffffff8000516e:	48 89 e5             	mov    rbp,rsp
ffffffff80005171:	48 83 ec 10          	sub    rsp,0x10
ffffffff80005175:	e8 65 e7 ff ff       	call   ffffffff800038df <Screen::Initialize()>
ffffffff8000517a:	48 c7 c7 98 82 00 80 	mov    rdi,0xffffffff80008298
ffffffff80005181:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005186:	e8 e6 e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000518b:	48 c7 c2 ee 82 00 80 	mov    rdx,0xffffffff800082ee
ffffffff80005192:	48 c7 c6 f5 82 00 80 	mov    rsi,0xffffffff800082f5
ffffffff80005199:	48 c7 c7 fb 82 00 80 	mov    rdi,0xffffffff800082fb
ffffffff800051a0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800051a5:	e8 c7 e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800051aa:	e8 56 de ff ff       	call   ffffffff80003005 <IDT::Initialize()>
ffffffff800051af:	48 c7 c7 18 83 00 80 	mov    rdi,0xffffffff80008318
ffffffff800051b6:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800051bb:	e8 b1 e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800051c0:	e8 e3 de ff ff       	call   ffffffff800030a8 <PIC::RemapAndDisable()>
ffffffff800051c5:	48 c7 c7 40 83 00 80 	mov    rdi,0xffffffff80008340
ffffffff800051cc:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800051d1:	e8 9b e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800051d6:	48 c7 c7 63 83 00 80 	mov    rdi,0xffffffff80008363
ffffffff800051dd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800051e2:	e8 8a e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800051e7:	e8 a5 b8 ff ff       	call   ffffffff80000a91 <PhysicalMemory::Initialize()>
ffffffff800051ec:	bf 00 00 00 00       	mov    edi,0x0
ffffffff800051f1:	e8 ff f3 ff ff       	call   ffffffff800045f5 <GDT::SetupGdt(int)>
ffffffff800051f6:	48 c7 c7 88 83 00 80 	mov    rdi,0xffffffff80008388
ffffffff800051fd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005202:	e8 6a e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80005207:	48 c7 c7 ac 83 00 80 	mov    rdi,0xffffffff800083ac
ffffffff8000520e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005213:	e8 59 e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80005218:	e8 ee c1 ff ff       	call   ffffffff8000140b <VirtualMemory::Initialize()>
ffffffff8000521d:	48 c7 c7 c9 83 00 80 	mov    rdi,0xffffffff800083c9
ffffffff80005224:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005229:	e8 43 e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000522e:	e8 08 fa ff ff       	call   ffffffff80004c3b <ACPI::ParseTables()>
ffffffff80005233:	48 c7 c7 de 83 00 80 	mov    rdi,0xffffffff800083de
ffffffff8000523a:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000523f:	e8 2d e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80005244:	e8 e8 fa ff ff       	call   ffffffff80004d31 <LAPIC::Initialize()>
ffffffff80005249:	e8 b0 fd ff ff       	call   ffffffff80004ffe <IOAPIC::Initialize()>
ffffffff8000524e:	48 c7 c7 f1 83 00 80 	mov    rdi,0xffffffff800083f1
ffffffff80005255:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000525a:	e8 12 e6 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff8000525f:	e8 f0 eb ff ff       	call   ffffffff80003e54 <Scheduler::Initialize()>
ffffffff80005264:	48 c7 c0 4d 51 00 80 	mov    rax,0xffffffff8000514d
ffffffff8000526b:	be 00 00 00 00       	mov    esi,0x0
ffffffff80005270:	48 89 c7             	mov    rdi,rax
ffffffff80005273:	e8 70 e9 ff ff       	call   ffffffff80003be8 <Scheduler::AddThread(unsigned long, bool)>
ffffffff80005278:	e8 3e e8 ff ff       	call   ffffffff80003abb <HPET::SetupHPET()>
ffffffff8000527d:	fa                   	cli    
ffffffff8000527e:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80005283:	e8 04 fb ff ff       	call   ffffffff80004d8c <LAPIC::InitTimer(bool)>
ffffffff80005288:	48 c7 c7 09 84 00 80 	mov    rdi,0xffffffff80008409
ffffffff8000528f:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005294:	e8 d8 e5 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff80005299:	48 c7 c7 1c 84 00 80 	mov    rdi,0xffffffff8000841c
ffffffff800052a0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800052a5:	e8 c7 e5 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800052aa:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff800052b1:	00 
ffffffff800052b2:	e9 a4 00 00 00       	jmp    ffffffff8000535b <kernel_entry+0x1f2>
ffffffff800052b7:	48 8b 05 ca 48 00 00 	mov    rax,QWORD PTR [rip+0x48ca]        # ffffffff80009b88 <smp_req+0x28>
ffffffff800052be:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff800052c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800052c6:	48 c1 e0 03          	shl    rax,0x3
ffffffff800052ca:	48 01 d0             	add    rax,rdx
ffffffff800052cd:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800052d1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800052d5:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800052d8:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
ffffffff800052db:	48 8b 05 a6 48 00 00 	mov    rax,QWORD PTR [rip+0x48a6]        # ffffffff80009b88 <smp_req+0x28>
ffffffff800052e2:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff800052e5:	39 c2                	cmp    edx,eax
ffffffff800052e7:	0f 94 c0             	sete   al
ffffffff800052ea:	84 c0                	test   al,al
ffffffff800052ec:	74 59                	je     ffffffff80005347 <kernel_entry+0x1de>
ffffffff800052ee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800052f2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800052f5:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff800052f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800052fb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800052fe:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80005300:	89 c1                	mov    ecx,eax
ffffffff80005302:	48 89 c8             	mov    rax,rcx
ffffffff80005305:	48 01 c0             	add    rax,rax
ffffffff80005308:	48 01 c8             	add    rax,rcx
ffffffff8000530b:	48 c1 e0 04          	shl    rax,0x4
ffffffff8000530f:	48 05 e8 b7 00 80    	add    rax,0xffffffff8000b7e8
ffffffff80005315:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80005317:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000531b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000531e:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80005320:	89 c2                	mov    edx,eax
ffffffff80005322:	48 89 d0             	mov    rax,rdx
ffffffff80005325:	48 01 c0             	add    rax,rax
ffffffff80005328:	48 01 d0             	add    rax,rdx
ffffffff8000532b:	48 c1 e0 04          	shl    rax,0x4
ffffffff8000532f:	48 05 c0 b7 00 80    	add    rax,0xffffffff8000b7c0
ffffffff80005335:	48 89 c6             	mov    rsi,rax
ffffffff80005338:	b8 02 01 00 c0       	mov    eax,0xc0000102
ffffffff8000533d:	48 89 c7             	mov    rdi,rax
ffffffff80005340:	e8 08 fd ff ff       	call   ffffffff8000504d <Utils::wrmsr(unsigned long, unsigned long)>
ffffffff80005345:	eb 0f                	jmp    ffffffff80005356 <kernel_entry+0x1ed>
ffffffff80005347:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000534b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000534e:	48 c7 40 10 7e 50 00 	mov    QWORD PTR [rax+0x10],0xffffffff8000507e
ffffffff80005355:	80 
ffffffff80005356:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff8000535b:	48 8b 05 26 48 00 00 	mov    rax,QWORD PTR [rip+0x4826]        # ffffffff80009b88 <smp_req+0x28>
ffffffff80005362:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80005366:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff8000536a:	0f 92 c0             	setb   al
ffffffff8000536d:	84 c0                	test   al,al
ffffffff8000536f:	0f 85 42 ff ff ff    	jne    ffffffff800052b7 <kernel_entry+0x14e>
ffffffff80005375:	eb 02                	jmp    ffffffff80005379 <kernel_entry+0x210>
ffffffff80005377:	f3 90                	pause  
ffffffff80005379:	48 8b 05 08 48 00 00 	mov    rax,QWORD PTR [rip+0x4808]        # ffffffff80009b88 <smp_req+0x28>
ffffffff80005380:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80005384:	48 8b 05 b5 47 00 00 	mov    rax,QWORD PTR [rip+0x47b5]        # ffffffff80009b40 <cpus_arrived>
ffffffff8000538b:	48 39 c2             	cmp    rdx,rax
ffffffff8000538e:	0f 97 c0             	seta   al
ffffffff80005391:	84 c0                	test   al,al
ffffffff80005393:	75 e2                	jne    ffffffff80005377 <kernel_entry+0x20e>
ffffffff80005395:	48 c7 c7 2f 84 00 80 	mov    rdi,0xffffffff8000842f
ffffffff8000539c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800053a1:	e8 cb e4 ff ff       	call   ffffffff80003871 <_printf(char const*, ...)>
ffffffff800053a6:	fb                   	sti    
ffffffff800053a7:	f4                   	hlt    
ffffffff800053a8:	eb fd                	jmp    ffffffff800053a7 <kernel_entry+0x23e>

ffffffff800053aa <__static_initialization_and_destruction_0(int, int)>:
ffffffff800053aa:	f3 0f 1e fa          	endbr64 
ffffffff800053ae:	55                   	push   rbp
ffffffff800053af:	48 89 e5             	mov    rbp,rsp
ffffffff800053b2:	48 83 ec 10          	sub    rsp,0x10
ffffffff800053b6:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800053b9:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff800053bc:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff800053c0:	75 15                	jne    ffffffff800053d7 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff800053c2:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff800053c9:	75 0c                	jne    ffffffff800053d7 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff800053cb:	48 c7 c7 80 98 01 80 	mov    rdi,0xffffffff80019880
ffffffff800053d2:	e8 f1 e5 ff ff       	call   ffffffff800039c8 <spinlock::spinlock()>
ffffffff800053d7:	90                   	nop
ffffffff800053d8:	c9                   	leave  
ffffffff800053d9:	c3                   	ret    

ffffffff800053da <_GLOBAL__sub_I_kernel_stack>:
ffffffff800053da:	f3 0f 1e fa          	endbr64 
ffffffff800053de:	55                   	push   rbp
ffffffff800053df:	48 89 e5             	mov    rbp,rsp
ffffffff800053e2:	be ff ff 00 00       	mov    esi,0xffff
ffffffff800053e7:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800053ec:	e8 b9 ff ff ff       	call   ffffffff800053aa <__static_initialization_and_destruction_0(int, int)>
ffffffff800053f1:	5d                   	pop    rbp
ffffffff800053f2:	c3                   	ret    

ffffffff800053f3 <Utils::Halt()>:
ffffffff800053f3:	f3 0f 1e fa          	endbr64 
ffffffff800053f7:	55                   	push   rbp
ffffffff800053f8:	48 89 e5             	mov    rbp,rsp
ffffffff800053fb:	f4                   	hlt    
ffffffff800053fc:	eb fd                	jmp    ffffffff800053fb <Utils::Halt()+0x8>
ffffffff800053fe:	66 90                	xchg   ax,ax

ffffffff80005400 <EnableAvx>:
ffffffff80005400:	50                   	push   rax
ffffffff80005401:	51                   	push   rcx
ffffffff80005402:	52                   	push   rdx
ffffffff80005403:	48 31 c9             	xor    rcx,rcx
ffffffff80005406:	0f 01 d0             	xgetbv 
ffffffff80005409:	83 c8 07             	or     eax,0x7
ffffffff8000540c:	0f 01 d1             	xsetbv 
ffffffff8000540f:	5a                   	pop    rdx
ffffffff80005410:	59                   	pop    rcx
ffffffff80005411:	58                   	pop    rax
ffffffff80005412:	c3                   	ret    
ffffffff80005413:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000541a:	00 00 00 
ffffffff8000541d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80005420 <isr_common>:
ffffffff80005420:	50                   	push   rax
ffffffff80005421:	53                   	push   rbx
ffffffff80005422:	51                   	push   rcx
ffffffff80005423:	52                   	push   rdx
ffffffff80005424:	56                   	push   rsi
ffffffff80005425:	57                   	push   rdi
ffffffff80005426:	55                   	push   rbp
ffffffff80005427:	41 50                	push   r8
ffffffff80005429:	41 51                	push   r9
ffffffff8000542b:	41 52                	push   r10
ffffffff8000542d:	41 53                	push   r11
ffffffff8000542f:	41 54                	push   r12
ffffffff80005431:	41 55                	push   r13
ffffffff80005433:	41 56                	push   r14
ffffffff80005435:	41 57                	push   r15
ffffffff80005437:	48 89 e7             	mov    rdi,rsp
ffffffff8000543a:	e8 a3 d9 ff ff       	call   ffffffff80002de2 <interrupt_handler>
ffffffff8000543f:	48 89 c4             	mov    rsp,rax
ffffffff80005442:	41 5f                	pop    r15
ffffffff80005444:	41 5e                	pop    r14
ffffffff80005446:	41 5d                	pop    r13
ffffffff80005448:	41 5c                	pop    r12
ffffffff8000544a:	41 5b                	pop    r11
ffffffff8000544c:	41 5a                	pop    r10
ffffffff8000544e:	41 59                	pop    r9
ffffffff80005450:	41 58                	pop    r8
ffffffff80005452:	5d                   	pop    rbp
ffffffff80005453:	5f                   	pop    rdi
ffffffff80005454:	5e                   	pop    rsi
ffffffff80005455:	5a                   	pop    rdx
ffffffff80005456:	59                   	pop    rcx
ffffffff80005457:	5b                   	pop    rbx
ffffffff80005458:	58                   	pop    rax
ffffffff80005459:	48 83 c4 10          	add    rsp,0x10
ffffffff8000545d:	fb                   	sti    
ffffffff8000545e:	48 cf                	iretq  

ffffffff80005460 <isr_0>:
ffffffff80005460:	6a 00                	push   0x0
ffffffff80005462:	6a 00                	push   0x0
ffffffff80005464:	fc                   	cld    
ffffffff80005465:	eb b9                	jmp    ffffffff80005420 <isr_common>

ffffffff80005467 <isr_1>:
ffffffff80005467:	6a 00                	push   0x0
ffffffff80005469:	6a 01                	push   0x1
ffffffff8000546b:	fc                   	cld    
ffffffff8000546c:	eb b2                	jmp    ffffffff80005420 <isr_common>

ffffffff8000546e <isr_2>:
ffffffff8000546e:	6a 00                	push   0x0
ffffffff80005470:	6a 02                	push   0x2
ffffffff80005472:	fc                   	cld    
ffffffff80005473:	eb ab                	jmp    ffffffff80005420 <isr_common>

ffffffff80005475 <isr_3>:
ffffffff80005475:	6a 00                	push   0x0
ffffffff80005477:	6a 03                	push   0x3
ffffffff80005479:	fc                   	cld    
ffffffff8000547a:	eb a4                	jmp    ffffffff80005420 <isr_common>

ffffffff8000547c <isr_4>:
ffffffff8000547c:	6a 00                	push   0x0
ffffffff8000547e:	6a 04                	push   0x4
ffffffff80005480:	fc                   	cld    
ffffffff80005481:	eb 9d                	jmp    ffffffff80005420 <isr_common>

ffffffff80005483 <isr_5>:
ffffffff80005483:	6a 00                	push   0x0
ffffffff80005485:	6a 05                	push   0x5
ffffffff80005487:	fc                   	cld    
ffffffff80005488:	eb 96                	jmp    ffffffff80005420 <isr_common>

ffffffff8000548a <isr_6>:
ffffffff8000548a:	6a 00                	push   0x0
ffffffff8000548c:	6a 06                	push   0x6
ffffffff8000548e:	fc                   	cld    
ffffffff8000548f:	eb 8f                	jmp    ffffffff80005420 <isr_common>

ffffffff80005491 <isr_7>:
ffffffff80005491:	6a 00                	push   0x0
ffffffff80005493:	6a 07                	push   0x7
ffffffff80005495:	fc                   	cld    
ffffffff80005496:	eb 88                	jmp    ffffffff80005420 <isr_common>

ffffffff80005498 <isr_8>:
ffffffff80005498:	6a 08                	push   0x8
ffffffff8000549a:	fc                   	cld    
ffffffff8000549b:	eb 83                	jmp    ffffffff80005420 <isr_common>

ffffffff8000549d <isr_9>:
ffffffff8000549d:	6a 00                	push   0x0
ffffffff8000549f:	6a 09                	push   0x9
ffffffff800054a1:	fc                   	cld    
ffffffff800054a2:	e9 79 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054a7 <isr_10>:
ffffffff800054a7:	6a 0a                	push   0xa
ffffffff800054a9:	fc                   	cld    
ffffffff800054aa:	e9 71 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054af <isr_11>:
ffffffff800054af:	6a 0b                	push   0xb
ffffffff800054b1:	fc                   	cld    
ffffffff800054b2:	e9 69 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054b7 <isr_12>:
ffffffff800054b7:	6a 0c                	push   0xc
ffffffff800054b9:	fc                   	cld    
ffffffff800054ba:	e9 61 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054bf <isr_13>:
ffffffff800054bf:	6a 0d                	push   0xd
ffffffff800054c1:	fc                   	cld    
ffffffff800054c2:	e9 59 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054c7 <isr_14>:
ffffffff800054c7:	6a 0e                	push   0xe
ffffffff800054c9:	fc                   	cld    
ffffffff800054ca:	e9 51 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054cf <isr_15>:
ffffffff800054cf:	6a 00                	push   0x0
ffffffff800054d1:	6a 0f                	push   0xf
ffffffff800054d3:	fc                   	cld    
ffffffff800054d4:	e9 47 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054d9 <isr_16>:
ffffffff800054d9:	6a 00                	push   0x0
ffffffff800054db:	6a 10                	push   0x10
ffffffff800054dd:	fc                   	cld    
ffffffff800054de:	e9 3d ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054e3 <isr_17>:
ffffffff800054e3:	6a 11                	push   0x11
ffffffff800054e5:	fc                   	cld    
ffffffff800054e6:	e9 35 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054eb <isr_18>:
ffffffff800054eb:	6a 00                	push   0x0
ffffffff800054ed:	6a 12                	push   0x12
ffffffff800054ef:	fc                   	cld    
ffffffff800054f0:	e9 2b ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054f5 <isr_19>:
ffffffff800054f5:	6a 00                	push   0x0
ffffffff800054f7:	6a 13                	push   0x13
ffffffff800054f9:	fc                   	cld    
ffffffff800054fa:	e9 21 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800054ff <isr_20>:
ffffffff800054ff:	6a 00                	push   0x0
ffffffff80005501:	6a 14                	push   0x14
ffffffff80005503:	fc                   	cld    
ffffffff80005504:	e9 17 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005509 <isr_21>:
ffffffff80005509:	6a 15                	push   0x15
ffffffff8000550b:	fc                   	cld    
ffffffff8000550c:	e9 0f ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005511 <isr_22>:
ffffffff80005511:	6a 00                	push   0x0
ffffffff80005513:	6a 16                	push   0x16
ffffffff80005515:	fc                   	cld    
ffffffff80005516:	e9 05 ff ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000551b <isr_23>:
ffffffff8000551b:	6a 00                	push   0x0
ffffffff8000551d:	6a 17                	push   0x17
ffffffff8000551f:	fc                   	cld    
ffffffff80005520:	e9 fb fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005525 <isr_24>:
ffffffff80005525:	6a 00                	push   0x0
ffffffff80005527:	6a 18                	push   0x18
ffffffff80005529:	fc                   	cld    
ffffffff8000552a:	e9 f1 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000552f <isr_25>:
ffffffff8000552f:	6a 00                	push   0x0
ffffffff80005531:	6a 19                	push   0x19
ffffffff80005533:	fc                   	cld    
ffffffff80005534:	e9 e7 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005539 <isr_26>:
ffffffff80005539:	6a 00                	push   0x0
ffffffff8000553b:	6a 1a                	push   0x1a
ffffffff8000553d:	fc                   	cld    
ffffffff8000553e:	e9 dd fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005543 <isr_27>:
ffffffff80005543:	6a 00                	push   0x0
ffffffff80005545:	6a 1b                	push   0x1b
ffffffff80005547:	fc                   	cld    
ffffffff80005548:	e9 d3 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000554d <isr_28>:
ffffffff8000554d:	6a 00                	push   0x0
ffffffff8000554f:	6a 1c                	push   0x1c
ffffffff80005551:	fc                   	cld    
ffffffff80005552:	e9 c9 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005557 <isr_29>:
ffffffff80005557:	6a 1d                	push   0x1d
ffffffff80005559:	fc                   	cld    
ffffffff8000555a:	e9 c1 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000555f <isr_30>:
ffffffff8000555f:	6a 1e                	push   0x1e
ffffffff80005561:	fc                   	cld    
ffffffff80005562:	e9 b9 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005567 <isr_31>:
ffffffff80005567:	6a 00                	push   0x0
ffffffff80005569:	6a 1f                	push   0x1f
ffffffff8000556b:	fc                   	cld    
ffffffff8000556c:	e9 af fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005571 <isr_32>:
ffffffff80005571:	6a 00                	push   0x0
ffffffff80005573:	6a 20                	push   0x20
ffffffff80005575:	fc                   	cld    
ffffffff80005576:	e9 a5 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000557b <isr_33>:
ffffffff8000557b:	6a 00                	push   0x0
ffffffff8000557d:	6a 21                	push   0x21
ffffffff8000557f:	fc                   	cld    
ffffffff80005580:	e9 9b fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005585 <isr_34>:
ffffffff80005585:	6a 00                	push   0x0
ffffffff80005587:	6a 22                	push   0x22
ffffffff80005589:	fc                   	cld    
ffffffff8000558a:	e9 91 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000558f <isr_35>:
ffffffff8000558f:	6a 00                	push   0x0
ffffffff80005591:	6a 23                	push   0x23
ffffffff80005593:	fc                   	cld    
ffffffff80005594:	e9 87 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005599 <isr_36>:
ffffffff80005599:	6a 00                	push   0x0
ffffffff8000559b:	6a 24                	push   0x24
ffffffff8000559d:	fc                   	cld    
ffffffff8000559e:	e9 7d fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055a3 <isr_37>:
ffffffff800055a3:	6a 00                	push   0x0
ffffffff800055a5:	6a 25                	push   0x25
ffffffff800055a7:	fc                   	cld    
ffffffff800055a8:	e9 73 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055ad <isr_38>:
ffffffff800055ad:	6a 00                	push   0x0
ffffffff800055af:	6a 26                	push   0x26
ffffffff800055b1:	fc                   	cld    
ffffffff800055b2:	e9 69 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055b7 <isr_39>:
ffffffff800055b7:	6a 00                	push   0x0
ffffffff800055b9:	6a 27                	push   0x27
ffffffff800055bb:	fc                   	cld    
ffffffff800055bc:	e9 5f fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055c1 <isr_40>:
ffffffff800055c1:	6a 00                	push   0x0
ffffffff800055c3:	6a 28                	push   0x28
ffffffff800055c5:	fc                   	cld    
ffffffff800055c6:	e9 55 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055cb <isr_41>:
ffffffff800055cb:	6a 00                	push   0x0
ffffffff800055cd:	6a 29                	push   0x29
ffffffff800055cf:	fc                   	cld    
ffffffff800055d0:	e9 4b fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055d5 <isr_42>:
ffffffff800055d5:	6a 00                	push   0x0
ffffffff800055d7:	6a 2a                	push   0x2a
ffffffff800055d9:	fc                   	cld    
ffffffff800055da:	e9 41 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055df <isr_43>:
ffffffff800055df:	6a 00                	push   0x0
ffffffff800055e1:	6a 2b                	push   0x2b
ffffffff800055e3:	fc                   	cld    
ffffffff800055e4:	e9 37 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055e9 <isr_44>:
ffffffff800055e9:	6a 00                	push   0x0
ffffffff800055eb:	6a 2c                	push   0x2c
ffffffff800055ed:	fc                   	cld    
ffffffff800055ee:	e9 2d fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055f3 <isr_45>:
ffffffff800055f3:	6a 00                	push   0x0
ffffffff800055f5:	6a 2d                	push   0x2d
ffffffff800055f7:	fc                   	cld    
ffffffff800055f8:	e9 23 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800055fd <isr_46>:
ffffffff800055fd:	6a 00                	push   0x0
ffffffff800055ff:	6a 2e                	push   0x2e
ffffffff80005601:	fc                   	cld    
ffffffff80005602:	e9 19 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005607 <isr_47>:
ffffffff80005607:	6a 00                	push   0x0
ffffffff80005609:	6a 2f                	push   0x2f
ffffffff8000560b:	fc                   	cld    
ffffffff8000560c:	e9 0f fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005611 <isr_48>:
ffffffff80005611:	6a 00                	push   0x0
ffffffff80005613:	6a 30                	push   0x30
ffffffff80005615:	fc                   	cld    
ffffffff80005616:	e9 05 fe ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000561b <isr_49>:
ffffffff8000561b:	6a 00                	push   0x0
ffffffff8000561d:	6a 31                	push   0x31
ffffffff8000561f:	fc                   	cld    
ffffffff80005620:	e9 fb fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005625 <isr_50>:
ffffffff80005625:	6a 00                	push   0x0
ffffffff80005627:	6a 32                	push   0x32
ffffffff80005629:	fc                   	cld    
ffffffff8000562a:	e9 f1 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000562f <isr_51>:
ffffffff8000562f:	6a 00                	push   0x0
ffffffff80005631:	6a 33                	push   0x33
ffffffff80005633:	fc                   	cld    
ffffffff80005634:	e9 e7 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005639 <isr_52>:
ffffffff80005639:	6a 00                	push   0x0
ffffffff8000563b:	6a 34                	push   0x34
ffffffff8000563d:	fc                   	cld    
ffffffff8000563e:	e9 dd fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005643 <isr_53>:
ffffffff80005643:	6a 00                	push   0x0
ffffffff80005645:	6a 35                	push   0x35
ffffffff80005647:	fc                   	cld    
ffffffff80005648:	e9 d3 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000564d <isr_54>:
ffffffff8000564d:	6a 00                	push   0x0
ffffffff8000564f:	6a 36                	push   0x36
ffffffff80005651:	fc                   	cld    
ffffffff80005652:	e9 c9 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005657 <isr_55>:
ffffffff80005657:	6a 00                	push   0x0
ffffffff80005659:	6a 37                	push   0x37
ffffffff8000565b:	fc                   	cld    
ffffffff8000565c:	e9 bf fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005661 <isr_56>:
ffffffff80005661:	6a 00                	push   0x0
ffffffff80005663:	6a 38                	push   0x38
ffffffff80005665:	fc                   	cld    
ffffffff80005666:	e9 b5 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000566b <isr_57>:
ffffffff8000566b:	6a 00                	push   0x0
ffffffff8000566d:	6a 39                	push   0x39
ffffffff8000566f:	fc                   	cld    
ffffffff80005670:	e9 ab fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005675 <isr_58>:
ffffffff80005675:	6a 00                	push   0x0
ffffffff80005677:	6a 3a                	push   0x3a
ffffffff80005679:	fc                   	cld    
ffffffff8000567a:	e9 a1 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000567f <isr_59>:
ffffffff8000567f:	6a 00                	push   0x0
ffffffff80005681:	6a 3b                	push   0x3b
ffffffff80005683:	fc                   	cld    
ffffffff80005684:	e9 97 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005689 <isr_60>:
ffffffff80005689:	6a 00                	push   0x0
ffffffff8000568b:	6a 3c                	push   0x3c
ffffffff8000568d:	fc                   	cld    
ffffffff8000568e:	e9 8d fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005693 <isr_61>:
ffffffff80005693:	6a 00                	push   0x0
ffffffff80005695:	6a 3d                	push   0x3d
ffffffff80005697:	fc                   	cld    
ffffffff80005698:	e9 83 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000569d <isr_62>:
ffffffff8000569d:	6a 00                	push   0x0
ffffffff8000569f:	6a 3e                	push   0x3e
ffffffff800056a1:	fc                   	cld    
ffffffff800056a2:	e9 79 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056a7 <isr_63>:
ffffffff800056a7:	6a 00                	push   0x0
ffffffff800056a9:	6a 3f                	push   0x3f
ffffffff800056ab:	fc                   	cld    
ffffffff800056ac:	e9 6f fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056b1 <isr_64>:
ffffffff800056b1:	6a 00                	push   0x0
ffffffff800056b3:	6a 40                	push   0x40
ffffffff800056b5:	fc                   	cld    
ffffffff800056b6:	e9 65 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056bb <isr_65>:
ffffffff800056bb:	6a 00                	push   0x0
ffffffff800056bd:	6a 41                	push   0x41
ffffffff800056bf:	fc                   	cld    
ffffffff800056c0:	e9 5b fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056c5 <isr_66>:
ffffffff800056c5:	6a 00                	push   0x0
ffffffff800056c7:	6a 42                	push   0x42
ffffffff800056c9:	fc                   	cld    
ffffffff800056ca:	e9 51 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056cf <isr_67>:
ffffffff800056cf:	6a 00                	push   0x0
ffffffff800056d1:	6a 43                	push   0x43
ffffffff800056d3:	fc                   	cld    
ffffffff800056d4:	e9 47 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056d9 <isr_68>:
ffffffff800056d9:	6a 00                	push   0x0
ffffffff800056db:	6a 44                	push   0x44
ffffffff800056dd:	fc                   	cld    
ffffffff800056de:	e9 3d fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056e3 <isr_69>:
ffffffff800056e3:	6a 00                	push   0x0
ffffffff800056e5:	6a 45                	push   0x45
ffffffff800056e7:	fc                   	cld    
ffffffff800056e8:	e9 33 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056ed <isr_70>:
ffffffff800056ed:	6a 00                	push   0x0
ffffffff800056ef:	6a 46                	push   0x46
ffffffff800056f1:	fc                   	cld    
ffffffff800056f2:	e9 29 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800056f7 <isr_71>:
ffffffff800056f7:	6a 00                	push   0x0
ffffffff800056f9:	6a 47                	push   0x47
ffffffff800056fb:	fc                   	cld    
ffffffff800056fc:	e9 1f fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005701 <isr_72>:
ffffffff80005701:	6a 00                	push   0x0
ffffffff80005703:	6a 48                	push   0x48
ffffffff80005705:	fc                   	cld    
ffffffff80005706:	e9 15 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000570b <isr_73>:
ffffffff8000570b:	6a 00                	push   0x0
ffffffff8000570d:	6a 49                	push   0x49
ffffffff8000570f:	fc                   	cld    
ffffffff80005710:	e9 0b fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005715 <isr_74>:
ffffffff80005715:	6a 00                	push   0x0
ffffffff80005717:	6a 4a                	push   0x4a
ffffffff80005719:	fc                   	cld    
ffffffff8000571a:	e9 01 fd ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000571f <isr_75>:
ffffffff8000571f:	6a 00                	push   0x0
ffffffff80005721:	6a 4b                	push   0x4b
ffffffff80005723:	fc                   	cld    
ffffffff80005724:	e9 f7 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005729 <isr_76>:
ffffffff80005729:	6a 00                	push   0x0
ffffffff8000572b:	6a 4c                	push   0x4c
ffffffff8000572d:	fc                   	cld    
ffffffff8000572e:	e9 ed fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005733 <isr_77>:
ffffffff80005733:	6a 00                	push   0x0
ffffffff80005735:	6a 4d                	push   0x4d
ffffffff80005737:	fc                   	cld    
ffffffff80005738:	e9 e3 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000573d <isr_78>:
ffffffff8000573d:	6a 00                	push   0x0
ffffffff8000573f:	6a 4e                	push   0x4e
ffffffff80005741:	fc                   	cld    
ffffffff80005742:	e9 d9 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005747 <isr_79>:
ffffffff80005747:	6a 00                	push   0x0
ffffffff80005749:	6a 4f                	push   0x4f
ffffffff8000574b:	fc                   	cld    
ffffffff8000574c:	e9 cf fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005751 <isr_80>:
ffffffff80005751:	6a 00                	push   0x0
ffffffff80005753:	6a 50                	push   0x50
ffffffff80005755:	fc                   	cld    
ffffffff80005756:	e9 c5 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000575b <isr_81>:
ffffffff8000575b:	6a 00                	push   0x0
ffffffff8000575d:	6a 51                	push   0x51
ffffffff8000575f:	fc                   	cld    
ffffffff80005760:	e9 bb fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005765 <isr_82>:
ffffffff80005765:	6a 00                	push   0x0
ffffffff80005767:	6a 52                	push   0x52
ffffffff80005769:	fc                   	cld    
ffffffff8000576a:	e9 b1 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000576f <isr_83>:
ffffffff8000576f:	6a 00                	push   0x0
ffffffff80005771:	6a 53                	push   0x53
ffffffff80005773:	fc                   	cld    
ffffffff80005774:	e9 a7 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005779 <isr_84>:
ffffffff80005779:	6a 00                	push   0x0
ffffffff8000577b:	6a 54                	push   0x54
ffffffff8000577d:	fc                   	cld    
ffffffff8000577e:	e9 9d fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005783 <isr_85>:
ffffffff80005783:	6a 00                	push   0x0
ffffffff80005785:	6a 55                	push   0x55
ffffffff80005787:	fc                   	cld    
ffffffff80005788:	e9 93 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000578d <isr_86>:
ffffffff8000578d:	6a 00                	push   0x0
ffffffff8000578f:	6a 56                	push   0x56
ffffffff80005791:	fc                   	cld    
ffffffff80005792:	e9 89 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005797 <isr_87>:
ffffffff80005797:	6a 00                	push   0x0
ffffffff80005799:	6a 57                	push   0x57
ffffffff8000579b:	fc                   	cld    
ffffffff8000579c:	e9 7f fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057a1 <isr_88>:
ffffffff800057a1:	6a 00                	push   0x0
ffffffff800057a3:	6a 58                	push   0x58
ffffffff800057a5:	fc                   	cld    
ffffffff800057a6:	e9 75 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057ab <isr_89>:
ffffffff800057ab:	6a 00                	push   0x0
ffffffff800057ad:	6a 59                	push   0x59
ffffffff800057af:	fc                   	cld    
ffffffff800057b0:	e9 6b fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057b5 <isr_90>:
ffffffff800057b5:	6a 00                	push   0x0
ffffffff800057b7:	6a 5a                	push   0x5a
ffffffff800057b9:	fc                   	cld    
ffffffff800057ba:	e9 61 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057bf <isr_91>:
ffffffff800057bf:	6a 00                	push   0x0
ffffffff800057c1:	6a 5b                	push   0x5b
ffffffff800057c3:	fc                   	cld    
ffffffff800057c4:	e9 57 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057c9 <isr_92>:
ffffffff800057c9:	6a 00                	push   0x0
ffffffff800057cb:	6a 5c                	push   0x5c
ffffffff800057cd:	fc                   	cld    
ffffffff800057ce:	e9 4d fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057d3 <isr_93>:
ffffffff800057d3:	6a 00                	push   0x0
ffffffff800057d5:	6a 5d                	push   0x5d
ffffffff800057d7:	fc                   	cld    
ffffffff800057d8:	e9 43 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057dd <isr_94>:
ffffffff800057dd:	6a 00                	push   0x0
ffffffff800057df:	6a 5e                	push   0x5e
ffffffff800057e1:	fc                   	cld    
ffffffff800057e2:	e9 39 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057e7 <isr_95>:
ffffffff800057e7:	6a 00                	push   0x0
ffffffff800057e9:	6a 5f                	push   0x5f
ffffffff800057eb:	fc                   	cld    
ffffffff800057ec:	e9 2f fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057f1 <isr_96>:
ffffffff800057f1:	6a 00                	push   0x0
ffffffff800057f3:	6a 60                	push   0x60
ffffffff800057f5:	fc                   	cld    
ffffffff800057f6:	e9 25 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800057fb <isr_97>:
ffffffff800057fb:	6a 00                	push   0x0
ffffffff800057fd:	6a 61                	push   0x61
ffffffff800057ff:	fc                   	cld    
ffffffff80005800:	e9 1b fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005805 <isr_98>:
ffffffff80005805:	6a 00                	push   0x0
ffffffff80005807:	6a 62                	push   0x62
ffffffff80005809:	fc                   	cld    
ffffffff8000580a:	e9 11 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000580f <isr_99>:
ffffffff8000580f:	6a 00                	push   0x0
ffffffff80005811:	6a 63                	push   0x63
ffffffff80005813:	fc                   	cld    
ffffffff80005814:	e9 07 fc ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005819 <isr_100>:
ffffffff80005819:	6a 00                	push   0x0
ffffffff8000581b:	6a 64                	push   0x64
ffffffff8000581d:	fc                   	cld    
ffffffff8000581e:	e9 fd fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005823 <isr_101>:
ffffffff80005823:	6a 00                	push   0x0
ffffffff80005825:	6a 65                	push   0x65
ffffffff80005827:	fc                   	cld    
ffffffff80005828:	e9 f3 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000582d <isr_102>:
ffffffff8000582d:	6a 00                	push   0x0
ffffffff8000582f:	6a 66                	push   0x66
ffffffff80005831:	fc                   	cld    
ffffffff80005832:	e9 e9 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005837 <isr_103>:
ffffffff80005837:	6a 00                	push   0x0
ffffffff80005839:	6a 67                	push   0x67
ffffffff8000583b:	fc                   	cld    
ffffffff8000583c:	e9 df fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005841 <isr_104>:
ffffffff80005841:	6a 00                	push   0x0
ffffffff80005843:	6a 68                	push   0x68
ffffffff80005845:	fc                   	cld    
ffffffff80005846:	e9 d5 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000584b <isr_105>:
ffffffff8000584b:	6a 00                	push   0x0
ffffffff8000584d:	6a 69                	push   0x69
ffffffff8000584f:	fc                   	cld    
ffffffff80005850:	e9 cb fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005855 <isr_106>:
ffffffff80005855:	6a 00                	push   0x0
ffffffff80005857:	6a 6a                	push   0x6a
ffffffff80005859:	fc                   	cld    
ffffffff8000585a:	e9 c1 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000585f <isr_107>:
ffffffff8000585f:	6a 00                	push   0x0
ffffffff80005861:	6a 6b                	push   0x6b
ffffffff80005863:	fc                   	cld    
ffffffff80005864:	e9 b7 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005869 <isr_108>:
ffffffff80005869:	6a 00                	push   0x0
ffffffff8000586b:	6a 6c                	push   0x6c
ffffffff8000586d:	fc                   	cld    
ffffffff8000586e:	e9 ad fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005873 <isr_109>:
ffffffff80005873:	6a 00                	push   0x0
ffffffff80005875:	6a 6d                	push   0x6d
ffffffff80005877:	fc                   	cld    
ffffffff80005878:	e9 a3 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000587d <isr_110>:
ffffffff8000587d:	6a 00                	push   0x0
ffffffff8000587f:	6a 6e                	push   0x6e
ffffffff80005881:	fc                   	cld    
ffffffff80005882:	e9 99 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005887 <isr_111>:
ffffffff80005887:	6a 00                	push   0x0
ffffffff80005889:	6a 6f                	push   0x6f
ffffffff8000588b:	fc                   	cld    
ffffffff8000588c:	e9 8f fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005891 <isr_112>:
ffffffff80005891:	6a 00                	push   0x0
ffffffff80005893:	6a 70                	push   0x70
ffffffff80005895:	fc                   	cld    
ffffffff80005896:	e9 85 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000589b <isr_113>:
ffffffff8000589b:	6a 00                	push   0x0
ffffffff8000589d:	6a 71                	push   0x71
ffffffff8000589f:	fc                   	cld    
ffffffff800058a0:	e9 7b fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058a5 <isr_114>:
ffffffff800058a5:	6a 00                	push   0x0
ffffffff800058a7:	6a 72                	push   0x72
ffffffff800058a9:	fc                   	cld    
ffffffff800058aa:	e9 71 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058af <isr_115>:
ffffffff800058af:	6a 00                	push   0x0
ffffffff800058b1:	6a 73                	push   0x73
ffffffff800058b3:	fc                   	cld    
ffffffff800058b4:	e9 67 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058b9 <isr_116>:
ffffffff800058b9:	6a 00                	push   0x0
ffffffff800058bb:	6a 74                	push   0x74
ffffffff800058bd:	fc                   	cld    
ffffffff800058be:	e9 5d fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058c3 <isr_117>:
ffffffff800058c3:	6a 00                	push   0x0
ffffffff800058c5:	6a 75                	push   0x75
ffffffff800058c7:	fc                   	cld    
ffffffff800058c8:	e9 53 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058cd <isr_118>:
ffffffff800058cd:	6a 00                	push   0x0
ffffffff800058cf:	6a 76                	push   0x76
ffffffff800058d1:	fc                   	cld    
ffffffff800058d2:	e9 49 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058d7 <isr_119>:
ffffffff800058d7:	6a 00                	push   0x0
ffffffff800058d9:	6a 77                	push   0x77
ffffffff800058db:	fc                   	cld    
ffffffff800058dc:	e9 3f fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058e1 <isr_120>:
ffffffff800058e1:	6a 00                	push   0x0
ffffffff800058e3:	6a 78                	push   0x78
ffffffff800058e5:	fc                   	cld    
ffffffff800058e6:	e9 35 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058eb <isr_121>:
ffffffff800058eb:	6a 00                	push   0x0
ffffffff800058ed:	6a 79                	push   0x79
ffffffff800058ef:	fc                   	cld    
ffffffff800058f0:	e9 2b fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058f5 <isr_122>:
ffffffff800058f5:	6a 00                	push   0x0
ffffffff800058f7:	6a 7a                	push   0x7a
ffffffff800058f9:	fc                   	cld    
ffffffff800058fa:	e9 21 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800058ff <isr_123>:
ffffffff800058ff:	6a 00                	push   0x0
ffffffff80005901:	6a 7b                	push   0x7b
ffffffff80005903:	fc                   	cld    
ffffffff80005904:	e9 17 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005909 <isr_124>:
ffffffff80005909:	6a 00                	push   0x0
ffffffff8000590b:	6a 7c                	push   0x7c
ffffffff8000590d:	fc                   	cld    
ffffffff8000590e:	e9 0d fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005913 <isr_125>:
ffffffff80005913:	6a 00                	push   0x0
ffffffff80005915:	6a 7d                	push   0x7d
ffffffff80005917:	fc                   	cld    
ffffffff80005918:	e9 03 fb ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000591d <isr_126>:
ffffffff8000591d:	6a 00                	push   0x0
ffffffff8000591f:	6a 7e                	push   0x7e
ffffffff80005921:	fc                   	cld    
ffffffff80005922:	e9 f9 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005927 <isr_127>:
ffffffff80005927:	6a 00                	push   0x0
ffffffff80005929:	6a 7f                	push   0x7f
ffffffff8000592b:	fc                   	cld    
ffffffff8000592c:	e9 ef fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005931 <isr_128>:
ffffffff80005931:	6a 00                	push   0x0
ffffffff80005933:	68 80 00 00 00       	push   0x80
ffffffff80005938:	fc                   	cld    
ffffffff80005939:	e9 e2 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000593e <isr_129>:
ffffffff8000593e:	6a 00                	push   0x0
ffffffff80005940:	68 81 00 00 00       	push   0x81
ffffffff80005945:	fc                   	cld    
ffffffff80005946:	e9 d5 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000594b <isr_130>:
ffffffff8000594b:	6a 00                	push   0x0
ffffffff8000594d:	68 82 00 00 00       	push   0x82
ffffffff80005952:	fc                   	cld    
ffffffff80005953:	e9 c8 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005958 <isr_131>:
ffffffff80005958:	6a 00                	push   0x0
ffffffff8000595a:	68 83 00 00 00       	push   0x83
ffffffff8000595f:	fc                   	cld    
ffffffff80005960:	e9 bb fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005965 <isr_132>:
ffffffff80005965:	6a 00                	push   0x0
ffffffff80005967:	68 84 00 00 00       	push   0x84
ffffffff8000596c:	fc                   	cld    
ffffffff8000596d:	e9 ae fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005972 <isr_133>:
ffffffff80005972:	6a 00                	push   0x0
ffffffff80005974:	68 85 00 00 00       	push   0x85
ffffffff80005979:	fc                   	cld    
ffffffff8000597a:	e9 a1 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000597f <isr_134>:
ffffffff8000597f:	6a 00                	push   0x0
ffffffff80005981:	68 86 00 00 00       	push   0x86
ffffffff80005986:	fc                   	cld    
ffffffff80005987:	e9 94 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff8000598c <isr_135>:
ffffffff8000598c:	6a 00                	push   0x0
ffffffff8000598e:	68 87 00 00 00       	push   0x87
ffffffff80005993:	fc                   	cld    
ffffffff80005994:	e9 87 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005999 <isr_136>:
ffffffff80005999:	6a 00                	push   0x0
ffffffff8000599b:	68 88 00 00 00       	push   0x88
ffffffff800059a0:	fc                   	cld    
ffffffff800059a1:	e9 7a fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800059a6 <isr_137>:
ffffffff800059a6:	6a 00                	push   0x0
ffffffff800059a8:	68 89 00 00 00       	push   0x89
ffffffff800059ad:	fc                   	cld    
ffffffff800059ae:	e9 6d fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800059b3 <isr_138>:
ffffffff800059b3:	6a 00                	push   0x0
ffffffff800059b5:	68 8a 00 00 00       	push   0x8a
ffffffff800059ba:	fc                   	cld    
ffffffff800059bb:	e9 60 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800059c0 <isr_139>:
ffffffff800059c0:	6a 00                	push   0x0
ffffffff800059c2:	68 8b 00 00 00       	push   0x8b
ffffffff800059c7:	fc                   	cld    
ffffffff800059c8:	e9 53 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800059cd <isr_140>:
ffffffff800059cd:	6a 00                	push   0x0
ffffffff800059cf:	68 8c 00 00 00       	push   0x8c
ffffffff800059d4:	fc                   	cld    
ffffffff800059d5:	e9 46 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800059da <isr_141>:
ffffffff800059da:	6a 00                	push   0x0
ffffffff800059dc:	68 8d 00 00 00       	push   0x8d
ffffffff800059e1:	fc                   	cld    
ffffffff800059e2:	e9 39 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800059e7 <isr_142>:
ffffffff800059e7:	6a 00                	push   0x0
ffffffff800059e9:	68 8e 00 00 00       	push   0x8e
ffffffff800059ee:	fc                   	cld    
ffffffff800059ef:	e9 2c fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff800059f4 <isr_143>:
ffffffff800059f4:	6a 00                	push   0x0
ffffffff800059f6:	68 8f 00 00 00       	push   0x8f
ffffffff800059fb:	fc                   	cld    
ffffffff800059fc:	e9 1f fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a01 <isr_144>:
ffffffff80005a01:	6a 00                	push   0x0
ffffffff80005a03:	68 90 00 00 00       	push   0x90
ffffffff80005a08:	fc                   	cld    
ffffffff80005a09:	e9 12 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a0e <isr_145>:
ffffffff80005a0e:	6a 00                	push   0x0
ffffffff80005a10:	68 91 00 00 00       	push   0x91
ffffffff80005a15:	fc                   	cld    
ffffffff80005a16:	e9 05 fa ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a1b <isr_146>:
ffffffff80005a1b:	6a 00                	push   0x0
ffffffff80005a1d:	68 92 00 00 00       	push   0x92
ffffffff80005a22:	fc                   	cld    
ffffffff80005a23:	e9 f8 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a28 <isr_147>:
ffffffff80005a28:	6a 00                	push   0x0
ffffffff80005a2a:	68 93 00 00 00       	push   0x93
ffffffff80005a2f:	fc                   	cld    
ffffffff80005a30:	e9 eb f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a35 <isr_148>:
ffffffff80005a35:	6a 00                	push   0x0
ffffffff80005a37:	68 94 00 00 00       	push   0x94
ffffffff80005a3c:	fc                   	cld    
ffffffff80005a3d:	e9 de f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a42 <isr_149>:
ffffffff80005a42:	6a 00                	push   0x0
ffffffff80005a44:	68 95 00 00 00       	push   0x95
ffffffff80005a49:	fc                   	cld    
ffffffff80005a4a:	e9 d1 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a4f <isr_150>:
ffffffff80005a4f:	6a 00                	push   0x0
ffffffff80005a51:	68 96 00 00 00       	push   0x96
ffffffff80005a56:	fc                   	cld    
ffffffff80005a57:	e9 c4 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a5c <isr_151>:
ffffffff80005a5c:	6a 00                	push   0x0
ffffffff80005a5e:	68 97 00 00 00       	push   0x97
ffffffff80005a63:	fc                   	cld    
ffffffff80005a64:	e9 b7 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a69 <isr_152>:
ffffffff80005a69:	6a 00                	push   0x0
ffffffff80005a6b:	68 98 00 00 00       	push   0x98
ffffffff80005a70:	fc                   	cld    
ffffffff80005a71:	e9 aa f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a76 <isr_153>:
ffffffff80005a76:	6a 00                	push   0x0
ffffffff80005a78:	68 99 00 00 00       	push   0x99
ffffffff80005a7d:	fc                   	cld    
ffffffff80005a7e:	e9 9d f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a83 <isr_154>:
ffffffff80005a83:	6a 00                	push   0x0
ffffffff80005a85:	68 9a 00 00 00       	push   0x9a
ffffffff80005a8a:	fc                   	cld    
ffffffff80005a8b:	e9 90 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a90 <isr_155>:
ffffffff80005a90:	6a 00                	push   0x0
ffffffff80005a92:	68 9b 00 00 00       	push   0x9b
ffffffff80005a97:	fc                   	cld    
ffffffff80005a98:	e9 83 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005a9d <isr_156>:
ffffffff80005a9d:	6a 00                	push   0x0
ffffffff80005a9f:	68 9c 00 00 00       	push   0x9c
ffffffff80005aa4:	fc                   	cld    
ffffffff80005aa5:	e9 76 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005aaa <isr_157>:
ffffffff80005aaa:	6a 00                	push   0x0
ffffffff80005aac:	68 9d 00 00 00       	push   0x9d
ffffffff80005ab1:	fc                   	cld    
ffffffff80005ab2:	e9 69 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ab7 <isr_158>:
ffffffff80005ab7:	6a 00                	push   0x0
ffffffff80005ab9:	68 9e 00 00 00       	push   0x9e
ffffffff80005abe:	fc                   	cld    
ffffffff80005abf:	e9 5c f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ac4 <isr_159>:
ffffffff80005ac4:	6a 00                	push   0x0
ffffffff80005ac6:	68 9f 00 00 00       	push   0x9f
ffffffff80005acb:	fc                   	cld    
ffffffff80005acc:	e9 4f f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ad1 <isr_160>:
ffffffff80005ad1:	6a 00                	push   0x0
ffffffff80005ad3:	68 a0 00 00 00       	push   0xa0
ffffffff80005ad8:	fc                   	cld    
ffffffff80005ad9:	e9 42 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ade <isr_161>:
ffffffff80005ade:	6a 00                	push   0x0
ffffffff80005ae0:	68 a1 00 00 00       	push   0xa1
ffffffff80005ae5:	fc                   	cld    
ffffffff80005ae6:	e9 35 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005aeb <isr_162>:
ffffffff80005aeb:	6a 00                	push   0x0
ffffffff80005aed:	68 a2 00 00 00       	push   0xa2
ffffffff80005af2:	fc                   	cld    
ffffffff80005af3:	e9 28 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005af8 <isr_163>:
ffffffff80005af8:	6a 00                	push   0x0
ffffffff80005afa:	68 a3 00 00 00       	push   0xa3
ffffffff80005aff:	fc                   	cld    
ffffffff80005b00:	e9 1b f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b05 <isr_164>:
ffffffff80005b05:	6a 00                	push   0x0
ffffffff80005b07:	68 a4 00 00 00       	push   0xa4
ffffffff80005b0c:	fc                   	cld    
ffffffff80005b0d:	e9 0e f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b12 <isr_165>:
ffffffff80005b12:	6a 00                	push   0x0
ffffffff80005b14:	68 a5 00 00 00       	push   0xa5
ffffffff80005b19:	fc                   	cld    
ffffffff80005b1a:	e9 01 f9 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b1f <isr_166>:
ffffffff80005b1f:	6a 00                	push   0x0
ffffffff80005b21:	68 a6 00 00 00       	push   0xa6
ffffffff80005b26:	fc                   	cld    
ffffffff80005b27:	e9 f4 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b2c <isr_167>:
ffffffff80005b2c:	6a 00                	push   0x0
ffffffff80005b2e:	68 a7 00 00 00       	push   0xa7
ffffffff80005b33:	fc                   	cld    
ffffffff80005b34:	e9 e7 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b39 <isr_168>:
ffffffff80005b39:	6a 00                	push   0x0
ffffffff80005b3b:	68 a8 00 00 00       	push   0xa8
ffffffff80005b40:	fc                   	cld    
ffffffff80005b41:	e9 da f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b46 <isr_169>:
ffffffff80005b46:	6a 00                	push   0x0
ffffffff80005b48:	68 a9 00 00 00       	push   0xa9
ffffffff80005b4d:	fc                   	cld    
ffffffff80005b4e:	e9 cd f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b53 <isr_170>:
ffffffff80005b53:	6a 00                	push   0x0
ffffffff80005b55:	68 aa 00 00 00       	push   0xaa
ffffffff80005b5a:	fc                   	cld    
ffffffff80005b5b:	e9 c0 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b60 <isr_171>:
ffffffff80005b60:	6a 00                	push   0x0
ffffffff80005b62:	68 ab 00 00 00       	push   0xab
ffffffff80005b67:	fc                   	cld    
ffffffff80005b68:	e9 b3 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b6d <isr_172>:
ffffffff80005b6d:	6a 00                	push   0x0
ffffffff80005b6f:	68 ac 00 00 00       	push   0xac
ffffffff80005b74:	fc                   	cld    
ffffffff80005b75:	e9 a6 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b7a <isr_173>:
ffffffff80005b7a:	6a 00                	push   0x0
ffffffff80005b7c:	68 ad 00 00 00       	push   0xad
ffffffff80005b81:	fc                   	cld    
ffffffff80005b82:	e9 99 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b87 <isr_174>:
ffffffff80005b87:	6a 00                	push   0x0
ffffffff80005b89:	68 ae 00 00 00       	push   0xae
ffffffff80005b8e:	fc                   	cld    
ffffffff80005b8f:	e9 8c f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005b94 <isr_175>:
ffffffff80005b94:	6a 00                	push   0x0
ffffffff80005b96:	68 af 00 00 00       	push   0xaf
ffffffff80005b9b:	fc                   	cld    
ffffffff80005b9c:	e9 7f f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ba1 <isr_176>:
ffffffff80005ba1:	6a 00                	push   0x0
ffffffff80005ba3:	68 b0 00 00 00       	push   0xb0
ffffffff80005ba8:	fc                   	cld    
ffffffff80005ba9:	e9 72 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005bae <isr_177>:
ffffffff80005bae:	6a 00                	push   0x0
ffffffff80005bb0:	68 b1 00 00 00       	push   0xb1
ffffffff80005bb5:	fc                   	cld    
ffffffff80005bb6:	e9 65 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005bbb <isr_178>:
ffffffff80005bbb:	6a 00                	push   0x0
ffffffff80005bbd:	68 b2 00 00 00       	push   0xb2
ffffffff80005bc2:	fc                   	cld    
ffffffff80005bc3:	e9 58 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005bc8 <isr_179>:
ffffffff80005bc8:	6a 00                	push   0x0
ffffffff80005bca:	68 b3 00 00 00       	push   0xb3
ffffffff80005bcf:	fc                   	cld    
ffffffff80005bd0:	e9 4b f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005bd5 <isr_180>:
ffffffff80005bd5:	6a 00                	push   0x0
ffffffff80005bd7:	68 b4 00 00 00       	push   0xb4
ffffffff80005bdc:	fc                   	cld    
ffffffff80005bdd:	e9 3e f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005be2 <isr_181>:
ffffffff80005be2:	6a 00                	push   0x0
ffffffff80005be4:	68 b5 00 00 00       	push   0xb5
ffffffff80005be9:	fc                   	cld    
ffffffff80005bea:	e9 31 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005bef <isr_182>:
ffffffff80005bef:	6a 00                	push   0x0
ffffffff80005bf1:	68 b6 00 00 00       	push   0xb6
ffffffff80005bf6:	fc                   	cld    
ffffffff80005bf7:	e9 24 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005bfc <isr_183>:
ffffffff80005bfc:	6a 00                	push   0x0
ffffffff80005bfe:	68 b7 00 00 00       	push   0xb7
ffffffff80005c03:	fc                   	cld    
ffffffff80005c04:	e9 17 f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c09 <isr_184>:
ffffffff80005c09:	6a 00                	push   0x0
ffffffff80005c0b:	68 b8 00 00 00       	push   0xb8
ffffffff80005c10:	fc                   	cld    
ffffffff80005c11:	e9 0a f8 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c16 <isr_185>:
ffffffff80005c16:	6a 00                	push   0x0
ffffffff80005c18:	68 b9 00 00 00       	push   0xb9
ffffffff80005c1d:	fc                   	cld    
ffffffff80005c1e:	e9 fd f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c23 <isr_186>:
ffffffff80005c23:	6a 00                	push   0x0
ffffffff80005c25:	68 ba 00 00 00       	push   0xba
ffffffff80005c2a:	fc                   	cld    
ffffffff80005c2b:	e9 f0 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c30 <isr_187>:
ffffffff80005c30:	6a 00                	push   0x0
ffffffff80005c32:	68 bb 00 00 00       	push   0xbb
ffffffff80005c37:	fc                   	cld    
ffffffff80005c38:	e9 e3 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c3d <isr_188>:
ffffffff80005c3d:	6a 00                	push   0x0
ffffffff80005c3f:	68 bc 00 00 00       	push   0xbc
ffffffff80005c44:	fc                   	cld    
ffffffff80005c45:	e9 d6 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c4a <isr_189>:
ffffffff80005c4a:	6a 00                	push   0x0
ffffffff80005c4c:	68 bd 00 00 00       	push   0xbd
ffffffff80005c51:	fc                   	cld    
ffffffff80005c52:	e9 c9 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c57 <isr_190>:
ffffffff80005c57:	6a 00                	push   0x0
ffffffff80005c59:	68 be 00 00 00       	push   0xbe
ffffffff80005c5e:	fc                   	cld    
ffffffff80005c5f:	e9 bc f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c64 <isr_191>:
ffffffff80005c64:	6a 00                	push   0x0
ffffffff80005c66:	68 bf 00 00 00       	push   0xbf
ffffffff80005c6b:	fc                   	cld    
ffffffff80005c6c:	e9 af f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c71 <isr_192>:
ffffffff80005c71:	6a 00                	push   0x0
ffffffff80005c73:	68 c0 00 00 00       	push   0xc0
ffffffff80005c78:	fc                   	cld    
ffffffff80005c79:	e9 a2 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c7e <isr_193>:
ffffffff80005c7e:	6a 00                	push   0x0
ffffffff80005c80:	68 c1 00 00 00       	push   0xc1
ffffffff80005c85:	fc                   	cld    
ffffffff80005c86:	e9 95 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c8b <isr_194>:
ffffffff80005c8b:	6a 00                	push   0x0
ffffffff80005c8d:	68 c2 00 00 00       	push   0xc2
ffffffff80005c92:	fc                   	cld    
ffffffff80005c93:	e9 88 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005c98 <isr_195>:
ffffffff80005c98:	6a 00                	push   0x0
ffffffff80005c9a:	68 c3 00 00 00       	push   0xc3
ffffffff80005c9f:	fc                   	cld    
ffffffff80005ca0:	e9 7b f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ca5 <isr_196>:
ffffffff80005ca5:	6a 00                	push   0x0
ffffffff80005ca7:	68 c4 00 00 00       	push   0xc4
ffffffff80005cac:	fc                   	cld    
ffffffff80005cad:	e9 6e f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005cb2 <isr_197>:
ffffffff80005cb2:	6a 00                	push   0x0
ffffffff80005cb4:	68 c5 00 00 00       	push   0xc5
ffffffff80005cb9:	fc                   	cld    
ffffffff80005cba:	e9 61 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005cbf <isr_198>:
ffffffff80005cbf:	6a 00                	push   0x0
ffffffff80005cc1:	68 c6 00 00 00       	push   0xc6
ffffffff80005cc6:	fc                   	cld    
ffffffff80005cc7:	e9 54 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ccc <isr_199>:
ffffffff80005ccc:	6a 00                	push   0x0
ffffffff80005cce:	68 c7 00 00 00       	push   0xc7
ffffffff80005cd3:	fc                   	cld    
ffffffff80005cd4:	e9 47 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005cd9 <isr_200>:
ffffffff80005cd9:	6a 00                	push   0x0
ffffffff80005cdb:	68 c8 00 00 00       	push   0xc8
ffffffff80005ce0:	fc                   	cld    
ffffffff80005ce1:	e9 3a f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ce6 <isr_201>:
ffffffff80005ce6:	6a 00                	push   0x0
ffffffff80005ce8:	68 c9 00 00 00       	push   0xc9
ffffffff80005ced:	fc                   	cld    
ffffffff80005cee:	e9 2d f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005cf3 <isr_202>:
ffffffff80005cf3:	6a 00                	push   0x0
ffffffff80005cf5:	68 ca 00 00 00       	push   0xca
ffffffff80005cfa:	fc                   	cld    
ffffffff80005cfb:	e9 20 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d00 <isr_203>:
ffffffff80005d00:	6a 00                	push   0x0
ffffffff80005d02:	68 cb 00 00 00       	push   0xcb
ffffffff80005d07:	fc                   	cld    
ffffffff80005d08:	e9 13 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d0d <isr_204>:
ffffffff80005d0d:	6a 00                	push   0x0
ffffffff80005d0f:	68 cc 00 00 00       	push   0xcc
ffffffff80005d14:	fc                   	cld    
ffffffff80005d15:	e9 06 f7 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d1a <isr_205>:
ffffffff80005d1a:	6a 00                	push   0x0
ffffffff80005d1c:	68 cd 00 00 00       	push   0xcd
ffffffff80005d21:	fc                   	cld    
ffffffff80005d22:	e9 f9 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d27 <isr_206>:
ffffffff80005d27:	6a 00                	push   0x0
ffffffff80005d29:	68 ce 00 00 00       	push   0xce
ffffffff80005d2e:	fc                   	cld    
ffffffff80005d2f:	e9 ec f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d34 <isr_207>:
ffffffff80005d34:	6a 00                	push   0x0
ffffffff80005d36:	68 cf 00 00 00       	push   0xcf
ffffffff80005d3b:	fc                   	cld    
ffffffff80005d3c:	e9 df f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d41 <isr_208>:
ffffffff80005d41:	6a 00                	push   0x0
ffffffff80005d43:	68 d0 00 00 00       	push   0xd0
ffffffff80005d48:	fc                   	cld    
ffffffff80005d49:	e9 d2 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d4e <isr_209>:
ffffffff80005d4e:	6a 00                	push   0x0
ffffffff80005d50:	68 d1 00 00 00       	push   0xd1
ffffffff80005d55:	fc                   	cld    
ffffffff80005d56:	e9 c5 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d5b <isr_210>:
ffffffff80005d5b:	6a 00                	push   0x0
ffffffff80005d5d:	68 d2 00 00 00       	push   0xd2
ffffffff80005d62:	fc                   	cld    
ffffffff80005d63:	e9 b8 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d68 <isr_211>:
ffffffff80005d68:	6a 00                	push   0x0
ffffffff80005d6a:	68 d3 00 00 00       	push   0xd3
ffffffff80005d6f:	fc                   	cld    
ffffffff80005d70:	e9 ab f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d75 <isr_212>:
ffffffff80005d75:	6a 00                	push   0x0
ffffffff80005d77:	68 d4 00 00 00       	push   0xd4
ffffffff80005d7c:	fc                   	cld    
ffffffff80005d7d:	e9 9e f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d82 <isr_213>:
ffffffff80005d82:	6a 00                	push   0x0
ffffffff80005d84:	68 d5 00 00 00       	push   0xd5
ffffffff80005d89:	fc                   	cld    
ffffffff80005d8a:	e9 91 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d8f <isr_214>:
ffffffff80005d8f:	6a 00                	push   0x0
ffffffff80005d91:	68 d6 00 00 00       	push   0xd6
ffffffff80005d96:	fc                   	cld    
ffffffff80005d97:	e9 84 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005d9c <isr_215>:
ffffffff80005d9c:	6a 00                	push   0x0
ffffffff80005d9e:	68 d7 00 00 00       	push   0xd7
ffffffff80005da3:	fc                   	cld    
ffffffff80005da4:	e9 77 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005da9 <isr_216>:
ffffffff80005da9:	6a 00                	push   0x0
ffffffff80005dab:	68 d8 00 00 00       	push   0xd8
ffffffff80005db0:	fc                   	cld    
ffffffff80005db1:	e9 6a f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005db6 <isr_217>:
ffffffff80005db6:	6a 00                	push   0x0
ffffffff80005db8:	68 d9 00 00 00       	push   0xd9
ffffffff80005dbd:	fc                   	cld    
ffffffff80005dbe:	e9 5d f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005dc3 <isr_218>:
ffffffff80005dc3:	6a 00                	push   0x0
ffffffff80005dc5:	68 da 00 00 00       	push   0xda
ffffffff80005dca:	fc                   	cld    
ffffffff80005dcb:	e9 50 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005dd0 <isr_219>:
ffffffff80005dd0:	6a 00                	push   0x0
ffffffff80005dd2:	68 db 00 00 00       	push   0xdb
ffffffff80005dd7:	fc                   	cld    
ffffffff80005dd8:	e9 43 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ddd <isr_220>:
ffffffff80005ddd:	6a 00                	push   0x0
ffffffff80005ddf:	68 dc 00 00 00       	push   0xdc
ffffffff80005de4:	fc                   	cld    
ffffffff80005de5:	e9 36 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005dea <isr_221>:
ffffffff80005dea:	6a 00                	push   0x0
ffffffff80005dec:	68 dd 00 00 00       	push   0xdd
ffffffff80005df1:	fc                   	cld    
ffffffff80005df2:	e9 29 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005df7 <isr_222>:
ffffffff80005df7:	6a 00                	push   0x0
ffffffff80005df9:	68 de 00 00 00       	push   0xde
ffffffff80005dfe:	fc                   	cld    
ffffffff80005dff:	e9 1c f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e04 <isr_223>:
ffffffff80005e04:	6a 00                	push   0x0
ffffffff80005e06:	68 df 00 00 00       	push   0xdf
ffffffff80005e0b:	fc                   	cld    
ffffffff80005e0c:	e9 0f f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e11 <isr_224>:
ffffffff80005e11:	6a 00                	push   0x0
ffffffff80005e13:	68 e0 00 00 00       	push   0xe0
ffffffff80005e18:	fc                   	cld    
ffffffff80005e19:	e9 02 f6 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e1e <isr_225>:
ffffffff80005e1e:	6a 00                	push   0x0
ffffffff80005e20:	68 e1 00 00 00       	push   0xe1
ffffffff80005e25:	fc                   	cld    
ffffffff80005e26:	e9 f5 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e2b <isr_226>:
ffffffff80005e2b:	6a 00                	push   0x0
ffffffff80005e2d:	68 e2 00 00 00       	push   0xe2
ffffffff80005e32:	fc                   	cld    
ffffffff80005e33:	e9 e8 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e38 <isr_227>:
ffffffff80005e38:	6a 00                	push   0x0
ffffffff80005e3a:	68 e3 00 00 00       	push   0xe3
ffffffff80005e3f:	fc                   	cld    
ffffffff80005e40:	e9 db f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e45 <isr_228>:
ffffffff80005e45:	6a 00                	push   0x0
ffffffff80005e47:	68 e4 00 00 00       	push   0xe4
ffffffff80005e4c:	fc                   	cld    
ffffffff80005e4d:	e9 ce f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e52 <isr_229>:
ffffffff80005e52:	6a 00                	push   0x0
ffffffff80005e54:	68 e5 00 00 00       	push   0xe5
ffffffff80005e59:	fc                   	cld    
ffffffff80005e5a:	e9 c1 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e5f <isr_230>:
ffffffff80005e5f:	6a 00                	push   0x0
ffffffff80005e61:	68 e6 00 00 00       	push   0xe6
ffffffff80005e66:	fc                   	cld    
ffffffff80005e67:	e9 b4 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e6c <isr_231>:
ffffffff80005e6c:	6a 00                	push   0x0
ffffffff80005e6e:	68 e7 00 00 00       	push   0xe7
ffffffff80005e73:	fc                   	cld    
ffffffff80005e74:	e9 a7 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e79 <isr_232>:
ffffffff80005e79:	6a 00                	push   0x0
ffffffff80005e7b:	68 e8 00 00 00       	push   0xe8
ffffffff80005e80:	fc                   	cld    
ffffffff80005e81:	e9 9a f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e86 <isr_233>:
ffffffff80005e86:	6a 00                	push   0x0
ffffffff80005e88:	68 e9 00 00 00       	push   0xe9
ffffffff80005e8d:	fc                   	cld    
ffffffff80005e8e:	e9 8d f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005e93 <isr_234>:
ffffffff80005e93:	6a 00                	push   0x0
ffffffff80005e95:	68 ea 00 00 00       	push   0xea
ffffffff80005e9a:	fc                   	cld    
ffffffff80005e9b:	e9 80 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ea0 <isr_235>:
ffffffff80005ea0:	6a 00                	push   0x0
ffffffff80005ea2:	68 eb 00 00 00       	push   0xeb
ffffffff80005ea7:	fc                   	cld    
ffffffff80005ea8:	e9 73 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ead <isr_236>:
ffffffff80005ead:	6a 00                	push   0x0
ffffffff80005eaf:	68 ec 00 00 00       	push   0xec
ffffffff80005eb4:	fc                   	cld    
ffffffff80005eb5:	e9 66 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005eba <isr_237>:
ffffffff80005eba:	6a 00                	push   0x0
ffffffff80005ebc:	68 ed 00 00 00       	push   0xed
ffffffff80005ec1:	fc                   	cld    
ffffffff80005ec2:	e9 59 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ec7 <isr_238>:
ffffffff80005ec7:	6a 00                	push   0x0
ffffffff80005ec9:	68 ee 00 00 00       	push   0xee
ffffffff80005ece:	fc                   	cld    
ffffffff80005ecf:	e9 4c f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ed4 <isr_239>:
ffffffff80005ed4:	6a 00                	push   0x0
ffffffff80005ed6:	68 ef 00 00 00       	push   0xef
ffffffff80005edb:	fc                   	cld    
ffffffff80005edc:	e9 3f f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005ee1 <isr_240>:
ffffffff80005ee1:	6a 00                	push   0x0
ffffffff80005ee3:	68 f0 00 00 00       	push   0xf0
ffffffff80005ee8:	fc                   	cld    
ffffffff80005ee9:	e9 32 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005eee <isr_241>:
ffffffff80005eee:	6a 00                	push   0x0
ffffffff80005ef0:	68 f1 00 00 00       	push   0xf1
ffffffff80005ef5:	fc                   	cld    
ffffffff80005ef6:	e9 25 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005efb <isr_242>:
ffffffff80005efb:	6a 00                	push   0x0
ffffffff80005efd:	68 f2 00 00 00       	push   0xf2
ffffffff80005f02:	fc                   	cld    
ffffffff80005f03:	e9 18 f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f08 <isr_243>:
ffffffff80005f08:	6a 00                	push   0x0
ffffffff80005f0a:	68 f3 00 00 00       	push   0xf3
ffffffff80005f0f:	fc                   	cld    
ffffffff80005f10:	e9 0b f5 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f15 <isr_244>:
ffffffff80005f15:	6a 00                	push   0x0
ffffffff80005f17:	68 f4 00 00 00       	push   0xf4
ffffffff80005f1c:	fc                   	cld    
ffffffff80005f1d:	e9 fe f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f22 <isr_245>:
ffffffff80005f22:	6a 00                	push   0x0
ffffffff80005f24:	68 f5 00 00 00       	push   0xf5
ffffffff80005f29:	fc                   	cld    
ffffffff80005f2a:	e9 f1 f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f2f <isr_246>:
ffffffff80005f2f:	6a 00                	push   0x0
ffffffff80005f31:	68 f6 00 00 00       	push   0xf6
ffffffff80005f36:	fc                   	cld    
ffffffff80005f37:	e9 e4 f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f3c <isr_247>:
ffffffff80005f3c:	6a 00                	push   0x0
ffffffff80005f3e:	68 f7 00 00 00       	push   0xf7
ffffffff80005f43:	fc                   	cld    
ffffffff80005f44:	e9 d7 f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f49 <isr_248>:
ffffffff80005f49:	6a 00                	push   0x0
ffffffff80005f4b:	68 f8 00 00 00       	push   0xf8
ffffffff80005f50:	fc                   	cld    
ffffffff80005f51:	e9 ca f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f56 <isr_249>:
ffffffff80005f56:	6a 00                	push   0x0
ffffffff80005f58:	68 f9 00 00 00       	push   0xf9
ffffffff80005f5d:	fc                   	cld    
ffffffff80005f5e:	e9 bd f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f63 <isr_250>:
ffffffff80005f63:	6a 00                	push   0x0
ffffffff80005f65:	68 fa 00 00 00       	push   0xfa
ffffffff80005f6a:	fc                   	cld    
ffffffff80005f6b:	e9 b0 f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f70 <isr_251>:
ffffffff80005f70:	6a 00                	push   0x0
ffffffff80005f72:	68 fb 00 00 00       	push   0xfb
ffffffff80005f77:	fc                   	cld    
ffffffff80005f78:	e9 a3 f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f7d <isr_252>:
ffffffff80005f7d:	6a 00                	push   0x0
ffffffff80005f7f:	68 fc 00 00 00       	push   0xfc
ffffffff80005f84:	fc                   	cld    
ffffffff80005f85:	e9 96 f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f8a <isr_253>:
ffffffff80005f8a:	6a 00                	push   0x0
ffffffff80005f8c:	68 fd 00 00 00       	push   0xfd
ffffffff80005f91:	fc                   	cld    
ffffffff80005f92:	e9 89 f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005f97 <isr_254>:
ffffffff80005f97:	6a 00                	push   0x0
ffffffff80005f99:	68 fe 00 00 00       	push   0xfe
ffffffff80005f9e:	fc                   	cld    
ffffffff80005f9f:	e9 7c f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005fa4 <isr_255>:
ffffffff80005fa4:	6a 00                	push   0x0
ffffffff80005fa6:	68 ff 00 00 00       	push   0xff
ffffffff80005fab:	fc                   	cld    
ffffffff80005fac:	e9 6f f4 ff ff       	jmp    ffffffff80005420 <isr_common>

ffffffff80005fb1 <isr_table>:
ffffffff80005fb1:	60                   	(bad)  
ffffffff80005fb2:	54                   	push   rsp
ffffffff80005fb3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80005fb9:	67 54                	addr32 push rsp
ffffffff80005fbb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80005fc1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff80005fc2:	54                   	push   rsp
ffffffff80005fc3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80005fc9:	75 54                	jne    ffffffff8000601f <isr_table+0x6e>
ffffffff80005fcb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80005fd1:	7c 54                	jl     ffffffff80006027 <isr_table+0x76>
ffffffff80005fd3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80005fd9:	83 54 00 80 ff       	adc    DWORD PTR [rax+rax*1-0x80],0xffffffff
ffffffff80005fde:	ff                   	(bad)  
ffffffff80005fdf:	ff                   	(bad)  
ffffffff80005fe0:	ff 8a 54 00 80 ff    	dec    DWORD PTR [rdx-0x7fffac]
ffffffff80005fe6:	ff                   	(bad)  
ffffffff80005fe7:	ff                   	(bad)  
ffffffff80005fe8:	ff 91 54 00 80 ff    	call   QWORD PTR [rcx-0x7fffac]
ffffffff80005fee:	ff                   	(bad)  
ffffffff80005fef:	ff                   	(bad)  
ffffffff80005ff0:	ff 98 54 00 80 ff    	call   FWORD PTR [rax-0x7fffac]
ffffffff80005ff6:	ff                   	(bad)  
ffffffff80005ff7:	ff                   	(bad)  
ffffffff80005ff8:	ff 9d 54 00 80 ff    	call   FWORD PTR [rbp-0x7fffac]
ffffffff80005ffe:	ff                   	(bad)  
ffffffff80005fff:	ff                   	(bad)  
ffffffff80006000:	ff a7 54 00 80 ff    	jmp    QWORD PTR [rdi-0x7fffac]
ffffffff80006006:	ff                   	(bad)  
ffffffff80006007:	ff                   	(bad)  
ffffffff80006008:	ff af 54 00 80 ff    	jmp    FWORD PTR [rdi-0x7fffac]
ffffffff8000600e:	ff                   	(bad)  
ffffffff8000600f:	ff                   	(bad)  
ffffffff80006010:	ff b7 54 00 80 ff    	push   QWORD PTR [rdi-0x7fffac]
ffffffff80006016:	ff                   	(bad)  
ffffffff80006017:	ff                   	(bad)  
ffffffff80006018:	ff                   	(bad)  
ffffffff80006019:	bf 54 00 80 ff       	mov    edi,0xff800054
ffffffff8000601e:	ff                   	(bad)  
ffffffff8000601f:	ff                   	(bad)  
ffffffff80006020:	ff c7                	inc    edi
ffffffff80006022:	54                   	push   rsp
ffffffff80006023:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006029:	cf                   	iret   
ffffffff8000602a:	54                   	push   rsp
ffffffff8000602b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006031:	d9 54 00 80          	fst    DWORD PTR [rax+rax*1-0x80]
ffffffff80006035:	ff                   	(bad)  
ffffffff80006036:	ff                   	(bad)  
ffffffff80006037:	ff                   	(bad)  
ffffffff80006038:	ff e3                	jmp    rbx
ffffffff8000603a:	54                   	push   rsp
ffffffff8000603b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006041:	eb 54                	jmp    ffffffff80006097 <isr_table+0xe6>
ffffffff80006043:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006049:	f5                   	cmc    
ffffffff8000604a:	54                   	push   rsp
ffffffff8000604b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006051:	ff 54 00 80          	call   QWORD PTR [rax+rax*1-0x80]
ffffffff80006055:	ff                   	(bad)  
ffffffff80006056:	ff                   	(bad)  
ffffffff80006057:	ff                   	(bad)  
ffffffff80006058:	ff 09                	dec    DWORD PTR [rcx]
ffffffff8000605a:	55                   	push   rbp
ffffffff8000605b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006061:	11 55 00             	adc    DWORD PTR [rbp+0x0],edx
ffffffff80006064:	80 ff ff             	cmp    bh,0xff
ffffffff80006067:	ff                   	(bad)  
ffffffff80006068:	ff 1b                	call   FWORD PTR [rbx]
ffffffff8000606a:	55                   	push   rbp
ffffffff8000606b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006071:	25 55 00 80 ff       	and    eax,0xff800055
ffffffff80006076:	ff                   	(bad)  
ffffffff80006077:	ff                   	(bad)  
ffffffff80006078:	ff 2f                	jmp    FWORD PTR [rdi]
ffffffff8000607a:	55                   	push   rbp
ffffffff8000607b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006081:	39 55 00             	cmp    DWORD PTR [rbp+0x0],edx
ffffffff80006084:	80 ff ff             	cmp    bh,0xff
ffffffff80006087:	ff                   	(bad)  
ffffffff80006088:	ff 43 55             	inc    DWORD PTR [rbx+0x55]
ffffffff8000608b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006091:	4d 55                	rex.WRB push r13
ffffffff80006093:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006099:	57                   	push   rdi
ffffffff8000609a:	55                   	push   rbp
ffffffff8000609b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800060a1:	5f                   	pop    rdi
ffffffff800060a2:	55                   	push   rbp
ffffffff800060a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800060a9:	67 55                	addr32 push rbp
ffffffff800060ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800060b1:	71 55                	jno    ffffffff80006108 <isr_table+0x157>
ffffffff800060b3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800060b9:	7b 55                	jnp    ffffffff80006110 <isr_table+0x15f>
ffffffff800060bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800060c1:	85 55 00             	test   DWORD PTR [rbp+0x0],edx
ffffffff800060c4:	80 ff ff             	cmp    bh,0xff
ffffffff800060c7:	ff                   	(bad)  
ffffffff800060c8:	ff 8f 55 00 80 ff    	dec    DWORD PTR [rdi-0x7fffab]
ffffffff800060ce:	ff                   	(bad)  
ffffffff800060cf:	ff                   	(bad)  
ffffffff800060d0:	ff 99 55 00 80 ff    	call   FWORD PTR [rcx-0x7fffab]
ffffffff800060d6:	ff                   	(bad)  
ffffffff800060d7:	ff                   	(bad)  
ffffffff800060d8:	ff a3 55 00 80 ff    	jmp    QWORD PTR [rbx-0x7fffab]
ffffffff800060de:	ff                   	(bad)  
ffffffff800060df:	ff                   	(bad)  
ffffffff800060e0:	ff ad 55 00 80 ff    	jmp    FWORD PTR [rbp-0x7fffab]
ffffffff800060e6:	ff                   	(bad)  
ffffffff800060e7:	ff                   	(bad)  
ffffffff800060e8:	ff b7 55 00 80 ff    	push   QWORD PTR [rdi-0x7fffab]
ffffffff800060ee:	ff                   	(bad)  
ffffffff800060ef:	ff                   	(bad)  
ffffffff800060f0:	ff c1                	inc    ecx
ffffffff800060f2:	55                   	push   rbp
ffffffff800060f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800060f9:	cb                   	retf   
ffffffff800060fa:	55                   	push   rbp
ffffffff800060fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006101:	d5                   	(bad)  
ffffffff80006102:	55                   	push   rbp
ffffffff80006103:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006109:	df 55 00             	fist   WORD PTR [rbp+0x0]
ffffffff8000610c:	80 ff ff             	cmp    bh,0xff
ffffffff8000610f:	ff                   	(bad)  
ffffffff80006110:	ff                   	(bad)  
ffffffff80006111:	e9 55 00 80 ff       	jmp    ffffffff7f80616b <getexp(unsigned int)-0x7f9e95>
ffffffff80006116:	ff                   	(bad)  
ffffffff80006117:	ff                   	(bad)  
ffffffff80006118:	ff f3                	push   rbx
ffffffff8000611a:	55                   	push   rbp
ffffffff8000611b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006121:	fd                   	std    
ffffffff80006122:	55                   	push   rbp
ffffffff80006123:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006129:	07                   	(bad)  
ffffffff8000612a:	56                   	push   rsi
ffffffff8000612b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006131:	11 56 00             	adc    DWORD PTR [rsi+0x0],edx
ffffffff80006134:	80 ff ff             	cmp    bh,0xff
ffffffff80006137:	ff                   	(bad)  
ffffffff80006138:	ff 1b                	call   FWORD PTR [rbx]
ffffffff8000613a:	56                   	push   rsi
ffffffff8000613b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006141:	25 56 00 80 ff       	and    eax,0xff800056
ffffffff80006146:	ff                   	(bad)  
ffffffff80006147:	ff                   	(bad)  
ffffffff80006148:	ff 2f                	jmp    FWORD PTR [rdi]
ffffffff8000614a:	56                   	push   rsi
ffffffff8000614b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006151:	39 56 00             	cmp    DWORD PTR [rsi+0x0],edx
ffffffff80006154:	80 ff ff             	cmp    bh,0xff
ffffffff80006157:	ff                   	(bad)  
ffffffff80006158:	ff 43 56             	inc    DWORD PTR [rbx+0x56]
ffffffff8000615b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006161:	4d 56                	rex.WRB push r14
ffffffff80006163:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006169:	57                   	push   rdi
ffffffff8000616a:	56                   	push   rsi
ffffffff8000616b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006171:	61                   	(bad)  
ffffffff80006172:	56                   	push   rsi
ffffffff80006173:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006179:	6b 56 00 80          	imul   edx,DWORD PTR [rsi+0x0],0xffffff80
ffffffff8000617d:	ff                   	(bad)  
ffffffff8000617e:	ff                   	(bad)  
ffffffff8000617f:	ff                   	(bad)  
ffffffff80006180:	ff 75 56             	push   QWORD PTR [rbp+0x56]
ffffffff80006183:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006189:	7f 56                	jg     ffffffff800061e1 <isr_table+0x230>
ffffffff8000618b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006191:	89 56 00             	mov    DWORD PTR [rsi+0x0],edx
ffffffff80006194:	80 ff ff             	cmp    bh,0xff
ffffffff80006197:	ff                   	(bad)  
ffffffff80006198:	ff 93 56 00 80 ff    	call   QWORD PTR [rbx-0x7fffaa]
ffffffff8000619e:	ff                   	(bad)  
ffffffff8000619f:	ff                   	(bad)  
ffffffff800061a0:	ff 9d 56 00 80 ff    	call   FWORD PTR [rbp-0x7fffaa]
ffffffff800061a6:	ff                   	(bad)  
ffffffff800061a7:	ff                   	(bad)  
ffffffff800061a8:	ff a7 56 00 80 ff    	jmp    QWORD PTR [rdi-0x7fffaa]
ffffffff800061ae:	ff                   	(bad)  
ffffffff800061af:	ff                   	(bad)  
ffffffff800061b0:	ff b1 56 00 80 ff    	push   QWORD PTR [rcx-0x7fffaa]
ffffffff800061b6:	ff                   	(bad)  
ffffffff800061b7:	ff                   	(bad)  
ffffffff800061b8:	ff                   	(bad)  
ffffffff800061b9:	bb 56 00 80 ff       	mov    ebx,0xff800056
ffffffff800061be:	ff                   	(bad)  
ffffffff800061bf:	ff                   	(bad)  
ffffffff800061c0:	ff c5                	inc    ebp
ffffffff800061c2:	56                   	push   rsi
ffffffff800061c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800061c9:	cf                   	iret   
ffffffff800061ca:	56                   	push   rsi
ffffffff800061cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800061d1:	d9 56 00             	fst    DWORD PTR [rsi+0x0]
ffffffff800061d4:	80 ff ff             	cmp    bh,0xff
ffffffff800061d7:	ff                   	(bad)  
ffffffff800061d8:	ff e3                	jmp    rbx
ffffffff800061da:	56                   	push   rsi
ffffffff800061db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800061e1:	ed                   	in     eax,dx
ffffffff800061e2:	56                   	push   rsi
ffffffff800061e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800061e9:	f7 56 00             	not    DWORD PTR [rsi+0x0]
ffffffff800061ec:	80 ff ff             	cmp    bh,0xff
ffffffff800061ef:	ff                   	(bad)  
ffffffff800061f0:	ff 01                	inc    DWORD PTR [rcx]
ffffffff800061f2:	57                   	push   rdi
ffffffff800061f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800061f9:	0b 57 00             	or     edx,DWORD PTR [rdi+0x0]
ffffffff800061fc:	80 ff ff             	cmp    bh,0xff
ffffffff800061ff:	ff                   	(bad)  
ffffffff80006200:	ff 15 57 00 80 ff    	call   QWORD PTR [rip+0xffffffffff800057]        # ffffffff7f80625d <getexp(unsigned int)-0x7f9da3>
ffffffff80006206:	ff                   	(bad)  
ffffffff80006207:	ff                   	(bad)  
ffffffff80006208:	ff 1f                	call   FWORD PTR [rdi]
ffffffff8000620a:	57                   	push   rdi
ffffffff8000620b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006211:	29 57 00             	sub    DWORD PTR [rdi+0x0],edx
ffffffff80006214:	80 ff ff             	cmp    bh,0xff
ffffffff80006217:	ff                   	(bad)  
ffffffff80006218:	ff 33                	push   QWORD PTR [rbx]
ffffffff8000621a:	57                   	push   rdi
ffffffff8000621b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006221:	3d 57 00 80 ff       	cmp    eax,0xff800057
ffffffff80006226:	ff                   	(bad)  
ffffffff80006227:	ff                   	(bad)  
ffffffff80006228:	ff 47 57             	inc    DWORD PTR [rdi+0x57]
ffffffff8000622b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006231:	51                   	push   rcx
ffffffff80006232:	57                   	push   rdi
ffffffff80006233:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006239:	5b                   	pop    rbx
ffffffff8000623a:	57                   	push   rdi
ffffffff8000623b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006241:	65 57                	gs push rdi
ffffffff80006243:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006249:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff8000624a:	57                   	push   rdi
ffffffff8000624b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006251:	79 57                	jns    ffffffff800062aa <isr_table+0x2f9>
ffffffff80006253:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006259:	83 57 00 80          	adc    DWORD PTR [rdi+0x0],0xffffff80
ffffffff8000625d:	ff                   	(bad)  
ffffffff8000625e:	ff                   	(bad)  
ffffffff8000625f:	ff                   	(bad)  
ffffffff80006260:	ff 8d 57 00 80 ff    	dec    DWORD PTR [rbp-0x7fffa9]
ffffffff80006266:	ff                   	(bad)  
ffffffff80006267:	ff                   	(bad)  
ffffffff80006268:	ff 97 57 00 80 ff    	call   QWORD PTR [rdi-0x7fffa9]
ffffffff8000626e:	ff                   	(bad)  
ffffffff8000626f:	ff                   	(bad)  
ffffffff80006270:	ff a1 57 00 80 ff    	jmp    QWORD PTR [rcx-0x7fffa9]
ffffffff80006276:	ff                   	(bad)  
ffffffff80006277:	ff                   	(bad)  
ffffffff80006278:	ff ab 57 00 80 ff    	jmp    FWORD PTR [rbx-0x7fffa9]
ffffffff8000627e:	ff                   	(bad)  
ffffffff8000627f:	ff                   	(bad)  
ffffffff80006280:	ff b5 57 00 80 ff    	push   QWORD PTR [rbp-0x7fffa9]
ffffffff80006286:	ff                   	(bad)  
ffffffff80006287:	ff                   	(bad)  
ffffffff80006288:	ff                   	(bad)  
ffffffff80006289:	bf 57 00 80 ff       	mov    edi,0xff800057
ffffffff8000628e:	ff                   	(bad)  
ffffffff8000628f:	ff                   	(bad)  
ffffffff80006290:	ff c9                	dec    ecx
ffffffff80006292:	57                   	push   rdi
ffffffff80006293:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006299:	d3 57 00             	rcl    DWORD PTR [rdi+0x0],cl
ffffffff8000629c:	80 ff ff             	cmp    bh,0xff
ffffffff8000629f:	ff                   	(bad)  
ffffffff800062a0:	ff                   	(bad)  
ffffffff800062a1:	dd 57 00             	fst    QWORD PTR [rdi+0x0]
ffffffff800062a4:	80 ff ff             	cmp    bh,0xff
ffffffff800062a7:	ff                   	(bad)  
ffffffff800062a8:	ff e7                	jmp    rdi
ffffffff800062aa:	57                   	push   rdi
ffffffff800062ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800062b1:	f1                   	int1   
ffffffff800062b2:	57                   	push   rdi
ffffffff800062b3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800062b9:	fb                   	sti    
ffffffff800062ba:	57                   	push   rdi
ffffffff800062bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800062c1:	05 58 00 80 ff       	add    eax,0xff800058
ffffffff800062c6:	ff                   	(bad)  
ffffffff800062c7:	ff                   	(bad)  
ffffffff800062c8:	ff 0f                	dec    DWORD PTR [rdi]
ffffffff800062ca:	58                   	pop    rax
ffffffff800062cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800062d1:	19 58 00             	sbb    DWORD PTR [rax+0x0],ebx
ffffffff800062d4:	80 ff ff             	cmp    bh,0xff
ffffffff800062d7:	ff                   	(bad)  
ffffffff800062d8:	ff 23                	jmp    QWORD PTR [rbx]
ffffffff800062da:	58                   	pop    rax
ffffffff800062db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800062e1:	2d 58 00 80 ff       	sub    eax,0xff800058
ffffffff800062e6:	ff                   	(bad)  
ffffffff800062e7:	ff                   	(bad)  
ffffffff800062e8:	ff 37                	push   QWORD PTR [rdi]
ffffffff800062ea:	58                   	pop    rax
ffffffff800062eb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800062f1:	41 58                	pop    r8
ffffffff800062f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800062f9:	4b 58                	rex.WXB pop r8
ffffffff800062fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006301:	55                   	push   rbp
ffffffff80006302:	58                   	pop    rax
ffffffff80006303:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006309:	5f                   	pop    rdi
ffffffff8000630a:	58                   	pop    rax
ffffffff8000630b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006311:	69 58 00 80 ff ff ff 	imul   ebx,DWORD PTR [rax+0x0],0xffffff80
ffffffff80006318:	ff 73 58             	push   QWORD PTR [rbx+0x58]
ffffffff8000631b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006321:	7d 58                	jge    ffffffff8000637b <isr_table+0x3ca>
ffffffff80006323:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006329:	87 58 00             	xchg   DWORD PTR [rax+0x0],ebx
ffffffff8000632c:	80 ff ff             	cmp    bh,0xff
ffffffff8000632f:	ff                   	(bad)  
ffffffff80006330:	ff 91 58 00 80 ff    	call   QWORD PTR [rcx-0x7fffa8]
ffffffff80006336:	ff                   	(bad)  
ffffffff80006337:	ff                   	(bad)  
ffffffff80006338:	ff 9b 58 00 80 ff    	call   FWORD PTR [rbx-0x7fffa8]
ffffffff8000633e:	ff                   	(bad)  
ffffffff8000633f:	ff                   	(bad)  
ffffffff80006340:	ff a5 58 00 80 ff    	jmp    QWORD PTR [rbp-0x7fffa8]
ffffffff80006346:	ff                   	(bad)  
ffffffff80006347:	ff                   	(bad)  
ffffffff80006348:	ff af 58 00 80 ff    	jmp    FWORD PTR [rdi-0x7fffa8]
ffffffff8000634e:	ff                   	(bad)  
ffffffff8000634f:	ff                   	(bad)  
ffffffff80006350:	ff                   	(bad)  
ffffffff80006351:	b9 58 00 80 ff       	mov    ecx,0xff800058
ffffffff80006356:	ff                   	(bad)  
ffffffff80006357:	ff                   	(bad)  
ffffffff80006358:	ff c3                	inc    ebx
ffffffff8000635a:	58                   	pop    rax
ffffffff8000635b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006361:	cd 58                	int    0x58
ffffffff80006363:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006369:	d7                   	xlat   BYTE PTR ds:[rbx]
ffffffff8000636a:	58                   	pop    rax
ffffffff8000636b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006371:	e1 58                	loope  ffffffff800063cb <isr_table+0x41a>
ffffffff80006373:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006379:	eb 58                	jmp    ffffffff800063d3 <isr_table+0x422>
ffffffff8000637b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006381:	f5                   	cmc    
ffffffff80006382:	58                   	pop    rax
ffffffff80006383:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006389:	ff 58 00             	call   FWORD PTR [rax+0x0]
ffffffff8000638c:	80 ff ff             	cmp    bh,0xff
ffffffff8000638f:	ff                   	(bad)  
ffffffff80006390:	ff 09                	dec    DWORD PTR [rcx]
ffffffff80006392:	59                   	pop    rcx
ffffffff80006393:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006399:	13 59 00             	adc    ebx,DWORD PTR [rcx+0x0]
ffffffff8000639c:	80 ff ff             	cmp    bh,0xff
ffffffff8000639f:	ff                   	(bad)  
ffffffff800063a0:	ff 1d 59 00 80 ff    	call   FWORD PTR [rip+0xffffffffff800059]        # ffffffff7f8063ff <getexp(unsigned int)-0x7f9c01>
ffffffff800063a6:	ff                   	(bad)  
ffffffff800063a7:	ff                   	(bad)  
ffffffff800063a8:	ff 27                	jmp    QWORD PTR [rdi]
ffffffff800063aa:	59                   	pop    rcx
ffffffff800063ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800063b1:	31 59 00             	xor    DWORD PTR [rcx+0x0],ebx
ffffffff800063b4:	80 ff ff             	cmp    bh,0xff
ffffffff800063b7:	ff                   	(bad)  
ffffffff800063b8:	ff                   	(bad)  
ffffffff800063b9:	3e 59                	ds pop rcx
ffffffff800063bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800063c1:	4b 59                	rex.WXB pop r9
ffffffff800063c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800063c9:	58                   	pop    rax
ffffffff800063ca:	59                   	pop    rcx
ffffffff800063cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800063d1:	65 59                	gs pop rcx
ffffffff800063d3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800063d9:	72 59                	jb     ffffffff80006434 <isr_table+0x483>
ffffffff800063db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800063e1:	7f 59                	jg     ffffffff8000643c <isr_table+0x48b>
ffffffff800063e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800063e9:	8c 59 00             	mov    WORD PTR [rcx+0x0],ds
ffffffff800063ec:	80 ff ff             	cmp    bh,0xff
ffffffff800063ef:	ff                   	(bad)  
ffffffff800063f0:	ff 99 59 00 80 ff    	call   FWORD PTR [rcx-0x7fffa7]
ffffffff800063f6:	ff                   	(bad)  
ffffffff800063f7:	ff                   	(bad)  
ffffffff800063f8:	ff a6 59 00 80 ff    	jmp    QWORD PTR [rsi-0x7fffa7]
ffffffff800063fe:	ff                   	(bad)  
ffffffff800063ff:	ff                   	(bad)  
ffffffff80006400:	ff b3 59 00 80 ff    	push   QWORD PTR [rbx-0x7fffa7]
ffffffff80006406:	ff                   	(bad)  
ffffffff80006407:	ff                   	(bad)  
ffffffff80006408:	ff c0                	inc    eax
ffffffff8000640a:	59                   	pop    rcx
ffffffff8000640b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006411:	cd 59                	int    0x59
ffffffff80006413:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006419:	da 59 00             	ficomp DWORD PTR [rcx+0x0]
ffffffff8000641c:	80 ff ff             	cmp    bh,0xff
ffffffff8000641f:	ff                   	(bad)  
ffffffff80006420:	ff e7                	jmp    rdi
ffffffff80006422:	59                   	pop    rcx
ffffffff80006423:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006429:	f4                   	hlt    
ffffffff8000642a:	59                   	pop    rcx
ffffffff8000642b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006431:	01 5a 00             	add    DWORD PTR [rdx+0x0],ebx
ffffffff80006434:	80 ff ff             	cmp    bh,0xff
ffffffff80006437:	ff                   	(bad)  
ffffffff80006438:	ff 0e                	dec    DWORD PTR [rsi]
ffffffff8000643a:	5a                   	pop    rdx
ffffffff8000643b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006441:	1b 5a 00             	sbb    ebx,DWORD PTR [rdx+0x0]
ffffffff80006444:	80 ff ff             	cmp    bh,0xff
ffffffff80006447:	ff                   	(bad)  
ffffffff80006448:	ff 28                	jmp    FWORD PTR [rax]
ffffffff8000644a:	5a                   	pop    rdx
ffffffff8000644b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006451:	35 5a 00 80 ff       	xor    eax,0xff80005a
ffffffff80006456:	ff                   	(bad)  
ffffffff80006457:	ff                   	(bad)  
ffffffff80006458:	ff 42 5a             	inc    DWORD PTR [rdx+0x5a]
ffffffff8000645b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006461:	4f 5a                	rex.WRXB pop r10
ffffffff80006463:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006469:	5c                   	pop    rsp
ffffffff8000646a:	5a                   	pop    rdx
ffffffff8000646b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006471:	69 5a 00 80 ff ff ff 	imul   ebx,DWORD PTR [rdx+0x0],0xffffff80
ffffffff80006478:	ff 76 5a             	push   QWORD PTR [rsi+0x5a]
ffffffff8000647b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006481:	83 5a 00 80          	sbb    DWORD PTR [rdx+0x0],0xffffff80
ffffffff80006485:	ff                   	(bad)  
ffffffff80006486:	ff                   	(bad)  
ffffffff80006487:	ff                   	(bad)  
ffffffff80006488:	ff 90 5a 00 80 ff    	call   QWORD PTR [rax-0x7fffa6]
ffffffff8000648e:	ff                   	(bad)  
ffffffff8000648f:	ff                   	(bad)  
ffffffff80006490:	ff 9d 5a 00 80 ff    	call   FWORD PTR [rbp-0x7fffa6]
ffffffff80006496:	ff                   	(bad)  
ffffffff80006497:	ff                   	(bad)  
ffffffff80006498:	ff aa 5a 00 80 ff    	jmp    FWORD PTR [rdx-0x7fffa6]
ffffffff8000649e:	ff                   	(bad)  
ffffffff8000649f:	ff                   	(bad)  
ffffffff800064a0:	ff b7 5a 00 80 ff    	push   QWORD PTR [rdi-0x7fffa6]
ffffffff800064a6:	ff                   	(bad)  
ffffffff800064a7:	ff                   	(bad)  
ffffffff800064a8:	ff c4                	inc    esp
ffffffff800064aa:	5a                   	pop    rdx
ffffffff800064ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800064b1:	d1 5a 00             	rcr    DWORD PTR [rdx+0x0],1
ffffffff800064b4:	80 ff ff             	cmp    bh,0xff
ffffffff800064b7:	ff                   	(bad)  
ffffffff800064b8:	ff                   	(bad)  
ffffffff800064b9:	de 5a 00             	ficomp WORD PTR [rdx+0x0]
ffffffff800064bc:	80 ff ff             	cmp    bh,0xff
ffffffff800064bf:	ff                   	(bad)  
ffffffff800064c0:	ff                   	(bad)  
ffffffff800064c1:	eb 5a                	jmp    ffffffff8000651d <isr_table+0x56c>
ffffffff800064c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800064c9:	f8                   	clc    
ffffffff800064ca:	5a                   	pop    rdx
ffffffff800064cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800064d1:	05 5b 00 80 ff       	add    eax,0xff80005b
ffffffff800064d6:	ff                   	(bad)  
ffffffff800064d7:	ff                   	(bad)  
ffffffff800064d8:	ff 12                	call   QWORD PTR [rdx]
ffffffff800064da:	5b                   	pop    rbx
ffffffff800064db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800064e1:	1f                   	(bad)  
ffffffff800064e2:	5b                   	pop    rbx
ffffffff800064e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800064e9:	2c 5b                	sub    al,0x5b
ffffffff800064eb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800064f1:	39 5b 00             	cmp    DWORD PTR [rbx+0x0],ebx
ffffffff800064f4:	80 ff ff             	cmp    bh,0xff
ffffffff800064f7:	ff                   	(bad)  
ffffffff800064f8:	ff 46 5b             	inc    DWORD PTR [rsi+0x5b]
ffffffff800064fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006501:	53                   	push   rbx
ffffffff80006502:	5b                   	pop    rbx
ffffffff80006503:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006509:	60                   	(bad)  
ffffffff8000650a:	5b                   	pop    rbx
ffffffff8000650b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006511:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff80006512:	5b                   	pop    rbx
ffffffff80006513:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006519:	7a 5b                	jp     ffffffff80006576 <isr_table+0x5c5>
ffffffff8000651b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006521:	87 5b 00             	xchg   DWORD PTR [rbx+0x0],ebx
ffffffff80006524:	80 ff ff             	cmp    bh,0xff
ffffffff80006527:	ff                   	(bad)  
ffffffff80006528:	ff 94 5b 00 80 ff ff 	call   QWORD PTR [rbx+rbx*2-0x8000]
ffffffff8000652f:	ff                   	(bad)  
ffffffff80006530:	ff a1 5b 00 80 ff    	jmp    QWORD PTR [rcx-0x7fffa5]
ffffffff80006536:	ff                   	(bad)  
ffffffff80006537:	ff                   	(bad)  
ffffffff80006538:	ff ae 5b 00 80 ff    	jmp    FWORD PTR [rsi-0x7fffa5]
ffffffff8000653e:	ff                   	(bad)  
ffffffff8000653f:	ff                   	(bad)  
ffffffff80006540:	ff                   	(bad)  
ffffffff80006541:	bb 5b 00 80 ff       	mov    ebx,0xff80005b
ffffffff80006546:	ff                   	(bad)  
ffffffff80006547:	ff                   	(bad)  
ffffffff80006548:	ff c8                	dec    eax
ffffffff8000654a:	5b                   	pop    rbx
ffffffff8000654b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006551:	d5                   	(bad)  
ffffffff80006552:	5b                   	pop    rbx
ffffffff80006553:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006559:	e2 5b                	loop   ffffffff800065b6 <isr_table+0x605>
ffffffff8000655b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006561:	ef                   	out    dx,eax
ffffffff80006562:	5b                   	pop    rbx
ffffffff80006563:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006569:	fc                   	cld    
ffffffff8000656a:	5b                   	pop    rbx
ffffffff8000656b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006571:	09 5c 00 80          	or     DWORD PTR [rax+rax*1-0x80],ebx
ffffffff80006575:	ff                   	(bad)  
ffffffff80006576:	ff                   	(bad)  
ffffffff80006577:	ff                   	(bad)  
ffffffff80006578:	ff 16                	call   QWORD PTR [rsi]
ffffffff8000657a:	5c                   	pop    rsp
ffffffff8000657b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006581:	23 5c 00 80          	and    ebx,DWORD PTR [rax+rax*1-0x80]
ffffffff80006585:	ff                   	(bad)  
ffffffff80006586:	ff                   	(bad)  
ffffffff80006587:	ff                   	(bad)  
ffffffff80006588:	ff 30                	push   QWORD PTR [rax]
ffffffff8000658a:	5c                   	pop    rsp
ffffffff8000658b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006591:	3d 5c 00 80 ff       	cmp    eax,0xff80005c
ffffffff80006596:	ff                   	(bad)  
ffffffff80006597:	ff                   	(bad)  
ffffffff80006598:	ff 4a 5c             	dec    DWORD PTR [rdx+0x5c]
ffffffff8000659b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800065a1:	57                   	push   rdi
ffffffff800065a2:	5c                   	pop    rsp
ffffffff800065a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800065a9:	64 5c                	fs pop rsp
ffffffff800065ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800065b1:	71 5c                	jno    ffffffff8000660f <isr_table+0x65e>
ffffffff800065b3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800065b9:	7e 5c                	jle    ffffffff80006617 <isr_table+0x666>
ffffffff800065bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800065c1:	8b 5c 00 80          	mov    ebx,DWORD PTR [rax+rax*1-0x80]
ffffffff800065c5:	ff                   	(bad)  
ffffffff800065c6:	ff                   	(bad)  
ffffffff800065c7:	ff                   	(bad)  
ffffffff800065c8:	ff 98 5c 00 80 ff    	call   FWORD PTR [rax-0x7fffa4]
ffffffff800065ce:	ff                   	(bad)  
ffffffff800065cf:	ff                   	(bad)  
ffffffff800065d0:	ff a5 5c 00 80 ff    	jmp    QWORD PTR [rbp-0x7fffa4]
ffffffff800065d6:	ff                   	(bad)  
ffffffff800065d7:	ff                   	(bad)  
ffffffff800065d8:	ff b2 5c 00 80 ff    	push   QWORD PTR [rdx-0x7fffa4]
ffffffff800065de:	ff                   	(bad)  
ffffffff800065df:	ff                   	(bad)  
ffffffff800065e0:	ff                   	(bad)  
ffffffff800065e1:	bf 5c 00 80 ff       	mov    edi,0xff80005c
ffffffff800065e6:	ff                   	(bad)  
ffffffff800065e7:	ff                   	(bad)  
ffffffff800065e8:	ff cc                	dec    esp
ffffffff800065ea:	5c                   	pop    rsp
ffffffff800065eb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800065f1:	d9 5c 00 80          	fstp   DWORD PTR [rax+rax*1-0x80]
ffffffff800065f5:	ff                   	(bad)  
ffffffff800065f6:	ff                   	(bad)  
ffffffff800065f7:	ff                   	(bad)  
ffffffff800065f8:	ff e6                	jmp    rsi
ffffffff800065fa:	5c                   	pop    rsp
ffffffff800065fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006601:	f3 5c                	repz pop rsp
ffffffff80006603:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006609:	00 5d 00             	add    BYTE PTR [rbp+0x0],bl
ffffffff8000660c:	80 ff ff             	cmp    bh,0xff
ffffffff8000660f:	ff                   	(bad)  
ffffffff80006610:	ff 0d 5d 00 80 ff    	dec    DWORD PTR [rip+0xffffffffff80005d]        # ffffffff7f806673 <getexp(unsigned int)-0x7f998d>
ffffffff80006616:	ff                   	(bad)  
ffffffff80006617:	ff                   	(bad)  
ffffffff80006618:	ff 1a                	call   FWORD PTR [rdx]
ffffffff8000661a:	5d                   	pop    rbp
ffffffff8000661b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006621:	27                   	(bad)  
ffffffff80006622:	5d                   	pop    rbp
ffffffff80006623:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006629:	34 5d                	xor    al,0x5d
ffffffff8000662b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006631:	41 5d                	pop    r13
ffffffff80006633:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006639:	4e 5d                	rex.WRX pop rbp
ffffffff8000663b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006641:	5b                   	pop    rbx
ffffffff80006642:	5d                   	pop    rbp
ffffffff80006643:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006649:	68 5d 00 80 ff       	push   0xffffffffff80005d
ffffffff8000664e:	ff                   	(bad)  
ffffffff8000664f:	ff                   	(bad)  
ffffffff80006650:	ff 75 5d             	push   QWORD PTR [rbp+0x5d]
ffffffff80006653:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006659:	82                   	(bad)  
ffffffff8000665a:	5d                   	pop    rbp
ffffffff8000665b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006661:	8f                   	(bad)  
ffffffff80006662:	5d                   	pop    rbp
ffffffff80006663:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006669:	9c                   	pushf  
ffffffff8000666a:	5d                   	pop    rbp
ffffffff8000666b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006671:	a9 5d 00 80 ff       	test   eax,0xff80005d
ffffffff80006676:	ff                   	(bad)  
ffffffff80006677:	ff                   	(bad)  
ffffffff80006678:	ff b6 5d 00 80 ff    	push   QWORD PTR [rsi-0x7fffa3]
ffffffff8000667e:	ff                   	(bad)  
ffffffff8000667f:	ff                   	(bad)  
ffffffff80006680:	ff c3                	inc    ebx
ffffffff80006682:	5d                   	pop    rbp
ffffffff80006683:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006689:	d0 5d 00             	rcr    BYTE PTR [rbp+0x0],1
ffffffff8000668c:	80 ff ff             	cmp    bh,0xff
ffffffff8000668f:	ff                   	(bad)  
ffffffff80006690:	ff                   	(bad)  
ffffffff80006691:	dd 5d 00             	fstp   QWORD PTR [rbp+0x0]
ffffffff80006694:	80 ff ff             	cmp    bh,0xff
ffffffff80006697:	ff                   	(bad)  
ffffffff80006698:	ff                   	(bad)  
ffffffff80006699:	ea                   	(bad)  
ffffffff8000669a:	5d                   	pop    rbp
ffffffff8000669b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066a1:	f7 5d 00             	neg    DWORD PTR [rbp+0x0]
ffffffff800066a4:	80 ff ff             	cmp    bh,0xff
ffffffff800066a7:	ff                   	(bad)  
ffffffff800066a8:	ff 04 5e             	inc    DWORD PTR [rsi+rbx*2]
ffffffff800066ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066b1:	11 5e 00             	adc    DWORD PTR [rsi+0x0],ebx
ffffffff800066b4:	80 ff ff             	cmp    bh,0xff
ffffffff800066b7:	ff                   	(bad)  
ffffffff800066b8:	ff 1e                	call   FWORD PTR [rsi]
ffffffff800066ba:	5e                   	pop    rsi
ffffffff800066bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066c1:	2b 5e 00             	sub    ebx,DWORD PTR [rsi+0x0]
ffffffff800066c4:	80 ff ff             	cmp    bh,0xff
ffffffff800066c7:	ff                   	(bad)  
ffffffff800066c8:	ff                   	(bad)  
ffffffff800066c9:	38 5e 00             	cmp    BYTE PTR [rsi+0x0],bl
ffffffff800066cc:	80 ff ff             	cmp    bh,0xff
ffffffff800066cf:	ff                   	(bad)  
ffffffff800066d0:	ff 45 5e             	inc    DWORD PTR [rbp+0x5e]
ffffffff800066d3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066d9:	52                   	push   rdx
ffffffff800066da:	5e                   	pop    rsi
ffffffff800066db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066e1:	5f                   	pop    rdi
ffffffff800066e2:	5e                   	pop    rsi
ffffffff800066e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066e9:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff800066ea:	5e                   	pop    rsi
ffffffff800066eb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066f1:	79 5e                	jns    ffffffff80006751 <isr_table+0x7a0>
ffffffff800066f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800066f9:	86 5e 00             	xchg   BYTE PTR [rsi+0x0],bl
ffffffff800066fc:	80 ff ff             	cmp    bh,0xff
ffffffff800066ff:	ff                   	(bad)  
ffffffff80006700:	ff 93 5e 00 80 ff    	call   QWORD PTR [rbx-0x7fffa2]
ffffffff80006706:	ff                   	(bad)  
ffffffff80006707:	ff                   	(bad)  
ffffffff80006708:	ff a0 5e 00 80 ff    	jmp    QWORD PTR [rax-0x7fffa2]
ffffffff8000670e:	ff                   	(bad)  
ffffffff8000670f:	ff                   	(bad)  
ffffffff80006710:	ff ad 5e 00 80 ff    	jmp    FWORD PTR [rbp-0x7fffa2]
ffffffff80006716:	ff                   	(bad)  
ffffffff80006717:	ff                   	(bad)  
ffffffff80006718:	ff                   	(bad)  
ffffffff80006719:	ba 5e 00 80 ff       	mov    edx,0xff80005e
ffffffff8000671e:	ff                   	(bad)  
ffffffff8000671f:	ff                   	(bad)  
ffffffff80006720:	ff c7                	inc    edi
ffffffff80006722:	5e                   	pop    rsi
ffffffff80006723:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006729:	d4                   	(bad)  
ffffffff8000672a:	5e                   	pop    rsi
ffffffff8000672b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006731:	e1 5e                	loope  ffffffff80006791 <isr_table+0x7e0>
ffffffff80006733:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006739:	ee                   	out    dx,al
ffffffff8000673a:	5e                   	pop    rsi
ffffffff8000673b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006741:	fb                   	sti    
ffffffff80006742:	5e                   	pop    rsi
ffffffff80006743:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006749:	08 5f 00             	or     BYTE PTR [rdi+0x0],bl
ffffffff8000674c:	80 ff ff             	cmp    bh,0xff
ffffffff8000674f:	ff                   	(bad)  
ffffffff80006750:	ff 15 5f 00 80 ff    	call   QWORD PTR [rip+0xffffffffff80005f]        # ffffffff7f8067b5 <getexp(unsigned int)-0x7f984b>
ffffffff80006756:	ff                   	(bad)  
ffffffff80006757:	ff                   	(bad)  
ffffffff80006758:	ff 22                	jmp    QWORD PTR [rdx]
ffffffff8000675a:	5f                   	pop    rdi
ffffffff8000675b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006761:	2f                   	(bad)  
ffffffff80006762:	5f                   	pop    rdi
ffffffff80006763:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006769:	3c 5f                	cmp    al,0x5f
ffffffff8000676b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006771:	49 5f                	rex.WB pop r15
ffffffff80006773:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006779:	56                   	push   rsi
ffffffff8000677a:	5f                   	pop    rdi
ffffffff8000677b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006781:	63 5f 00             	movsxd ebx,DWORD PTR [rdi+0x0]
ffffffff80006784:	80 ff ff             	cmp    bh,0xff
ffffffff80006787:	ff                   	(bad)  
ffffffff80006788:	ff 70 5f             	push   QWORD PTR [rax+0x5f]
ffffffff8000678b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006791:	7d 5f                	jge    ffffffff800067f2 <LoadGdt.trampoline+0x16>
ffffffff80006793:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80006799:	8a 5f 00             	mov    bl,BYTE PTR [rdi+0x0]
ffffffff8000679c:	80 ff ff             	cmp    bh,0xff
ffffffff8000679f:	ff                   	(bad)  
ffffffff800067a0:	ff 97 5f 00 80 ff    	call   QWORD PTR [rdi-0x7fffa1]
ffffffff800067a6:	ff                   	(bad)  
ffffffff800067a7:	ff                   	(bad)  
ffffffff800067a8:	ff a4 5f 00 80 ff ff 	jmp    QWORD PTR [rdi+rbx*2-0x8000]
ffffffff800067af:	ff                   	(bad)  
ffffffff800067b0:	ff                   	.byte 0xff

ffffffff800067b1 <LoadIdt>:
ffffffff800067b1:	0f 01 1f             	lidt   [rdi]
ffffffff800067b4:	c3                   	ret    
ffffffff800067b5:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff800067bc:	00 00 00 
ffffffff800067bf:	90                   	nop

ffffffff800067c0 <LoadGdt>:
ffffffff800067c0:	0f 01 17             	lgdt   [rdi]
ffffffff800067c3:	66 b8 10 00          	mov    ax,0x10
ffffffff800067c7:	8e d8                	mov    ds,eax
ffffffff800067c9:	8e c0                	mov    es,eax
ffffffff800067cb:	8e d0                	mov    ss,eax
ffffffff800067cd:	48 b8 dc 67 00 80 ff 	movabs rax,0xffffffff800067dc
ffffffff800067d4:	ff ff ff 
ffffffff800067d7:	6a 08                	push   0x8
ffffffff800067d9:	50                   	push   rax
ffffffff800067da:	48 cb                	retfq  

ffffffff800067dc <LoadGdt.trampoline>:
ffffffff800067dc:	c3                   	ret    
