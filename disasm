
./hdd_root/kernel.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <VFS::Initialize()>:
ffffffff80000000:	f3 0f 1e fa          	endbr64 
ffffffff80000004:	55                   	push   rbp
ffffffff80000005:	48 89 e5             	mov    rbp,rsp
ffffffff80000008:	53                   	push   rbx
ffffffff80000009:	48 83 ec 18          	sub    rsp,0x18
ffffffff8000000d:	bf 18 00 00 00       	mov    edi,0x18
ffffffff80000012:	e8 1e 0b 00 00       	call   ffffffff80000b35 <operator new(unsigned long)>
ffffffff80000017:	48 89 c3             	mov    rbx,rax
ffffffff8000001a:	48 c7 c6 40 89 00 80 	mov    rsi,0xffffffff80008940
ffffffff80000021:	48 89 df             	mov    rdi,rbx
ffffffff80000024:	e8 a9 1b 00 00       	call   ffffffff80001bd2 <Initrd::Initrd(char const*)>
ffffffff80000029:	48 89 5d e8          	mov    QWORD PTR [rbp-0x18],rbx
ffffffff8000002d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000031:	48 89 c7             	mov    rdi,rax
ffffffff80000034:	e8 07 00 00 00       	call   ffffffff80000040 <VFS::mount(Filesystem*)>
ffffffff80000039:	90                   	nop
ffffffff8000003a:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000003e:	c9                   	leave  
ffffffff8000003f:	c3                   	ret    

ffffffff80000040 <VFS::mount(Filesystem*)>:
ffffffff80000040:	f3 0f 1e fa          	endbr64 
ffffffff80000044:	55                   	push   rbp
ffffffff80000045:	48 89 e5             	mov    rbp,rsp
ffffffff80000048:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000004c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000050:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000054:	48 89 c6             	mov    rsi,rax
ffffffff80000057:	48 c7 c7 a0 ae 00 80 	mov    rdi,0xffffffff8000aea0
ffffffff8000005e:	e8 77 00 00 00       	call   ffffffff800000da <std::vector<Filesystem*>::push_back(Filesystem*)>
ffffffff80000063:	90                   	nop
ffffffff80000064:	c9                   	leave  
ffffffff80000065:	c3                   	ret    

ffffffff80000066 <__static_initialization_and_destruction_0(int, int)>:
ffffffff80000066:	f3 0f 1e fa          	endbr64 
ffffffff8000006a:	55                   	push   rbp
ffffffff8000006b:	48 89 e5             	mov    rbp,rsp
ffffffff8000006e:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000072:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80000075:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80000078:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff8000007c:	75 15                	jne    ffffffff80000093 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff8000007e:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80000085:	75 0c                	jne    ffffffff80000093 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80000087:	48 c7 c7 a0 ae 00 80 	mov    rdi,0xffffffff8000aea0
ffffffff8000008e:	e8 1d 00 00 00       	call   ffffffff800000b0 <std::vector<Filesystem*>::vector()>
ffffffff80000093:	90                   	nop
ffffffff80000094:	c9                   	leave  
ffffffff80000095:	c3                   	ret    

ffffffff80000096 <_GLOBAL__sub_I_filesystems>:
ffffffff80000096:	f3 0f 1e fa          	endbr64 
ffffffff8000009a:	55                   	push   rbp
ffffffff8000009b:	48 89 e5             	mov    rbp,rsp
ffffffff8000009e:	be ff ff 00 00       	mov    esi,0xffff
ffffffff800000a3:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800000a8:	e8 b9 ff ff ff       	call   ffffffff80000066 <__static_initialization_and_destruction_0(int, int)>
ffffffff800000ad:	5d                   	pop    rbp
ffffffff800000ae:	c3                   	ret    
ffffffff800000af:	90                   	nop

ffffffff800000b0 <std::vector<Filesystem*>::vector()>:
ffffffff800000b0:	f3 0f 1e fa          	endbr64 
ffffffff800000b4:	55                   	push   rbp
ffffffff800000b5:	48 89 e5             	mov    rbp,rsp
ffffffff800000b8:	48 83 ec 08          	sub    rsp,0x8
ffffffff800000bc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800000c0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800000c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
ffffffff800000cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800000cf:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff800000d6:	90                   	nop
ffffffff800000d7:	c9                   	leave  
ffffffff800000d8:	c3                   	ret    
ffffffff800000d9:	90                   	nop

ffffffff800000da <std::vector<Filesystem*>::push_back(Filesystem*)>:
ffffffff800000da:	f3 0f 1e fa          	endbr64 
ffffffff800000de:	55                   	push   rbp
ffffffff800000df:	48 89 e5             	mov    rbp,rsp
ffffffff800000e2:	53                   	push   rbx
ffffffff800000e3:	48 83 ec 28          	sub    rsp,0x28
ffffffff800000e7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800000eb:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800000ef:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800000f3:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800000f6:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff800000f9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800000fd:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff80000100:	bf 18 00 00 00       	mov    edi,0x18
ffffffff80000105:	e8 2b 0a 00 00       	call   ffffffff80000b35 <operator new(unsigned long)>
ffffffff8000010a:	48 89 c3             	mov    rbx,rax
ffffffff8000010d:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffffffff80000111:	48 89 c6             	mov    rsi,rax
ffffffff80000114:	48 89 df             	mov    rdi,rbx
ffffffff80000117:	e8 a4 00 00 00       	call   ffffffff800001c0 <Node<Filesystem*>::Node(Filesystem* const&)>
ffffffff8000011c:	48 89 5d e0          	mov    QWORD PTR [rbp-0x20],rbx
ffffffff80000120:	bf 18 00 00 00       	mov    edi,0x18
ffffffff80000125:	e8 0b 0a 00 00       	call   ffffffff80000b35 <operator new(unsigned long)>
ffffffff8000012a:	48 89 c3             	mov    rbx,rax
ffffffff8000012d:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffffffff80000131:	48 89 c6             	mov    rsi,rax
ffffffff80000134:	48 89 df             	mov    rdi,rbx
ffffffff80000137:	e8 84 00 00 00       	call   ffffffff800001c0 <Node<Filesystem*>::Node(Filesystem* const&)>
ffffffff8000013c:	48 89 5d e8          	mov    QWORD PTR [rbp-0x18],rbx
ffffffff80000140:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80000144:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff8000014b:	00 
ffffffff8000014c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80000150:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffffffff80000157:	00 
ffffffff80000158:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000015c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000015f:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80000163:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000167:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000016a:	48 85 c0             	test   rax,rax
ffffffff8000016d:	75 19                	jne    ffffffff80000188 <std::vector<Filesystem*>::push_back(Filesystem*)+0xae>
ffffffff8000016f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000173:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80000177:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff8000017a:	eb 3d                	jmp    ffffffff800001b9 <std::vector<Filesystem*>::push_back(Filesystem*)+0xdf>
ffffffff8000017c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000180:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000184:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80000188:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000018c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000190:	48 85 c0             	test   rax,rax
ffffffff80000193:	75 e7                	jne    ffffffff8000017c <std::vector<Filesystem*>::push_back(Filesystem*)+0xa2>
ffffffff80000195:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000199:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8000019d:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff800001a1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800001a5:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800001a9:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800001ad:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800001b1:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff800001b8:	00 
ffffffff800001b9:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800001bd:	c9                   	leave  
ffffffff800001be:	c3                   	ret    
ffffffff800001bf:	90                   	nop

ffffffff800001c0 <Node<Filesystem*>::Node(Filesystem* const&)>:
ffffffff800001c0:	f3 0f 1e fa          	endbr64 
ffffffff800001c4:	55                   	push   rbp
ffffffff800001c5:	48 89 e5             	mov    rbp,rsp
ffffffff800001c8:	48 83 ec 10          	sub    rsp,0x10
ffffffff800001cc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800001d0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800001d4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800001d8:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff800001db:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800001df:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff800001e2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800001e6:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
ffffffff800001ed:	00 
ffffffff800001ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800001f2:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffffffff800001f9:	00 
ffffffff800001fa:	90                   	nop
ffffffff800001fb:	c9                   	leave  
ffffffff800001fc:	c3                   	ret    

ffffffff800001fd <getexp(unsigned int)>:
ffffffff800001fd:	55                   	push   rbp
ffffffff800001fe:	48 89 e5             	mov    rbp,rsp
ffffffff80000201:	48 83 ec 18          	sub    rsp,0x18
ffffffff80000205:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80000208:	81 7d ec ff 00 00 00 	cmp    DWORD PTR [rbp-0x14],0xff
ffffffff8000020f:	77 07                	ja     ffffffff80000218 <getexp(unsigned int)+0x1b>
ffffffff80000211:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff80000216:	eb 2f                	jmp    ffffffff80000247 <getexp(unsigned int)+0x4a>
ffffffff80000218:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff8000021f:	eb 17                	jmp    ffffffff80000238 <getexp(unsigned int)+0x3b>
ffffffff80000221:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000224:	ba 01 00 00 00       	mov    edx,0x1
ffffffff80000229:	89 c1                	mov    ecx,eax
ffffffff8000022b:	d3 e2                	shl    edx,cl
ffffffff8000022d:	89 d0                	mov    eax,edx
ffffffff8000022f:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffffffff80000232:	72 0c                	jb     ffffffff80000240 <getexp(unsigned int)+0x43>
ffffffff80000234:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80000238:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffffffff8000023c:	7e e3                	jle    ffffffff80000221 <getexp(unsigned int)+0x24>
ffffffff8000023e:	eb 01                	jmp    ffffffff80000241 <getexp(unsigned int)+0x44>
ffffffff80000240:	90                   	nop
ffffffff80000241:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000244:	83 e8 01             	sub    eax,0x1
ffffffff80000247:	c9                   	leave  
ffffffff80000248:	c3                   	ret    

ffffffff80000249 <liballoc_memset(void*, int, unsigned long)>:
ffffffff80000249:	f3 0f 1e fa          	endbr64 
ffffffff8000024d:	55                   	push   rbp
ffffffff8000024e:	48 89 e5             	mov    rbp,rsp
ffffffff80000251:	48 83 ec 28          	sub    rsp,0x28
ffffffff80000255:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000259:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff8000025c:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80000260:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80000267:	eb 16                	jmp    ffffffff8000027f <liballoc_memset(void*, int, unsigned long)+0x36>
ffffffff80000269:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000026c:	48 63 d0             	movsxd rdx,eax
ffffffff8000026f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000273:	48 01 d0             	add    rax,rdx
ffffffff80000276:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80000279:	88 10                	mov    BYTE PTR [rax],dl
ffffffff8000027b:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff8000027f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000282:	48 98                	cdqe   
ffffffff80000284:	48 39 45 d8          	cmp    QWORD PTR [rbp-0x28],rax
ffffffff80000288:	77 df                	ja     ffffffff80000269 <liballoc_memset(void*, int, unsigned long)+0x20>
ffffffff8000028a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000028e:	c9                   	leave  
ffffffff8000028f:	c3                   	ret    

ffffffff80000290 <liballoc_memcpy(void*, void const*, unsigned long)>:
ffffffff80000290:	f3 0f 1e fa          	endbr64 
ffffffff80000294:	55                   	push   rbp
ffffffff80000295:	48 89 e5             	mov    rbp,rsp
ffffffff80000298:	48 83 ec 38          	sub    rsp,0x38
ffffffff8000029c:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800002a0:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800002a4:	48 89 55 c8          	mov    QWORD PTR [rbp-0x38],rdx
ffffffff800002a8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800002ac:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800002b0:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800002b4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800002b8:	eb 21                	jmp    ffffffff800002db <liballoc_memcpy(void*, void const*, unsigned long)+0x4b>
ffffffff800002ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800002be:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffffffff800002c2:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff800002c6:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff800002c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800002cc:	48 8d 48 04          	lea    rcx,[rax+0x4]
ffffffff800002d0:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff800002d4:	89 10                	mov    DWORD PTR [rax],edx
ffffffff800002d6:	48 83 6d c8 04       	sub    QWORD PTR [rbp-0x38],0x4
ffffffff800002db:	48 83 7d c8 03       	cmp    QWORD PTR [rbp-0x38],0x3
ffffffff800002e0:	77 d8                	ja     ffffffff800002ba <liballoc_memcpy(void*, void const*, unsigned long)+0x2a>
ffffffff800002e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800002e6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800002ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800002ee:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800002f2:	eb 22                	jmp    ffffffff80000316 <liballoc_memcpy(void*, void const*, unsigned long)+0x86>
ffffffff800002f4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800002f8:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800002fc:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff80000300:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80000303:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000307:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffffffff8000030b:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff8000030f:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80000311:	48 83 6d c8 01       	sub    QWORD PTR [rbp-0x38],0x1
ffffffff80000316:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
ffffffff8000031b:	75 d7                	jne    ffffffff800002f4 <liballoc_memcpy(void*, void const*, unsigned long)+0x64>
ffffffff8000031d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000321:	c9                   	leave  
ffffffff80000322:	c3                   	ret    

ffffffff80000323 <insert_tag(boundary_tag*, int)>:
ffffffff80000323:	55                   	push   rbp
ffffffff80000324:	48 89 e5             	mov    rbp,rsp
ffffffff80000327:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000032b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000032f:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80000332:	83 7d e4 00          	cmp    DWORD PTR [rbp-0x1c],0x0
ffffffff80000336:	79 23                	jns    ffffffff8000035b <insert_tag(boundary_tag*, int)+0x38>
ffffffff80000338:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000033c:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000033f:	83 e8 30             	sub    eax,0x30
ffffffff80000342:	89 c7                	mov    edi,eax
ffffffff80000344:	e8 b4 fe ff ff       	call   ffffffff800001fd <getexp(unsigned int)>
ffffffff80000349:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000034c:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
ffffffff80000350:	7f 0f                	jg     ffffffff80000361 <insert_tag(boundary_tag*, int)+0x3e>
ffffffff80000352:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff80000359:	eb 06                	jmp    ffffffff80000361 <insert_tag(boundary_tag*, int)+0x3e>
ffffffff8000035b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000035e:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000361:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000365:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80000368:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
ffffffff8000036b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000036e:	48 98                	cdqe   
ffffffff80000370:	48 8b 04 c5 c0 ae 00 	mov    rax,QWORD PTR [rax*8-0x7fff5140]
ffffffff80000377:	80 
ffffffff80000378:	48 85 c0             	test   rax,rax
ffffffff8000037b:	74 2a                	je     ffffffff800003a7 <insert_tag(boundary_tag*, int)+0x84>
ffffffff8000037d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000380:	48 98                	cdqe   
ffffffff80000382:	48 8b 04 c5 c0 ae 00 	mov    rax,QWORD PTR [rax*8-0x7fff5140]
ffffffff80000389:	80 
ffffffff8000038a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8000038e:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
ffffffff80000392:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000395:	48 98                	cdqe   
ffffffff80000397:	48 8b 14 c5 c0 ae 00 	mov    rdx,QWORD PTR [rax*8-0x7fff5140]
ffffffff8000039e:	80 
ffffffff8000039f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800003a3:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff800003a7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800003aa:	48 98                	cdqe   
ffffffff800003ac:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800003b0:	48 89 14 c5 c0 ae 00 	mov    QWORD PTR [rax*8-0x7fff5140],rdx
ffffffff800003b7:	80 
ffffffff800003b8:	90                   	nop
ffffffff800003b9:	c9                   	leave  
ffffffff800003ba:	c3                   	ret    

ffffffff800003bb <remove_tag(boundary_tag*)>:
ffffffff800003bb:	55                   	push   rbp
ffffffff800003bc:	48 89 e5             	mov    rbp,rsp
ffffffff800003bf:	48 83 ec 08          	sub    rsp,0x8
ffffffff800003c3:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800003c7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800003cb:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff800003ce:	48 98                	cdqe   
ffffffff800003d0:	48 8b 04 c5 c0 ae 00 	mov    rax,QWORD PTR [rax*8-0x7fff5140]
ffffffff800003d7:	80 
ffffffff800003d8:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff800003dc:	75 1a                	jne    ffffffff800003f8 <remove_tag(boundary_tag*)+0x3d>
ffffffff800003de:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800003e2:	8b 48 0c             	mov    ecx,DWORD PTR [rax+0xc]
ffffffff800003e5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800003e9:	48 8b 50 20          	mov    rdx,QWORD PTR [rax+0x20]
ffffffff800003ed:	48 63 c1             	movsxd rax,ecx
ffffffff800003f0:	48 89 14 c5 c0 ae 00 	mov    QWORD PTR [rax*8-0x7fff5140],rdx
ffffffff800003f7:	80 
ffffffff800003f8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800003fc:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffffffff80000400:	48 85 c0             	test   rax,rax
ffffffff80000403:	74 14                	je     ffffffff80000419 <remove_tag(boundary_tag*)+0x5e>
ffffffff80000405:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000409:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
ffffffff8000040d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80000411:	48 8b 52 20          	mov    rdx,QWORD PTR [rdx+0x20]
ffffffff80000415:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
ffffffff80000419:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000041d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80000421:	48 85 c0             	test   rax,rax
ffffffff80000424:	74 14                	je     ffffffff8000043a <remove_tag(boundary_tag*)+0x7f>
ffffffff80000426:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000042a:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff8000042e:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80000432:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
ffffffff80000436:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
ffffffff8000043a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000043e:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff80000445:	00 
ffffffff80000446:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000044a:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffffffff80000451:	00 
ffffffff80000452:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000456:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [rax+0xc],0xffffffff
ffffffff8000045d:	90                   	nop
ffffffff8000045e:	c9                   	leave  
ffffffff8000045f:	c3                   	ret    

ffffffff80000460 <melt_left(boundary_tag*)>:
ffffffff80000460:	55                   	push   rbp
ffffffff80000461:	48 89 e5             	mov    rbp,rsp
ffffffff80000464:	48 83 ec 18          	sub    rsp,0x18
ffffffff80000468:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000046c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000470:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000474:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80000478:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000047c:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff8000047f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000483:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000486:	01 c2                	add    edx,eax
ffffffff80000488:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000048c:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff8000048f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000493:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff80000497:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000049b:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff8000049f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800004a3:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800004a7:	48 85 c0             	test   rax,rax
ffffffff800004aa:	74 10                	je     ffffffff800004bc <melt_left(boundary_tag*)+0x5c>
ffffffff800004ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800004b0:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800004b4:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800004b8:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800004bc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800004c0:	c9                   	leave  
ffffffff800004c1:	c3                   	ret    

ffffffff800004c2 <absorb_right(boundary_tag*)>:
ffffffff800004c2:	55                   	push   rbp
ffffffff800004c3:	48 89 e5             	mov    rbp,rsp
ffffffff800004c6:	48 83 ec 18          	sub    rsp,0x18
ffffffff800004ca:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800004ce:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800004d2:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800004d6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800004da:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800004de:	48 89 c7             	mov    rdi,rax
ffffffff800004e1:	e8 d5 fe ff ff       	call   ffffffff800003bb <remove_tag(boundary_tag*)>
ffffffff800004e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800004ea:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800004ed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800004f1:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800004f4:	01 c2                	add    edx,eax
ffffffff800004f6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800004fa:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff800004fd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000501:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff80000505:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000509:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff8000050d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000511:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80000515:	48 85 c0             	test   rax,rax
ffffffff80000518:	74 10                	je     ffffffff8000052a <absorb_right(boundary_tag*)+0x68>
ffffffff8000051a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000051e:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80000522:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80000526:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff8000052a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000052e:	c9                   	leave  
ffffffff8000052f:	c3                   	ret    

ffffffff80000530 <split_tag(boundary_tag*)>:
ffffffff80000530:	55                   	push   rbp
ffffffff80000531:	48 89 e5             	mov    rbp,rsp
ffffffff80000534:	48 83 ec 18          	sub    rsp,0x18
ffffffff80000538:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000053c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000540:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff80000543:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000547:	8b 48 04             	mov    ecx,DWORD PTR [rax+0x4]
ffffffff8000054a:	89 d0                	mov    eax,edx
ffffffff8000054c:	29 c8                	sub    eax,ecx
ffffffff8000054e:	83 e8 30             	sub    eax,0x30
ffffffff80000551:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000554:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000558:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff8000055b:	89 c2                	mov    edx,eax
ffffffff8000055d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000561:	48 01 d0             	add    rax,rdx
ffffffff80000564:	48 83 c0 30          	add    rax,0x30
ffffffff80000568:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000056c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000570:	c7 00 de c0 01 c0    	mov    DWORD PTR [rax],0xc001c0de
ffffffff80000576:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000057a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff8000057d:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff80000580:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000584:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff8000058b:	00 
ffffffff8000058c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000590:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffffffff80000597:	00 
ffffffff80000598:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000059c:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800005a0:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800005a4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800005a8:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff800005ac:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005b0:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff800005b4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005b8:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800005bc:	48 85 c0             	test   rax,rax
ffffffff800005bf:	74 10                	je     ffffffff800005d1 <split_tag(boundary_tag*)+0xa1>
ffffffff800005c1:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005c5:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff800005c9:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800005cd:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800005d1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800005d5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800005d9:	48 89 50 18          	mov    QWORD PTR [rax+0x18],rdx
ffffffff800005dd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800005e1:	8b 50 08             	mov    edx,DWORD PTR [rax+0x8]
ffffffff800005e4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005e8:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800005eb:	29 c2                	sub    edx,eax
ffffffff800005ed:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800005f1:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff800005f4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800005f8:	be ff ff ff ff       	mov    esi,0xffffffff
ffffffff800005fd:	48 89 c7             	mov    rdi,rax
ffffffff80000600:	e8 1e fd ff ff       	call   ffffffff80000323 <insert_tag(boundary_tag*, int)>
ffffffff80000605:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000609:	c9                   	leave  
ffffffff8000060a:	c3                   	ret    

ffffffff8000060b <allocate_new_tag(unsigned int)>:
ffffffff8000060b:	f3 0f 1e fa          	endbr64 
ffffffff8000060f:	55                   	push   rbp
ffffffff80000610:	48 89 e5             	mov    rbp,rsp
ffffffff80000613:	48 83 ec 20          	sub    rsp,0x20
ffffffff80000617:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff8000061a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000061d:	83 c0 30             	add    eax,0x30
ffffffff80000620:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80000623:	8b 05 b7 a0 00 00    	mov    eax,DWORD PTR [rip+0xa0b7]        # ffffffff8000a6e0 <l_pageSize>
ffffffff80000629:	89 c6                	mov    esi,eax
ffffffff8000062b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff8000062e:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000633:	f7 f6                	div    esi
ffffffff80000635:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000638:	8b 05 a2 a0 00 00    	mov    eax,DWORD PTR [rip+0xa0a2]        # ffffffff8000a6e0 <l_pageSize>
ffffffff8000063e:	89 c1                	mov    ecx,eax
ffffffff80000640:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80000643:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000648:	f7 f1                	div    ecx
ffffffff8000064a:	89 d0                	mov    eax,edx
ffffffff8000064c:	85 c0                	test   eax,eax
ffffffff8000064e:	74 04                	je     ffffffff80000654 <allocate_new_tag(unsigned int)+0x49>
ffffffff80000650:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80000654:	8b 05 8a a0 00 00    	mov    eax,DWORD PTR [rip+0xa08a]        # ffffffff8000a6e4 <l_pageCount>
ffffffff8000065a:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
ffffffff8000065d:	73 09                	jae    ffffffff80000668 <allocate_new_tag(unsigned int)+0x5d>
ffffffff8000065f:	8b 05 7f a0 00 00    	mov    eax,DWORD PTR [rip+0xa07f]        # ffffffff8000a6e4 <l_pageCount>
ffffffff80000665:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000668:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000066b:	89 c7                	mov    edi,eax
ffffffff8000066d:	e8 5f 05 00 00       	call   ffffffff80000bd1 <liballoc_alloc>
ffffffff80000672:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000676:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff8000067b:	75 07                	jne    ffffffff80000684 <allocate_new_tag(unsigned int)+0x79>
ffffffff8000067d:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000682:	eb 66                	jmp    ffffffff800006ea <allocate_new_tag(unsigned int)+0xdf>
ffffffff80000684:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000688:	c7 00 de c0 01 c0    	mov    DWORD PTR [rax],0xc001c0de
ffffffff8000068e:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000692:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80000695:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
ffffffff80000698:	8b 05 42 a0 00 00    	mov    eax,DWORD PTR [rip+0xa042]        # ffffffff8000a6e0 <l_pageSize>
ffffffff8000069e:	0f af 45 fc          	imul   eax,DWORD PTR [rbp-0x4]
ffffffff800006a2:	89 c2                	mov    edx,eax
ffffffff800006a4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006a8:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff800006ab:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006af:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [rax+0xc],0xffffffff
ffffffff800006b6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006ba:	48 c7 40 20 00 00 00 	mov    QWORD PTR [rax+0x20],0x0
ffffffff800006c1:	00 
ffffffff800006c2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006c6:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
ffffffff800006cd:	00 
ffffffff800006ce:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006d2:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffffffff800006d9:	00 
ffffffff800006da:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006de:	48 c7 40 18 00 00 00 	mov    QWORD PTR [rax+0x18],0x0
ffffffff800006e5:	00 
ffffffff800006e6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800006ea:	c9                   	leave  
ffffffff800006eb:	c3                   	ret    

ffffffff800006ec <malloc>:
ffffffff800006ec:	f3 0f 1e fa          	endbr64 
ffffffff800006f0:	55                   	push   rbp
ffffffff800006f1:	48 89 e5             	mov    rbp,rsp
ffffffff800006f4:	48 83 ec 40          	sub    rsp,0x40
ffffffff800006f8:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff800006fc:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80000703:	00 
ffffffff80000704:	e8 aa 04 00 00       	call   ffffffff80000bb3 <liballoc_lock>
ffffffff80000709:	8b 05 31 a9 00 00    	mov    eax,DWORD PTR [rip+0xa931]        # ffffffff8000b040 <l_initialized>
ffffffff8000070f:	85 c0                	test   eax,eax
ffffffff80000711:	75 3e                	jne    ffffffff80000751 <malloc+0x65>
ffffffff80000713:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff8000071a:	eb 25                	jmp    ffffffff80000741 <malloc+0x55>
ffffffff8000071c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000071f:	48 98                	cdqe   
ffffffff80000721:	48 c7 04 c5 c0 ae 00 	mov    QWORD PTR [rax*8-0x7fff5140],0x0
ffffffff80000728:	80 00 00 00 00 
ffffffff8000072d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000730:	48 98                	cdqe   
ffffffff80000732:	c7 04 85 c0 af 00 80 	mov    DWORD PTR [rax*4-0x7fff5040],0x0
ffffffff80000739:	00 00 00 00 
ffffffff8000073d:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80000741:	83 7d fc 1f          	cmp    DWORD PTR [rbp-0x4],0x1f
ffffffff80000745:	7e d5                	jle    ffffffff8000071c <malloc+0x30>
ffffffff80000747:	c7 05 ef a8 00 00 01 	mov    DWORD PTR [rip+0xa8ef],0x1        # ffffffff8000b040 <l_initialized>
ffffffff8000074e:	00 00 00 
ffffffff80000751:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80000755:	89 c7                	mov    edi,eax
ffffffff80000757:	e8 a1 fa ff ff       	call   ffffffff800001fd <getexp(unsigned int)>
ffffffff8000075c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000075f:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
ffffffff80000763:	7f 07                	jg     ffffffff8000076c <malloc+0x80>
ffffffff80000765:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff8000076c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000076f:	48 98                	cdqe   
ffffffff80000771:	48 8b 04 c5 c0 ae 00 	mov    rax,QWORD PTR [rax*8-0x7fff5140]
ffffffff80000778:	80 
ffffffff80000779:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000077d:	eb 26                	jmp    ffffffff800007a5 <malloc+0xb9>
ffffffff8000077f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000783:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000786:	89 c0                	mov    eax,eax
ffffffff80000788:	48 8d 50 d0          	lea    rdx,[rax-0x30]
ffffffff8000078c:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80000790:	48 83 c0 30          	add    rax,0x30
ffffffff80000794:	48 39 c2             	cmp    rdx,rax
ffffffff80000797:	73 15                	jae    ffffffff800007ae <malloc+0xc2>
ffffffff80000799:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000079d:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff800007a1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800007a5:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff800007aa:	75 d3                	jne    ffffffff8000077f <malloc+0x93>
ffffffff800007ac:	eb 01                	jmp    ffffffff800007af <malloc+0xc3>
ffffffff800007ae:	90                   	nop
ffffffff800007af:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff800007b4:	75 40                	jne    ffffffff800007f6 <malloc+0x10a>
ffffffff800007b6:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800007ba:	89 c7                	mov    edi,eax
ffffffff800007bc:	e8 4a fe ff ff       	call   ffffffff8000060b <allocate_new_tag(unsigned int)>
ffffffff800007c1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800007c5:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff800007ca:	0f 94 c0             	sete   al
ffffffff800007cd:	84 c0                	test   al,al
ffffffff800007cf:	74 0f                	je     ffffffff800007e0 <malloc+0xf4>
ffffffff800007d1:	e8 ec 03 00 00       	call   ffffffff80000bc2 <liballoc_unlock>
ffffffff800007d6:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800007db:	e9 b6 00 00 00       	jmp    ffffffff80000896 <malloc+0x1aa>
ffffffff800007e0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800007e4:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800007e7:	83 e8 30             	sub    eax,0x30
ffffffff800007ea:	89 c7                	mov    edi,eax
ffffffff800007ec:	e8 0c fa ff ff       	call   ffffffff800001fd <getexp(unsigned int)>
ffffffff800007f1:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800007f4:	eb 41                	jmp    ffffffff80000837 <malloc+0x14b>
ffffffff800007f6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800007fa:	48 89 c7             	mov    rdi,rax
ffffffff800007fd:	e8 b9 fb ff ff       	call   ffffffff800003bb <remove_tag(boundary_tag*)>
ffffffff80000802:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000806:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000080a:	48 85 c0             	test   rax,rax
ffffffff8000080d:	75 28                	jne    ffffffff80000837 <malloc+0x14b>
ffffffff8000080f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000813:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80000817:	48 85 c0             	test   rax,rax
ffffffff8000081a:	75 1b                	jne    ffffffff80000837 <malloc+0x14b>
ffffffff8000081c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000081f:	48 98                	cdqe   
ffffffff80000821:	8b 04 85 c0 af 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff5040]
ffffffff80000828:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff8000082b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000082e:	48 98                	cdqe   
ffffffff80000830:	89 14 85 c0 af 00 80 	mov    DWORD PTR [rax*4-0x7fff5040],edx
ffffffff80000837:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000083b:	89 c2                	mov    edx,eax
ffffffff8000083d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000841:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
ffffffff80000844:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000848:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000084b:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffffffff8000084f:	29 d0                	sub    eax,edx
ffffffff80000851:	83 e8 60             	sub    eax,0x60
ffffffff80000854:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff80000857:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000085a:	85 c0                	test   eax,eax
ffffffff8000085c:	7e 23                	jle    ffffffff80000881 <malloc+0x195>
ffffffff8000085e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80000861:	89 c7                	mov    edi,eax
ffffffff80000863:	e8 95 f9 ff ff       	call   ffffffff800001fd <getexp(unsigned int)>
ffffffff80000868:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff8000086b:	83 7d e8 00          	cmp    DWORD PTR [rbp-0x18],0x0
ffffffff8000086f:	78 10                	js     ffffffff80000881 <malloc+0x195>
ffffffff80000871:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000875:	48 89 c7             	mov    rdi,rax
ffffffff80000878:	e8 b3 fc ff ff       	call   ffffffff80000530 <split_tag(boundary_tag*)>
ffffffff8000087d:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80000881:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000885:	48 83 c0 30          	add    rax,0x30
ffffffff80000889:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff8000088d:	e8 30 03 00 00       	call   ffffffff80000bc2 <liballoc_unlock>
ffffffff80000892:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000896:	c9                   	leave  
ffffffff80000897:	c3                   	ret    

ffffffff80000898 <free>:
ffffffff80000898:	f3 0f 1e fa          	endbr64 
ffffffff8000089c:	55                   	push   rbp
ffffffff8000089d:	48 89 e5             	mov    rbp,rsp
ffffffff800008a0:	48 83 ec 30          	sub    rsp,0x30
ffffffff800008a4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800008a8:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff800008ad:	0f 84 7a 01 00 00    	je     ffffffff80000a2d <free+0x195>
ffffffff800008b3:	e8 fb 02 00 00       	call   ffffffff80000bb3 <liballoc_lock>
ffffffff800008b8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800008bc:	48 83 e8 30          	sub    rax,0x30
ffffffff800008c0:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800008c4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800008c8:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800008ca:	3d de c0 01 c0       	cmp    eax,0xc001c0de
ffffffff800008cf:	74 26                	je     ffffffff800008f7 <free+0x5f>
ffffffff800008d1:	e8 ec 02 00 00       	call   ffffffff80000bc2 <liballoc_unlock>
ffffffff800008d6:	e9 53 01 00 00       	jmp    ffffffff80000a2e <free+0x196>
ffffffff800008db:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800008df:	48 89 c7             	mov    rdi,rax
ffffffff800008e2:	e8 79 fb ff ff       	call   ffffffff80000460 <melt_left(boundary_tag*)>
ffffffff800008e7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800008eb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800008ef:	48 89 c7             	mov    rdi,rax
ffffffff800008f2:	e8 c4 fa ff ff       	call   ffffffff800003bb <remove_tag(boundary_tag*)>
ffffffff800008f7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800008fb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800008ff:	48 85 c0             	test   rax,rax
ffffffff80000902:	74 21                	je     ffffffff80000925 <free+0x8d>
ffffffff80000904:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000908:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000090c:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff8000090f:	85 c0                	test   eax,eax
ffffffff80000911:	79 c8                	jns    ffffffff800008db <free+0x43>
ffffffff80000913:	eb 10                	jmp    ffffffff80000925 <free+0x8d>
ffffffff80000915:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000919:	48 89 c7             	mov    rdi,rax
ffffffff8000091c:	e8 a1 fb ff ff       	call   ffffffff800004c2 <absorb_right(boundary_tag*)>
ffffffff80000921:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000925:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000929:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff8000092d:	48 85 c0             	test   rax,rax
ffffffff80000930:	74 0f                	je     ffffffff80000941 <free+0xa9>
ffffffff80000932:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000936:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff8000093a:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff8000093d:	85 c0                	test   eax,eax
ffffffff8000093f:	79 d4                	jns    ffffffff80000915 <free+0x7d>
ffffffff80000941:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000945:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80000948:	83 e8 30             	sub    eax,0x30
ffffffff8000094b:	89 c7                	mov    edi,eax
ffffffff8000094d:	e8 ab f8 ff ff       	call   ffffffff800001fd <getexp(unsigned int)>
ffffffff80000952:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000955:	83 7d fc 07          	cmp    DWORD PTR [rbp-0x4],0x7
ffffffff80000959:	7f 07                	jg     ffffffff80000962 <free+0xca>
ffffffff8000095b:	c7 45 fc 08 00 00 00 	mov    DWORD PTR [rbp-0x4],0x8
ffffffff80000962:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000966:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000096a:	48 85 c0             	test   rax,rax
ffffffff8000096d:	0f 85 a2 00 00 00    	jne    ffffffff80000a15 <free+0x17d>
ffffffff80000973:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000977:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff8000097b:	48 85 c0             	test   rax,rax
ffffffff8000097e:	0f 85 91 00 00 00    	jne    ffffffff80000a15 <free+0x17d>
ffffffff80000984:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000987:	48 98                	cdqe   
ffffffff80000989:	8b 04 85 c0 af 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff5040]
ffffffff80000990:	83 f8 05             	cmp    eax,0x5
ffffffff80000993:	75 65                	jne    ffffffff800009fa <free+0x162>
ffffffff80000995:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000999:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000099c:	8b 15 3e 9d 00 00    	mov    edx,DWORD PTR [rip+0x9d3e]        # ffffffff8000a6e0 <l_pageSize>
ffffffff800009a2:	89 d1                	mov    ecx,edx
ffffffff800009a4:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800009a9:	f7 f1                	div    ecx
ffffffff800009ab:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff800009ae:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800009b2:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff800009b5:	8b 15 25 9d 00 00    	mov    edx,DWORD PTR [rip+0x9d25]        # ffffffff8000a6e0 <l_pageSize>
ffffffff800009bb:	89 d1                	mov    ecx,edx
ffffffff800009bd:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800009c2:	f7 f1                	div    ecx
ffffffff800009c4:	89 d0                	mov    eax,edx
ffffffff800009c6:	85 c0                	test   eax,eax
ffffffff800009c8:	74 04                	je     ffffffff800009ce <free+0x136>
ffffffff800009ca:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
ffffffff800009ce:	8b 05 10 9d 00 00    	mov    eax,DWORD PTR [rip+0x9d10]        # ffffffff8000a6e4 <l_pageCount>
ffffffff800009d4:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
ffffffff800009d7:	73 09                	jae    ffffffff800009e2 <free+0x14a>
ffffffff800009d9:	8b 05 05 9d 00 00    	mov    eax,DWORD PTR [rip+0x9d05]        # ffffffff8000a6e4 <l_pageCount>
ffffffff800009df:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff800009e2:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff800009e5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800009e9:	89 d6                	mov    esi,edx
ffffffff800009eb:	48 89 c7             	mov    rdi,rax
ffffffff800009ee:	e8 0d 02 00 00       	call   ffffffff80000c00 <liballoc_free>
ffffffff800009f3:	e8 ca 01 00 00       	call   ffffffff80000bc2 <liballoc_unlock>
ffffffff800009f8:	eb 34                	jmp    ffffffff80000a2e <free+0x196>
ffffffff800009fa:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800009fd:	48 98                	cdqe   
ffffffff800009ff:	8b 04 85 c0 af 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff5040]
ffffffff80000a06:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80000a09:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000a0c:	48 98                	cdqe   
ffffffff80000a0e:	89 14 85 c0 af 00 80 	mov    DWORD PTR [rax*4-0x7fff5040],edx
ffffffff80000a15:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80000a18:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000a1c:	89 d6                	mov    esi,edx
ffffffff80000a1e:	48 89 c7             	mov    rdi,rax
ffffffff80000a21:	e8 fd f8 ff ff       	call   ffffffff80000323 <insert_tag(boundary_tag*, int)>
ffffffff80000a26:	e8 97 01 00 00       	call   ffffffff80000bc2 <liballoc_unlock>
ffffffff80000a2b:	eb 01                	jmp    ffffffff80000a2e <free+0x196>
ffffffff80000a2d:	90                   	nop
ffffffff80000a2e:	c9                   	leave  
ffffffff80000a2f:	c3                   	ret    

ffffffff80000a30 <calloc>:
ffffffff80000a30:	f3 0f 1e fa          	endbr64 
ffffffff80000a34:	55                   	push   rbp
ffffffff80000a35:	48 89 e5             	mov    rbp,rsp
ffffffff80000a38:	48 83 ec 20          	sub    rsp,0x20
ffffffff80000a3c:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000a40:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80000a44:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000a48:	89 c2                	mov    edx,eax
ffffffff80000a4a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80000a4e:	0f af c2             	imul   eax,edx
ffffffff80000a51:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000a54:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000a57:	48 98                	cdqe   
ffffffff80000a59:	48 89 c7             	mov    rdi,rax
ffffffff80000a5c:	e8 8b fc ff ff       	call   ffffffff800006ec <malloc>
ffffffff80000a61:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000a65:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000a68:	48 63 d0             	movsxd rdx,eax
ffffffff80000a6b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000a6f:	be 00 00 00 00       	mov    esi,0x0
ffffffff80000a74:	48 89 c7             	mov    rdi,rax
ffffffff80000a77:	e8 cd f7 ff ff       	call   ffffffff80000249 <liballoc_memset(void*, int, unsigned long)>
ffffffff80000a7c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000a80:	c9                   	leave  
ffffffff80000a81:	c3                   	ret    

ffffffff80000a82 <realloc>:
ffffffff80000a82:	f3 0f 1e fa          	endbr64 
ffffffff80000a86:	55                   	push   rbp
ffffffff80000a87:	48 89 e5             	mov    rbp,rsp
ffffffff80000a8a:	48 83 ec 30          	sub    rsp,0x30
ffffffff80000a8e:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80000a92:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80000a96:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
ffffffff80000a9b:	75 16                	jne    ffffffff80000ab3 <realloc+0x31>
ffffffff80000a9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000aa1:	48 89 c7             	mov    rdi,rax
ffffffff80000aa4:	e8 ef fd ff ff       	call   ffffffff80000898 <free>
ffffffff80000aa9:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000aae:	e9 80 00 00 00       	jmp    ffffffff80000b33 <realloc+0xb1>
ffffffff80000ab3:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff80000ab8:	75 0e                	jne    ffffffff80000ac8 <realloc+0x46>
ffffffff80000aba:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80000abe:	48 89 c7             	mov    rdi,rax
ffffffff80000ac1:	e8 26 fc ff ff       	call   ffffffff800006ec <malloc>
ffffffff80000ac6:	eb 6b                	jmp    ffffffff80000b33 <realloc+0xb1>
ffffffff80000ac8:	e8 e6 00 00 00       	call   ffffffff80000bb3 <liballoc_lock>
ffffffff80000acd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000ad1:	48 83 e8 30          	sub    rax,0x30
ffffffff80000ad5:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80000ad9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000add:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff80000ae0:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000ae3:	e8 da 00 00 00       	call   ffffffff80000bc2 <liballoc_unlock>
ffffffff80000ae8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000aeb:	48 98                	cdqe   
ffffffff80000aed:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffffffff80000af1:	73 07                	jae    ffffffff80000afa <realloc+0x78>
ffffffff80000af3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80000af7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80000afa:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80000afe:	48 89 c7             	mov    rdi,rax
ffffffff80000b01:	e8 e6 fb ff ff       	call   ffffffff800006ec <malloc>
ffffffff80000b06:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80000b0a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000b0d:	48 63 d0             	movsxd rdx,eax
ffffffff80000b10:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80000b14:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000b18:	48 89 ce             	mov    rsi,rcx
ffffffff80000b1b:	48 89 c7             	mov    rdi,rax
ffffffff80000b1e:	e8 6d f7 ff ff       	call   ffffffff80000290 <liballoc_memcpy(void*, void const*, unsigned long)>
ffffffff80000b23:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000b27:	48 89 c7             	mov    rdi,rax
ffffffff80000b2a:	e8 69 fd ff ff       	call   ffffffff80000898 <free>
ffffffff80000b2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000b33:	c9                   	leave  
ffffffff80000b34:	c3                   	ret    

ffffffff80000b35 <operator new(unsigned long)>:
ffffffff80000b35:	f3 0f 1e fa          	endbr64 
ffffffff80000b39:	55                   	push   rbp
ffffffff80000b3a:	48 89 e5             	mov    rbp,rsp
ffffffff80000b3d:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000b41:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000b45:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000b49:	48 89 c7             	mov    rdi,rax
ffffffff80000b4c:	e8 9b fb ff ff       	call   ffffffff800006ec <malloc>
ffffffff80000b51:	c9                   	leave  
ffffffff80000b52:	c3                   	ret    

ffffffff80000b53 <operator new[](unsigned long)>:
ffffffff80000b53:	f3 0f 1e fa          	endbr64 
ffffffff80000b57:	55                   	push   rbp
ffffffff80000b58:	48 89 e5             	mov    rbp,rsp
ffffffff80000b5b:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000b5f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000b63:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000b67:	48 89 c7             	mov    rdi,rax
ffffffff80000b6a:	e8 7d fb ff ff       	call   ffffffff800006ec <malloc>
ffffffff80000b6f:	c9                   	leave  
ffffffff80000b70:	c3                   	ret    

ffffffff80000b71 <operator delete(void*)>:
ffffffff80000b71:	f3 0f 1e fa          	endbr64 
ffffffff80000b75:	55                   	push   rbp
ffffffff80000b76:	48 89 e5             	mov    rbp,rsp
ffffffff80000b79:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000b7d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000b81:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000b85:	48 89 c7             	mov    rdi,rax
ffffffff80000b88:	e8 0b fd ff ff       	call   ffffffff80000898 <free>
ffffffff80000b8d:	90                   	nop
ffffffff80000b8e:	c9                   	leave  
ffffffff80000b8f:	c3                   	ret    

ffffffff80000b90 <operator delete(void*, unsigned long)>:
ffffffff80000b90:	f3 0f 1e fa          	endbr64 
ffffffff80000b94:	55                   	push   rbp
ffffffff80000b95:	48 89 e5             	mov    rbp,rsp
ffffffff80000b98:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000b9c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000ba0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80000ba4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000ba8:	48 89 c7             	mov    rdi,rax
ffffffff80000bab:	e8 e8 fc ff ff       	call   ffffffff80000898 <free>
ffffffff80000bb0:	90                   	nop
ffffffff80000bb1:	c9                   	leave  
ffffffff80000bb2:	c3                   	ret    

ffffffff80000bb3 <liballoc_lock>:
ffffffff80000bb3:	f3 0f 1e fa          	endbr64 
ffffffff80000bb7:	55                   	push   rbp
ffffffff80000bb8:	48 89 e5             	mov    rbp,rsp
ffffffff80000bbb:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000bc0:	5d                   	pop    rbp
ffffffff80000bc1:	c3                   	ret    

ffffffff80000bc2 <liballoc_unlock>:
ffffffff80000bc2:	f3 0f 1e fa          	endbr64 
ffffffff80000bc6:	55                   	push   rbp
ffffffff80000bc7:	48 89 e5             	mov    rbp,rsp
ffffffff80000bca:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000bcf:	5d                   	pop    rbp
ffffffff80000bd0:	c3                   	ret    

ffffffff80000bd1 <liballoc_alloc>:
ffffffff80000bd1:	f3 0f 1e fa          	endbr64 
ffffffff80000bd5:	55                   	push   rbp
ffffffff80000bd6:	48 89 e5             	mov    rbp,rsp
ffffffff80000bd9:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000bdd:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80000be0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80000be3:	48 98                	cdqe   
ffffffff80000be5:	48 89 c7             	mov    rdi,rax
ffffffff80000be8:	e8 da 04 00 00       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff80000bed:	48 89 c2             	mov    rdx,rax
ffffffff80000bf0:	48 8b 05 71 9b 00 00 	mov    rax,QWORD PTR [rip+0x9b71]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80000bf7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000bfb:	48 01 d0             	add    rax,rdx
ffffffff80000bfe:	c9                   	leave  
ffffffff80000bff:	c3                   	ret    

ffffffff80000c00 <liballoc_free>:
ffffffff80000c00:	f3 0f 1e fa          	endbr64 
ffffffff80000c04:	55                   	push   rbp
ffffffff80000c05:	48 89 e5             	mov    rbp,rsp
ffffffff80000c08:	48 83 ec 10          	sub    rsp,0x10
ffffffff80000c0c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80000c10:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80000c13:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80000c16:	48 98                	cdqe   
ffffffff80000c18:	48 8b 15 49 9b 00 00 	mov    rdx,QWORD PTR [rip+0x9b49]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80000c1f:	48 8b 52 08          	mov    rdx,QWORD PTR [rdx+0x8]
ffffffff80000c23:	48 89 d1             	mov    rcx,rdx
ffffffff80000c26:	48 f7 d9             	neg    rcx
ffffffff80000c29:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80000c2d:	48 01 ca             	add    rdx,rcx
ffffffff80000c30:	48 89 c6             	mov    rsi,rax
ffffffff80000c33:	48 89 d7             	mov    rdi,rdx
ffffffff80000c36:	e8 7a 05 00 00       	call   ffffffff800011b5 <PhysicalMemory::free(void*, unsigned long)>
ffffffff80000c3b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000c40:	c9                   	leave  
ffffffff80000c41:	c3                   	ret    

ffffffff80000c42 <memset(void*, int, unsigned long)>:
ffffffff80000c42:	55                   	push   rbp
ffffffff80000c43:	48 89 e5             	mov    rbp,rsp
ffffffff80000c46:	48 83 ec 28          	sub    rsp,0x28
ffffffff80000c4a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80000c4e:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80000c51:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80000c55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000c59:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80000c5d:	eb 13                	jmp    ffffffff80000c72 <memset(void*, int, unsigned long)+0x30>
ffffffff80000c5f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80000c62:	89 c1                	mov    ecx,eax
ffffffff80000c64:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000c68:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80000c6c:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80000c70:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80000c72:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000c76:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80000c7a:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80000c7e:	48 85 c0             	test   rax,rax
ffffffff80000c81:	0f 95 c0             	setne  al
ffffffff80000c84:	84 c0                	test   al,al
ffffffff80000c86:	75 d7                	jne    ffffffff80000c5f <memset(void*, int, unsigned long)+0x1d>
ffffffff80000c88:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000c8c:	c9                   	leave  
ffffffff80000c8d:	c3                   	ret    

ffffffff80000c8e <PhysicalMemory::Initialize()>:
ffffffff80000c8e:	f3 0f 1e fa          	endbr64 
ffffffff80000c92:	55                   	push   rbp
ffffffff80000c93:	48 89 e5             	mov    rbp,rsp
ffffffff80000c96:	48 83 ec 60          	sub    rsp,0x60
ffffffff80000c9a:	48 8b 05 87 9a 00 00 	mov    rax,QWORD PTR [rip+0x9a87]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80000ca1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000ca5:	48 89 c6             	mov    rsi,rax
ffffffff80000ca8:	48 c7 c7 48 89 00 80 	mov    rdi,0xffffffff80008948
ffffffff80000caf:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000cb4:	e8 90 38 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80000cb9:	48 8b 05 68 9a 00 00 	mov    rax,QWORD PTR [rip+0x9a68]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80000cc0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000cc4:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80000cc8:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80000ccf:	00 
ffffffff80000cd0:	e9 a1 00 00 00       	jmp    ffffffff80000d76 <PhysicalMemory::Initialize()+0xe8>
ffffffff80000cd5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000cd9:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000ce0:	00 
ffffffff80000ce1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000ce5:	48 01 d0             	add    rax,rdx
ffffffff80000ce8:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000ceb:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000cef:	48 85 c0             	test   rax,rax
ffffffff80000cf2:	75 7d                	jne    ffffffff80000d71 <PhysicalMemory::Initialize()+0xe3>
ffffffff80000cf4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000cf8:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000cff:	00 
ffffffff80000d00:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000d04:	48 01 d0             	add    rax,rdx
ffffffff80000d07:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000d0a:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80000d0d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000d11:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffffffff80000d18:	00 
ffffffff80000d19:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000d1d:	48 01 c8             	add    rax,rcx
ffffffff80000d20:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000d23:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000d27:	48 01 d0             	add    rax,rdx
ffffffff80000d2a:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax
ffffffff80000d2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80000d32:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000d39:	00 
ffffffff80000d3a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000d3e:	48 01 d0             	add    rax,rdx
ffffffff80000d41:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000d44:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80000d48:	48 8b 05 19 a3 00 00 	mov    rax,QWORD PTR [rip+0xa319]        # ffffffff8000b068 <freeRam>
ffffffff80000d4f:	48 01 d0             	add    rax,rdx
ffffffff80000d52:	48 89 05 0f a3 00 00 	mov    QWORD PTR [rip+0xa30f],rax        # ffffffff8000b068 <freeRam>
ffffffff80000d59:	48 8b 05 f0 a2 00 00 	mov    rax,QWORD PTR [rip+0xa2f0]        # ffffffff8000b050 <highest_addr>
ffffffff80000d60:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff80000d64:	76 0b                	jbe    ffffffff80000d71 <PhysicalMemory::Initialize()+0xe3>
ffffffff80000d66:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80000d6a:	48 89 05 df a2 00 00 	mov    QWORD PTR [rip+0xa2df],rax        # ffffffff8000b050 <highest_addr>
ffffffff80000d71:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80000d76:	48 8b 05 ab 99 00 00 	mov    rax,QWORD PTR [rip+0x99ab]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80000d7d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000d81:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80000d85:	0f 82 4a ff ff ff    	jb     ffffffff80000cd5 <PhysicalMemory::Initialize()+0x47>
ffffffff80000d8b:	48 8b 05 be a2 00 00 	mov    rax,QWORD PTR [rip+0xa2be]        # ffffffff8000b050 <highest_addr>
ffffffff80000d92:	48 c1 e8 0f          	shr    rax,0xf
ffffffff80000d96:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80000d9a:	c7 45 cc 00 10 00 00 	mov    DWORD PTR [rbp-0x34],0x1000
ffffffff80000da1:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80000da5:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80000da9:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffffffff80000dac:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
ffffffff80000daf:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80000db2:	83 e8 01             	sub    eax,0x1
ffffffff80000db5:	48 63 d0             	movsxd rdx,eax
ffffffff80000db8:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80000dbc:	48 01 d0             	add    rax,rdx
ffffffff80000dbf:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffffffff80000dc2:	48 63 fa             	movsxd rdi,edx
ffffffff80000dc5:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000dca:	48 f7 f7             	div    rdi
ffffffff80000dcd:	48 89 c2             	mov    rdx,rax
ffffffff80000dd0:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffffffff80000dd3:	48 98                	cdqe   
ffffffff80000dd5:	48 0f af c2          	imul   rax,rdx
ffffffff80000dd9:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff80000ddd:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80000de4:	00 
ffffffff80000de5:	e9 18 01 00 00       	jmp    ffffffff80000f02 <PhysicalMemory::Initialize()+0x274>
ffffffff80000dea:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000dee:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000df5:	00 
ffffffff80000df6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000dfa:	48 01 d0             	add    rax,rdx
ffffffff80000dfd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000e00:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000e04:	48 85 c0             	test   rax,rax
ffffffff80000e07:	0f 85 ef 00 00 00    	jne    ffffffff80000efc <PhysicalMemory::Initialize()+0x26e>
ffffffff80000e0d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000e11:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000e18:	00 
ffffffff80000e19:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000e1d:	48 01 d0             	add    rax,rdx
ffffffff80000e20:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000e23:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000e27:	48 39 45 b0          	cmp    QWORD PTR [rbp-0x50],rax
ffffffff80000e2b:	0f 87 cc 00 00 00    	ja     ffffffff80000efd <PhysicalMemory::Initialize()+0x26f>
ffffffff80000e31:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000e35:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000e3c:	00 
ffffffff80000e3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000e41:	48 01 d0             	add    rax,rdx
ffffffff80000e44:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000e47:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80000e4a:	48 8b 05 17 99 00 00 	mov    rax,QWORD PTR [rip+0x9917]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80000e51:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000e55:	48 01 d0             	add    rax,rdx
ffffffff80000e58:	48 89 05 e9 a1 00 00 	mov    QWORD PTR [rip+0xa1e9],rax        # ffffffff8000b048 <bitmap>
ffffffff80000e5f:	48 8b 05 e2 a1 00 00 	mov    rax,QWORD PTR [rip+0xa1e2]        # ffffffff8000b048 <bitmap>
ffffffff80000e66:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80000e6a:	be ff 00 00 00       	mov    esi,0xff
ffffffff80000e6f:	48 89 c7             	mov    rdi,rax
ffffffff80000e72:	e8 cb fd ff ff       	call   ffffffff80000c42 <memset(void*, int, unsigned long)>
ffffffff80000e77:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000e7b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000e82:	00 
ffffffff80000e83:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000e87:	48 01 d0             	add    rax,rdx
ffffffff80000e8a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000e8d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80000e91:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000e95:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
ffffffff80000e9c:	00 
ffffffff80000e9d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000ea1:	48 01 c8             	add    rax,rcx
ffffffff80000ea4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000ea7:	48 2b 55 b0          	sub    rdx,QWORD PTR [rbp-0x50]
ffffffff80000eab:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80000eaf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000eb3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000eba:	00 
ffffffff80000ebb:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000ebf:	48 01 d0             	add    rax,rdx
ffffffff80000ec2:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000ec5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
ffffffff80000ec8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80000ecc:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000ed3:	00 
ffffffff80000ed4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000ed8:	48 01 d0             	add    rax,rdx
ffffffff80000edb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000ede:	48 8b 55 b0          	mov    rdx,QWORD PTR [rbp-0x50]
ffffffff80000ee2:	48 01 ca             	add    rdx,rcx
ffffffff80000ee5:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80000ee8:	48 8b 05 79 a1 00 00 	mov    rax,QWORD PTR [rip+0xa179]        # ffffffff8000b068 <freeRam>
ffffffff80000eef:	48 2b 45 b0          	sub    rax,QWORD PTR [rbp-0x50]
ffffffff80000ef3:	48 89 05 6e a1 00 00 	mov    QWORD PTR [rip+0xa16e],rax        # ffffffff8000b068 <freeRam>
ffffffff80000efa:	eb 1b                	jmp    ffffffff80000f17 <PhysicalMemory::Initialize()+0x289>
ffffffff80000efc:	90                   	nop
ffffffff80000efd:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80000f02:	48 8b 05 1f 98 00 00 	mov    rax,QWORD PTR [rip+0x981f]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80000f09:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000f0d:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff80000f11:	0f 82 d3 fe ff ff    	jb     ffffffff80000dea <PhysicalMemory::Initialize()+0x15c>
ffffffff80000f17:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80000f1e:	00 
ffffffff80000f1f:	e9 91 00 00 00       	jmp    ffffffff80000fb5 <PhysicalMemory::Initialize()+0x327>
ffffffff80000f24:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000f28:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000f2f:	00 
ffffffff80000f30:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000f34:	48 01 d0             	add    rax,rdx
ffffffff80000f37:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000f3a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80000f3e:	48 85 c0             	test   rax,rax
ffffffff80000f41:	75 6c                	jne    ffffffff80000faf <PhysicalMemory::Initialize()+0x321>
ffffffff80000f43:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80000f4a:	00 
ffffffff80000f4b:	eb 40                	jmp    ffffffff80000f8d <PhysicalMemory::Initialize()+0x2ff>
ffffffff80000f4d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000f51:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000f58:	00 
ffffffff80000f59:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000f5d:	48 01 d0             	add    rax,rdx
ffffffff80000f60:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000f63:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80000f66:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80000f6a:	48 01 d0             	add    rax,rdx
ffffffff80000f6d:	48 c1 e8 0c          	shr    rax,0xc
ffffffff80000f71:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80000f76:	48 89 c6             	mov    rsi,rax
ffffffff80000f79:	48 c7 c7 48 b0 00 80 	mov    rdi,0xffffffff8000b048
ffffffff80000f80:	e8 1f 03 00 00       	call   ffffffff800012a4 <Bitmap::Set(unsigned long, bool)>
ffffffff80000f85:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffffffff80000f8c:	00 
ffffffff80000f8d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80000f91:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80000f98:	00 
ffffffff80000f99:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80000f9d:	48 01 d0             	add    rax,rdx
ffffffff80000fa0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80000fa3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000fa7:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffffffff80000fab:	72 a0                	jb     ffffffff80000f4d <PhysicalMemory::Initialize()+0x2bf>
ffffffff80000fad:	eb 01                	jmp    ffffffff80000fb0 <PhysicalMemory::Initialize()+0x322>
ffffffff80000faf:	90                   	nop
ffffffff80000fb0:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffffffff80000fb5:	48 8b 05 6c 97 00 00 	mov    rax,QWORD PTR [rip+0x976c]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80000fbc:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80000fc0:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffffffff80000fc4:	0f 82 5a ff ff ff    	jb     ffffffff80000f24 <PhysicalMemory::Initialize()+0x296>
ffffffff80000fca:	48 8b 15 77 a0 00 00 	mov    rdx,QWORD PTR [rip+0xa077]        # ffffffff8000b048 <bitmap>
ffffffff80000fd1:	48 8b 05 90 a0 00 00 	mov    rax,QWORD PTR [rip+0xa090]        # ffffffff8000b068 <freeRam>
ffffffff80000fd8:	48 c1 e8 14          	shr    rax,0x14
ffffffff80000fdc:	48 89 c6             	mov    rsi,rax
ffffffff80000fdf:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80000fe3:	48 89 d1             	mov    rcx,rdx
ffffffff80000fe6:	48 89 c2             	mov    rdx,rax
ffffffff80000fe9:	48 c7 c7 70 89 00 80 	mov    rdi,0xffffffff80008970
ffffffff80000ff0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80000ff5:	e8 4f 35 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80000ffa:	90                   	nop
ffffffff80000ffb:	c9                   	leave  
ffffffff80000ffc:	c3                   	ret    

ffffffff80000ffd <inner_alloc(unsigned long, unsigned long)>:
ffffffff80000ffd:	f3 0f 1e fa          	endbr64 
ffffffff80001001:	55                   	push   rbp
ffffffff80001002:	48 89 e5             	mov    rbp,rsp
ffffffff80001005:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001009:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff8000100d:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff80001011:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80001018:	00 
ffffffff80001019:	e9 91 00 00 00       	jmp    ffffffff800010af <inner_alloc(unsigned long, unsigned long)+0xb2>
ffffffff8000101e:	48 8b 05 33 a0 00 00 	mov    rax,QWORD PTR [rip+0xa033]        # ffffffff8000b058 <lastI>
ffffffff80001025:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80001029:	48 89 15 28 a0 00 00 	mov    QWORD PTR [rip+0xa028],rdx        # ffffffff8000b058 <lastI>
ffffffff80001030:	48 89 c6             	mov    rsi,rax
ffffffff80001033:	48 c7 c7 48 b0 00 80 	mov    rdi,0xffffffff8000b048
ffffffff8000103a:	e8 3b 02 00 00       	call   ffffffff8000127a <Bitmap::operator[](unsigned long)>
ffffffff8000103f:	83 f0 01             	xor    eax,0x1
ffffffff80001042:	84 c0                	test   al,al
ffffffff80001044:	74 61                	je     ffffffff800010a7 <inner_alloc(unsigned long, unsigned long)+0xaa>
ffffffff80001046:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff8000104b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000104f:	48 3b 45 d8          	cmp    rax,QWORD PTR [rbp-0x28]
ffffffff80001053:	0f 94 c0             	sete   al
ffffffff80001056:	84 c0                	test   al,al
ffffffff80001058:	74 55                	je     ffffffff800010af <inner_alloc(unsigned long, unsigned long)+0xb2>
ffffffff8000105a:	48 8b 05 f7 9f 00 00 	mov    rax,QWORD PTR [rip+0x9ff7]        # ffffffff8000b058 <lastI>
ffffffff80001061:	48 2b 45 d8          	sub    rax,QWORD PTR [rbp-0x28]
ffffffff80001065:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80001069:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000106d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001071:	eb 1d                	jmp    ffffffff80001090 <inner_alloc(unsigned long, unsigned long)+0x93>
ffffffff80001073:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001077:	ba 01 00 00 00       	mov    edx,0x1
ffffffff8000107c:	48 89 c6             	mov    rsi,rax
ffffffff8000107f:	48 c7 c7 48 b0 00 80 	mov    rdi,0xffffffff8000b048
ffffffff80001086:	e8 19 02 00 00       	call   ffffffff800012a4 <Bitmap::Set(unsigned long, bool)>
ffffffff8000108b:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80001090:	48 8b 05 c1 9f 00 00 	mov    rax,QWORD PTR [rip+0x9fc1]        # ffffffff8000b058 <lastI>
ffffffff80001097:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff8000109b:	72 d6                	jb     ffffffff80001073 <inner_alloc(unsigned long, unsigned long)+0x76>
ffffffff8000109d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800010a1:	48 c1 e0 0c          	shl    rax,0xc
ffffffff800010a5:	eb 1e                	jmp    ffffffff800010c5 <inner_alloc(unsigned long, unsigned long)+0xc8>
ffffffff800010a7:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff800010ae:	00 
ffffffff800010af:	48 8b 05 a2 9f 00 00 	mov    rax,QWORD PTR [rip+0x9fa2]        # ffffffff8000b058 <lastI>
ffffffff800010b6:	48 39 45 d0          	cmp    QWORD PTR [rbp-0x30],rax
ffffffff800010ba:	0f 87 5e ff ff ff    	ja     ffffffff8000101e <inner_alloc(unsigned long, unsigned long)+0x21>
ffffffff800010c0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800010c5:	c9                   	leave  
ffffffff800010c6:	c3                   	ret    

ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>:
ffffffff800010c7:	f3 0f 1e fa          	endbr64 
ffffffff800010cb:	55                   	push   rbp
ffffffff800010cc:	48 89 e5             	mov    rbp,rsp
ffffffff800010cf:	48 83 ec 20          	sub    rsp,0x20
ffffffff800010d3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800010d7:	48 8b 05 7a 9f 00 00 	mov    rax,QWORD PTR [rip+0x9f7a]        # ffffffff8000b058 <lastI>
ffffffff800010de:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800010e2:	48 8b 05 67 9f 00 00 	mov    rax,QWORD PTR [rip+0x9f67]        # ffffffff8000b050 <highest_addr>
ffffffff800010e9:	48 c1 e8 0c          	shr    rax,0xc
ffffffff800010ed:	48 89 c2             	mov    rdx,rax
ffffffff800010f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800010f4:	48 89 d6             	mov    rsi,rdx
ffffffff800010f7:	48 89 c7             	mov    rdi,rax
ffffffff800010fa:	e8 fe fe ff ff       	call   ffffffff80000ffd <inner_alloc(unsigned long, unsigned long)>
ffffffff800010ff:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001103:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80001108:	0f 85 a1 00 00 00    	jne    ffffffff800011af <PhysicalMemory::alloc(unsigned long)+0xe8>
ffffffff8000110e:	48 c7 05 3f 9f 00 00 	mov    QWORD PTR [rip+0x9f3f],0x0        # ffffffff8000b058 <lastI>
ffffffff80001115:	00 00 00 00 
ffffffff80001119:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff8000111d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001121:	48 89 d6             	mov    rsi,rdx
ffffffff80001124:	48 89 c7             	mov    rdi,rax
ffffffff80001127:	e8 d1 fe ff ff       	call   ffffffff80000ffd <inner_alloc(unsigned long, unsigned long)>
ffffffff8000112c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001130:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80001135:	75 16                	jne    ffffffff8000114d <PhysicalMemory::alloc(unsigned long)+0x86>
ffffffff80001137:	48 c7 c7 ad 89 00 80 	mov    rdi,0xffffffff800089ad
ffffffff8000113e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001143:	e8 01 34 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001148:	e8 1c 01 00 00       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff8000114d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001151:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80001155:	48 8b 15 0c 96 00 00 	mov    rdx,QWORD PTR [rip+0x960c]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff8000115c:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
ffffffff80001160:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80001164:	48 01 ca             	add    rdx,rcx
ffffffff80001167:	48 89 d1             	mov    rcx,rdx
ffffffff8000116a:	48 89 c2             	mov    rdx,rax
ffffffff8000116d:	be 00 00 00 00       	mov    esi,0x0
ffffffff80001172:	48 89 cf             	mov    rdi,rcx
ffffffff80001175:	e8 c8 fa ff ff       	call   ffffffff80000c42 <memset(void*, int, unsigned long)>
ffffffff8000117a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000117e:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80001182:	48 89 c2             	mov    rdx,rax
ffffffff80001185:	48 8b 05 d4 9e 00 00 	mov    rax,QWORD PTR [rip+0x9ed4]        # ffffffff8000b060 <usedRam>
ffffffff8000118c:	48 01 d0             	add    rax,rdx
ffffffff8000118f:	48 89 05 ca 9e 00 00 	mov    QWORD PTR [rip+0x9eca],rax        # ffffffff8000b060 <usedRam>
ffffffff80001196:	48 8b 05 cb 9e 00 00 	mov    rax,QWORD PTR [rip+0x9ecb]        # ffffffff8000b068 <freeRam>
ffffffff8000119d:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800011a1:	48 c1 e2 0c          	shl    rdx,0xc
ffffffff800011a5:	48 29 d0             	sub    rax,rdx
ffffffff800011a8:	48 89 05 b9 9e 00 00 	mov    QWORD PTR [rip+0x9eb9],rax        # ffffffff8000b068 <freeRam>
ffffffff800011af:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800011b3:	c9                   	leave  
ffffffff800011b4:	c3                   	ret    

ffffffff800011b5 <PhysicalMemory::free(void*, unsigned long)>:
ffffffff800011b5:	f3 0f 1e fa          	endbr64 
ffffffff800011b9:	55                   	push   rbp
ffffffff800011ba:	48 89 e5             	mov    rbp,rsp
ffffffff800011bd:	48 83 ec 20          	sub    rsp,0x20
ffffffff800011c1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800011c5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800011c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800011cd:	48 c1 e8 0c          	shr    rax,0xc
ffffffff800011d1:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800011d5:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800011d9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800011dd:	eb 1d                	jmp    ffffffff800011fc <PhysicalMemory::free(void*, unsigned long)+0x47>
ffffffff800011df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800011e3:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800011e8:	48 89 c6             	mov    rsi,rax
ffffffff800011eb:	48 c7 c7 48 b0 00 80 	mov    rdi,0xffffffff8000b048
ffffffff800011f2:	e8 ad 00 00 00       	call   ffffffff800012a4 <Bitmap::Set(unsigned long, bool)>
ffffffff800011f7:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff800011fc:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001200:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001204:	48 01 d0             	add    rax,rdx
ffffffff80001207:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff8000120b:	72 d2                	jb     ffffffff800011df <PhysicalMemory::free(void*, unsigned long)+0x2a>
ffffffff8000120d:	48 8b 05 44 9e 00 00 	mov    rax,QWORD PTR [rip+0x9e44]        # ffffffff8000b058 <lastI>
ffffffff80001214:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff80001218:	73 0b                	jae    ffffffff80001225 <PhysicalMemory::free(void*, unsigned long)+0x70>
ffffffff8000121a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000121e:	48 89 05 33 9e 00 00 	mov    QWORD PTR [rip+0x9e33],rax        # ffffffff8000b058 <lastI>
ffffffff80001225:	48 8b 05 34 9e 00 00 	mov    rax,QWORD PTR [rip+0x9e34]        # ffffffff8000b060 <usedRam>
ffffffff8000122c:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80001230:	48 c1 e2 0c          	shl    rdx,0xc
ffffffff80001234:	48 29 d0             	sub    rax,rdx
ffffffff80001237:	48 89 05 22 9e 00 00 	mov    QWORD PTR [rip+0x9e22],rax        # ffffffff8000b060 <usedRam>
ffffffff8000123e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001242:	48 c1 e0 0c          	shl    rax,0xc
ffffffff80001246:	48 89 c2             	mov    rdx,rax
ffffffff80001249:	48 8b 05 18 9e 00 00 	mov    rax,QWORD PTR [rip+0x9e18]        # ffffffff8000b068 <freeRam>
ffffffff80001250:	48 01 d0             	add    rax,rdx
ffffffff80001253:	48 89 05 0e 9e 00 00 	mov    QWORD PTR [rip+0x9e0e],rax        # ffffffff8000b068 <freeRam>
ffffffff8000125a:	90                   	nop
ffffffff8000125b:	c9                   	leave  
ffffffff8000125c:	c3                   	ret    

ffffffff8000125d <Utils::DisableInts()>:
ffffffff8000125d:	f3 0f 1e fa          	endbr64 
ffffffff80001261:	55                   	push   rbp
ffffffff80001262:	48 89 e5             	mov    rbp,rsp
ffffffff80001265:	fa                   	cli    
ffffffff80001266:	90                   	nop
ffffffff80001267:	5d                   	pop    rbp
ffffffff80001268:	c3                   	ret    

ffffffff80001269 <Utils::HaltCatchFire()>:
ffffffff80001269:	f3 0f 1e fa          	endbr64 
ffffffff8000126d:	55                   	push   rbp
ffffffff8000126e:	48 89 e5             	mov    rbp,rsp
ffffffff80001271:	e8 e7 ff ff ff       	call   ffffffff8000125d <Utils::DisableInts()>
ffffffff80001276:	f4                   	hlt    
ffffffff80001277:	eb fd                	jmp    ffffffff80001276 <Utils::HaltCatchFire()+0xd>
ffffffff80001279:	90                   	nop

ffffffff8000127a <Bitmap::operator[](unsigned long)>:
ffffffff8000127a:	f3 0f 1e fa          	endbr64 
ffffffff8000127e:	55                   	push   rbp
ffffffff8000127f:	48 89 e5             	mov    rbp,rsp
ffffffff80001282:	48 83 ec 10          	sub    rsp,0x10
ffffffff80001286:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000128a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff8000128e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001292:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001296:	48 89 d6             	mov    rsi,rdx
ffffffff80001299:	48 89 c7             	mov    rdi,rax
ffffffff8000129c:	e8 a5 00 00 00       	call   ffffffff80001346 <Bitmap::Get(unsigned long)>
ffffffff800012a1:	c9                   	leave  
ffffffff800012a2:	c3                   	ret    
ffffffff800012a3:	90                   	nop

ffffffff800012a4 <Bitmap::Set(unsigned long, bool)>:
ffffffff800012a4:	f3 0f 1e fa          	endbr64 
ffffffff800012a8:	55                   	push   rbp
ffffffff800012a9:	48 89 e5             	mov    rbp,rsp
ffffffff800012ac:	48 83 ec 28          	sub    rsp,0x28
ffffffff800012b0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800012b4:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800012b8:	89 d0                	mov    eax,edx
ffffffff800012ba:	88 45 dc             	mov    BYTE PTR [rbp-0x24],al
ffffffff800012bd:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800012c1:	48 c1 e8 03          	shr    rax,0x3
ffffffff800012c5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800012c9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800012cd:	83 e0 07             	and    eax,0x7
ffffffff800012d0:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
ffffffff800012d3:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
ffffffff800012d7:	ba 80 00 00 00       	mov    edx,0x80
ffffffff800012dc:	89 c1                	mov    ecx,eax
ffffffff800012de:	d3 fa                	sar    edx,cl
ffffffff800012e0:	89 d0                	mov    eax,edx
ffffffff800012e2:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
ffffffff800012e5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800012e9:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff800012ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800012f0:	48 01 d0             	add    rax,rdx
ffffffff800012f3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800012f6:	89 c2                	mov    edx,eax
ffffffff800012f8:	0f b6 45 f6          	movzx  eax,BYTE PTR [rbp-0xa]
ffffffff800012fc:	f7 d0                	not    eax
ffffffff800012fe:	89 d1                	mov    ecx,edx
ffffffff80001300:	21 c1                	and    ecx,eax
ffffffff80001302:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001306:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80001309:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000130d:	48 01 d0             	add    rax,rdx
ffffffff80001310:	89 ca                	mov    edx,ecx
ffffffff80001312:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80001314:	80 7d dc 00          	cmp    BYTE PTR [rbp-0x24],0x0
ffffffff80001318:	74 24                	je     ffffffff8000133e <Bitmap::Set(unsigned long, bool)+0x9a>
ffffffff8000131a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000131e:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80001321:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001325:	48 01 d0             	add    rax,rdx
ffffffff80001328:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8000132b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8000132f:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffffffff80001332:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80001336:	48 01 ca             	add    rdx,rcx
ffffffff80001339:	0a 45 f6             	or     al,BYTE PTR [rbp-0xa]
ffffffff8000133c:	88 02                	mov    BYTE PTR [rdx],al
ffffffff8000133e:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80001343:	c9                   	leave  
ffffffff80001344:	c3                   	ret    
ffffffff80001345:	90                   	nop

ffffffff80001346 <Bitmap::Get(unsigned long)>:
ffffffff80001346:	f3 0f 1e fa          	endbr64 
ffffffff8000134a:	55                   	push   rbp
ffffffff8000134b:	48 89 e5             	mov    rbp,rsp
ffffffff8000134e:	48 83 ec 20          	sub    rsp,0x20
ffffffff80001352:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001356:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff8000135a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000135e:	48 c1 e8 03          	shr    rax,0x3
ffffffff80001362:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001366:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000136a:	83 e0 07             	and    eax,0x7
ffffffff8000136d:	88 45 f7             	mov    BYTE PTR [rbp-0x9],al
ffffffff80001370:	0f b6 45 f7          	movzx  eax,BYTE PTR [rbp-0x9]
ffffffff80001374:	ba 80 00 00 00       	mov    edx,0x80
ffffffff80001379:	89 c1                	mov    ecx,eax
ffffffff8000137b:	d3 fa                	sar    edx,cl
ffffffff8000137d:	89 d0                	mov    eax,edx
ffffffff8000137f:	88 45 f6             	mov    BYTE PTR [rbp-0xa],al
ffffffff80001382:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001386:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80001389:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000138d:	48 01 d0             	add    rax,rdx
ffffffff80001390:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001393:	22 45 f6             	and    al,BYTE PTR [rbp-0xa]
ffffffff80001396:	84 c0                	test   al,al
ffffffff80001398:	74 07                	je     ffffffff800013a1 <Bitmap::Get(unsigned long)+0x5b>
ffffffff8000139a:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000139f:	eb 05                	jmp    ffffffff800013a6 <Bitmap::Get(unsigned long)+0x60>
ffffffff800013a1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800013a6:	c9                   	leave  
ffffffff800013a7:	c3                   	ret    

ffffffff800013a8 <memset(void*, int, unsigned long)>:
ffffffff800013a8:	55                   	push   rbp
ffffffff800013a9:	48 89 e5             	mov    rbp,rsp
ffffffff800013ac:	48 83 ec 28          	sub    rsp,0x28
ffffffff800013b0:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800013b4:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800013b7:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800013bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800013bf:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800013c3:	eb 13                	jmp    ffffffff800013d8 <memset(void*, int, unsigned long)+0x30>
ffffffff800013c5:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff800013c8:	89 c1                	mov    ecx,eax
ffffffff800013ca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800013ce:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800013d2:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff800013d6:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800013d8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800013dc:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff800013e0:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800013e4:	48 85 c0             	test   rax,rax
ffffffff800013e7:	0f 95 c0             	setne  al
ffffffff800013ea:	84 c0                	test   al,al
ffffffff800013ec:	75 d7                	jne    ffffffff800013c5 <memset(void*, int, unsigned long)+0x1d>
ffffffff800013ee:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800013f2:	c9                   	leave  
ffffffff800013f3:	c3                   	ret    

ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>:
ffffffff800013f4:	f3 0f 1e fa          	endbr64 
ffffffff800013f8:	55                   	push   rbp
ffffffff800013f9:	48 89 e5             	mov    rbp,rsp
ffffffff800013fc:	48 83 ec 70          	sub    rsp,0x70
ffffffff80001400:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80001404:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
ffffffff80001408:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
ffffffff8000140c:	48 89 4d 90          	mov    QWORD PTR [rbp-0x70],rcx
ffffffff80001410:	48 8b 05 51 93 00 00 	mov    rax,QWORD PTR [rip+0x9351]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80001417:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000141b:	48 01 45 a8          	add    QWORD PTR [rbp-0x58],rax
ffffffff8000141f:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001423:	48 c1 e8 27          	shr    rax,0x27
ffffffff80001427:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff8000142c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001430:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001434:	48 c1 e8 1e          	shr    rax,0x1e
ffffffff80001438:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff8000143d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001441:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001445:	48 c1 e8 15          	shr    rax,0x15
ffffffff80001449:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff8000144e:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80001452:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
ffffffff80001456:	48 c1 e8 0c          	shr    rax,0xc
ffffffff8000145a:	25 ff 01 00 00       	and    eax,0x1ff
ffffffff8000145f:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80001463:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80001467:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000146b:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff8000146f:	48 85 c0             	test   rax,rax
ffffffff80001472:	75 47                	jne    ffffffff800014bb <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0xc7>
ffffffff80001474:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80001479:	e8 49 fc ff ff       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff8000147e:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80001482:	48 8b 05 df 92 00 00 	mov    rax,QWORD PTR [rip+0x92df]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80001489:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8000148d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80001491:	48 01 d0             	add    rax,rdx
ffffffff80001494:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80001499:	be 00 00 00 00       	mov    esi,0x0
ffffffff8000149e:	48 89 c7             	mov    rdi,rax
ffffffff800014a1:	e8 02 ff ff ff       	call   ffffffff800013a8 <memset(void*, int, unsigned long)>
ffffffff800014a6:	48 83 4d d8 07       	or     QWORD PTR [rbp-0x28],0x7
ffffffff800014ab:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800014af:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800014b3:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff800014b7:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff800014bb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff800014bf:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff800014c3:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff800014c7:	48 ba 80 ff ff ff ff 	movabs rdx,0x7fffffffffffff80
ffffffff800014ce:	ff ff 7f 
ffffffff800014d1:	48 21 d0             	and    rax,rdx
ffffffff800014d4:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800014d8:	48 8b 05 89 92 00 00 	mov    rax,QWORD PTR [rip+0x9289]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff800014df:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800014e3:	48 01 45 d0          	add    QWORD PTR [rbp-0x30],rax
ffffffff800014e7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800014eb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800014ef:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff800014f3:	48 85 c0             	test   rax,rax
ffffffff800014f6:	75 47                	jne    ffffffff8000153f <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x14b>
ffffffff800014f8:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800014fd:	e8 c5 fb ff ff       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff80001502:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80001506:	48 8b 05 5b 92 00 00 	mov    rax,QWORD PTR [rip+0x925b]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff8000150d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80001511:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80001515:	48 01 d0             	add    rax,rdx
ffffffff80001518:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff8000151d:	be 00 00 00 00       	mov    esi,0x0
ffffffff80001522:	48 89 c7             	mov    rdi,rax
ffffffff80001525:	e8 7e fe ff ff       	call   ffffffff800013a8 <memset(void*, int, unsigned long)>
ffffffff8000152a:	48 83 4d c8 07       	or     QWORD PTR [rbp-0x38],0x7
ffffffff8000152f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80001533:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001537:	48 8b 4d c8          	mov    rcx,QWORD PTR [rbp-0x38]
ffffffff8000153b:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff8000153f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80001543:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001547:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff8000154b:	48 ba 80 ff ff ff ff 	movabs rdx,0x7fffffffffffff80
ffffffff80001552:	ff ff 7f 
ffffffff80001555:	48 21 d0             	and    rax,rdx
ffffffff80001558:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff8000155c:	48 8b 05 05 92 00 00 	mov    rax,QWORD PTR [rip+0x9205]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80001563:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001567:	48 01 45 c0          	add    QWORD PTR [rbp-0x40],rax
ffffffff8000156b:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000156f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80001573:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80001577:	48 85 c0             	test   rax,rax
ffffffff8000157a:	75 47                	jne    ffffffff800015c3 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)+0x1cf>
ffffffff8000157c:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80001581:	e8 41 fb ff ff       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff80001586:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff8000158a:	48 8b 05 d7 91 00 00 	mov    rax,QWORD PTR [rip+0x91d7]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80001591:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80001595:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80001599:	48 01 d0             	add    rax,rdx
ffffffff8000159c:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff800015a1:	be 00 00 00 00       	mov    esi,0x0
ffffffff800015a6:	48 89 c7             	mov    rdi,rax
ffffffff800015a9:	e8 fa fd ff ff       	call   ffffffff800013a8 <memset(void*, int, unsigned long)>
ffffffff800015ae:	48 83 4d b8 07       	or     QWORD PTR [rbp-0x48],0x7
ffffffff800015b3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800015b7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800015bb:	48 8b 4d b8          	mov    rcx,QWORD PTR [rbp-0x48]
ffffffff800015bf:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff800015c3:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800015c7:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800015cb:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff800015cf:	48 ba 80 ff ff ff ff 	movabs rdx,0x7fffffffffffff80
ffffffff800015d6:	ff ff 7f 
ffffffff800015d9:	48 21 d0             	and    rax,rdx
ffffffff800015dc:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
ffffffff800015e0:	48 8b 05 81 91 00 00 	mov    rax,QWORD PTR [rip+0x9181]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff800015e7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800015eb:	48 01 45 b0          	add    QWORD PTR [rbp-0x50],rax
ffffffff800015ef:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff800015f3:	48 0b 45 90          	or     rax,QWORD PTR [rbp-0x70]
ffffffff800015f7:	48 89 c1             	mov    rcx,rax
ffffffff800015fa:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff800015fe:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80001602:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff80001606:	90                   	nop
ffffffff80001607:	c9                   	leave  
ffffffff80001608:	c3                   	ret    

ffffffff80001609 <VirtualMemory::Initialize()>:
ffffffff80001609:	f3 0f 1e fa          	endbr64 
ffffffff8000160d:	55                   	push   rbp
ffffffff8000160e:	48 89 e5             	mov    rbp,rsp
ffffffff80001611:	53                   	push   rbx
ffffffff80001612:	48 83 ec 48          	sub    rsp,0x48
ffffffff80001616:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000161b:	e8 a7 fa ff ff       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff80001620:	48 89 05 49 9a 00 00 	mov    QWORD PTR [rip+0x9a49],rax        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff80001627:	48 8b 05 42 9a 00 00 	mov    rax,QWORD PTR [rip+0x9a42]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff8000162e:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80001633:	be 00 00 00 00       	mov    esi,0x0
ffffffff80001638:	48 89 c7             	mov    rdi,rax
ffffffff8000163b:	e8 68 fd ff ff       	call   ffffffff800013a8 <memset(void*, int, unsigned long)>
ffffffff80001640:	48 8b 05 29 9a 00 00 	mov    rax,QWORD PTR [rip+0x9a29]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff80001647:	48 89 c6             	mov    rsi,rax
ffffffff8000164a:	48 c7 c7 d0 89 00 80 	mov    rdi,0xffffffff800089d0
ffffffff80001651:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001656:	e8 ee 2e 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff8000165b:	48 8b 05 46 91 00 00 	mov    rax,QWORD PTR [rip+0x9146]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff80001662:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80001666:	48 8b 05 7b 91 00 00 	mov    rax,QWORD PTR [rip+0x917b]        # ffffffff8000a7e8 <kernel_file+0x28>
ffffffff8000166d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001671:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80001675:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffffffff80001679:	48 8b 05 28 91 00 00 	mov    rax,QWORD PTR [rip+0x9128]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff80001680:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80001684:	48 8b 05 1d 91 00 00 	mov    rax,QWORD PTR [rip+0x911d]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff8000168b:	48 8b 70 08          	mov    rsi,QWORD PTR [rax+0x8]
ffffffff8000168f:	48 8b 05 52 91 00 00 	mov    rax,QWORD PTR [rip+0x9152]        # ffffffff8000a7e8 <kernel_file+0x28>
ffffffff80001696:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000169a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000169e:	48 01 c6             	add    rsi,rax
ffffffff800016a1:	48 8b 05 00 91 00 00 	mov    rax,QWORD PTR [rip+0x9100]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff800016a8:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800016ac:	49 89 c8             	mov    r8,rcx
ffffffff800016af:	48 89 d1             	mov    rcx,rdx
ffffffff800016b2:	48 89 f2             	mov    rdx,rsi
ffffffff800016b5:	48 89 c6             	mov    rsi,rax
ffffffff800016b8:	48 c7 c7 f8 89 00 80 	mov    rdi,0xffffffff800089f8
ffffffff800016bf:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800016c4:	e8 80 2e 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800016c9:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800016d0:	00 
ffffffff800016d1:	eb 41                	jmp    ffffffff80001714 <VirtualMemory::Initialize()+0x10b>
ffffffff800016d3:	48 8b 05 ce 90 00 00 	mov    rax,QWORD PTR [rip+0x90ce]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff800016da:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff800016de:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800016e2:	48 01 c2             	add    rdx,rax
ffffffff800016e5:	48 8b 05 bc 90 00 00 	mov    rax,QWORD PTR [rip+0x90bc]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff800016ec:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff800016f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800016f4:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffffffff800016f8:	48 8b 05 71 99 00 00 	mov    rax,QWORD PTR [rip+0x9971]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff800016ff:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001704:	48 89 c7             	mov    rdi,rax
ffffffff80001707:	e8 e8 fc ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff8000170c:	48 81 45 e8 00 10 00 	add    QWORD PTR [rbp-0x18],0x1000
ffffffff80001713:	00 
ffffffff80001714:	48 8b 05 cd 90 00 00 	mov    rax,QWORD PTR [rip+0x90cd]        # ffffffff8000a7e8 <kernel_file+0x28>
ffffffff8000171b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000171f:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80001723:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffffffff80001727:	72 aa                	jb     ffffffff800016d3 <VirtualMemory::Initialize()+0xca>
ffffffff80001729:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80001730:	00 
ffffffff80001731:	eb 33                	jmp    ffffffff80001766 <VirtualMemory::Initialize()+0x15d>
ffffffff80001733:	48 8b 05 2e 90 00 00 	mov    rax,QWORD PTR [rip+0x902e]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff8000173a:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8000173e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001742:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff80001746:	48 8b 05 23 99 00 00 	mov    rax,QWORD PTR [rip+0x9923]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff8000174d:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80001751:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001756:	48 89 c7             	mov    rdi,rax
ffffffff80001759:	e8 96 fc ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff8000175e:	48 81 45 e0 00 10 00 	add    QWORD PTR [rbp-0x20],0x1000
ffffffff80001765:	00 
ffffffff80001766:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff8000176b:	48 39 45 e0          	cmp    QWORD PTR [rbp-0x20],rax
ffffffff8000176f:	76 c2                	jbe    ffffffff80001733 <VirtualMemory::Initialize()+0x12a>
ffffffff80001771:	48 8b 05 b0 8f 00 00 	mov    rax,QWORD PTR [rip+0x8fb0]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80001778:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000177c:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80001780:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff80001787:	00 
ffffffff80001788:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff8000178f:	00 
ffffffff80001790:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff80001797:	00 
ffffffff80001798:	eb 63                	jmp    ffffffff800017fd <VirtualMemory::Initialize()+0x1f4>
ffffffff8000179a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000179e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff800017a5:	00 
ffffffff800017a6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800017aa:	48 01 d0             	add    rax,rdx
ffffffff800017ad:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800017b0:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800017b4:	48 83 f8 07          	cmp    rax,0x7
ffffffff800017b8:	75 3d                	jne    ffffffff800017f7 <VirtualMemory::Initialize()+0x1ee>
ffffffff800017ba:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800017be:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff800017c5:	00 
ffffffff800017c6:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800017ca:	48 01 d0             	add    rax,rdx
ffffffff800017cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800017d0:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800017d3:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800017d7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800017db:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff800017e2:	00 
ffffffff800017e3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800017e7:	48 01 d0             	add    rax,rdx
ffffffff800017ea:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800017ed:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800017f1:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff800017f5:	eb 17                	jmp    ffffffff8000180e <VirtualMemory::Initialize()+0x205>
ffffffff800017f7:	90                   	nop
ffffffff800017f8:	48 83 45 c8 01       	add    QWORD PTR [rbp-0x38],0x1
ffffffff800017fd:	48 8b 05 24 8f 00 00 	mov    rax,QWORD PTR [rip+0x8f24]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80001804:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001808:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffffffff8000180c:	72 8c                	jb     ffffffff8000179a <VirtualMemory::Initialize()+0x191>
ffffffff8000180e:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff80001813:	75 16                	jne    ffffffff8000182b <VirtualMemory::Initialize()+0x222>
ffffffff80001815:	48 c7 c7 28 8a 00 80 	mov    rdi,0xffffffff80008a28
ffffffff8000181c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001821:	e8 23 2d 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001826:	e8 3e fa ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff8000182b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000182f:	48 89 c6             	mov    rsi,rax
ffffffff80001832:	48 c7 c7 50 8a 00 80 	mov    rdi,0xffffffff80008a50
ffffffff80001839:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000183e:	e8 06 2d 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001843:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffffffff8000184a:	00 
ffffffff8000184b:	eb 3b                	jmp    ffffffff80001888 <VirtualMemory::Initialize()+0x27f>
ffffffff8000184d:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80001851:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001855:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
ffffffff80001859:	e8 6f 28 00 00       	call   ffffffff800040cd <Screen::GetFramebuffer()>
ffffffff8000185e:	48 89 c2             	mov    rdx,rax
ffffffff80001861:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80001865:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff80001869:	48 8b 05 00 98 00 00 	mov    rax,QWORD PTR [rip+0x9800]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff80001870:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80001875:	48 89 da             	mov    rdx,rbx
ffffffff80001878:	48 89 c7             	mov    rdi,rax
ffffffff8000187b:	e8 74 fb ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80001880:	48 81 45 c0 00 10 00 	add    QWORD PTR [rbp-0x40],0x1000
ffffffff80001887:	00 
ffffffff80001888:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000188c:	48 3b 45 d0          	cmp    rax,QWORD PTR [rbp-0x30]
ffffffff80001890:	72 bb                	jb     ffffffff8000184d <VirtualMemory::Initialize()+0x244>
ffffffff80001892:	48 8b 05 d7 97 00 00 	mov    rax,QWORD PTR [rip+0x97d7]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff80001899:	48 89 c7             	mov    rdi,rax
ffffffff8000189c:	e8 21 00 00 00       	call   ffffffff800018c2 <VirtualMemory::SwapToPageTable(PML4Table*)>
ffffffff800018a1:	90                   	nop
ffffffff800018a2:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800018a6:	c9                   	leave  
ffffffff800018a7:	c3                   	ret    

ffffffff800018a8 <VirtualMemory::SwapToKernelPT()>:
ffffffff800018a8:	f3 0f 1e fa          	endbr64 
ffffffff800018ac:	55                   	push   rbp
ffffffff800018ad:	48 89 e5             	mov    rbp,rsp
ffffffff800018b0:	48 8b 05 b9 97 00 00 	mov    rax,QWORD PTR [rip+0x97b9]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff800018b7:	48 89 c7             	mov    rdi,rax
ffffffff800018ba:	e8 03 00 00 00       	call   ffffffff800018c2 <VirtualMemory::SwapToPageTable(PML4Table*)>
ffffffff800018bf:	90                   	nop
ffffffff800018c0:	5d                   	pop    rbp
ffffffff800018c1:	c3                   	ret    

ffffffff800018c2 <VirtualMemory::SwapToPageTable(PML4Table*)>:
ffffffff800018c2:	f3 0f 1e fa          	endbr64 
ffffffff800018c6:	55                   	push   rbp
ffffffff800018c7:	48 89 e5             	mov    rbp,rsp
ffffffff800018ca:	48 83 ec 08          	sub    rsp,0x8
ffffffff800018ce:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800018d2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800018d6:	0f 22 d8             	mov    cr3,rax
ffffffff800018d9:	90                   	nop
ffffffff800018da:	c9                   	leave  
ffffffff800018db:	c3                   	ret    

ffffffff800018dc <memcpy(void*, void const*, unsigned long)>:
ffffffff800018dc:	55                   	push   rbp
ffffffff800018dd:	48 89 e5             	mov    rbp,rsp
ffffffff800018e0:	48 83 ec 28          	sub    rsp,0x28
ffffffff800018e4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800018e8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800018ec:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800018f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800018f4:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800018f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800018fc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001900:	eb 1d                	jmp    ffffffff8000191f <memcpy(void*, void const*, unsigned long)+0x43>
ffffffff80001902:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001906:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8000190a:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff8000190e:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80001911:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001915:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffffffff80001919:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff8000191d:	88 10                	mov    BYTE PTR [rax],dl
ffffffff8000191f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80001923:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80001927:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff8000192b:	48 85 c0             	test   rax,rax
ffffffff8000192e:	0f 95 c0             	setne  al
ffffffff80001931:	84 c0                	test   al,al
ffffffff80001933:	75 cd                	jne    ffffffff80001902 <memcpy(void*, void const*, unsigned long)+0x26>
ffffffff80001935:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001939:	c9                   	leave  
ffffffff8000193a:	c3                   	ret    

ffffffff8000193b <strncmp(char const*, char const*, unsigned long)>:
ffffffff8000193b:	55                   	push   rbp
ffffffff8000193c:	48 89 e5             	mov    rbp,rsp
ffffffff8000193f:	48 83 ec 28          	sub    rsp,0x28
ffffffff80001943:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001947:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff8000194b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff8000194f:	eb 46                	jmp    ffffffff80001997 <strncmp(char const*, char const*, unsigned long)+0x5c>
ffffffff80001951:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001955:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80001959:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff8000195d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001960:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff80001963:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001967:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff8000196b:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff8000196f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001972:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
ffffffff80001975:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80001979:	3a 45 fe             	cmp    al,BYTE PTR [rbp-0x2]
ffffffff8000197c:	74 0c                	je     ffffffff8000198a <strncmp(char const*, char const*, unsigned long)+0x4f>
ffffffff8000197e:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80001982:	0f b6 55 fe          	movzx  edx,BYTE PTR [rbp-0x2]
ffffffff80001986:	29 d0                	sub    eax,edx
ffffffff80001988:	eb 28                	jmp    ffffffff800019b2 <strncmp(char const*, char const*, unsigned long)+0x77>
ffffffff8000198a:	80 7d ff 00          	cmp    BYTE PTR [rbp-0x1],0x0
ffffffff8000198e:	75 07                	jne    ffffffff80001997 <strncmp(char const*, char const*, unsigned long)+0x5c>
ffffffff80001990:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001995:	eb 1b                	jmp    ffffffff800019b2 <strncmp(char const*, char const*, unsigned long)+0x77>
ffffffff80001997:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000199b:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff8000199f:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800019a3:	48 85 c0             	test   rax,rax
ffffffff800019a6:	0f 95 c0             	setne  al
ffffffff800019a9:	84 c0                	test   al,al
ffffffff800019ab:	75 a4                	jne    ffffffff80001951 <strncmp(char const*, char const*, unsigned long)+0x16>
ffffffff800019ad:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800019b2:	c9                   	leave  
ffffffff800019b3:	c3                   	ret    

ffffffff800019b4 <strlen(char const*)>:
ffffffff800019b4:	55                   	push   rbp
ffffffff800019b5:	48 89 e5             	mov    rbp,rsp
ffffffff800019b8:	48 83 ec 18          	sub    rsp,0x18
ffffffff800019bc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800019c0:	eb 05                	jmp    ffffffff800019c7 <strlen(char const*)+0x13>
ffffffff800019c2:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff800019c7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800019cb:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800019cf:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff800019d3:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800019d6:	84 c0                	test   al,al
ffffffff800019d8:	0f 95 c0             	setne  al
ffffffff800019db:	84 c0                	test   al,al
ffffffff800019dd:	75 e3                	jne    ffffffff800019c2 <strlen(char const*)+0xe>
ffffffff800019df:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800019e3:	c9                   	leave  
ffffffff800019e4:	c3                   	ret    

ffffffff800019e5 <compare(char const*, char const*)>:
ffffffff800019e5:	55                   	push   rbp
ffffffff800019e6:	48 89 e5             	mov    rbp,rsp
ffffffff800019e9:	48 83 ec 10          	sub    rsp,0x10
ffffffff800019ed:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800019f1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800019f5:	eb 23                	jmp    ffffffff80001a1a <compare(char const*, char const*)+0x35>
ffffffff800019f7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800019fb:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff800019fe:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001a02:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001a05:	38 c2                	cmp    dl,al
ffffffff80001a07:	74 07                	je     ffffffff80001a10 <compare(char const*, char const*)+0x2b>
ffffffff80001a09:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001a0e:	eb 2f                	jmp    ffffffff80001a3f <compare(char const*, char const*)+0x5a>
ffffffff80001a10:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80001a15:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80001a1a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001a1e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001a21:	84 c0                	test   al,al
ffffffff80001a23:	74 0b                	je     ffffffff80001a30 <compare(char const*, char const*)+0x4b>
ffffffff80001a25:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001a29:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001a2c:	84 c0                	test   al,al
ffffffff80001a2e:	75 c7                	jne    ffffffff800019f7 <compare(char const*, char const*)+0x12>
ffffffff80001a30:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001a34:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001a37:	84 c0                	test   al,al
ffffffff80001a39:	0f 94 c0             	sete   al
ffffffff80001a3c:	0f b6 c0             	movzx  eax,al
ffffffff80001a3f:	c9                   	leave  
ffffffff80001a40:	c3                   	ret    

ffffffff80001a41 <strstr(char const*, char const*)>:
ffffffff80001a41:	55                   	push   rbp
ffffffff80001a42:	48 89 e5             	mov    rbp,rsp
ffffffff80001a45:	48 83 ec 10          	sub    rsp,0x10
ffffffff80001a49:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80001a4d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80001a51:	eb 44                	jmp    ffffffff80001a97 <strstr(char const*, char const*)+0x56>
ffffffff80001a53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001a57:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80001a5a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001a5e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001a61:	38 c2                	cmp    dl,al
ffffffff80001a63:	75 1e                	jne    ffffffff80001a83 <strstr(char const*, char const*)+0x42>
ffffffff80001a65:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80001a69:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001a6d:	48 89 d6             	mov    rsi,rdx
ffffffff80001a70:	48 89 c7             	mov    rdi,rax
ffffffff80001a73:	e8 6d ff ff ff       	call   ffffffff800019e5 <compare(char const*, char const*)>
ffffffff80001a78:	85 c0                	test   eax,eax
ffffffff80001a7a:	74 07                	je     ffffffff80001a83 <strstr(char const*, char const*)+0x42>
ffffffff80001a7c:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80001a81:	eb 05                	jmp    ffffffff80001a88 <strstr(char const*, char const*)+0x47>
ffffffff80001a83:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001a88:	84 c0                	test   al,al
ffffffff80001a8a:	74 06                	je     ffffffff80001a92 <strstr(char const*, char const*)+0x51>
ffffffff80001a8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001a90:	eb 15                	jmp    ffffffff80001aa7 <strstr(char const*, char const*)+0x66>
ffffffff80001a92:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80001a97:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001a9b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80001a9e:	84 c0                	test   al,al
ffffffff80001aa0:	75 b1                	jne    ffffffff80001a53 <strstr(char const*, char const*)+0x12>
ffffffff80001aa2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001aa7:	c9                   	leave  
ffffffff80001aa8:	c3                   	ret    

ffffffff80001aa9 <memmove(void*, void const*, unsigned int)>:
ffffffff80001aa9:	55                   	push   rbp
ffffffff80001aaa:	48 89 e5             	mov    rbp,rsp
ffffffff80001aad:	48 83 ec 28          	sub    rsp,0x28
ffffffff80001ab1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001ab5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80001ab9:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffffffff80001abc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001ac0:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001ac4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001ac8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001acc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001ad0:	48 3b 45 f8          	cmp    rax,QWORD PTR [rbp-0x8]
ffffffff80001ad4:	73 56                	jae    ffffffff80001b2c <memmove(void*, void const*, unsigned int)+0x83>
ffffffff80001ad6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001ad9:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
ffffffff80001add:	eb 1b                	jmp    ffffffff80001afa <memmove(void*, void const*, unsigned int)+0x51>
ffffffff80001adf:	48 83 6d f0 01       	sub    QWORD PTR [rbp-0x10],0x1
ffffffff80001ae4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001ae8:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80001aeb:	48 83 6d f8 01       	sub    QWORD PTR [rbp-0x8],0x1
ffffffff80001af0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001af4:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80001af6:	83 6d dc 01          	sub    DWORD PTR [rbp-0x24],0x1
ffffffff80001afa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001afd:	48 01 45 f0          	add    QWORD PTR [rbp-0x10],rax
ffffffff80001b01:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff80001b06:	0f 95 c0             	setne  al
ffffffff80001b09:	84 c0                	test   al,al
ffffffff80001b0b:	75 d2                	jne    ffffffff80001adf <memmove(void*, void const*, unsigned int)+0x36>
ffffffff80001b0d:	eb 2f                	jmp    ffffffff80001b3e <memmove(void*, void const*, unsigned int)+0x95>
ffffffff80001b0f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001b13:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80001b17:	48 89 55 f0          	mov    QWORD PTR [rbp-0x10],rdx
ffffffff80001b1b:	0f b6 10             	movzx  edx,BYTE PTR [rax]
ffffffff80001b1e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001b22:	48 8d 48 01          	lea    rcx,[rax+0x1]
ffffffff80001b26:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff80001b2a:	88 10                	mov    BYTE PTR [rax],dl
ffffffff80001b2c:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80001b2f:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff80001b32:	89 55 dc             	mov    DWORD PTR [rbp-0x24],edx
ffffffff80001b35:	85 c0                	test   eax,eax
ffffffff80001b37:	0f 95 c0             	setne  al
ffffffff80001b3a:	84 c0                	test   al,al
ffffffff80001b3c:	75 d1                	jne    ffffffff80001b0f <memmove(void*, void const*, unsigned int)+0x66>
ffffffff80001b3e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001b42:	c9                   	leave  
ffffffff80001b43:	c3                   	ret    

ffffffff80001b44 <strremove(char const*, char const*)>:
ffffffff80001b44:	f3 0f 1e fa          	endbr64 
ffffffff80001b48:	55                   	push   rbp
ffffffff80001b49:	48 89 e5             	mov    rbp,rsp
ffffffff80001b4c:	48 83 ec 20          	sub    rsp,0x20
ffffffff80001b50:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001b54:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80001b58:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001b5c:	48 89 c7             	mov    rdi,rax
ffffffff80001b5f:	e8 50 fe ff ff       	call   ffffffff800019b4 <strlen(char const*)>
ffffffff80001b64:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001b68:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff80001b6d:	74 5d                	je     ffffffff80001bcc <strremove(char const*, char const*)+0x88>
ffffffff80001b6f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001b73:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001b77:	eb 30                	jmp    ffffffff80001ba9 <strremove(char const*, char const*)+0x65>
ffffffff80001b79:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80001b7d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001b81:	48 01 d0             	add    rax,rdx
ffffffff80001b84:	48 89 c7             	mov    rdi,rax
ffffffff80001b87:	e8 28 fe ff ff       	call   ffffffff800019b4 <strlen(char const*)>
ffffffff80001b8c:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80001b8f:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
ffffffff80001b93:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001b97:	48 01 c1             	add    rcx,rax
ffffffff80001b9a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001b9e:	48 89 ce             	mov    rsi,rcx
ffffffff80001ba1:	48 89 c7             	mov    rdi,rax
ffffffff80001ba4:	e8 00 ff ff ff       	call   ffffffff80001aa9 <memmove(void*, void const*, unsigned int)>
ffffffff80001ba9:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80001bad:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001bb1:	48 89 d6             	mov    rsi,rdx
ffffffff80001bb4:	48 89 c7             	mov    rdi,rax
ffffffff80001bb7:	e8 85 fe ff ff       	call   ffffffff80001a41 <strstr(char const*, char const*)>
ffffffff80001bbc:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001bc0:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80001bc5:	0f 95 c0             	setne  al
ffffffff80001bc8:	84 c0                	test   al,al
ffffffff80001bca:	75 ad                	jne    ffffffff80001b79 <strremove(char const*, char const*)+0x35>
ffffffff80001bcc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001bd0:	c9                   	leave  
ffffffff80001bd1:	c3                   	ret    

ffffffff80001bd2 <Initrd::Initrd(char const*)>:
ffffffff80001bd2:	f3 0f 1e fa          	endbr64 
ffffffff80001bd6:	55                   	push   rbp
ffffffff80001bd7:	48 89 e5             	mov    rbp,rsp
ffffffff80001bda:	48 81 ec e0 00 00 00 	sub    rsp,0xe0
ffffffff80001be1:	48 89 bd 28 ff ff ff 	mov    QWORD PTR [rbp-0xd8],rdi
ffffffff80001be8:	48 89 b5 20 ff ff ff 	mov    QWORD PTR [rbp-0xe0],rsi
ffffffff80001bef:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff80001bf6:	48 8b 8d 20 ff ff ff 	mov    rcx,QWORD PTR [rbp-0xe0]
ffffffff80001bfd:	48 c7 c2 78 8a 00 80 	mov    rdx,0xffffffff80008a78
ffffffff80001c04:	48 89 ce             	mov    rsi,rcx
ffffffff80001c07:	48 89 c7             	mov    rdi,rax
ffffffff80001c0a:	e8 b9 05 00 00       	call   ffffffff800021c8 <Filesystem::Filesystem(char const*, char const*)>
ffffffff80001c0f:	48 c7 c2 50 8b 00 80 	mov    rdx,0xffffffff80008b50
ffffffff80001c16:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff80001c1d:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80001c20:	48 8b 05 01 8c 00 00 	mov    rax,QWORD PTR [rip+0x8c01]        # ffffffff8000a828 <mods+0x28>
ffffffff80001c27:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001c2b:	48 85 c0             	test   rax,rax
ffffffff80001c2e:	0f 94 c0             	sete   al
ffffffff80001c31:	84 c0                	test   al,al
ffffffff80001c33:	74 20                	je     ffffffff80001c55 <Initrd::Initrd(char const*)+0x83>
ffffffff80001c35:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff80001c3c:	48 89 c6             	mov    rsi,rax
ffffffff80001c3f:	48 c7 c7 88 8a 00 80 	mov    rdi,0xffffffff80008a88
ffffffff80001c46:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001c4b:	e8 f9 28 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001c50:	e8 14 f6 ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80001c55:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80001c5c:	00 
ffffffff80001c5d:	eb 63                	jmp    ffffffff80001cc2 <Initrd::Initrd(char const*)+0xf0>
ffffffff80001c5f:	48 8b 05 c2 8b 00 00 	mov    rax,QWORD PTR [rip+0x8bc2]        # ffffffff8000a828 <mods+0x28>
ffffffff80001c66:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80001c6a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001c6e:	48 c1 e0 03          	shl    rax,0x3
ffffffff80001c72:	48 01 d0             	add    rax,rdx
ffffffff80001c75:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
ffffffff80001c79:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80001c7d:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001c80:	48 8b 40 20          	mov    rax,QWORD PTR [rax+0x20]
ffffffff80001c84:	ba 0a 00 00 00       	mov    edx,0xa
ffffffff80001c89:	48 c7 c6 c4 8a 00 80 	mov    rsi,0xffffffff80008ac4
ffffffff80001c90:	48 89 c7             	mov    rdi,rax
ffffffff80001c93:	e8 a3 fc ff ff       	call   ffffffff8000193b <strncmp(char const*, char const*, unsigned long)>
ffffffff80001c98:	85 c0                	test   eax,eax
ffffffff80001c9a:	0f 94 c0             	sete   al
ffffffff80001c9d:	84 c0                	test   al,al
ffffffff80001c9f:	74 1c                	je     ffffffff80001cbd <Initrd::Initrd(char const*)+0xeb>
ffffffff80001ca1:	48 c7 c7 cf 8a 00 80 	mov    rdi,0xffffffff80008acf
ffffffff80001ca8:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001cad:	e8 97 28 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001cb2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80001cb6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80001cb9:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80001cbd:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff80001cc2:	48 8b 05 5f 8b 00 00 	mov    rax,QWORD PTR [rip+0x8b5f]        # ffffffff8000a828 <mods+0x28>
ffffffff80001cc9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001ccd:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
ffffffff80001cd1:	0f 92 c0             	setb   al
ffffffff80001cd4:	84 c0                	test   al,al
ffffffff80001cd6:	75 87                	jne    ffffffff80001c5f <Initrd::Initrd(char const*)+0x8d>
ffffffff80001cd8:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80001cdd:	75 20                	jne    ffffffff80001cff <Initrd::Initrd(char const*)+0x12d>
ffffffff80001cdf:	48 8b 85 20 ff ff ff 	mov    rax,QWORD PTR [rbp-0xe0]
ffffffff80001ce6:	48 89 c6             	mov    rsi,rax
ffffffff80001ce9:	48 c7 c7 88 8a 00 80 	mov    rdi,0xffffffff80008a88
ffffffff80001cf0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001cf5:	e8 4f 28 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001cfa:	e8 6a f5 ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80001cff:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001d03:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80001d07:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80001d09:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff80001d0c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80001d0f:	89 c6                	mov    esi,eax
ffffffff80001d11:	48 c7 c7 dd 8a 00 80 	mov    rdi,0xffffffff80008add
ffffffff80001d18:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001d1d:	e8 27 28 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001d22:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80001d29:	00 
ffffffff80001d2a:	e9 47 01 00 00       	jmp    ffffffff80001e76 <Initrd::Initrd(char const*)+0x2a4>
ffffffff80001d2f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001d33:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff80001d37:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80001d3b:	48 89 d0             	mov    rax,rdx
ffffffff80001d3e:	48 c1 e0 03          	shl    rax,0x3
ffffffff80001d42:	48 01 d0             	add    rax,rdx
ffffffff80001d45:	48 c1 e0 03          	shl    rax,0x3
ffffffff80001d49:	48 83 c0 04          	add    rax,0x4
ffffffff80001d4d:	48 01 c8             	add    rax,rcx
ffffffff80001d50:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80001d54:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff80001d5b:	00 
ffffffff80001d5c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001d60:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80001d64:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80001d68:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80001d6a:	89 c0                	mov    eax,eax
ffffffff80001d6c:	48 01 d0             	add    rax,rdx
ffffffff80001d6f:	48 89 85 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rax
ffffffff80001d76:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80001d7a:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff80001d7e:	48 8d 85 78 ff ff ff 	lea    rax,[rbp-0x88]
ffffffff80001d85:	48 83 c0 0c          	add    rax,0xc
ffffffff80001d89:	ba 40 00 00 00       	mov    edx,0x40
ffffffff80001d8e:	48 89 ce             	mov    rsi,rcx
ffffffff80001d91:	48 89 c7             	mov    rdi,rax
ffffffff80001d94:	e8 43 fb ff ff       	call   ffffffff800018dc <memcpy(void*, void const*, unsigned long)>
ffffffff80001d99:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80001d9d:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff80001da0:	89 45 80             	mov    DWORD PTR [rbp-0x80],eax
ffffffff80001da3:	48 83 ec 08          	sub    rsp,0x8
ffffffff80001da7:	ff 75 c8             	push   QWORD PTR [rbp-0x38]
ffffffff80001daa:	ff 75 c0             	push   QWORD PTR [rbp-0x40]
ffffffff80001dad:	ff 75 b8             	push   QWORD PTR [rbp-0x48]
ffffffff80001db0:	ff 75 b0             	push   QWORD PTR [rbp-0x50]
ffffffff80001db3:	ff 75 a8             	push   QWORD PTR [rbp-0x58]
ffffffff80001db6:	ff 75 a0             	push   QWORD PTR [rbp-0x60]
ffffffff80001db9:	ff 75 98             	push   QWORD PTR [rbp-0x68]
ffffffff80001dbc:	ff 75 90             	push   QWORD PTR [rbp-0x70]
ffffffff80001dbf:	ff 75 88             	push   QWORD PTR [rbp-0x78]
ffffffff80001dc2:	ff 75 80             	push   QWORD PTR [rbp-0x80]
ffffffff80001dc5:	ff b5 78 ff ff ff    	push   QWORD PTR [rbp-0x88]
ffffffff80001dcb:	48 c7 c7 e0 b0 00 80 	mov    rdi,0xffffffff8000b0e0
ffffffff80001dd2:	e8 ab 04 00 00       	call   ffffffff80002282 <std::vector<FileInfo>::push_back(FileInfo)>
ffffffff80001dd7:	48 83 c4 60          	add    rsp,0x60
ffffffff80001ddb:	48 83 45 d8 48       	add    QWORD PTR [rbp-0x28],0x48
ffffffff80001de0:	48 c7 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],0x0
ffffffff80001de7:	00 00 00 00 
ffffffff80001deb:	48 c7 85 40 ff ff ff 	mov    QWORD PTR [rbp-0xc0],0x0
ffffffff80001df2:	00 00 00 00 
ffffffff80001df6:	48 c7 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],0x0
ffffffff80001dfd:	00 00 00 00 
ffffffff80001e01:	48 c7 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],0x0
ffffffff80001e08:	00 00 00 00 
ffffffff80001e0c:	48 c7 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],0x0
ffffffff80001e13:	00 00 00 00 
ffffffff80001e17:	48 c7 85 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],0x0
ffffffff80001e1e:	00 00 00 00 
ffffffff80001e22:	48 c7 85 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],0x0
ffffffff80001e29:	00 00 00 00 
ffffffff80001e2d:	48 c7 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],0x0
ffffffff80001e34:	00 00 00 00 
ffffffff80001e38:	8b 45 80             	mov    eax,DWORD PTR [rbp-0x80]
ffffffff80001e3b:	89 c2                	mov    edx,eax
ffffffff80001e3d:	48 8b 8d 78 ff ff ff 	mov    rcx,QWORD PTR [rbp-0x88]
ffffffff80001e44:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
ffffffff80001e4b:	48 89 ce             	mov    rsi,rcx
ffffffff80001e4e:	48 89 c7             	mov    rdi,rax
ffffffff80001e51:	e8 86 fa ff ff       	call   ffffffff800018dc <memcpy(void*, void const*, unsigned long)>
ffffffff80001e56:	48 8d 85 38 ff ff ff 	lea    rax,[rbp-0xc8]
ffffffff80001e5d:	48 89 c6             	mov    rsi,rax
ffffffff80001e60:	48 c7 c7 f1 8a 00 80 	mov    rdi,0xffffffff80008af1
ffffffff80001e67:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001e6c:	e8 d8 26 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001e71:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
ffffffff80001e76:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80001e79:	48 39 45 e8          	cmp    QWORD PTR [rbp-0x18],rax
ffffffff80001e7d:	0f 82 ac fe ff ff    	jb     ffffffff80001d2f <Initrd::Initrd(char const*)+0x15d>
ffffffff80001e83:	48 8b 85 28 ff ff ff 	mov    rax,QWORD PTR [rbp-0xd8]
ffffffff80001e8a:	48 c7 c2 f5 8a 00 80 	mov    rdx,0xffffffff80008af5
ffffffff80001e91:	48 c7 c6 f8 8a 00 80 	mov    rsi,0xffffffff80008af8
ffffffff80001e98:	48 89 c7             	mov    rdi,rax
ffffffff80001e9b:	e8 22 00 00 00       	call   ffffffff80001ec2 <Initrd::open(char const*, char const*)>
ffffffff80001ea0:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80001ea3:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffffffff80001ea7:	79 16                	jns    ffffffff80001ebf <Initrd::Initrd(char const*)+0x2ed>
ffffffff80001ea9:	48 c7 c7 08 8b 00 80 	mov    rdi,0xffffffff80008b08
ffffffff80001eb0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001eb5:	e8 8f 26 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001eba:	e8 aa f3 ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80001ebf:	90                   	nop
ffffffff80001ec0:	c9                   	leave  
ffffffff80001ec1:	c3                   	ret    

ffffffff80001ec2 <Initrd::open(char const*, char const*)>:
ffffffff80001ec2:	f3 0f 1e fa          	endbr64 
ffffffff80001ec6:	55                   	push   rbp
ffffffff80001ec7:	48 89 e5             	mov    rbp,rsp
ffffffff80001eca:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001ece:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001ed2:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80001ed6:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80001eda:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80001ede:	48 89 c7             	mov    rdi,rax
ffffffff80001ee1:	e8 24 03 00 00       	call   ffffffff8000220a <Filesystem::GetMountpoint()>
ffffffff80001ee6:	48 89 c2             	mov    rdx,rax
ffffffff80001ee9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001eed:	48 89 d6             	mov    rsi,rdx
ffffffff80001ef0:	48 89 c7             	mov    rdi,rax
ffffffff80001ef3:	e8 4c fc ff ff       	call   ffffffff80001b44 <strremove(char const*, char const*)>
ffffffff80001ef8:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80001efc:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff80001f03:	00 
ffffffff80001f04:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001f08:	48 89 c6             	mov    rsi,rax
ffffffff80001f0b:	48 c7 c7 2b 8b 00 80 	mov    rdi,0xffffffff80008b2b
ffffffff80001f12:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80001f17:	e8 2d 26 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80001f1c:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80001f23:	00 
ffffffff80001f24:	eb 52                	jmp    ffffffff80001f78 <Initrd::open(char const*, char const*)+0xb6>
ffffffff80001f26:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001f2a:	48 89 c6             	mov    rsi,rax
ffffffff80001f2d:	48 c7 c7 e0 b0 00 80 	mov    rdi,0xffffffff8000b0e0
ffffffff80001f34:	e8 41 04 00 00       	call   ffffffff8000237a <std::vector<FileInfo>::operator[](unsigned long)>
ffffffff80001f39:	48 8d 48 0c          	lea    rcx,[rax+0xc]
ffffffff80001f3d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80001f41:	ba 80 00 00 00       	mov    edx,0x80
ffffffff80001f46:	48 89 c6             	mov    rsi,rax
ffffffff80001f49:	48 89 cf             	mov    rdi,rcx
ffffffff80001f4c:	e8 ea f9 ff ff       	call   ffffffff8000193b <strncmp(char const*, char const*, unsigned long)>
ffffffff80001f51:	85 c0                	test   eax,eax
ffffffff80001f53:	0f 94 c0             	sete   al
ffffffff80001f56:	84 c0                	test   al,al
ffffffff80001f58:	74 19                	je     ffffffff80001f73 <Initrd::open(char const*, char const*)+0xb1>
ffffffff80001f5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80001f5e:	48 89 c6             	mov    rsi,rax
ffffffff80001f61:	48 c7 c7 e0 b0 00 80 	mov    rdi,0xffffffff8000b0e0
ffffffff80001f68:	e8 0d 04 00 00       	call   ffffffff8000237a <std::vector<FileInfo>::operator[](unsigned long)>
ffffffff80001f6d:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80001f71:	eb 1c                	jmp    ffffffff80001f8f <Initrd::open(char const*, char const*)+0xcd>
ffffffff80001f73:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80001f78:	48 c7 c7 e0 b0 00 80 	mov    rdi,0xffffffff8000b0e0
ffffffff80001f7f:	e8 da 03 00 00       	call   ffffffff8000235e <std::vector<FileInfo>::size()>
ffffffff80001f84:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80001f88:	0f 92 c0             	setb   al
ffffffff80001f8b:	84 c0                	test   al,al
ffffffff80001f8d:	75 97                	jne    ffffffff80001f26 <Initrd::open(char const*, char const*)+0x64>
ffffffff80001f8f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001f93:	48 85 c0             	test   rax,rax
ffffffff80001f96:	75 07                	jne    ffffffff80001f9f <Initrd::open(char const*, char const*)+0xdd>
ffffffff80001f98:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff80001f9d:	eb 35                	jmp    ffffffff80001fd4 <Initrd::open(char const*, char const*)+0x112>
ffffffff80001f9f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80001fa3:	48 c7 40 50 00 00 00 	mov    QWORD PTR [rax+0x50],0x0
ffffffff80001faa:	00 
ffffffff80001fab:	48 8d 45 f0          	lea    rax,[rbp-0x10]
ffffffff80001faf:	48 89 c2             	mov    rdx,rax
ffffffff80001fb2:	48 c7 c6 f0 b0 00 80 	mov    rsi,0xffffffff8000b0f0
ffffffff80001fb9:	48 c7 c7 80 b0 00 80 	mov    rdi,0xffffffff8000b080
ffffffff80001fc0:	e8 09 04 00 00       	call   ffffffff800023ce <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)>
ffffffff80001fc5:	8b 05 25 91 00 00    	mov    eax,DWORD PTR [rip+0x9125]        # ffffffff8000b0f0 <cur_fd>
ffffffff80001fcb:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80001fce:	89 15 1c 91 00 00    	mov    DWORD PTR [rip+0x911c],edx        # ffffffff8000b0f0 <cur_fd>
ffffffff80001fd4:	c9                   	leave  
ffffffff80001fd5:	c3                   	ret    

ffffffff80001fd6 <Initrd::read(int, void*, unsigned long)>:
ffffffff80001fd6:	f3 0f 1e fa          	endbr64 
ffffffff80001fda:	55                   	push   rbp
ffffffff80001fdb:	48 89 e5             	mov    rbp,rsp
ffffffff80001fde:	48 83 ec 30          	sub    rsp,0x30
ffffffff80001fe2:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80001fe6:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80001fe9:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80001fed:	48 89 4d d0          	mov    QWORD PTR [rbp-0x30],rcx
ffffffff80001ff1:	48 8d 55 f8          	lea    rdx,[rbp-0x8]
ffffffff80001ff5:	48 8d 45 e4          	lea    rax,[rbp-0x1c]
ffffffff80001ff9:	48 89 c6             	mov    rsi,rax
ffffffff80001ffc:	48 c7 c7 80 b0 00 80 	mov    rdi,0xffffffff8000b080
ffffffff80002003:	e8 d0 04 00 00       	call   ffffffff800024d8 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::get(int const&, FileInfo*&)>
ffffffff80002008:	83 f0 01             	xor    eax,0x1
ffffffff8000200b:	84 c0                	test   al,al
ffffffff8000200d:	74 09                	je     ffffffff80002018 <Initrd::read(int, void*, unsigned long)+0x42>
ffffffff8000200f:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffffffff80002016:	eb 7c                	jmp    ffffffff80002094 <Initrd::read(int, void*, unsigned long)+0xbe>
ffffffff80002018:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000201c:	48 8b 50 50          	mov    rdx,QWORD PTR [rax+0x50]
ffffffff80002020:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80002024:	48 01 c2             	add    rdx,rax
ffffffff80002027:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000202b:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000202e:	89 c0                	mov    eax,eax
ffffffff80002030:	48 39 c2             	cmp    rdx,rax
ffffffff80002033:	76 09                	jbe    ffffffff8000203e <Initrd::read(int, void*, unsigned long)+0x68>
ffffffff80002035:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffffffff8000203c:	eb 56                	jmp    ffffffff80002094 <Initrd::read(int, void*, unsigned long)+0xbe>
ffffffff8000203e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002042:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002045:	48 85 c0             	test   rax,rax
ffffffff80002048:	75 09                	jne    ffffffff80002053 <Initrd::read(int, void*, unsigned long)+0x7d>
ffffffff8000204a:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffffffff80002051:	eb 41                	jmp    ffffffff80002094 <Initrd::read(int, void*, unsigned long)+0xbe>
ffffffff80002053:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002057:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff8000205a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000205e:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffffffff80002062:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
ffffffff80002066:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000206a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000206e:	48 89 ce             	mov    rsi,rcx
ffffffff80002071:	48 89 c7             	mov    rdi,rax
ffffffff80002074:	e8 63 f8 ff ff       	call   ffffffff800018dc <memcpy(void*, void const*, unsigned long)>
ffffffff80002079:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000207d:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffffffff80002081:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002085:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80002089:	48 01 ca             	add    rdx,rcx
ffffffff8000208c:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
ffffffff80002090:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80002094:	c9                   	leave  
ffffffff80002095:	c3                   	ret    

ffffffff80002096 <Initrd::close(int)>:
ffffffff80002096:	f3 0f 1e fa          	endbr64 
ffffffff8000209a:	55                   	push   rbp
ffffffff8000209b:	48 89 e5             	mov    rbp,rsp
ffffffff8000209e:	48 83 ec 10          	sub    rsp,0x10
ffffffff800020a2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800020a6:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff800020a9:	8b 05 41 90 00 00    	mov    eax,DWORD PTR [rip+0x9041]        # ffffffff8000b0f0 <cur_fd>
ffffffff800020af:	83 e8 01             	sub    eax,0x1
ffffffff800020b2:	89 05 38 90 00 00    	mov    DWORD PTR [rip+0x9038],eax        # ffffffff8000b0f0 <cur_fd>
ffffffff800020b8:	48 8d 45 f4          	lea    rax,[rbp-0xc]
ffffffff800020bc:	48 89 c6             	mov    rsi,rax
ffffffff800020bf:	48 c7 c7 80 b0 00 80 	mov    rdi,0xffffffff8000b080
ffffffff800020c6:	e8 a5 04 00 00       	call   ffffffff80002570 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)>
ffffffff800020cb:	90                   	nop
ffffffff800020cc:	c9                   	leave  
ffffffff800020cd:	c3                   	ret    

ffffffff800020ce <Initrd::lseek(int, long, int)>:
ffffffff800020ce:	f3 0f 1e fa          	endbr64 
ffffffff800020d2:	55                   	push   rbp
ffffffff800020d3:	48 89 e5             	mov    rbp,rsp
ffffffff800020d6:	48 83 ec 30          	sub    rsp,0x30
ffffffff800020da:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800020de:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800020e1:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800020e5:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
ffffffff800020e8:	48 8d 55 f0          	lea    rdx,[rbp-0x10]
ffffffff800020ec:	48 8d 45 e4          	lea    rax,[rbp-0x1c]
ffffffff800020f0:	48 89 c6             	mov    rsi,rax
ffffffff800020f3:	48 c7 c7 80 b0 00 80 	mov    rdi,0xffffffff8000b080
ffffffff800020fa:	e8 d9 03 00 00       	call   ffffffff800024d8 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::get(int const&, FileInfo*&)>
ffffffff800020ff:	83 f0 01             	xor    eax,0x1
ffffffff80002102:	84 c0                	test   al,al
ffffffff80002104:	74 09                	je     ffffffff8000210f <Initrd::lseek(int, long, int)+0x41>
ffffffff80002106:	48 c7 c0 ff ff ff ff 	mov    rax,0xffffffffffffffff
ffffffff8000210d:	eb 62                	jmp    ffffffff80002171 <Initrd::lseek(int, long, int)+0xa3>
ffffffff8000210f:	83 7d e0 02          	cmp    DWORD PTR [rbp-0x20],0x2
ffffffff80002113:	74 3b                	je     ffffffff80002150 <Initrd::lseek(int, long, int)+0x82>
ffffffff80002115:	83 7d e0 02          	cmp    DWORD PTR [rbp-0x20],0x2
ffffffff80002119:	7f 4e                	jg     ffffffff80002169 <Initrd::lseek(int, long, int)+0x9b>
ffffffff8000211b:	83 7d e0 00          	cmp    DWORD PTR [rbp-0x20],0x0
ffffffff8000211f:	74 08                	je     ffffffff80002129 <Initrd::lseek(int, long, int)+0x5b>
ffffffff80002121:	83 7d e0 01          	cmp    DWORD PTR [rbp-0x20],0x1
ffffffff80002125:	74 10                	je     ffffffff80002137 <Initrd::lseek(int, long, int)+0x69>
ffffffff80002127:	eb 40                	jmp    ffffffff80002169 <Initrd::lseek(int, long, int)+0x9b>
ffffffff80002129:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000212d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80002131:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
ffffffff80002135:	eb 32                	jmp    ffffffff80002169 <Initrd::lseek(int, long, int)+0x9b>
ffffffff80002137:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000213b:	48 8b 48 50          	mov    rcx,QWORD PTR [rax+0x50]
ffffffff8000213f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002143:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80002147:	48 01 ca             	add    rdx,rcx
ffffffff8000214a:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
ffffffff8000214e:	eb 19                	jmp    ffffffff80002169 <Initrd::lseek(int, long, int)+0x9b>
ffffffff80002150:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002154:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80002157:	89 c1                	mov    ecx,eax
ffffffff80002159:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000215d:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80002161:	48 01 ca             	add    rdx,rcx
ffffffff80002164:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
ffffffff80002168:	90                   	nop
ffffffff80002169:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000216d:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffffffff80002171:	c9                   	leave  
ffffffff80002172:	c3                   	ret    

ffffffff80002173 <__static_initialization_and_destruction_0(int, int)>:
ffffffff80002173:	f3 0f 1e fa          	endbr64 
ffffffff80002177:	55                   	push   rbp
ffffffff80002178:	48 89 e5             	mov    rbp,rsp
ffffffff8000217b:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000217f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80002182:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80002185:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80002189:	75 21                	jne    ffffffff800021ac <__static_initialization_and_destruction_0(int, int)+0x39>
ffffffff8000218b:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80002192:	75 18                	jne    ffffffff800021ac <__static_initialization_and_destruction_0(int, int)+0x39>
ffffffff80002194:	48 c7 c7 80 b0 00 80 	mov    rdi,0xffffffff8000b080
ffffffff8000219b:	e8 84 00 00 00       	call   ffffffff80002224 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::unordered_map()>
ffffffff800021a0:	48 c7 c7 e0 b0 00 80 	mov    rdi,0xffffffff8000b0e0
ffffffff800021a7:	e8 ac 00 00 00       	call   ffffffff80002258 <std::vector<FileInfo>::vector()>
ffffffff800021ac:	90                   	nop
ffffffff800021ad:	c9                   	leave  
ffffffff800021ae:	c3                   	ret    

ffffffff800021af <_GLOBAL__sub_I__Z9strremovePKcS0_>:
ffffffff800021af:	f3 0f 1e fa          	endbr64 
ffffffff800021b3:	55                   	push   rbp
ffffffff800021b4:	48 89 e5             	mov    rbp,rsp
ffffffff800021b7:	be ff ff 00 00       	mov    esi,0xffff
ffffffff800021bc:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800021c1:	e8 ad ff ff ff       	call   ffffffff80002173 <__static_initialization_and_destruction_0(int, int)>
ffffffff800021c6:	5d                   	pop    rbp
ffffffff800021c7:	c3                   	ret    

ffffffff800021c8 <Filesystem::Filesystem(char const*, char const*)>:
ffffffff800021c8:	f3 0f 1e fa          	endbr64 
ffffffff800021cc:	55                   	push   rbp
ffffffff800021cd:	48 89 e5             	mov    rbp,rsp
ffffffff800021d0:	48 83 ec 18          	sub    rsp,0x18
ffffffff800021d4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800021d8:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800021dc:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff800021e0:	48 c7 c2 80 8b 00 80 	mov    rdx,0xffffffff80008b80
ffffffff800021e7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800021eb:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff800021ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800021f2:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800021f6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff800021fa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800021fe:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80002202:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80002206:	90                   	nop
ffffffff80002207:	c9                   	leave  
ffffffff80002208:	c3                   	ret    
ffffffff80002209:	90                   	nop

ffffffff8000220a <Filesystem::GetMountpoint()>:
ffffffff8000220a:	f3 0f 1e fa          	endbr64 
ffffffff8000220e:	55                   	push   rbp
ffffffff8000220f:	48 89 e5             	mov    rbp,rsp
ffffffff80002212:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002216:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000221a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000221e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80002222:	c9                   	leave  
ffffffff80002223:	c3                   	ret    

ffffffff80002224 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::unordered_map()>:
ffffffff80002224:	f3 0f 1e fa          	endbr64 
ffffffff80002228:	55                   	push   rbp
ffffffff80002229:	48 89 e5             	mov    rbp,rsp
ffffffff8000222c:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002230:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002234:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80002238:	b8 09 00 00 00       	mov    eax,0x9
ffffffff8000223d:	eb 0f                	jmp    ffffffff8000224e <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::unordered_map()+0x2a>
ffffffff8000223f:	48 c7 02 00 00 00 00 	mov    QWORD PTR [rdx],0x0
ffffffff80002246:	48 83 c2 08          	add    rdx,0x8
ffffffff8000224a:	48 83 e8 01          	sub    rax,0x1
ffffffff8000224e:	48 85 c0             	test   rax,rax
ffffffff80002251:	79 ec                	jns    ffffffff8000223f <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::unordered_map()+0x1b>
ffffffff80002253:	90                   	nop
ffffffff80002254:	90                   	nop
ffffffff80002255:	c9                   	leave  
ffffffff80002256:	c3                   	ret    
ffffffff80002257:	90                   	nop

ffffffff80002258 <std::vector<FileInfo>::vector()>:
ffffffff80002258:	f3 0f 1e fa          	endbr64 
ffffffff8000225c:	55                   	push   rbp
ffffffff8000225d:	48 89 e5             	mov    rbp,rsp
ffffffff80002260:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002264:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002268:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000226c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [rax+0x8],0x0
ffffffff80002273:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002277:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff8000227e:	90                   	nop
ffffffff8000227f:	c9                   	leave  
ffffffff80002280:	c3                   	ret    
ffffffff80002281:	90                   	nop

ffffffff80002282 <std::vector<FileInfo>::push_back(FileInfo)>:
ffffffff80002282:	f3 0f 1e fa          	endbr64 
ffffffff80002286:	55                   	push   rbp
ffffffff80002287:	48 89 e5             	mov    rbp,rsp
ffffffff8000228a:	53                   	push   rbx
ffffffff8000228b:	48 83 ec 28          	sub    rsp,0x28
ffffffff8000228f:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80002293:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80002297:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff8000229a:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff8000229d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800022a1:	89 50 08             	mov    DWORD PTR [rax+0x8],edx
ffffffff800022a4:	bf 68 00 00 00       	mov    edi,0x68
ffffffff800022a9:	e8 87 e8 ff ff       	call   ffffffff80000b35 <operator new(unsigned long)>
ffffffff800022ae:	48 89 c3             	mov    rbx,rax
ffffffff800022b1:	48 8d 75 10          	lea    rsi,[rbp+0x10]
ffffffff800022b5:	48 89 df             	mov    rdi,rbx
ffffffff800022b8:	e8 a5 03 00 00       	call   ffffffff80002662 <Node<FileInfo>::Node(FileInfo const&)>
ffffffff800022bd:	48 89 5d e0          	mov    QWORD PTR [rbp-0x20],rbx
ffffffff800022c1:	bf 68 00 00 00       	mov    edi,0x68
ffffffff800022c6:	e8 6a e8 ff ff       	call   ffffffff80000b35 <operator new(unsigned long)>
ffffffff800022cb:	48 89 c3             	mov    rbx,rax
ffffffff800022ce:	48 8d 75 10          	lea    rsi,[rbp+0x10]
ffffffff800022d2:	48 89 df             	mov    rdi,rbx
ffffffff800022d5:	e8 88 03 00 00       	call   ffffffff80002662 <Node<FileInfo>::Node(FileInfo const&)>
ffffffff800022da:	48 89 5d e8          	mov    QWORD PTR [rbp-0x18],rbx
ffffffff800022de:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800022e2:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffffffff800022e9:	00 
ffffffff800022ea:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800022ee:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffffffff800022f5:	00 
ffffffff800022f6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800022fa:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800022fd:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80002301:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80002305:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002308:	48 85 c0             	test   rax,rax
ffffffff8000230b:	75 19                	jne    ffffffff80002326 <std::vector<FileInfo>::push_back(FileInfo)+0xa4>
ffffffff8000230d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80002311:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff80002315:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80002318:	eb 3d                	jmp    ffffffff80002357 <std::vector<FileInfo>::push_back(FileInfo)+0xd5>
ffffffff8000231a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000231e:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffffffff80002322:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80002326:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000232a:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffffffff8000232e:	48 85 c0             	test   rax,rax
ffffffff80002331:	75 e7                	jne    ffffffff8000231a <std::vector<FileInfo>::push_back(FileInfo)+0x98>
ffffffff80002333:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002337:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8000233b:	48 89 50 58          	mov    QWORD PTR [rax+0x58],rdx
ffffffff8000233f:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80002343:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80002347:	48 89 50 60          	mov    QWORD PTR [rax+0x60],rdx
ffffffff8000234b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000234f:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffffffff80002356:	00 
ffffffff80002357:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000235b:	c9                   	leave  
ffffffff8000235c:	c3                   	ret    
ffffffff8000235d:	90                   	nop

ffffffff8000235e <std::vector<FileInfo>::size()>:
ffffffff8000235e:	f3 0f 1e fa          	endbr64 
ffffffff80002362:	55                   	push   rbp
ffffffff80002363:	48 89 e5             	mov    rbp,rsp
ffffffff80002366:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000236a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000236e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002372:	8b 40 08             	mov    eax,DWORD PTR [rax+0x8]
ffffffff80002375:	48 98                	cdqe   
ffffffff80002377:	c9                   	leave  
ffffffff80002378:	c3                   	ret    
ffffffff80002379:	90                   	nop

ffffffff8000237a <std::vector<FileInfo>::operator[](unsigned long)>:
ffffffff8000237a:	f3 0f 1e fa          	endbr64 
ffffffff8000237e:	55                   	push   rbp
ffffffff8000237f:	48 89 e5             	mov    rbp,rsp
ffffffff80002382:	48 83 ec 20          	sub    rsp,0x20
ffffffff80002386:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000238a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff8000238e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002392:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002395:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80002399:	48 c7 45 f0 00 00 00 	mov    QWORD PTR [rbp-0x10],0x0
ffffffff800023a0:	00 
ffffffff800023a1:	eb 18                	jmp    ffffffff800023bb <std::vector<FileInfo>::operator[](unsigned long)+0x41>
ffffffff800023a3:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff800023a8:	74 1d                	je     ffffffff800023c7 <std::vector<FileInfo>::operator[](unsigned long)+0x4d>
ffffffff800023aa:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800023ae:	48 8b 40 58          	mov    rax,QWORD PTR [rax+0x58]
ffffffff800023b2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800023b6:	48 83 45 f0 01       	add    QWORD PTR [rbp-0x10],0x1
ffffffff800023bb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800023bf:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
ffffffff800023c3:	72 de                	jb     ffffffff800023a3 <std::vector<FileInfo>::operator[](unsigned long)+0x29>
ffffffff800023c5:	eb 01                	jmp    ffffffff800023c8 <std::vector<FileInfo>::operator[](unsigned long)+0x4e>
ffffffff800023c7:	90                   	nop
ffffffff800023c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800023cc:	c9                   	leave  
ffffffff800023cd:	c3                   	ret    

ffffffff800023ce <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)>:
ffffffff800023ce:	f3 0f 1e fa          	endbr64 
ffffffff800023d2:	55                   	push   rbp
ffffffff800023d3:	48 89 e5             	mov    rbp,rsp
ffffffff800023d6:	53                   	push   rbx
ffffffff800023d7:	48 83 ec 48          	sub    rsp,0x48
ffffffff800023db:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff800023df:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff800023e3:	48 89 55 b8          	mov    QWORD PTR [rbp-0x48],rdx
ffffffff800023e7:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800023eb:	48 8d 50 50          	lea    rdx,[rax+0x50]
ffffffff800023ef:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff800023f3:	48 89 c6             	mov    rsi,rax
ffffffff800023f6:	48 89 d7             	mov    rdi,rdx
ffffffff800023f9:	e8 f2 02 00 00       	call   ffffffff800026f0 <KeyHash<int, 10ul>::operator()(int const&) const>
ffffffff800023fe:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff80002402:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80002409:	00 
ffffffff8000240a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff8000240e:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80002412:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80002416:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff8000241a:	eb 18                	jmp    ffffffff80002434 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0x66>
ffffffff8000241c:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80002420:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80002424:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80002428:	48 89 c7             	mov    rdi,rax
ffffffff8000242b:	e8 22 03 00 00       	call   ffffffff80002752 <HashNode<int, FileInfo*>::getNext() const>
ffffffff80002430:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80002434:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffffffff80002439:	74 1d                	je     ffffffff80002458 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0x8a>
ffffffff8000243b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000243f:	48 89 c7             	mov    rdi,rax
ffffffff80002442:	e8 f3 02 00 00       	call   ffffffff8000273a <HashNode<int, FileInfo*>::getKey()>
ffffffff80002447:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff8000244b:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff8000244d:	39 d0                	cmp    eax,edx
ffffffff8000244f:	74 07                	je     ffffffff80002458 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0x8a>
ffffffff80002451:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80002456:	eb 05                	jmp    ffffffff8000245d <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0x8f>
ffffffff80002458:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000245d:	84 c0                	test   al,al
ffffffff8000245f:	75 bb                	jne    ffffffff8000241c <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0x4e>
ffffffff80002461:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffffffff80002466:	75 52                	jne    ffffffff800024ba <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0xec>
ffffffff80002468:	bf 18 00 00 00       	mov    edi,0x18
ffffffff8000246d:	e8 c3 e6 ff ff       	call   ffffffff80000b35 <operator new(unsigned long)>
ffffffff80002472:	48 89 c3             	mov    rbx,rax
ffffffff80002475:	48 8b 55 b8          	mov    rdx,QWORD PTR [rbp-0x48]
ffffffff80002479:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff8000247d:	48 89 c6             	mov    rsi,rax
ffffffff80002480:	48 89 df             	mov    rdi,rbx
ffffffff80002483:	e8 e4 02 00 00       	call   ffffffff8000276c <HashNode<int, FileInfo*>::HashNode(int const&, FileInfo* const&)>
ffffffff80002488:	48 89 5d e0          	mov    QWORD PTR [rbp-0x20],rbx
ffffffff8000248c:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80002491:	75 12                	jne    ffffffff800024a5 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0xd7>
ffffffff80002493:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80002497:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff8000249b:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
ffffffff8000249f:	48 89 0c d0          	mov    QWORD PTR [rax+rdx*8],rcx
ffffffff800024a3:	eb 2b                	jmp    ffffffff800024d0 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0x102>
ffffffff800024a5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff800024a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800024ad:	48 89 d6             	mov    rsi,rdx
ffffffff800024b0:	48 89 c7             	mov    rdi,rax
ffffffff800024b3:	e8 f6 02 00 00       	call   ffffffff800027ae <HashNode<int, FileInfo*>::setNext(HashNode<int, FileInfo*>*)>
ffffffff800024b8:	eb 16                	jmp    ffffffff800024d0 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::put(int const&, FileInfo* const&)+0x102>
ffffffff800024ba:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff800024be:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff800024c1:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800024c5:	48 89 d6             	mov    rsi,rdx
ffffffff800024c8:	48 89 c7             	mov    rdi,rax
ffffffff800024cb:	e8 02 03 00 00       	call   ffffffff800027d2 <HashNode<int, FileInfo*>::setValue(FileInfo*)>
ffffffff800024d0:	90                   	nop
ffffffff800024d1:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800024d5:	c9                   	leave  
ffffffff800024d6:	c3                   	ret    
ffffffff800024d7:	90                   	nop

ffffffff800024d8 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::get(int const&, FileInfo*&)>:
ffffffff800024d8:	f3 0f 1e fa          	endbr64 
ffffffff800024dc:	55                   	push   rbp
ffffffff800024dd:	48 89 e5             	mov    rbp,rsp
ffffffff800024e0:	48 83 ec 30          	sub    rsp,0x30
ffffffff800024e4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800024e8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800024ec:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800024f0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800024f4:	48 8d 50 50          	lea    rdx,[rax+0x50]
ffffffff800024f8:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800024fc:	48 89 c6             	mov    rsi,rax
ffffffff800024ff:	48 89 d7             	mov    rdi,rdx
ffffffff80002502:	e8 e9 01 00 00       	call   ffffffff800026f0 <KeyHash<int, 10ul>::operator()(int const&) const>
ffffffff80002507:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000250b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000250f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80002513:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff80002517:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000251b:	eb 45                	jmp    ffffffff80002562 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::get(int const&, FileInfo*&)+0x8a>
ffffffff8000251d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002521:	48 89 c7             	mov    rdi,rax
ffffffff80002524:	e8 11 02 00 00       	call   ffffffff8000273a <HashNode<int, FileInfo*>::getKey()>
ffffffff80002529:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
ffffffff8000252d:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff8000252f:	39 d0                	cmp    eax,edx
ffffffff80002531:	0f 94 c0             	sete   al
ffffffff80002534:	84 c0                	test   al,al
ffffffff80002536:	74 1a                	je     ffffffff80002552 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::get(int const&, FileInfo*&)+0x7a>
ffffffff80002538:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000253c:	48 89 c7             	mov    rdi,rax
ffffffff8000253f:	e8 b2 02 00 00       	call   ffffffff800027f6 <HashNode<int, FileInfo*>::getValue()>
ffffffff80002544:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80002548:	48 89 02             	mov    QWORD PTR [rdx],rax
ffffffff8000254b:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80002550:	eb 1c                	jmp    ffffffff8000256e <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::get(int const&, FileInfo*&)+0x96>
ffffffff80002552:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002556:	48 89 c7             	mov    rdi,rax
ffffffff80002559:	e8 f4 01 00 00       	call   ffffffff80002752 <HashNode<int, FileInfo*>::getNext() const>
ffffffff8000255e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80002562:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80002567:	75 b4                	jne    ffffffff8000251d <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::get(int const&, FileInfo*&)+0x45>
ffffffff80002569:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000256e:	c9                   	leave  
ffffffff8000256f:	c3                   	ret    

ffffffff80002570 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)>:
ffffffff80002570:	f3 0f 1e fa          	endbr64 
ffffffff80002574:	55                   	push   rbp
ffffffff80002575:	48 89 e5             	mov    rbp,rsp
ffffffff80002578:	53                   	push   rbx
ffffffff80002579:	48 83 ec 38          	sub    rsp,0x38
ffffffff8000257d:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff80002581:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff80002585:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80002589:	48 8d 50 50          	lea    rdx,[rax+0x50]
ffffffff8000258d:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002591:	48 89 c6             	mov    rsi,rax
ffffffff80002594:	48 89 d7             	mov    rdi,rdx
ffffffff80002597:	e8 54 01 00 00       	call   ffffffff800026f0 <KeyHash<int, 10ul>::operator()(int const&) const>
ffffffff8000259c:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
ffffffff800025a0:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff800025a7:	00 
ffffffff800025a8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff800025ac:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff800025b0:	48 8b 04 d0          	mov    rax,QWORD PTR [rax+rdx*8]
ffffffff800025b4:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800025b8:	eb 18                	jmp    ffffffff800025d2 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0x62>
ffffffff800025ba:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800025be:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800025c2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800025c6:	48 89 c7             	mov    rdi,rax
ffffffff800025c9:	e8 84 01 00 00       	call   ffffffff80002752 <HashNode<int, FileInfo*>::getNext() const>
ffffffff800025ce:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff800025d2:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffffffff800025d7:	74 1d                	je     ffffffff800025f6 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0x86>
ffffffff800025d9:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800025dd:	48 89 c7             	mov    rdi,rax
ffffffff800025e0:	e8 55 01 00 00       	call   ffffffff8000273a <HashNode<int, FileInfo*>::getKey()>
ffffffff800025e5:	48 8b 55 c0          	mov    rdx,QWORD PTR [rbp-0x40]
ffffffff800025e9:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff800025eb:	39 d0                	cmp    eax,edx
ffffffff800025ed:	74 07                	je     ffffffff800025f6 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0x86>
ffffffff800025ef:	b8 01 00 00 00       	mov    eax,0x1
ffffffff800025f4:	eb 05                	jmp    ffffffff800025fb <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0x8b>
ffffffff800025f6:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800025fb:	84 c0                	test   al,al
ffffffff800025fd:	75 bb                	jne    ffffffff800025ba <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0x4a>
ffffffff800025ff:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
ffffffff80002604:	74 54                	je     ffffffff8000265a <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0xea>
ffffffff80002606:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff8000260b:	75 1a                	jne    ffffffff80002627 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0xb7>
ffffffff8000260d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80002611:	48 89 c7             	mov    rdi,rax
ffffffff80002614:	e8 39 01 00 00       	call   ffffffff80002752 <HashNode<int, FileInfo*>::getNext() const>
ffffffff80002619:	48 8b 55 c8          	mov    rdx,QWORD PTR [rbp-0x38]
ffffffff8000261d:	48 8b 4d d8          	mov    rcx,QWORD PTR [rbp-0x28]
ffffffff80002621:	48 89 04 ca          	mov    QWORD PTR [rdx+rcx*8],rax
ffffffff80002625:	eb 1b                	jmp    ffffffff80002642 <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0xd2>
ffffffff80002627:	48 8b 5d e8          	mov    rbx,QWORD PTR [rbp-0x18]
ffffffff8000262b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000262f:	48 89 c7             	mov    rdi,rax
ffffffff80002632:	e8 1b 01 00 00       	call   ffffffff80002752 <HashNode<int, FileInfo*>::getNext() const>
ffffffff80002637:	48 89 c6             	mov    rsi,rax
ffffffff8000263a:	48 89 df             	mov    rdi,rbx
ffffffff8000263d:	e8 6c 01 00 00       	call   ffffffff800027ae <HashNode<int, FileInfo*>::setNext(HashNode<int, FileInfo*>*)>
ffffffff80002642:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80002646:	48 85 c0             	test   rax,rax
ffffffff80002649:	74 10                	je     ffffffff8000265b <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0xeb>
ffffffff8000264b:	be 18 00 00 00       	mov    esi,0x18
ffffffff80002650:	48 89 c7             	mov    rdi,rax
ffffffff80002653:	e8 38 e5 ff ff       	call   ffffffff80000b90 <operator delete(void*, unsigned long)>
ffffffff80002658:	eb 01                	jmp    ffffffff8000265b <std::unordered_map<int, FileInfo*, 10ul, KeyHash<int, 10ul> >::remove(int const&)+0xeb>
ffffffff8000265a:	90                   	nop
ffffffff8000265b:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000265f:	c9                   	leave  
ffffffff80002660:	c3                   	ret    
ffffffff80002661:	90                   	nop

ffffffff80002662 <Node<FileInfo>::Node(FileInfo const&)>:
ffffffff80002662:	f3 0f 1e fa          	endbr64 
ffffffff80002666:	55                   	push   rbp
ffffffff80002667:	48 89 e5             	mov    rbp,rsp
ffffffff8000266a:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000266e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002672:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80002676:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000267a:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff8000267e:	48 8b 0a             	mov    rcx,QWORD PTR [rdx]
ffffffff80002681:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff80002684:	48 8b 4a 08          	mov    rcx,QWORD PTR [rdx+0x8]
ffffffff80002688:	48 89 48 08          	mov    QWORD PTR [rax+0x8],rcx
ffffffff8000268c:	48 8b 4a 10          	mov    rcx,QWORD PTR [rdx+0x10]
ffffffff80002690:	48 89 48 10          	mov    QWORD PTR [rax+0x10],rcx
ffffffff80002694:	48 8b 4a 18          	mov    rcx,QWORD PTR [rdx+0x18]
ffffffff80002698:	48 89 48 18          	mov    QWORD PTR [rax+0x18],rcx
ffffffff8000269c:	48 8b 4a 20          	mov    rcx,QWORD PTR [rdx+0x20]
ffffffff800026a0:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
ffffffff800026a4:	48 8b 4a 28          	mov    rcx,QWORD PTR [rdx+0x28]
ffffffff800026a8:	48 89 48 28          	mov    QWORD PTR [rax+0x28],rcx
ffffffff800026ac:	48 8b 4a 30          	mov    rcx,QWORD PTR [rdx+0x30]
ffffffff800026b0:	48 89 48 30          	mov    QWORD PTR [rax+0x30],rcx
ffffffff800026b4:	48 8b 4a 38          	mov    rcx,QWORD PTR [rdx+0x38]
ffffffff800026b8:	48 89 48 38          	mov    QWORD PTR [rax+0x38],rcx
ffffffff800026bc:	48 8b 4a 40          	mov    rcx,QWORD PTR [rdx+0x40]
ffffffff800026c0:	48 89 48 40          	mov    QWORD PTR [rax+0x40],rcx
ffffffff800026c4:	48 8b 4a 48          	mov    rcx,QWORD PTR [rdx+0x48]
ffffffff800026c8:	48 89 48 48          	mov    QWORD PTR [rax+0x48],rcx
ffffffff800026cc:	48 8b 52 50          	mov    rdx,QWORD PTR [rdx+0x50]
ffffffff800026d0:	48 89 50 50          	mov    QWORD PTR [rax+0x50],rdx
ffffffff800026d4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800026d8:	48 c7 40 58 00 00 00 	mov    QWORD PTR [rax+0x58],0x0
ffffffff800026df:	00 
ffffffff800026e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800026e4:	48 c7 40 60 00 00 00 	mov    QWORD PTR [rax+0x60],0x0
ffffffff800026eb:	00 
ffffffff800026ec:	90                   	nop
ffffffff800026ed:	c9                   	leave  
ffffffff800026ee:	c3                   	ret    
ffffffff800026ef:	90                   	nop

ffffffff800026f0 <KeyHash<int, 10ul>::operator()(int const&) const>:
ffffffff800026f0:	f3 0f 1e fa          	endbr64 
ffffffff800026f4:	55                   	push   rbp
ffffffff800026f5:	48 89 e5             	mov    rbp,rsp
ffffffff800026f8:	48 83 ec 10          	sub    rsp,0x10
ffffffff800026fc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002700:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80002704:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002708:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000270a:	48 63 c8             	movsxd rcx,eax
ffffffff8000270d:	48 ba cd cc cc cc cc 	movabs rdx,0xcccccccccccccccd
ffffffff80002714:	cc cc cc 
ffffffff80002717:	48 89 c8             	mov    rax,rcx
ffffffff8000271a:	48 f7 e2             	mul    rdx
ffffffff8000271d:	48 c1 ea 03          	shr    rdx,0x3
ffffffff80002721:	48 89 d0             	mov    rax,rdx
ffffffff80002724:	48 c1 e0 02          	shl    rax,0x2
ffffffff80002728:	48 01 d0             	add    rax,rdx
ffffffff8000272b:	48 01 c0             	add    rax,rax
ffffffff8000272e:	48 29 c1             	sub    rcx,rax
ffffffff80002731:	48 89 ca             	mov    rdx,rcx
ffffffff80002734:	48 89 d0             	mov    rax,rdx
ffffffff80002737:	c9                   	leave  
ffffffff80002738:	c3                   	ret    
ffffffff80002739:	90                   	nop

ffffffff8000273a <HashNode<int, FileInfo*>::getKey()>:
ffffffff8000273a:	f3 0f 1e fa          	endbr64 
ffffffff8000273e:	55                   	push   rbp
ffffffff8000273f:	48 89 e5             	mov    rbp,rsp
ffffffff80002742:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002746:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000274a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000274e:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80002750:	c9                   	leave  
ffffffff80002751:	c3                   	ret    

ffffffff80002752 <HashNode<int, FileInfo*>::getNext() const>:
ffffffff80002752:	f3 0f 1e fa          	endbr64 
ffffffff80002756:	55                   	push   rbp
ffffffff80002757:	48 89 e5             	mov    rbp,rsp
ffffffff8000275a:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000275e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002762:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002766:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff8000276a:	c9                   	leave  
ffffffff8000276b:	c3                   	ret    

ffffffff8000276c <HashNode<int, FileInfo*>::HashNode(int const&, FileInfo* const&)>:
ffffffff8000276c:	f3 0f 1e fa          	endbr64 
ffffffff80002770:	55                   	push   rbp
ffffffff80002771:	48 89 e5             	mov    rbp,rsp
ffffffff80002774:	48 83 ec 18          	sub    rsp,0x18
ffffffff80002778:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000277c:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80002780:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff80002784:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002788:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff8000278a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000278e:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80002790:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002794:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80002797:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000279b:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff8000279f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800027a3:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
ffffffff800027aa:	00 
ffffffff800027ab:	90                   	nop
ffffffff800027ac:	c9                   	leave  
ffffffff800027ad:	c3                   	ret    

ffffffff800027ae <HashNode<int, FileInfo*>::setNext(HashNode<int, FileInfo*>*)>:
ffffffff800027ae:	f3 0f 1e fa          	endbr64 
ffffffff800027b2:	55                   	push   rbp
ffffffff800027b3:	48 89 e5             	mov    rbp,rsp
ffffffff800027b6:	48 83 ec 10          	sub    rsp,0x10
ffffffff800027ba:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800027be:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800027c2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800027c6:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800027ca:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff800027ce:	90                   	nop
ffffffff800027cf:	c9                   	leave  
ffffffff800027d0:	c3                   	ret    
ffffffff800027d1:	90                   	nop

ffffffff800027d2 <HashNode<int, FileInfo*>::setValue(FileInfo*)>:
ffffffff800027d2:	f3 0f 1e fa          	endbr64 
ffffffff800027d6:	55                   	push   rbp
ffffffff800027d7:	48 89 e5             	mov    rbp,rsp
ffffffff800027da:	48 83 ec 10          	sub    rsp,0x10
ffffffff800027de:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800027e2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800027e6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800027ea:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800027ee:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff800027f2:	90                   	nop
ffffffff800027f3:	c9                   	leave  
ffffffff800027f4:	c3                   	ret    
ffffffff800027f5:	90                   	nop

ffffffff800027f6 <HashNode<int, FileInfo*>::getValue()>:
ffffffff800027f6:	f3 0f 1e fa          	endbr64 
ffffffff800027fa:	55                   	push   rbp
ffffffff800027fb:	48 89 e5             	mov    rbp,rsp
ffffffff800027fe:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002802:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002806:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000280a:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000280e:	c9                   	leave  
ffffffff8000280f:	c3                   	ret    

ffffffff80002810 <Utils::inb(unsigned short)>:
ffffffff80002810:	55                   	push   rbp
ffffffff80002811:	48 89 e5             	mov    rbp,rsp
ffffffff80002814:	48 83 ec 18          	sub    rsp,0x18
ffffffff80002818:	89 f8                	mov    eax,edi
ffffffff8000281a:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff8000281e:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff80002822:	89 c2                	mov    edx,eax
ffffffff80002824:	ec                   	in     al,dx
ffffffff80002825:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff80002828:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff8000282c:	c9                   	leave  
ffffffff8000282d:	c3                   	ret    

ffffffff8000282e <Utils::inw(unsigned short)>:
ffffffff8000282e:	55                   	push   rbp
ffffffff8000282f:	48 89 e5             	mov    rbp,rsp
ffffffff80002832:	48 83 ec 18          	sub    rsp,0x18
ffffffff80002836:	89 f8                	mov    eax,edi
ffffffff80002838:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff8000283c:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff80002840:	89 c2                	mov    edx,eax
ffffffff80002842:	66 ed                	in     ax,dx
ffffffff80002844:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80002848:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
ffffffff8000284c:	c9                   	leave  
ffffffff8000284d:	c3                   	ret    

ffffffff8000284e <udelay(unsigned long)>:
ffffffff8000284e:	55                   	push   rbp
ffffffff8000284f:	48 89 e5             	mov    rbp,rsp
ffffffff80002852:	48 83 ec 08          	sub    rsp,0x8
ffffffff80002856:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000285a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff8000285f:	74 11                	je     ffffffff80002872 <udelay(unsigned long)+0x24>
ffffffff80002861:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80002865:	48 69 c0 e8 03 00 00 	imul   rax,rax,0x3e8
ffffffff8000286c:	ff c8                	dec    eax
ffffffff8000286e:	75 fc                	jne    ffffffff8000286c <udelay(unsigned long)+0x1e>
ffffffff80002870:	eb 01                	jmp    ffffffff80002873 <udelay(unsigned long)+0x25>
ffffffff80002872:	90                   	nop
ffffffff80002873:	c9                   	leave  
ffffffff80002874:	c3                   	ret    

ffffffff80002875 <mdelay(unsigned long)>:
ffffffff80002875:	55                   	push   rbp
ffffffff80002876:	48 89 e5             	mov    rbp,rsp
ffffffff80002879:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000287d:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80002881:	eb 0a                	jmp    ffffffff8000288d <mdelay(unsigned long)+0x18>
ffffffff80002883:	bf e8 03 00 00       	mov    edi,0x3e8
ffffffff80002888:	e8 c1 ff ff ff       	call   ffffffff8000284e <udelay(unsigned long)>
ffffffff8000288d:	48 83 6d f8 01       	sub    QWORD PTR [rbp-0x8],0x1
ffffffff80002892:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff80002897:	0f 95 c0             	setne  al
ffffffff8000289a:	84 c0                	test   al,al
ffffffff8000289c:	75 e5                	jne    ffffffff80002883 <mdelay(unsigned long)+0xe>
ffffffff8000289e:	90                   	nop
ffffffff8000289f:	90                   	nop
ffffffff800028a0:	c9                   	leave  
ffffffff800028a1:	c3                   	ret    

ffffffff800028a2 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>:
ffffffff800028a2:	f3 0f 1e fa          	endbr64 
ffffffff800028a6:	55                   	push   rbp
ffffffff800028a7:	48 89 e5             	mov    rbp,rsp
ffffffff800028aa:	48 83 ec 28          	sub    rsp,0x28
ffffffff800028ae:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800028b2:	89 d0                	mov    eax,edx
ffffffff800028b4:	48 89 4d d8          	mov    QWORD PTR [rbp-0x28],rcx
ffffffff800028b8:	89 f2                	mov    edx,esi
ffffffff800028ba:	88 55 e4             	mov    BYTE PTR [rbp-0x1c],dl
ffffffff800028bd:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
ffffffff800028c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800028c4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800028c7:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff800028ca:	83 c0 07             	add    eax,0x7
ffffffff800028cd:	0f b7 c0             	movzx  eax,ax
ffffffff800028d0:	89 c7                	mov    edi,eax
ffffffff800028d2:	e8 39 ff ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff800028d7:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff800028da:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800028df:	e8 6a ff ff ff       	call   ffffffff8000284e <udelay(unsigned long)>
ffffffff800028e4:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff800028e8:	22 45 e4             	and    al,BYTE PTR [rbp-0x1c]
ffffffff800028eb:	38 45 e0             	cmp    BYTE PTR [rbp-0x20],al
ffffffff800028ee:	74 13                	je     ffffffff80002903 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x61>
ffffffff800028f0:	48 83 6d d8 01       	sub    QWORD PTR [rbp-0x28],0x1
ffffffff800028f5:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff800028fa:	74 07                	je     ffffffff80002903 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x61>
ffffffff800028fc:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80002901:	eb 05                	jmp    ffffffff80002908 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x66>
ffffffff80002903:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002908:	84 c0                	test   al,al
ffffffff8000290a:	75 b4                	jne    ffffffff800028c0 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)+0x1e>
ffffffff8000290c:	48 83 7d d8 00       	cmp    QWORD PTR [rbp-0x28],0x0
ffffffff80002911:	0f 95 c0             	setne  al
ffffffff80002914:	c9                   	leave  
ffffffff80002915:	c3                   	ret    

ffffffff80002916 <ResetController(IDEDevice*)>:
ffffffff80002916:	f3 0f 1e fa          	endbr64 
ffffffff8000291a:	55                   	push   rbp
ffffffff8000291b:	48 89 e5             	mov    rbp,rsp
ffffffff8000291e:	48 83 ec 20          	sub    rsp,0x20
ffffffff80002922:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80002926:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000292a:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000292d:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff80002930:	0f b7 c0             	movzx  eax,ax
ffffffff80002933:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80002936:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002939:	66 05 06 02          	add    ax,0x206
ffffffff8000293d:	0f b7 c0             	movzx  eax,ax
ffffffff80002940:	be 04 00 00 00       	mov    esi,0x4
ffffffff80002945:	89 c7                	mov    edi,eax
ffffffff80002947:	e8 dc 07 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000294c:	bf 02 00 00 00       	mov    edi,0x2
ffffffff80002951:	e8 1f ff ff ff       	call   ffffffff80002875 <mdelay(unsigned long)>
ffffffff80002956:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000295a:	b9 01 00 00 00       	mov    ecx,0x1
ffffffff8000295f:	ba 80 00 00 00       	mov    edx,0x80
ffffffff80002964:	be 80 00 00 00       	mov    esi,0x80
ffffffff80002969:	48 89 c7             	mov    rdi,rax
ffffffff8000296c:	e8 31 ff ff ff       	call   ffffffff800028a2 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff80002971:	83 f0 01             	xor    eax,0x1
ffffffff80002974:	84 c0                	test   al,al
ffffffff80002976:	74 07                	je     ffffffff8000297f <ResetController(IDEDevice*)+0x69>
ffffffff80002978:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000297d:	eb 3f                	jmp    ffffffff800029be <ResetController(IDEDevice*)+0xa8>
ffffffff8000297f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002982:	66 05 06 02          	add    ax,0x206
ffffffff80002986:	0f b7 c0             	movzx  eax,ax
ffffffff80002989:	be 00 00 00 00       	mov    esi,0x0
ffffffff8000298e:	89 c7                	mov    edi,eax
ffffffff80002990:	e8 93 07 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002995:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002999:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff8000299e:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800029a3:	be 80 00 00 00       	mov    esi,0x80
ffffffff800029a8:	48 89 c7             	mov    rdi,rax
ffffffff800029ab:	e8 f2 fe ff ff       	call   ffffffff800028a2 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff800029b0:	83 f0 01             	xor    eax,0x1
ffffffff800029b3:	84 c0                	test   al,al
ffffffff800029b5:	74 07                	je     ffffffff800029be <ResetController(IDEDevice*)+0xa8>
ffffffff800029b7:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800029bc:	eb 00                	jmp    ffffffff800029be <ResetController(IDEDevice*)+0xa8>
ffffffff800029be:	c9                   	leave  
ffffffff800029bf:	c3                   	ret    

ffffffff800029c0 <SelectDevice(IDEDevice*)>:
ffffffff800029c0:	f3 0f 1e fa          	endbr64 
ffffffff800029c4:	55                   	push   rbp
ffffffff800029c5:	48 89 e5             	mov    rbp,rsp
ffffffff800029c8:	48 83 ec 20          	sub    rsp,0x20
ffffffff800029cc:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800029d0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800029d4:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800029d7:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff800029da:	0f b7 c0             	movzx  eax,ax
ffffffff800029dd:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800029e0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800029e3:	83 c0 07             	add    eax,0x7
ffffffff800029e6:	0f b7 c0             	movzx  eax,ax
ffffffff800029e9:	89 c7                	mov    edi,eax
ffffffff800029eb:	e8 20 fe ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff800029f0:	0f b6 c0             	movzx  eax,al
ffffffff800029f3:	25 88 00 00 00       	and    eax,0x88
ffffffff800029f8:	85 c0                	test   eax,eax
ffffffff800029fa:	0f 95 c0             	setne  al
ffffffff800029fd:	84 c0                	test   al,al
ffffffff800029ff:	74 07                	je     ffffffff80002a08 <SelectDevice(IDEDevice*)+0x48>
ffffffff80002a01:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002a06:	eb 5d                	jmp    ffffffff80002a65 <SelectDevice(IDEDevice*)+0xa5>
ffffffff80002a08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002a0c:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff80002a10:	0f b6 c0             	movzx  eax,al
ffffffff80002a13:	c1 e0 04             	shl    eax,0x4
ffffffff80002a16:	83 c8 a0             	or     eax,0xffffffa0
ffffffff80002a19:	0f b6 d0             	movzx  edx,al
ffffffff80002a1c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002a1f:	83 c0 06             	add    eax,0x6
ffffffff80002a22:	0f b7 c0             	movzx  eax,ax
ffffffff80002a25:	89 d6                	mov    esi,edx
ffffffff80002a27:	89 c7                	mov    edi,eax
ffffffff80002a29:	e8 fa 06 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002a2e:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80002a33:	e8 16 fe ff ff       	call   ffffffff8000284e <udelay(unsigned long)>
ffffffff80002a38:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002a3b:	83 c0 07             	add    eax,0x7
ffffffff80002a3e:	0f b7 c0             	movzx  eax,ax
ffffffff80002a41:	89 c7                	mov    edi,eax
ffffffff80002a43:	e8 c8 fd ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80002a48:	0f b6 c0             	movzx  eax,al
ffffffff80002a4b:	25 88 00 00 00       	and    eax,0x88
ffffffff80002a50:	85 c0                	test   eax,eax
ffffffff80002a52:	0f 95 c0             	setne  al
ffffffff80002a55:	84 c0                	test   al,al
ffffffff80002a57:	74 07                	je     ffffffff80002a60 <SelectDevice(IDEDevice*)+0xa0>
ffffffff80002a59:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002a5e:	eb 05                	jmp    ffffffff80002a65 <SelectDevice(IDEDevice*)+0xa5>
ffffffff80002a60:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80002a65:	c9                   	leave  
ffffffff80002a66:	c3                   	ret    

ffffffff80002a67 <IdentifyAtaDevice(IDEDevice*)>:
ffffffff80002a67:	f3 0f 1e fa          	endbr64 
ffffffff80002a6b:	55                   	push   rbp
ffffffff80002a6c:	48 89 e5             	mov    rbp,rsp
ffffffff80002a6f:	48 81 ec 30 02 00 00 	sub    rsp,0x230
ffffffff80002a76:	48 89 bd d8 fd ff ff 	mov    QWORD PTR [rbp-0x228],rdi
ffffffff80002a7d:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002a84:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002a87:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff80002a8a:	0f b7 c0             	movzx  eax,ax
ffffffff80002a8d:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80002a90:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002a97:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff80002a9b:	84 c0                	test   al,al
ffffffff80002a9d:	74 09                	je     ffffffff80002aa8 <IdentifyAtaDevice(IDEDevice*)+0x41>
ffffffff80002a9f:	48 c7 c0 a0 8b 00 80 	mov    rax,0xffffffff80008ba0
ffffffff80002aa6:	eb 07                	jmp    ffffffff80002aaf <IdentifyAtaDevice(IDEDevice*)+0x48>
ffffffff80002aa8:	48 c7 c0 a6 8b 00 80 	mov    rax,0xffffffff80008ba6
ffffffff80002aaf:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80002ab3:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002aba:	c6 40 08 00          	mov    BYTE PTR [rax+0x8],0x0
ffffffff80002abe:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002ac1:	83 c0 02             	add    eax,0x2
ffffffff80002ac4:	0f b7 c0             	movzx  eax,ax
ffffffff80002ac7:	be ab 00 00 00       	mov    esi,0xab
ffffffff80002acc:	89 c7                	mov    edi,eax
ffffffff80002ace:	e8 55 06 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002ad3:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002ad6:	83 c0 02             	add    eax,0x2
ffffffff80002ad9:	0f b7 c0             	movzx  eax,ax
ffffffff80002adc:	89 c7                	mov    edi,eax
ffffffff80002ade:	e8 2d fd ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80002ae3:	3c ab                	cmp    al,0xab
ffffffff80002ae5:	0f 95 c0             	setne  al
ffffffff80002ae8:	84 c0                	test   al,al
ffffffff80002aea:	74 20                	je     ffffffff80002b0c <IdentifyAtaDevice(IDEDevice*)+0xa5>
ffffffff80002aec:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80002aef:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002af3:	48 89 c6             	mov    rsi,rax
ffffffff80002af6:	48 c7 c7 b0 8b 00 80 	mov    rdi,0xffffffff80008bb0
ffffffff80002afd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002b02:	e8 42 1a 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80002b07:	e9 49 02 00 00       	jmp    ffffffff80002d55 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80002b0c:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002b13:	48 89 c7             	mov    rdi,rax
ffffffff80002b16:	e8 fb fd ff ff       	call   ffffffff80002916 <ResetController(IDEDevice*)>
ffffffff80002b1b:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002b22:	48 89 c7             	mov    rdi,rax
ffffffff80002b25:	e8 96 fe ff ff       	call   ffffffff800029c0 <SelectDevice(IDEDevice*)>
ffffffff80002b2a:	83 f0 01             	xor    eax,0x1
ffffffff80002b2d:	84 c0                	test   al,al
ffffffff80002b2f:	74 20                	je     ffffffff80002b51 <IdentifyAtaDevice(IDEDevice*)+0xea>
ffffffff80002b31:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80002b34:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002b38:	48 89 c6             	mov    rsi,rax
ffffffff80002b3b:	48 c7 c7 f8 8b 00 80 	mov    rdi,0xffffffff80008bf8
ffffffff80002b42:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002b47:	e8 fd 19 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80002b4c:	e9 04 02 00 00       	jmp    ffffffff80002d55 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80002b51:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002b54:	83 c0 02             	add    eax,0x2
ffffffff80002b57:	0f b7 c0             	movzx  eax,ax
ffffffff80002b5a:	89 c7                	mov    edi,eax
ffffffff80002b5c:	e8 af fc ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80002b61:	3c 01                	cmp    al,0x1
ffffffff80002b63:	75 1b                	jne    ffffffff80002b80 <IdentifyAtaDevice(IDEDevice*)+0x119>
ffffffff80002b65:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002b68:	83 c0 03             	add    eax,0x3
ffffffff80002b6b:	0f b7 c0             	movzx  eax,ax
ffffffff80002b6e:	89 c7                	mov    edi,eax
ffffffff80002b70:	e8 9b fc ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80002b75:	3c 01                	cmp    al,0x1
ffffffff80002b77:	75 07                	jne    ffffffff80002b80 <IdentifyAtaDevice(IDEDevice*)+0x119>
ffffffff80002b79:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80002b7e:	eb 05                	jmp    ffffffff80002b85 <IdentifyAtaDevice(IDEDevice*)+0x11e>
ffffffff80002b80:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002b85:	84 c0                	test   al,al
ffffffff80002b87:	74 7a                	je     ffffffff80002c03 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80002b89:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002b8c:	83 c0 04             	add    eax,0x4
ffffffff80002b8f:	0f b7 c0             	movzx  eax,ax
ffffffff80002b92:	89 c7                	mov    edi,eax
ffffffff80002b94:	e8 77 fc ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80002b99:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff80002b9c:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002b9f:	83 c0 05             	add    eax,0x5
ffffffff80002ba2:	0f b7 c0             	movzx  eax,ax
ffffffff80002ba5:	89 c7                	mov    edi,eax
ffffffff80002ba7:	e8 64 fc ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80002bac:	88 45 ee             	mov    BYTE PTR [rbp-0x12],al
ffffffff80002baf:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002bb2:	83 c0 07             	add    eax,0x7
ffffffff80002bb5:	0f b7 c0             	movzx  eax,ax
ffffffff80002bb8:	89 c7                	mov    edi,eax
ffffffff80002bba:	e8 51 fc ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80002bbf:	88 45 ed             	mov    BYTE PTR [rbp-0x13],al
ffffffff80002bc2:	80 7d ef 14          	cmp    BYTE PTR [rbp-0x11],0x14
ffffffff80002bc6:	75 1e                	jne    ffffffff80002be6 <IdentifyAtaDevice(IDEDevice*)+0x17f>
ffffffff80002bc8:	80 7d ee eb          	cmp    BYTE PTR [rbp-0x12],0xeb
ffffffff80002bcc:	75 18                	jne    ffffffff80002be6 <IdentifyAtaDevice(IDEDevice*)+0x17f>
ffffffff80002bce:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002bd5:	c6 40 0a 01          	mov    BYTE PTR [rax+0xa],0x1
ffffffff80002bd9:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002be0:	c6 40 08 01          	mov    BYTE PTR [rax+0x8],0x1
ffffffff80002be4:	eb 1d                	jmp    ffffffff80002c03 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80002be6:	80 7d ef 00          	cmp    BYTE PTR [rbp-0x11],0x0
ffffffff80002bea:	75 17                	jne    ffffffff80002c03 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80002bec:	80 7d ee 00          	cmp    BYTE PTR [rbp-0x12],0x0
ffffffff80002bf0:	75 11                	jne    ffffffff80002c03 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80002bf2:	80 7d ed 00          	cmp    BYTE PTR [rbp-0x13],0x0
ffffffff80002bf6:	74 0b                	je     ffffffff80002c03 <IdentifyAtaDevice(IDEDevice*)+0x19c>
ffffffff80002bf8:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002bff:	c6 40 08 01          	mov    BYTE PTR [rax+0x8],0x1
ffffffff80002c03:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002c0a:	0f b6 40 08          	movzx  eax,BYTE PTR [rax+0x8]
ffffffff80002c0e:	83 f0 01             	xor    eax,0x1
ffffffff80002c11:	84 c0                	test   al,al
ffffffff80002c13:	0f 85 3b 01 00 00    	jne    ffffffff80002d54 <IdentifyAtaDevice(IDEDevice*)+0x2ed>
ffffffff80002c19:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002c20:	0f b6 40 0a          	movzx  eax,BYTE PTR [rax+0xa]
ffffffff80002c24:	84 c0                	test   al,al
ffffffff80002c26:	74 07                	je     ffffffff80002c2f <IdentifyAtaDevice(IDEDevice*)+0x1c8>
ffffffff80002c28:	b8 a1 ff ff ff       	mov    eax,0xffffffa1
ffffffff80002c2d:	eb 05                	jmp    ffffffff80002c34 <IdentifyAtaDevice(IDEDevice*)+0x1cd>
ffffffff80002c2f:	b8 ec ff ff ff       	mov    eax,0xffffffec
ffffffff80002c34:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
ffffffff80002c37:	0f b6 55 ec          	movzx  edx,BYTE PTR [rbp-0x14]
ffffffff80002c3b:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002c3e:	83 c0 07             	add    eax,0x7
ffffffff80002c41:	0f b7 c0             	movzx  eax,ax
ffffffff80002c44:	89 d6                	mov    esi,edx
ffffffff80002c46:	89 c7                	mov    edi,eax
ffffffff80002c48:	e8 db 04 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002c4d:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80002c52:	e8 f7 fb ff ff       	call   ffffffff8000284e <udelay(unsigned long)>
ffffffff80002c57:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002c5e:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff80002c63:	ba 08 00 00 00       	mov    edx,0x8
ffffffff80002c68:	be 89 00 00 00       	mov    esi,0x89
ffffffff80002c6d:	48 89 c7             	mov    rdi,rax
ffffffff80002c70:	e8 2d fc ff ff       	call   ffffffff800028a2 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff80002c75:	83 f0 01             	xor    eax,0x1
ffffffff80002c78:	84 c0                	test   al,al
ffffffff80002c7a:	74 10                	je     ffffffff80002c8c <IdentifyAtaDevice(IDEDevice*)+0x225>
ffffffff80002c7c:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002c83:	c6 40 08 00          	mov    BYTE PTR [rax+0x8],0x0
ffffffff80002c87:	e9 c9 00 00 00       	jmp    ffffffff80002d55 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80002c8c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80002c93:	eb 1f                	jmp    ffffffff80002cb4 <IdentifyAtaDevice(IDEDevice*)+0x24d>
ffffffff80002c95:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002c98:	0f b7 c0             	movzx  eax,ax
ffffffff80002c9b:	89 c7                	mov    edi,eax
ffffffff80002c9d:	e8 8c fb ff ff       	call   ffffffff8000282e <Utils::inw(unsigned short)>
ffffffff80002ca2:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
ffffffff80002ca5:	48 63 d2             	movsxd rdx,edx
ffffffff80002ca8:	66 89 84 55 ec fd ff 	mov    WORD PTR [rbp+rdx*2-0x214],ax
ffffffff80002caf:	ff 
ffffffff80002cb0:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80002cb4:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffffffff80002cbb:	7e d8                	jle    ffffffff80002c95 <IdentifyAtaDevice(IDEDevice*)+0x22e>
ffffffff80002cbd:	0f b7 85 ee fd ff ff 	movzx  eax,WORD PTR [rbp-0x212]
ffffffff80002cc4:	0f b7 d0             	movzx  edx,ax
ffffffff80002cc7:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002cce:	89 50 0c             	mov    DWORD PTR [rax+0xc],edx
ffffffff80002cd1:	0f b7 85 f2 fd ff ff 	movzx  eax,WORD PTR [rbp-0x20e]
ffffffff80002cd8:	0f b7 d0             	movzx  edx,ax
ffffffff80002cdb:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002ce2:	89 50 10             	mov    DWORD PTR [rax+0x10],edx
ffffffff80002ce5:	0f b7 85 f8 fd ff ff 	movzx  eax,WORD PTR [rbp-0x208]
ffffffff80002cec:	0f b7 d0             	movzx  edx,ax
ffffffff80002cef:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002cf6:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
ffffffff80002cf9:	0f b7 85 4e fe ff ff 	movzx  eax,WORD PTR [rbp-0x1b2]
ffffffff80002d00:	66 c1 e8 09          	shr    ax,0x9
ffffffff80002d04:	0f b7 c0             	movzx  eax,ax
ffffffff80002d07:	83 e0 01             	and    eax,0x1
ffffffff80002d0a:	85 c0                	test   eax,eax
ffffffff80002d0c:	74 16                	je     ffffffff80002d24 <IdentifyAtaDevice(IDEDevice*)+0x2bd>
ffffffff80002d0e:	0f b7 85 64 fe ff ff 	movzx  eax,WORD PTR [rbp-0x19c]
ffffffff80002d15:	0f b7 d0             	movzx  edx,ax
ffffffff80002d18:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002d1f:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff80002d22:	eb 31                	jmp    ffffffff80002d55 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80002d24:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002d2b:	8b 50 10             	mov    edx,DWORD PTR [rax+0x10]
ffffffff80002d2e:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002d35:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
ffffffff80002d38:	0f af d0             	imul   edx,eax
ffffffff80002d3b:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002d42:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff80002d45:	0f af d0             	imul   edx,eax
ffffffff80002d48:	48 8b 85 d8 fd ff ff 	mov    rax,QWORD PTR [rbp-0x228]
ffffffff80002d4f:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff80002d52:	eb 01                	jmp    ffffffff80002d55 <IdentifyAtaDevice(IDEDevice*)+0x2ee>
ffffffff80002d54:	90                   	nop
ffffffff80002d55:	c9                   	leave  
ffffffff80002d56:	c3                   	ret    
ffffffff80002d57:	90                   	nop

ffffffff80002d58 <PATA::PATA()>:
ffffffff80002d58:	f3 0f 1e fa          	endbr64 
ffffffff80002d5c:	55                   	push   rbp
ffffffff80002d5d:	48 89 e5             	mov    rbp,rsp
ffffffff80002d60:	48 83 ec 30          	sub    rsp,0x30
ffffffff80002d64:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff80002d68:	66 c7 05 8f 83 00 00 	mov    WORD PTR [rip+0x838f],0x1f0        # ffffffff8000b100 <controllers>
ffffffff80002d6f:	f0 01 
ffffffff80002d71:	c6 05 99 83 00 00 00 	mov    BYTE PTR [rip+0x8399],0x0        # ffffffff8000b111 <controllers+0x11>
ffffffff80002d78:	c6 05 b2 83 00 00 01 	mov    BYTE PTR [rip+0x83b2],0x1        # ffffffff8000b131 <controllers+0x31>
ffffffff80002d7f:	66 c7 05 c0 83 00 00 	mov    WORD PTR [rip+0x83c0],0x170        # ffffffff8000b148 <controllers+0x48>
ffffffff80002d86:	70 01 
ffffffff80002d88:	c6 05 ca 83 00 00 00 	mov    BYTE PTR [rip+0x83ca],0x0        # ffffffff8000b159 <controllers+0x59>
ffffffff80002d8f:	c6 05 e3 83 00 00 01 	mov    BYTE PTR [rip+0x83e3],0x1        # ffffffff8000b179 <controllers+0x79>
ffffffff80002d96:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80002d9d:	e9 f7 00 00 00       	jmp    ffffffff80002e99 <PATA::PATA()+0x141>
ffffffff80002da2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002da5:	48 63 d0             	movsxd rdx,eax
ffffffff80002da8:	48 89 d0             	mov    rax,rdx
ffffffff80002dab:	48 c1 e0 03          	shl    rax,0x3
ffffffff80002daf:	48 01 d0             	add    rax,rdx
ffffffff80002db2:	48 c1 e0 03          	shl    rax,0x3
ffffffff80002db6:	48 05 00 b1 00 80    	add    rax,0xffffffff8000b100
ffffffff80002dbc:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80002dc0:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
ffffffff80002dc7:	e9 bf 00 00 00       	jmp    ffffffff80002e8b <PATA::PATA()+0x133>
ffffffff80002dcc:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80002dcf:	48 98                	cdqe   
ffffffff80002dd1:	48 c1 e0 05          	shl    rax,0x5
ffffffff80002dd5:	48 89 c2             	mov    rdx,rax
ffffffff80002dd8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80002ddc:	48 01 d0             	add    rax,rdx
ffffffff80002ddf:	48 83 c0 08          	add    rax,0x8
ffffffff80002de3:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80002de7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002deb:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80002def:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80002df2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002df6:	48 89 c7             	mov    rdi,rax
ffffffff80002df9:	e8 69 fc ff ff       	call   ffffffff80002a67 <IdentifyAtaDevice(IDEDevice*)>
ffffffff80002dfe:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e02:	0f b6 40 08          	movzx  eax,BYTE PTR [rax+0x8]
ffffffff80002e06:	83 f0 01             	xor    eax,0x1
ffffffff80002e09:	84 c0                	test   al,al
ffffffff80002e0b:	75 79                	jne    ffffffff80002e86 <PATA::PATA()+0x12e>
ffffffff80002e0d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e11:	0f b6 40 0a          	movzx  eax,BYTE PTR [rax+0xa]
ffffffff80002e15:	84 c0                	test   al,al
ffffffff80002e17:	75 6d                	jne    ffffffff80002e86 <PATA::PATA()+0x12e>
ffffffff80002e19:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e1d:	8b 70 18             	mov    esi,DWORD PTR [rax+0x18]
ffffffff80002e20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e24:	8b 48 14             	mov    ecx,DWORD PTR [rax+0x14]
ffffffff80002e27:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e2b:	44 8b 40 10          	mov    r8d,DWORD PTR [rax+0x10]
ffffffff80002e2f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e33:	8b 78 0c             	mov    edi,DWORD PTR [rax+0xc]
ffffffff80002e36:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e3a:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff80002e3e:	0f b6 d0             	movzx  edx,al
ffffffff80002e41:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002e45:	0f b6 40 0a          	movzx  eax,BYTE PTR [rax+0xa]
ffffffff80002e49:	84 c0                	test   al,al
ffffffff80002e4b:	74 09                	je     ffffffff80002e56 <PATA::PATA()+0xfe>
ffffffff80002e4d:	49 c7 c2 23 8c 00 80 	mov    r10,0xffffffff80008c23
ffffffff80002e54:	eb 07                	jmp    ffffffff80002e5d <PATA::PATA()+0x105>
ffffffff80002e56:	49 c7 c2 2a 8c 00 80 	mov    r10,0xffffffff80008c2a
ffffffff80002e5d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80002e60:	56                   	push   rsi
ffffffff80002e61:	51                   	push   rcx
ffffffff80002e62:	45 89 c1             	mov    r9d,r8d
ffffffff80002e65:	41 89 f8             	mov    r8d,edi
ffffffff80002e68:	89 d1                	mov    ecx,edx
ffffffff80002e6a:	89 c2                	mov    edx,eax
ffffffff80002e6c:	4c 89 d6             	mov    rsi,r10
ffffffff80002e6f:	48 c7 c7 38 8c 00 80 	mov    rdi,0xffffffff80008c38
ffffffff80002e76:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002e7b:	e8 c9 16 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80002e80:	48 83 c4 10          	add    rsp,0x10
ffffffff80002e84:	eb 01                	jmp    ffffffff80002e87 <PATA::PATA()+0x12f>
ffffffff80002e86:	90                   	nop
ffffffff80002e87:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
ffffffff80002e8b:	83 7d f8 01          	cmp    DWORD PTR [rbp-0x8],0x1
ffffffff80002e8f:	0f 8e 37 ff ff ff    	jle    ffffffff80002dcc <PATA::PATA()+0x74>
ffffffff80002e95:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80002e99:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80002e9d:	0f 8e ff fe ff ff    	jle    ffffffff80002da2 <PATA::PATA()+0x4a>
ffffffff80002ea3:	90                   	nop
ffffffff80002ea4:	90                   	nop
ffffffff80002ea5:	c9                   	leave  
ffffffff80002ea6:	c3                   	ret    
ffffffff80002ea7:	90                   	nop

ffffffff80002ea8 <PATA::Read(unsigned long, unsigned int, void*)>:
ffffffff80002ea8:	f3 0f 1e fa          	endbr64 
ffffffff80002eac:	55                   	push   rbp
ffffffff80002ead:	48 89 e5             	mov    rbp,rsp
ffffffff80002eb0:	48 83 ec 50          	sub    rsp,0x50
ffffffff80002eb4:	48 89 7d c8          	mov    QWORD PTR [rbp-0x38],rdi
ffffffff80002eb8:	48 89 75 c0          	mov    QWORD PTR [rbp-0x40],rsi
ffffffff80002ebc:	89 55 bc             	mov    DWORD PTR [rbp-0x44],edx
ffffffff80002ebf:	48 89 4d b0          	mov    QWORD PTR [rbp-0x50],rcx
ffffffff80002ec3:	48 c7 45 e8 08 b1 00 	mov    QWORD PTR [rbp-0x18],0xffffffff8000b108
ffffffff80002eca:	80 
ffffffff80002ecb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002ecf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80002ed2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80002ed6:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80002eda:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80002ede:	83 7d bc 00          	cmp    DWORD PTR [rbp-0x44],0x0
ffffffff80002ee2:	75 0a                	jne    ffffffff80002eee <PATA::Read(unsigned long, unsigned int, void*)+0x46>
ffffffff80002ee4:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002ee9:	e9 b4 01 00 00       	jmp    ffffffff800030a2 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80002eee:	81 7d bc ff 00 00 00 	cmp    DWORD PTR [rbp-0x44],0xff
ffffffff80002ef5:	76 07                	jbe    ffffffff80002efe <PATA::Read(unsigned long, unsigned int, void*)+0x56>
ffffffff80002ef7:	c7 45 bc 00 01 00 00 	mov    DWORD PTR [rbp-0x44],0x100
ffffffff80002efe:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
ffffffff80002f01:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002f05:	48 01 c2             	add    rdx,rax
ffffffff80002f08:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002f0c:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80002f0f:	89 c0                	mov    eax,eax
ffffffff80002f11:	48 39 c2             	cmp    rdx,rax
ffffffff80002f14:	76 0a                	jbe    ffffffff80002f20 <PATA::Read(unsigned long, unsigned int, void*)+0x78>
ffffffff80002f16:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002f1b:	e9 82 01 00 00       	jmp    ffffffff800030a2 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80002f20:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80002f24:	0f b7 00             	movzx  eax,WORD PTR [rax]
ffffffff80002f27:	0f b7 c0             	movzx  eax,ax
ffffffff80002f2a:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffffffff80002f2d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002f31:	48 89 c7             	mov    rdi,rax
ffffffff80002f34:	e8 87 fa ff ff       	call   ffffffff800029c0 <SelectDevice(IDEDevice*)>
ffffffff80002f39:	83 f0 01             	xor    eax,0x1
ffffffff80002f3c:	84 c0                	test   al,al
ffffffff80002f3e:	74 0a                	je     ffffffff80002f4a <PATA::Read(unsigned long, unsigned int, void*)+0xa2>
ffffffff80002f40:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80002f45:	e9 58 01 00 00       	jmp    ffffffff800030a2 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80002f4a:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002f4e:	88 45 db             	mov    BYTE PTR [rbp-0x25],al
ffffffff80002f51:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002f55:	48 c1 e8 08          	shr    rax,0x8
ffffffff80002f59:	88 45 da             	mov    BYTE PTR [rbp-0x26],al
ffffffff80002f5c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002f60:	48 c1 e8 10          	shr    rax,0x10
ffffffff80002f64:	88 45 d9             	mov    BYTE PTR [rbp-0x27],al
ffffffff80002f67:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80002f6b:	48 c1 e8 18          	shr    rax,0x18
ffffffff80002f6f:	83 e0 0f             	and    eax,0xf
ffffffff80002f72:	88 45 d8             	mov    BYTE PTR [rbp-0x28],al
ffffffff80002f75:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80002f78:	0f b6 d0             	movzx  edx,al
ffffffff80002f7b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80002f7e:	83 c0 02             	add    eax,0x2
ffffffff80002f81:	0f b7 c0             	movzx  eax,ax
ffffffff80002f84:	89 d6                	mov    esi,edx
ffffffff80002f86:	89 c7                	mov    edi,eax
ffffffff80002f88:	e8 9b 01 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002f8d:	0f b6 55 db          	movzx  edx,BYTE PTR [rbp-0x25]
ffffffff80002f91:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80002f94:	83 c0 03             	add    eax,0x3
ffffffff80002f97:	0f b7 c0             	movzx  eax,ax
ffffffff80002f9a:	89 d6                	mov    esi,edx
ffffffff80002f9c:	89 c7                	mov    edi,eax
ffffffff80002f9e:	e8 85 01 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002fa3:	0f b6 55 da          	movzx  edx,BYTE PTR [rbp-0x26]
ffffffff80002fa7:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80002faa:	83 c0 04             	add    eax,0x4
ffffffff80002fad:	0f b7 c0             	movzx  eax,ax
ffffffff80002fb0:	89 d6                	mov    esi,edx
ffffffff80002fb2:	89 c7                	mov    edi,eax
ffffffff80002fb4:	e8 6f 01 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002fb9:	0f b6 55 d9          	movzx  edx,BYTE PTR [rbp-0x27]
ffffffff80002fbd:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80002fc0:	83 c0 05             	add    eax,0x5
ffffffff80002fc3:	0f b7 c0             	movzx  eax,ax
ffffffff80002fc6:	89 d6                	mov    esi,edx
ffffffff80002fc8:	89 c7                	mov    edi,eax
ffffffff80002fca:	e8 59 01 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002fcf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80002fd3:	0f b6 40 09          	movzx  eax,BYTE PTR [rax+0x9]
ffffffff80002fd7:	0f b6 c0             	movzx  eax,al
ffffffff80002fda:	c1 e0 04             	shl    eax,0x4
ffffffff80002fdd:	0a 45 d8             	or     al,BYTE PTR [rbp-0x28]
ffffffff80002fe0:	83 c8 40             	or     eax,0x40
ffffffff80002fe3:	0f b6 d0             	movzx  edx,al
ffffffff80002fe6:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80002fe9:	83 c0 06             	add    eax,0x6
ffffffff80002fec:	0f b7 c0             	movzx  eax,ax
ffffffff80002fef:	89 d6                	mov    esi,edx
ffffffff80002ff1:	89 c7                	mov    edi,eax
ffffffff80002ff3:	e8 30 01 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80002ff8:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80002ffb:	83 c0 07             	add    eax,0x7
ffffffff80002ffe:	0f b7 c0             	movzx  eax,ax
ffffffff80003001:	be 20 00 00 00       	mov    esi,0x20
ffffffff80003006:	89 c7                	mov    edi,eax
ffffffff80003008:	e8 1b 01 00 00       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff8000300d:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80003012:	e8 37 f8 ff ff       	call   ffffffff8000284e <udelay(unsigned long)>
ffffffff80003017:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000301b:	b9 80 c3 c9 01       	mov    ecx,0x1c9c380
ffffffff80003020:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003025:	be 80 00 00 00       	mov    esi,0x80
ffffffff8000302a:	48 89 c7             	mov    rdi,rax
ffffffff8000302d:	e8 70 f8 ff ff       	call   ffffffff800028a2 <WaitForDevice(IDEDevice*, unsigned char, unsigned char, unsigned long)>
ffffffff80003032:	83 f0 01             	xor    eax,0x1
ffffffff80003035:	84 c0                	test   al,al
ffffffff80003037:	74 07                	je     ffffffff80003040 <PATA::Read(unsigned long, unsigned int, void*)+0x198>
ffffffff80003039:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000303e:	eb 62                	jmp    ffffffff800030a2 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80003040:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80003043:	83 c0 07             	add    eax,0x7
ffffffff80003046:	0f b7 c0             	movzx  eax,ax
ffffffff80003049:	89 c7                	mov    edi,eax
ffffffff8000304b:	e8 c0 f7 ff ff       	call   ffffffff80002810 <Utils::inb(unsigned short)>
ffffffff80003050:	0f b6 c0             	movzx  eax,al
ffffffff80003053:	83 e0 01             	and    eax,0x1
ffffffff80003056:	85 c0                	test   eax,eax
ffffffff80003058:	0f 95 c0             	setne  al
ffffffff8000305b:	84 c0                	test   al,al
ffffffff8000305d:	74 07                	je     ffffffff80003066 <PATA::Read(unsigned long, unsigned int, void*)+0x1be>
ffffffff8000305f:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003064:	eb 3c                	jmp    ffffffff800030a2 <PATA::Read(unsigned long, unsigned int, void*)+0x1fa>
ffffffff80003066:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80003069:	c1 e0 08             	shl    eax,0x8
ffffffff8000306c:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
ffffffff8000306f:	eb 1e                	jmp    ffffffff8000308f <PATA::Read(unsigned long, unsigned int, void*)+0x1e7>
ffffffff80003071:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80003074:	0f b7 c0             	movzx  eax,ax
ffffffff80003077:	89 c7                	mov    edi,eax
ffffffff80003079:	e8 b0 f7 ff ff       	call   ffffffff8000282e <Utils::inw(unsigned short)>
ffffffff8000307e:	89 c2                	mov    edx,eax
ffffffff80003080:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003084:	48 8d 48 02          	lea    rcx,[rax+0x2]
ffffffff80003088:	48 89 4d f8          	mov    QWORD PTR [rbp-0x8],rcx
ffffffff8000308c:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff8000308f:	83 6d f4 01          	sub    DWORD PTR [rbp-0xc],0x1
ffffffff80003093:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80003096:	f7 d0                	not    eax
ffffffff80003098:	c1 e8 1f             	shr    eax,0x1f
ffffffff8000309b:	84 c0                	test   al,al
ffffffff8000309d:	75 d2                	jne    ffffffff80003071 <PATA::Read(unsigned long, unsigned int, void*)+0x1c9>
ffffffff8000309f:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff800030a2:	c9                   	leave  
ffffffff800030a3:	c3                   	ret    

ffffffff800030a4 <__static_initialization_and_destruction_0(int, int)>:
ffffffff800030a4:	f3 0f 1e fa          	endbr64 
ffffffff800030a8:	55                   	push   rbp
ffffffff800030a9:	48 89 e5             	mov    rbp,rsp
ffffffff800030ac:	41 54                	push   r12
ffffffff800030ae:	53                   	push   rbx
ffffffff800030af:	48 83 ec 10          	sub    rsp,0x10
ffffffff800030b3:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff800030b6:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff800030b9:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
ffffffff800030bd:	75 46                	jne    ffffffff80003105 <__static_initialization_and_destruction_0(int, int)+0x61>
ffffffff800030bf:	81 7d e8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x18],0xffff
ffffffff800030c6:	75 3d                	jne    ffffffff80003105 <__static_initialization_and_destruction_0(int, int)+0x61>
ffffffff800030c8:	48 c7 c0 00 b1 00 80 	mov    rax,0xffffffff8000b100
ffffffff800030cf:	41 bc 01 00 00 00    	mov    r12d,0x1
ffffffff800030d5:	48 89 c3             	mov    rbx,rax
ffffffff800030d8:	eb 26                	jmp    ffffffff80003100 <__static_initialization_and_destruction_0(int, int)+0x5c>
ffffffff800030da:	48 89 de             	mov    rsi,rbx
ffffffff800030dd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800030e2:	ba 09 00 00 00       	mov    edx,0x9
ffffffff800030e7:	48 89 f7             	mov    rdi,rsi
ffffffff800030ea:	48 89 d1             	mov    rcx,rdx
ffffffff800030ed:	f3 48 ab             	rep stos QWORD PTR es:[rdi],rax
ffffffff800030f0:	48 89 df             	mov    rdi,rbx
ffffffff800030f3:	e8 72 00 00 00       	call   ffffffff8000316a <IDEController::IDEController()>
ffffffff800030f8:	48 83 c3 48          	add    rbx,0x48
ffffffff800030fc:	49 83 ec 01          	sub    r12,0x1
ffffffff80003100:	4d 85 e4             	test   r12,r12
ffffffff80003103:	79 d5                	jns    ffffffff800030da <__static_initialization_and_destruction_0(int, int)+0x36>
ffffffff80003105:	90                   	nop
ffffffff80003106:	48 83 c4 10          	add    rsp,0x10
ffffffff8000310a:	5b                   	pop    rbx
ffffffff8000310b:	41 5c                	pop    r12
ffffffff8000310d:	5d                   	pop    rbp
ffffffff8000310e:	c3                   	ret    

ffffffff8000310f <_GLOBAL__sub_I_controllers>:
ffffffff8000310f:	f3 0f 1e fa          	endbr64 
ffffffff80003113:	55                   	push   rbp
ffffffff80003114:	48 89 e5             	mov    rbp,rsp
ffffffff80003117:	be ff ff 00 00       	mov    esi,0xffff
ffffffff8000311c:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80003121:	e8 7e ff ff ff       	call   ffffffff800030a4 <__static_initialization_and_destruction_0(int, int)>
ffffffff80003126:	5d                   	pop    rbp
ffffffff80003127:	c3                   	ret    

ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>:
ffffffff80003128:	f3 0f 1e fa          	endbr64 
ffffffff8000312c:	55                   	push   rbp
ffffffff8000312d:	48 89 e5             	mov    rbp,rsp
ffffffff80003130:	48 83 ec 08          	sub    rsp,0x8
ffffffff80003134:	89 f8                	mov    eax,edi
ffffffff80003136:	89 f2                	mov    edx,esi
ffffffff80003138:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff8000313c:	89 d0                	mov    eax,edx
ffffffff8000313e:	88 45 f8             	mov    BYTE PTR [rbp-0x8],al
ffffffff80003141:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff80003145:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80003149:	ee                   	out    dx,al
ffffffff8000314a:	90                   	nop
ffffffff8000314b:	c9                   	leave  
ffffffff8000314c:	c3                   	ret    
ffffffff8000314d:	90                   	nop

ffffffff8000314e <IDEDevice::IDEDevice()>:
ffffffff8000314e:	f3 0f 1e fa          	endbr64 
ffffffff80003152:	55                   	push   rbp
ffffffff80003153:	48 89 e5             	mov    rbp,rsp
ffffffff80003156:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000315a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000315e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003162:	c6 40 0a 00          	mov    BYTE PTR [rax+0xa],0x0
ffffffff80003166:	90                   	nop
ffffffff80003167:	c9                   	leave  
ffffffff80003168:	c3                   	ret    
ffffffff80003169:	90                   	nop

ffffffff8000316a <IDEController::IDEController()>:
ffffffff8000316a:	f3 0f 1e fa          	endbr64 
ffffffff8000316e:	55                   	push   rbp
ffffffff8000316f:	48 89 e5             	mov    rbp,rsp
ffffffff80003172:	41 54                	push   r12
ffffffff80003174:	53                   	push   rbx
ffffffff80003175:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003179:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000317d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003181:	48 83 c0 08          	add    rax,0x8
ffffffff80003185:	41 bc 01 00 00 00    	mov    r12d,0x1
ffffffff8000318b:	48 89 c3             	mov    rbx,rax
ffffffff8000318e:	eb 2f                	jmp    ffffffff800031bf <IDEController::IDEController()+0x55>
ffffffff80003190:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
ffffffff80003197:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
ffffffff8000319e:	00 
ffffffff8000319f:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
ffffffff800031a6:	00 
ffffffff800031a7:	48 c7 43 18 00 00 00 	mov    QWORD PTR [rbx+0x18],0x0
ffffffff800031ae:	00 
ffffffff800031af:	48 89 df             	mov    rdi,rbx
ffffffff800031b2:	e8 97 ff ff ff       	call   ffffffff8000314e <IDEDevice::IDEDevice()>
ffffffff800031b7:	48 83 c3 20          	add    rbx,0x20
ffffffff800031bb:	49 83 ec 01          	sub    r12,0x1
ffffffff800031bf:	4d 85 e4             	test   r12,r12
ffffffff800031c2:	79 cc                	jns    ffffffff80003190 <IDEController::IDEController()+0x26>
ffffffff800031c4:	90                   	nop
ffffffff800031c5:	90                   	nop
ffffffff800031c6:	48 83 c4 10          	add    rsp,0x10
ffffffff800031ca:	5b                   	pop    rbx
ffffffff800031cb:	41 5c                	pop    r12
ffffffff800031cd:	5d                   	pop    rbp
ffffffff800031ce:	c3                   	ret    

ffffffff800031cf <memset(void*, int, unsigned long)>:
ffffffff800031cf:	55                   	push   rbp
ffffffff800031d0:	48 89 e5             	mov    rbp,rsp
ffffffff800031d3:	48 83 ec 28          	sub    rsp,0x28
ffffffff800031d7:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800031db:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff800031de:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff800031e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800031e6:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800031ea:	eb 13                	jmp    ffffffff800031ff <memset(void*, int, unsigned long)+0x30>
ffffffff800031ec:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff800031ef:	89 c1                	mov    ecx,eax
ffffffff800031f1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800031f5:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff800031f9:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff800031fd:	88 08                	mov    BYTE PTR [rax],cl
ffffffff800031ff:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80003203:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80003207:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff8000320b:	48 85 c0             	test   rax,rax
ffffffff8000320e:	0f 95 c0             	setne  al
ffffffff80003211:	84 c0                	test   al,al
ffffffff80003213:	75 d7                	jne    ffffffff800031ec <memset(void*, int, unsigned long)+0x1d>
ffffffff80003215:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003219:	c9                   	leave  
ffffffff8000321a:	c3                   	ret    

ffffffff8000321b <Utils::inw(unsigned short)>:
ffffffff8000321b:	55                   	push   rbp
ffffffff8000321c:	48 89 e5             	mov    rbp,rsp
ffffffff8000321f:	48 83 ec 18          	sub    rsp,0x18
ffffffff80003223:	89 f8                	mov    eax,edi
ffffffff80003225:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff80003229:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff8000322d:	89 c2                	mov    edx,eax
ffffffff8000322f:	66 ed                	in     ax,dx
ffffffff80003231:	66 89 45 fe          	mov    WORD PTR [rbp-0x2],ax
ffffffff80003235:	0f b7 45 fe          	movzx  eax,WORD PTR [rbp-0x2]
ffffffff80003239:	c9                   	leave  
ffffffff8000323a:	c3                   	ret    

ffffffff8000323b <Utils::ind(unsigned short)>:
ffffffff8000323b:	55                   	push   rbp
ffffffff8000323c:	48 89 e5             	mov    rbp,rsp
ffffffff8000323f:	48 83 ec 18          	sub    rsp,0x18
ffffffff80003243:	89 f8                	mov    eax,edi
ffffffff80003245:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff80003249:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff8000324d:	89 c2                	mov    edx,eax
ffffffff8000324f:	ed                   	in     eax,dx
ffffffff80003250:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80003253:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003256:	c9                   	leave  
ffffffff80003257:	c3                   	ret    

ffffffff80003258 <ReadPciRegister16(int, int, int, unsigned char)>:
ffffffff80003258:	f3 0f 1e fa          	endbr64 
ffffffff8000325c:	55                   	push   rbp
ffffffff8000325d:	48 89 e5             	mov    rbp,rsp
ffffffff80003260:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003264:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80003267:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff8000326a:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff8000326d:	89 c8                	mov    eax,ecx
ffffffff8000326f:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff80003272:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003275:	c1 e0 10             	shl    eax,0x10
ffffffff80003278:	89 c2                	mov    edx,eax
ffffffff8000327a:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff8000327d:	c1 e0 0b             	shl    eax,0xb
ffffffff80003280:	09 c2                	or     edx,eax
ffffffff80003282:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80003285:	c1 e0 08             	shl    eax,0x8
ffffffff80003288:	09 c2                	or     edx,eax
ffffffff8000328a:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff8000328e:	09 d0                	or     eax,edx
ffffffff80003290:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff80003295:	89 c6                	mov    esi,eax
ffffffff80003297:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff8000329c:	e8 e1 0a 00 00       	call   ffffffff80003d82 <Utils::outd(unsigned short, unsigned int)>
ffffffff800032a1:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff800032a6:	e8 70 ff ff ff       	call   ffffffff8000321b <Utils::inw(unsigned short)>
ffffffff800032ab:	c9                   	leave  
ffffffff800032ac:	c3                   	ret    

ffffffff800032ad <ReadPciRegister32(int, int, int, unsigned char)>:
ffffffff800032ad:	f3 0f 1e fa          	endbr64 
ffffffff800032b1:	55                   	push   rbp
ffffffff800032b2:	48 89 e5             	mov    rbp,rsp
ffffffff800032b5:	48 83 ec 10          	sub    rsp,0x10
ffffffff800032b9:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800032bc:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff800032bf:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff800032c2:	89 c8                	mov    eax,ecx
ffffffff800032c4:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff800032c7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800032ca:	c1 e0 10             	shl    eax,0x10
ffffffff800032cd:	89 c2                	mov    edx,eax
ffffffff800032cf:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800032d2:	c1 e0 0b             	shl    eax,0xb
ffffffff800032d5:	09 c2                	or     edx,eax
ffffffff800032d7:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800032da:	c1 e0 08             	shl    eax,0x8
ffffffff800032dd:	09 c2                	or     edx,eax
ffffffff800032df:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff800032e3:	09 d0                	or     eax,edx
ffffffff800032e5:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff800032ea:	89 c6                	mov    esi,eax
ffffffff800032ec:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff800032f1:	e8 8c 0a 00 00       	call   ffffffff80003d82 <Utils::outd(unsigned short, unsigned int)>
ffffffff800032f6:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff800032fb:	e8 3b ff ff ff       	call   ffffffff8000323b <Utils::ind(unsigned short)>
ffffffff80003300:	c9                   	leave  
ffffffff80003301:	c3                   	ret    

ffffffff80003302 <ReadPciRegister64(int, int, int, unsigned char)>:
ffffffff80003302:	f3 0f 1e fa          	endbr64 
ffffffff80003306:	55                   	push   rbp
ffffffff80003307:	48 89 e5             	mov    rbp,rsp
ffffffff8000330a:	53                   	push   rbx
ffffffff8000330b:	48 83 ec 18          	sub    rsp,0x18
ffffffff8000330f:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80003312:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff80003315:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffffffff80003318:	89 c8                	mov    eax,ecx
ffffffff8000331a:	88 45 e0             	mov    BYTE PTR [rbp-0x20],al
ffffffff8000331d:	0f b6 45 e0          	movzx  eax,BYTE PTR [rbp-0x20]
ffffffff80003321:	83 c0 04             	add    eax,0x4
ffffffff80003324:	0f b6 c8             	movzx  ecx,al
ffffffff80003327:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff8000332a:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff8000332d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80003330:	89 c7                	mov    edi,eax
ffffffff80003332:	e8 76 ff ff ff       	call   ffffffff800032ad <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff80003337:	89 c0                	mov    eax,eax
ffffffff80003339:	48 c1 e0 20          	shl    rax,0x20
ffffffff8000333d:	48 89 c3             	mov    rbx,rax
ffffffff80003340:	0f b6 4d e0          	movzx  ecx,BYTE PTR [rbp-0x20]
ffffffff80003344:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80003347:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff8000334a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000334d:	89 c7                	mov    edi,eax
ffffffff8000334f:	e8 59 ff ff ff       	call   ffffffff800032ad <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff80003354:	89 c0                	mov    eax,eax
ffffffff80003356:	48 09 d8             	or     rax,rbx
ffffffff80003359:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff8000335d:	c9                   	leave  
ffffffff8000335e:	c3                   	ret    

ffffffff8000335f <WritePciRegister16(int, int, int, unsigned char, unsigned short)>:
ffffffff8000335f:	f3 0f 1e fa          	endbr64 
ffffffff80003363:	55                   	push   rbp
ffffffff80003364:	48 89 e5             	mov    rbp,rsp
ffffffff80003367:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000336b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff8000336e:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80003371:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff80003374:	89 ca                	mov    edx,ecx
ffffffff80003376:	44 89 c0             	mov    eax,r8d
ffffffff80003379:	88 55 f0             	mov    BYTE PTR [rbp-0x10],dl
ffffffff8000337c:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff80003380:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003383:	c1 e0 10             	shl    eax,0x10
ffffffff80003386:	89 c2                	mov    edx,eax
ffffffff80003388:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff8000338b:	c1 e0 0b             	shl    eax,0xb
ffffffff8000338e:	09 c2                	or     edx,eax
ffffffff80003390:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80003393:	c1 e0 08             	shl    eax,0x8
ffffffff80003396:	09 c2                	or     edx,eax
ffffffff80003398:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff8000339c:	09 d0                	or     eax,edx
ffffffff8000339e:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff800033a3:	89 c6                	mov    esi,eax
ffffffff800033a5:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff800033aa:	e8 d3 09 00 00       	call   ffffffff80003d82 <Utils::outd(unsigned short, unsigned int)>
ffffffff800033af:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff800033b3:	89 c6                	mov    esi,eax
ffffffff800033b5:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff800033ba:	e8 9e 09 00 00       	call   ffffffff80003d5d <Utils::outw(unsigned short, unsigned short)>
ffffffff800033bf:	90                   	nop
ffffffff800033c0:	c9                   	leave  
ffffffff800033c1:	c3                   	ret    

ffffffff800033c2 <WritePciRegister32(int, int, int, unsigned char, unsigned int)>:
ffffffff800033c2:	f3 0f 1e fa          	endbr64 
ffffffff800033c6:	55                   	push   rbp
ffffffff800033c7:	48 89 e5             	mov    rbp,rsp
ffffffff800033ca:	48 83 ec 20          	sub    rsp,0x20
ffffffff800033ce:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800033d1:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff800033d4:	89 55 f4             	mov    DWORD PTR [rbp-0xc],edx
ffffffff800033d7:	89 c8                	mov    eax,ecx
ffffffff800033d9:	44 89 45 ec          	mov    DWORD PTR [rbp-0x14],r8d
ffffffff800033dd:	88 45 f0             	mov    BYTE PTR [rbp-0x10],al
ffffffff800033e0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800033e3:	c1 e0 10             	shl    eax,0x10
ffffffff800033e6:	89 c2                	mov    edx,eax
ffffffff800033e8:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800033eb:	c1 e0 0b             	shl    eax,0xb
ffffffff800033ee:	09 c2                	or     edx,eax
ffffffff800033f0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800033f3:	c1 e0 08             	shl    eax,0x8
ffffffff800033f6:	09 c2                	or     edx,eax
ffffffff800033f8:	0f b6 45 f0          	movzx  eax,BYTE PTR [rbp-0x10]
ffffffff800033fc:	09 d0                	or     eax,edx
ffffffff800033fe:	0d 00 00 00 80       	or     eax,0x80000000
ffffffff80003403:	89 c6                	mov    esi,eax
ffffffff80003405:	bf f8 0c 00 00       	mov    edi,0xcf8
ffffffff8000340a:	e8 73 09 00 00       	call   ffffffff80003d82 <Utils::outd(unsigned short, unsigned int)>
ffffffff8000340f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80003412:	89 c6                	mov    esi,eax
ffffffff80003414:	bf fc 0c 00 00       	mov    edi,0xcfc
ffffffff80003419:	e8 64 09 00 00       	call   ffffffff80003d82 <Utils::outd(unsigned short, unsigned int)>
ffffffff8000341e:	90                   	nop
ffffffff8000341f:	c9                   	leave  
ffffffff80003420:	c3                   	ret    

ffffffff80003421 <ReadIgpu32(unsigned int)>:
ffffffff80003421:	f3 0f 1e fa          	endbr64 
ffffffff80003425:	55                   	push   rbp
ffffffff80003426:	48 89 e5             	mov    rbp,rsp
ffffffff80003429:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000342d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80003430:	48 8b 15 69 7d 00 00 	mov    rdx,QWORD PTR [rip+0x7d69]        # ffffffff8000b1a0 <iobase>
ffffffff80003437:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000343a:	c1 e8 02             	shr    eax,0x2
ffffffff8000343d:	89 c0                	mov    eax,eax
ffffffff8000343f:	48 c1 e0 02          	shl    rax,0x2
ffffffff80003443:	48 01 d0             	add    rax,rdx
ffffffff80003446:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80003448:	c9                   	leave  
ffffffff80003449:	c3                   	ret    

ffffffff8000344a <PciReadBar(int, int, int, int, unsigned int*, unsigned int*)>:
ffffffff8000344a:	f3 0f 1e fa          	endbr64 
ffffffff8000344e:	55                   	push   rbp
ffffffff8000344f:	48 89 e5             	mov    rbp,rsp
ffffffff80003452:	48 83 ec 30          	sub    rsp,0x30
ffffffff80003456:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff80003459:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff8000345c:	89 55 e4             	mov    DWORD PTR [rbp-0x1c],edx
ffffffff8000345f:	89 4d e0             	mov    DWORD PTR [rbp-0x20],ecx
ffffffff80003462:	4c 89 45 d8          	mov    QWORD PTR [rbp-0x28],r8
ffffffff80003466:	4c 89 4d d0          	mov    QWORD PTR [rbp-0x30],r9
ffffffff8000346a:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000346d:	48 98                	cdqe   
ffffffff8000346f:	48 83 c0 04          	add    rax,0x4
ffffffff80003473:	c1 e0 02             	shl    eax,0x2
ffffffff80003476:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80003479:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000347c:	0f b6 c8             	movzx  ecx,al
ffffffff8000347f:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80003482:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff80003485:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80003488:	89 c7                	mov    edi,eax
ffffffff8000348a:	e8 1e fe ff ff       	call   ffffffff800032ad <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff8000348f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
ffffffff80003493:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80003495:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003498:	0f b6 c8             	movzx  ecx,al
ffffffff8000349b:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff8000349e:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff800034a1:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800034a4:	41 b8 ff ff ff ff    	mov    r8d,0xffffffff
ffffffff800034aa:	89 c7                	mov    edi,eax
ffffffff800034ac:	e8 11 ff ff ff       	call   ffffffff800033c2 <WritePciRegister32(int, int, int, unsigned char, unsigned int)>
ffffffff800034b1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800034b4:	0f b6 c8             	movzx  ecx,al
ffffffff800034b7:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff800034ba:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff800034bd:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800034c0:	89 c7                	mov    edi,eax
ffffffff800034c2:	e8 e6 fd ff ff       	call   ffffffff800032ad <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff800034c7:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800034cb:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff800034cd:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800034d1:	8b 38                	mov    edi,DWORD PTR [rax]
ffffffff800034d3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800034d6:	0f b6 c8             	movzx  ecx,al
ffffffff800034d9:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff800034dc:	8b 75 e8             	mov    esi,DWORD PTR [rbp-0x18]
ffffffff800034df:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800034e2:	41 89 f8             	mov    r8d,edi
ffffffff800034e5:	89 c7                	mov    edi,eax
ffffffff800034e7:	e8 d6 fe ff ff       	call   ffffffff800033c2 <WritePciRegister32(int, int, int, unsigned char, unsigned int)>
ffffffff800034ec:	90                   	nop
ffffffff800034ed:	c9                   	leave  
ffffffff800034ee:	c3                   	ret    

ffffffff800034ef <PciGetBar(PciBar*, int, int, int, int)>:
ffffffff800034ef:	f3 0f 1e fa          	endbr64 
ffffffff800034f3:	55                   	push   rbp
ffffffff800034f4:	48 89 e5             	mov    rbp,rsp
ffffffff800034f7:	48 83 ec 30          	sub    rsp,0x30
ffffffff800034fb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800034ff:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80003502:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80003505:	89 4d dc             	mov    DWORD PTR [rbp-0x24],ecx
ffffffff80003508:	44 89 45 d8          	mov    DWORD PTR [rbp-0x28],r8d
ffffffff8000350c:	4c 8d 45 f8          	lea    r8,[rbp-0x8]
ffffffff80003510:	48 8d 7d fc          	lea    rdi,[rbp-0x4]
ffffffff80003514:	8b 4d d8             	mov    ecx,DWORD PTR [rbp-0x28]
ffffffff80003517:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffffffff8000351a:	8b 75 e0             	mov    esi,DWORD PTR [rbp-0x20]
ffffffff8000351d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003520:	4d 89 c1             	mov    r9,r8
ffffffff80003523:	49 89 f8             	mov    r8,rdi
ffffffff80003526:	89 c7                	mov    edi,eax
ffffffff80003528:	e8 1d ff ff ff       	call   ffffffff8000344a <PciReadBar(int, int, int, int, unsigned int*, unsigned int*)>
ffffffff8000352d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003530:	83 e0 04             	and    eax,0x4
ffffffff80003533:	85 c0                	test   eax,eax
ffffffff80003535:	74 71                	je     ffffffff800035a8 <PciGetBar(PciBar*, int, int, int, int)+0xb9>
ffffffff80003537:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff8000353a:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff8000353d:	4c 8d 45 f0          	lea    r8,[rbp-0x10]
ffffffff80003541:	48 8d 7d f4          	lea    rdi,[rbp-0xc]
ffffffff80003545:	8b 55 dc             	mov    edx,DWORD PTR [rbp-0x24]
ffffffff80003548:	8b 75 e0             	mov    esi,DWORD PTR [rbp-0x20]
ffffffff8000354b:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000354e:	4d 89 c1             	mov    r9,r8
ffffffff80003551:	49 89 f8             	mov    r8,rdi
ffffffff80003554:	89 c7                	mov    edi,eax
ffffffff80003556:	e8 ef fe ff ff       	call   ffffffff8000344a <PciReadBar(int, int, int, int, unsigned int*, unsigned int*)>
ffffffff8000355b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff8000355e:	89 c0                	mov    eax,eax
ffffffff80003560:	48 c1 e0 20          	shl    rax,0x20
ffffffff80003564:	48 89 c2             	mov    rdx,rax
ffffffff80003567:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000356a:	89 c0                	mov    eax,eax
ffffffff8000356c:	83 e0 f0             	and    eax,0xfffffff0
ffffffff8000356f:	48 09 c2             	or     rdx,rax
ffffffff80003572:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003576:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80003579:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffffffff8000357c:	89 c0                	mov    eax,eax
ffffffff8000357e:	48 c1 e0 20          	shl    rax,0x20
ffffffff80003582:	48 89 c2             	mov    rdx,rax
ffffffff80003585:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80003588:	89 c0                	mov    eax,eax
ffffffff8000358a:	83 e0 f0             	and    eax,0xfffffff0
ffffffff8000358d:	48 09 d0             	or     rax,rdx
ffffffff80003590:	48 f7 d8             	neg    rax
ffffffff80003593:	48 89 c2             	mov    rdx,rax
ffffffff80003596:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000359a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff8000359e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800035a2:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
ffffffff800035a6:	eb 68                	jmp    ffffffff80003610 <PciGetBar(PciBar*, int, int, int, int)+0x121>
ffffffff800035a8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800035ab:	83 e0 01             	and    eax,0x1
ffffffff800035ae:	85 c0                	test   eax,eax
ffffffff800035b0:	74 32                	je     ffffffff800035e4 <PciGetBar(PciBar*, int, int, int, int)+0xf5>
ffffffff800035b2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800035b5:	0f b7 c0             	movzx  eax,ax
ffffffff800035b8:	25 fc ff 00 00       	and    eax,0xfffc
ffffffff800035bd:	48 89 c2             	mov    rdx,rax
ffffffff800035c0:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800035c4:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff800035c7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800035ca:	83 e0 fc             	and    eax,0xfffffffc
ffffffff800035cd:	f7 d8                	neg    eax
ffffffff800035cf:	0f b7 d0             	movzx  edx,ax
ffffffff800035d2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800035d6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff800035da:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800035de:	c6 40 10 01          	mov    BYTE PTR [rax+0x10],0x1
ffffffff800035e2:	eb 2c                	jmp    ffffffff80003610 <PciGetBar(PciBar*, int, int, int, int)+0x121>
ffffffff800035e4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800035e7:	89 c0                	mov    eax,eax
ffffffff800035e9:	83 e0 f0             	and    eax,0xfffffff0
ffffffff800035ec:	48 89 c2             	mov    rdx,rax
ffffffff800035ef:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800035f3:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff800035f6:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800035f9:	83 e0 f0             	and    eax,0xfffffff0
ffffffff800035fc:	f7 d8                	neg    eax
ffffffff800035fe:	89 c2                	mov    edx,eax
ffffffff80003600:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003604:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80003608:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000360c:	c6 40 10 00          	mov    BYTE PTR [rax+0x10],0x0
ffffffff80003610:	90                   	nop
ffffffff80003611:	c9                   	leave  
ffffffff80003612:	c3                   	ret    

ffffffff80003613 <GfxInitMemManager()>:
ffffffff80003613:	f3 0f 1e fa          	endbr64 
ffffffff80003617:	55                   	push   rbp
ffffffff80003618:	48 89 e5             	mov    rbp,rsp
ffffffff8000361b:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000361f:	48 c7 05 b6 7b 00 00 	mov    QWORD PTR [rip+0x7bb6],0x0        # ffffffff8000b1e0 <mem_manager>
ffffffff80003626:	00 00 00 00 
ffffffff8000362a:	48 c7 05 bb 7b 00 00 	mov    QWORD PTR [rip+0x7bbb],0x0        # ffffffff8000b1f0 <mem_manager+0x10>
ffffffff80003631:	00 00 00 00 
ffffffff80003635:	8b 05 75 7b 00 00    	mov    eax,DWORD PTR [rip+0x7b75]        # ffffffff8000b1b0 <stolenMemSize>
ffffffff8000363b:	89 c0                	mov    eax,eax
ffffffff8000363d:	48 89 05 a4 7b 00 00 	mov    QWORD PTR [rip+0x7ba4],rax        # ffffffff8000b1e8 <mem_manager+0x8>
ffffffff80003644:	8b 05 66 7b 00 00    	mov    eax,DWORD PTR [rip+0x7b66]        # ffffffff8000b1b0 <stolenMemSize>
ffffffff8000364a:	89 c0                	mov    eax,eax
ffffffff8000364c:	48 89 05 a5 7b 00 00 	mov    QWORD PTR [rip+0x7ba5],rax        # ffffffff8000b1f8 <mem_manager+0x18>
ffffffff80003653:	48 8b 05 9e 7b 00 00 	mov    rax,QWORD PTR [rip+0x7b9e]        # ffffffff8000b1f8 <mem_manager+0x18>
ffffffff8000365a:	48 89 05 a7 7b 00 00 	mov    QWORD PTR [rip+0x7ba7],rax        # ffffffff8000b208 <mem_manager+0x28>
ffffffff80003661:	8b 05 59 7b 00 00    	mov    eax,DWORD PTR [rip+0x7b59]        # ffffffff8000b1c0 <gttMappableEntries>
ffffffff80003667:	c1 e0 0c             	shl    eax,0xc
ffffffff8000366a:	89 c0                	mov    eax,eax
ffffffff8000366c:	48 89 05 8d 7b 00 00 	mov    QWORD PTR [rip+0x7b8d],rax        # ffffffff8000b200 <mem_manager+0x20>
ffffffff80003673:	8b 05 47 7b 00 00    	mov    eax,DWORD PTR [rip+0x7b47]        # ffffffff8000b1c0 <gttMappableEntries>
ffffffff80003679:	c1 e0 0c             	shl    eax,0xc
ffffffff8000367c:	89 c0                	mov    eax,eax
ffffffff8000367e:	48 89 05 8b 7b 00 00 	mov    QWORD PTR [rip+0x7b8b],rax        # ffffffff8000b210 <mem_manager+0x30>
ffffffff80003685:	48 8b 05 84 7b 00 00 	mov    rax,QWORD PTR [rip+0x7b84]        # ffffffff8000b210 <mem_manager+0x30>
ffffffff8000368c:	48 89 05 8d 7b 00 00 	mov    QWORD PTR [rip+0x7b8d],rax        # ffffffff8000b220 <mem_manager+0x40>
ffffffff80003693:	8b 05 27 7b 00 00    	mov    eax,DWORD PTR [rip+0x7b27]        # ffffffff8000b1c0 <gttMappableEntries>
ffffffff80003699:	89 c0                	mov    eax,eax
ffffffff8000369b:	48 c1 e0 0c          	shl    rax,0xc
ffffffff8000369f:	48 89 05 72 7b 00 00 	mov    QWORD PTR [rip+0x7b72],rax        # ffffffff8000b218 <mem_manager+0x38>
ffffffff800036a6:	c6 45 ff 00          	mov    BYTE PTR [rbp-0x1],0x0
ffffffff800036aa:	eb 23                	jmp    ffffffff800036cf <GfxInitMemManager()+0xbc>
ffffffff800036ac:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff800036b0:	48 05 00 00 02 00    	add    rax,0x20000
ffffffff800036b6:	c1 e0 03             	shl    eax,0x3
ffffffff800036b9:	be 00 00 00 00       	mov    esi,0x0
ffffffff800036be:	89 c7                	mov    edi,eax
ffffffff800036c0:	e8 0d 07 00 00       	call   ffffffff80003dd2 <WriteIgpu64(unsigned int, unsigned long)>
ffffffff800036c5:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff800036c9:	83 c0 01             	add    eax,0x1
ffffffff800036cc:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff800036cf:	80 7d ff 0f          	cmp    BYTE PTR [rbp-0x1],0xf
ffffffff800036d3:	76 d7                	jbe    ffffffff800036ac <GfxInitMemManager()+0x99>
ffffffff800036d5:	48 8b 05 8c 70 00 00 	mov    rax,QWORD PTR [rip+0x708c]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff800036dc:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff800036e0:	48 8b 05 e1 7a 00 00 	mov    rax,QWORD PTR [rip+0x7ae1]        # ffffffff8000b1c8 <arpertureBar>
ffffffff800036e7:	48 01 d0             	add    rax,rdx
ffffffff800036ea:	48 05 00 08 40 00    	add    rax,0x400800
ffffffff800036f0:	48 89 05 31 7b 00 00 	mov    QWORD PTR [rip+0x7b31],rax        # ffffffff8000b228 <mem_manager+0x48>
ffffffff800036f7:	48 8b 05 2a 7b 00 00 	mov    rax,QWORD PTR [rip+0x7b2a]        # ffffffff8000b228 <mem_manager+0x48>
ffffffff800036fe:	48 05 00 40 00 00    	add    rax,0x4000
ffffffff80003704:	48 89 05 25 7b 00 00 	mov    QWORD PTR [rip+0x7b25],rax        # ffffffff8000b230 <mem_manager+0x50>
ffffffff8000370b:	90                   	nop
ffffffff8000370c:	c9                   	leave  
ffffffff8000370d:	c3                   	ret    

ffffffff8000370e <GfxAlloc(GfxObject*, unsigned int, unsigned int)>:
ffffffff8000370e:	f3 0f 1e fa          	endbr64 
ffffffff80003712:	55                   	push   rbp
ffffffff80003713:	48 89 e5             	mov    rbp,rsp
ffffffff80003716:	48 83 ec 20          	sub    rsp,0x20
ffffffff8000371a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000371e:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80003721:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80003724:	48 8b 05 05 7b 00 00 	mov    rax,QWORD PTR [rip+0x7b05]        # ffffffff8000b230 <mem_manager+0x50>
ffffffff8000372b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff8000372f:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff80003732:	83 e8 01             	sub    eax,0x1
ffffffff80003735:	89 c2                	mov    edx,eax
ffffffff80003737:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000373b:	48 21 d0             	and    rax,rdx
ffffffff8000373e:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80003742:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff80003747:	74 0b                	je     ffffffff80003754 <GfxAlloc(GfxObject*, unsigned int, unsigned int)+0x46>
ffffffff80003749:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000374c:	48 2b 45 f0          	sub    rax,QWORD PTR [rbp-0x10]
ffffffff80003750:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
ffffffff80003754:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
ffffffff80003757:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000375b:	48 01 d0             	add    rax,rdx
ffffffff8000375e:	48 89 05 cb 7a 00 00 	mov    QWORD PTR [rip+0x7acb],rax        # ffffffff8000b230 <mem_manager+0x50>
ffffffff80003765:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003769:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff8000376d:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff80003770:	48 8b 15 b1 7a 00 00 	mov    rdx,QWORD PTR [rip+0x7ab1]        # ffffffff8000b228 <mem_manager+0x48>
ffffffff80003777:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000377b:	48 29 d0             	sub    rax,rdx
ffffffff8000377e:	48 89 c2             	mov    rdx,rax
ffffffff80003781:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003785:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff80003789:	b8 01 00 00 00       	mov    eax,0x1
ffffffff8000378e:	c9                   	leave  
ffffffff8000378f:	c3                   	ret    

ffffffff80003790 <EnterForceWake()>:
ffffffff80003790:	f3 0f 1e fa          	endbr64 
ffffffff80003794:	55                   	push   rbp
ffffffff80003795:	48 89 e5             	mov    rbp,rsp
ffffffff80003798:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000379c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff800037a3:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff800037a7:	bf 40 00 13 00       	mov    edi,0x130040
ffffffff800037ac:	e8 70 fc ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff800037b1:	83 e0 01             	and    eax,0x1
ffffffff800037b4:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800037b7:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
ffffffff800037bb:	74 06                	je     ffffffff800037c3 <EnterForceWake()+0x33>
ffffffff800037bd:	83 7d fc 09          	cmp    DWORD PTR [rbp-0x4],0x9
ffffffff800037c1:	7e e0                	jle    ffffffff800037a3 <EnterForceWake()+0x13>
ffffffff800037c3:	be 01 00 01 00       	mov    esi,0x10001
ffffffff800037c8:	bf 88 a1 00 00       	mov    edi,0xa188
ffffffff800037cd:	e8 d0 05 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff800037d2:	bf 80 a1 00 00       	mov    edi,0xa180
ffffffff800037d7:	e8 45 fc ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff800037dc:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff800037e0:	bf 40 00 13 00       	mov    edi,0x130040
ffffffff800037e5:	e8 37 fc ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff800037ea:	83 e0 01             	and    eax,0x1
ffffffff800037ed:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800037f0:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff800037f3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800037f6:	89 c6                	mov    esi,eax
ffffffff800037f8:	48 c7 c7 c8 8c 00 80 	mov    rdi,0xffffffff80008cc8
ffffffff800037ff:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003804:	e8 40 0d 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003809:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
ffffffff8000380d:	74 cd                	je     ffffffff800037dc <EnterForceWake()+0x4c>
ffffffff8000380f:	90                   	nop
ffffffff80003810:	90                   	nop
ffffffff80003811:	c9                   	leave  
ffffffff80003812:	c3                   	ret    

ffffffff80003813 <ExitForceWake()>:
ffffffff80003813:	f3 0f 1e fa          	endbr64 
ffffffff80003817:	55                   	push   rbp
ffffffff80003818:	48 89 e5             	mov    rbp,rsp
ffffffff8000381b:	be 00 00 01 00       	mov    esi,0x10000
ffffffff80003820:	bf 88 a1 00 00       	mov    edi,0xa188
ffffffff80003825:	e8 78 05 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff8000382a:	bf 80 a1 00 00       	mov    edi,0xa180
ffffffff8000382f:	e8 ed fb ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff80003834:	90                   	nop
ffffffff80003835:	5d                   	pop    rbp
ffffffff80003836:	c3                   	ret    

ffffffff80003837 <IntelGpu::Initialize()>:
ffffffff80003837:	f3 0f 1e fa          	endbr64 
ffffffff8000383b:	55                   	push   rbp
ffffffff8000383c:	48 89 e5             	mov    rbp,rsp
ffffffff8000383f:	48 83 c4 80          	add    rsp,0xffffffffffffff80
ffffffff80003843:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80003848:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000384d:	be 02 00 00 00       	mov    esi,0x2
ffffffff80003852:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80003857:	e8 fc f9 ff ff       	call   ffffffff80003258 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff8000385c:	0f b7 c0             	movzx  eax,ax
ffffffff8000385f:	89 c6                	mov    esi,eax
ffffffff80003861:	48 c7 c7 fc 8c 00 80 	mov    rdi,0xffffffff80008cfc
ffffffff80003868:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000386d:	e8 d7 0c 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003872:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80003877:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000387c:	be 02 00 00 00       	mov    esi,0x2
ffffffff80003881:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80003886:	e8 cd f9 ff ff       	call   ffffffff80003258 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff8000388b:	83 c8 04             	or     eax,0x4
ffffffff8000388e:	0f b7 c0             	movzx  eax,ax
ffffffff80003891:	41 89 c0             	mov    r8d,eax
ffffffff80003894:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff80003899:	ba 00 00 00 00       	mov    edx,0x0
ffffffff8000389e:	be 02 00 00 00       	mov    esi,0x2
ffffffff800038a3:	bf 00 00 00 00       	mov    edi,0x0
ffffffff800038a8:	e8 b2 fa ff ff       	call   ffffffff8000335f <WritePciRegister16(int, int, int, unsigned char, unsigned short)>
ffffffff800038ad:	b9 04 00 00 00       	mov    ecx,0x4
ffffffff800038b2:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800038b7:	be 02 00 00 00       	mov    esi,0x2
ffffffff800038bc:	bf 00 00 00 00       	mov    edi,0x0
ffffffff800038c1:	e8 92 f9 ff ff       	call   ffffffff80003258 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff800038c6:	0f b7 c0             	movzx  eax,ax
ffffffff800038c9:	89 c6                	mov    esi,eax
ffffffff800038cb:	48 c7 c7 fc 8c 00 80 	mov    rdi,0xffffffff80008cfc
ffffffff800038d2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800038d7:	e8 6d 0c 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800038dc:	b9 10 00 00 00       	mov    ecx,0x10
ffffffff800038e1:	ba 00 00 00 00       	mov    edx,0x0
ffffffff800038e6:	be 02 00 00 00       	mov    esi,0x2
ffffffff800038eb:	bf 00 00 00 00       	mov    edi,0x0
ffffffff800038f0:	e8 0d fa ff ff       	call   ffffffff80003302 <ReadPciRegister64(int, int, int, unsigned char)>
ffffffff800038f5:	48 83 e0 f8          	and    rax,0xfffffffffffffff8
ffffffff800038f9:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800038fd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80003904:	eb 3e                	jmp    ffffffff80003944 <IntelGpu::Initialize()+0x10d>
ffffffff80003906:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003909:	c1 e0 0c             	shl    eax,0xc
ffffffff8000390c:	48 63 d0             	movsxd rdx,eax
ffffffff8000390f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80003913:	48 01 c2             	add    rdx,rax
ffffffff80003916:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003919:	c1 e0 0c             	shl    eax,0xc
ffffffff8000391c:	48 98                	cdqe   
ffffffff8000391e:	48 b9 00 00 00 00 00 	movabs rcx,0xffffc00000000000
ffffffff80003925:	c0 ff ff 
ffffffff80003928:	48 8d 34 08          	lea    rsi,[rax+rcx*1]
ffffffff8000392c:	48 8b 05 3d 77 00 00 	mov    rax,QWORD PTR [rip+0x773d]        # ffffffff8000b070 <VirtualMemory::kernelDir>
ffffffff80003933:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80003938:	48 89 c7             	mov    rdi,rax
ffffffff8000393b:	e8 b4 da ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80003940:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80003944:	81 7d fc ff 03 00 00 	cmp    DWORD PTR [rbp-0x4],0x3ff
ffffffff8000394b:	7e b9                	jle    ffffffff80003906 <IntelGpu::Initialize()+0xcf>
ffffffff8000394d:	b9 10 00 00 00       	mov    ecx,0x10
ffffffff80003952:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003957:	be 02 00 00 00       	mov    esi,0x2
ffffffff8000395c:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80003961:	e8 9c f9 ff ff       	call   ffffffff80003302 <ReadPciRegister64(int, int, int, unsigned char)>
ffffffff80003966:	48 89 c6             	mov    rsi,rax
ffffffff80003969:	48 c7 c7 18 8d 00 80 	mov    rdi,0xffffffff80008d18
ffffffff80003970:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003975:	e8 cf 0b 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff8000397a:	48 b8 00 00 00 00 00 	movabs rax,0xffffc00000000000
ffffffff80003981:	c0 ff ff 
ffffffff80003984:	48 89 05 15 78 00 00 	mov    QWORD PTR [rip+0x7815],rax        # ffffffff8000b1a0 <iobase>
ffffffff8000398b:	48 b8 00 00 20 00 00 	movabs rax,0xffffc00000200000
ffffffff80003992:	c0 ff ff 
ffffffff80003995:	48 89 05 0c 78 00 00 	mov    QWORD PTR [rip+0x780c],rax        # ffffffff8000b1a8 <gttAddr>
ffffffff8000399c:	bf 80 11 0e 00       	mov    edi,0xe1180
ffffffff800039a1:	e8 7b fa ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff800039a6:	83 e0 02             	and    eax,0x2
ffffffff800039a9:	85 c0                	test   eax,eax
ffffffff800039ab:	0f 95 c0             	setne  al
ffffffff800039ae:	88 45 ef             	mov    BYTE PTR [rbp-0x11],al
ffffffff800039b1:	0f b6 45 ef          	movzx  eax,BYTE PTR [rbp-0x11]
ffffffff800039b5:	83 f0 01             	xor    eax,0x1
ffffffff800039b8:	84 c0                	test   al,al
ffffffff800039ba:	74 16                	je     ffffffff800039d2 <IntelGpu::Initialize()+0x19b>
ffffffff800039bc:	48 c7 c7 3e 8d 00 80 	mov    rdi,0xffffffff80008d3e
ffffffff800039c3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800039c8:	e8 7c 0b 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800039cd:	e9 89 03 00 00       	jmp    ffffffff80003d5b <IntelGpu::Initialize()+0x524>
ffffffff800039d2:	48 8d 45 ac          	lea    rax,[rbp-0x54]
ffffffff800039d6:	48 89 c7             	mov    rdi,rax
ffffffff800039d9:	e8 28 04 00 00       	call   ffffffff80003e06 <DisplayInfo::DisplayInfo()>
ffffffff800039de:	c7 45 ac 01 00 00 00 	mov    DWORD PTR [rbp-0x54],0x1
ffffffff800039e5:	c6 45 b0 01          	mov    BYTE PTR [rbp-0x50],0x1
ffffffff800039e9:	48 c7 c7 5b 8d 00 80 	mov    rdi,0xffffffff80008d5b
ffffffff800039f0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800039f5:	e8 4f 0b 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800039fa:	bf 04 72 0c 00       	mov    edi,0xc7204
ffffffff800039ff:	e8 1d fa ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff80003a04:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff80003a07:	83 4d e8 04          	or     DWORD PTR [rbp-0x18],0x4
ffffffff80003a0b:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff80003a0e:	89 c6                	mov    esi,eax
ffffffff80003a10:	bf 04 72 0c 00       	mov    edi,0xc7204
ffffffff80003a15:	e8 88 03 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003a1a:	c6 45 b1 01          	mov    BYTE PTR [rbp-0x4f],0x1
ffffffff80003a1e:	48 c7 c7 6f 8d 00 80 	mov    rdi,0xffffffff80008d6f
ffffffff80003a25:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003a2a:	e8 1a 0b 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003a2f:	bf 50 82 04 00       	mov    edi,0x48250
ffffffff80003a34:	e8 e8 f9 ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff80003a39:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
ffffffff80003a3c:	81 4d e8 00 00 00 80 	or     DWORD PTR [rbp-0x18],0x80000000
ffffffff80003a43:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff80003a46:	c1 e8 1d             	shr    eax,0x1d
ffffffff80003a49:	83 e0 01             	and    eax,0x1
ffffffff80003a4c:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
ffffffff80003a4f:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
ffffffff80003a52:	89 c6                	mov    esi,eax
ffffffff80003a54:	bf 50 82 04 00       	mov    edi,0x48250
ffffffff80003a59:	e8 44 03 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003a5e:	48 c7 c7 82 8d 00 80 	mov    rdi,0xffffffff80008d82
ffffffff80003a65:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003a6a:	e8 da 0a 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003a6f:	bf 54 82 0c 00       	mov    edi,0xc8254
ffffffff80003a74:	e8 a8 f9 ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff80003a79:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff80003a7c:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003a7f:	c1 e8 10             	shr    eax,0x10
ffffffff80003a82:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
ffffffff80003a85:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
ffffffff80003a88:	d1 e8                	shr    eax,1
ffffffff80003a8a:	89 c6                	mov    esi,eax
ffffffff80003a8c:	bf 54 82 04 00       	mov    edi,0x48254
ffffffff80003a91:	e8 0c 03 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003a96:	48 c7 c7 8f 8d 00 80 	mov    rdi,0xffffffff80008d8f
ffffffff80003a9d:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003aa2:	e8 a2 0a 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003aa7:	b9 50 00 00 00       	mov    ecx,0x50
ffffffff80003aac:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003ab1:	be 02 00 00 00       	mov    esi,0x2
ffffffff80003ab6:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80003abb:	e8 98 f7 ff ff       	call   ffffffff80003258 <ReadPciRegister16(int, int, int, unsigned char)>
ffffffff80003ac0:	66 89 45 e2          	mov    WORD PTR [rbp-0x1e],ax
ffffffff80003ac4:	b9 5c 00 00 00       	mov    ecx,0x5c
ffffffff80003ac9:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003ace:	be 02 00 00 00       	mov    esi,0x2
ffffffff80003ad3:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80003ad8:	e8 d0 f7 ff ff       	call   ffffffff800032ad <ReadPciRegister32(int, int, int, unsigned char)>
ffffffff80003add:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffffffff80003ae0:	0f b7 45 e2          	movzx  eax,WORD PTR [rbp-0x1e]
ffffffff80003ae4:	66 c1 e8 03          	shr    ax,0x3
ffffffff80003ae8:	0f b7 c0             	movzx  eax,ax
ffffffff80003aeb:	83 e0 1f             	and    eax,0x1f
ffffffff80003aee:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff80003af1:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff80003af4:	8b 04 85 80 8c 00 80 	mov    eax,DWORD PTR [rax*4-0x7fff7380]
ffffffff80003afb:	89 05 af 76 00 00    	mov    DWORD PTR [rip+0x76af],eax        # ffffffff8000b1b0 <stolenMemSize>
ffffffff80003b01:	0f b7 45 e2          	movzx  eax,WORD PTR [rbp-0x1e]
ffffffff80003b05:	66 c1 e8 08          	shr    ax,0x8
ffffffff80003b09:	0f b7 c0             	movzx  eax,ax
ffffffff80003b0c:	83 e0 03             	and    eax,0x3
ffffffff80003b0f:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffffffff80003b12:	83 7d d4 02          	cmp    DWORD PTR [rbp-0x2c],0x2
ffffffff80003b16:	74 2c                	je     ffffffff80003b44 <IntelGpu::Initialize()+0x30d>
ffffffff80003b18:	83 7d d4 02          	cmp    DWORD PTR [rbp-0x2c],0x2
ffffffff80003b1c:	77 32                	ja     ffffffff80003b50 <IntelGpu::Initialize()+0x319>
ffffffff80003b1e:	83 7d d4 00          	cmp    DWORD PTR [rbp-0x2c],0x0
ffffffff80003b22:	74 08                	je     ffffffff80003b2c <IntelGpu::Initialize()+0x2f5>
ffffffff80003b24:	83 7d d4 01          	cmp    DWORD PTR [rbp-0x2c],0x1
ffffffff80003b28:	74 0e                	je     ffffffff80003b38 <IntelGpu::Initialize()+0x301>
ffffffff80003b2a:	eb 24                	jmp    ffffffff80003b50 <IntelGpu::Initialize()+0x319>
ffffffff80003b2c:	c7 05 82 76 00 00 00 	mov    DWORD PTR [rip+0x7682],0x0        # ffffffff8000b1b8 <gttMemSize>
ffffffff80003b33:	00 00 00 
ffffffff80003b36:	eb 23                	jmp    ffffffff80003b5b <IntelGpu::Initialize()+0x324>
ffffffff80003b38:	c7 05 76 76 00 00 00 	mov    DWORD PTR [rip+0x7676],0x100000        # ffffffff8000b1b8 <gttMemSize>
ffffffff80003b3f:	00 10 00 
ffffffff80003b42:	eb 17                	jmp    ffffffff80003b5b <IntelGpu::Initialize()+0x324>
ffffffff80003b44:	c7 05 6a 76 00 00 00 	mov    DWORD PTR [rip+0x766a],0x200000        # ffffffff8000b1b8 <gttMemSize>
ffffffff80003b4b:	00 20 00 
ffffffff80003b4e:	eb 0b                	jmp    ffffffff80003b5b <IntelGpu::Initialize()+0x324>
ffffffff80003b50:	c7 05 5e 76 00 00 ff 	mov    DWORD PTR [rip+0x765e],0xffffffff        # ffffffff8000b1b8 <gttMemSize>
ffffffff80003b57:	ff ff ff 
ffffffff80003b5a:	90                   	nop
ffffffff80003b5b:	48 8d 45 90          	lea    rax,[rbp-0x70]
ffffffff80003b5f:	41 b8 02 00 00 00    	mov    r8d,0x2
ffffffff80003b65:	b9 00 00 00 00       	mov    ecx,0x0
ffffffff80003b6a:	ba 02 00 00 00       	mov    edx,0x2
ffffffff80003b6f:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003b74:	48 89 c7             	mov    rdi,rax
ffffffff80003b77:	e8 73 f9 ff ff       	call   ffffffff800034ef <PciGetBar(PciBar*, int, int, int, int)>
ffffffff80003b7c:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80003b80:	48 89 05 41 76 00 00 	mov    QWORD PTR [rip+0x7641],rax        # ffffffff8000b1c8 <arpertureBar>
ffffffff80003b87:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80003b8b:	48 c1 e8 14          	shr    rax,0x14
ffffffff80003b8f:	48 89 c2             	mov    rdx,rax
ffffffff80003b92:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80003b96:	48 89 c6             	mov    rsi,rax
ffffffff80003b99:	48 c7 c7 a9 8d 00 80 	mov    rdi,0xffffffff80008da9
ffffffff80003ba0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003ba5:	e8 9f 09 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003baa:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff80003bad:	25 00 00 f0 ff       	and    eax,0xfff00000
ffffffff80003bb2:	89 05 fc 75 00 00    	mov    DWORD PTR [rip+0x75fc],eax        # ffffffff8000b1b4 <stolenMemBase>
ffffffff80003bb8:	8b 05 fa 75 00 00    	mov    eax,DWORD PTR [rip+0x75fa]        # ffffffff8000b1b8 <gttMemSize>
ffffffff80003bbe:	c1 e8 02             	shr    eax,0x2
ffffffff80003bc1:	89 05 f5 75 00 00    	mov    DWORD PTR [rip+0x75f5],eax        # ffffffff8000b1bc <gttEntryCount>
ffffffff80003bc7:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
ffffffff80003bcb:	48 c1 e8 0c          	shr    rax,0xc
ffffffff80003bcf:	89 05 eb 75 00 00    	mov    DWORD PTR [rip+0x75eb],eax        # ffffffff8000b1c0 <gttMappableEntries>
ffffffff80003bd5:	48 c7 c7 be 8d 00 80 	mov    rdi,0xffffffff80008dbe
ffffffff80003bdc:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003be1:	e8 63 09 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003be6:	8b 05 c8 75 00 00    	mov    eax,DWORD PTR [rip+0x75c8]        # ffffffff8000b1b4 <stolenMemBase>
ffffffff80003bec:	89 c6                	mov    esi,eax
ffffffff80003bee:	48 c7 c7 cb 8d 00 80 	mov    rdi,0xffffffff80008dcb
ffffffff80003bf5:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003bfa:	e8 4a 09 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003bff:	8b 05 ab 75 00 00    	mov    eax,DWORD PTR [rip+0x75ab]        # ffffffff8000b1b0 <stolenMemSize>
ffffffff80003c05:	89 c6                	mov    esi,eax
ffffffff80003c07:	48 c7 c7 e8 8d 00 80 	mov    rdi,0xffffffff80008de8
ffffffff80003c0e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003c13:	e8 31 09 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003c18:	8b 05 9a 75 00 00    	mov    eax,DWORD PTR [rip+0x759a]        # ffffffff8000b1b8 <gttMemSize>
ffffffff80003c1e:	89 c6                	mov    esi,eax
ffffffff80003c20:	48 c7 c7 05 8e 00 80 	mov    rdi,0xffffffff80008e05
ffffffff80003c27:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003c2c:	e8 18 09 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003c31:	8b 05 85 75 00 00    	mov    eax,DWORD PTR [rip+0x7585]        # ffffffff8000b1bc <gttEntryCount>
ffffffff80003c37:	89 c6                	mov    esi,eax
ffffffff80003c39:	48 c7 c7 22 8e 00 80 	mov    rdi,0xffffffff80008e22
ffffffff80003c40:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003c45:	e8 ff 08 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003c4a:	8b 05 70 75 00 00    	mov    eax,DWORD PTR [rip+0x7570]        # ffffffff8000b1c0 <gttMappableEntries>
ffffffff80003c50:	89 c6                	mov    esi,eax
ffffffff80003c52:	48 c7 c7 3f 8e 00 80 	mov    rdi,0xffffffff80008e3f
ffffffff80003c59:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003c5e:	e8 e6 08 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003c63:	e8 ab f9 ff ff       	call   ffffffff80003613 <GfxInitMemManager()>
ffffffff80003c68:	48 8d 45 80          	lea    rax,[rbp-0x80]
ffffffff80003c6c:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80003c71:	be 00 10 00 00       	mov    esi,0x1000
ffffffff80003c76:	48 89 c7             	mov    rdi,rax
ffffffff80003c79:	e8 90 fa ff ff       	call   ffffffff8000370e <GfxAlloc(GfxObject*, unsigned int, unsigned int)>
ffffffff80003c7e:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80003c82:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80003c86:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80003c8a:	ba 00 10 00 00       	mov    edx,0x1000
ffffffff80003c8f:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003c94:	48 89 c7             	mov    rdi,rax
ffffffff80003c97:	e8 33 f5 ff ff       	call   ffffffff800031cf <memset(void*, int, unsigned long)>
ffffffff80003c9c:	e8 ef fa ff ff       	call   ffffffff80003790 <EnterForceWake()>
ffffffff80003ca1:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003ca6:	bf 30 20 00 00       	mov    edi,0x2030
ffffffff80003cab:	e8 f2 00 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003cb0:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003cb5:	bf 34 20 00 00       	mov    edi,0x2034
ffffffff80003cba:	e8 e3 00 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003cbf:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80003cc3:	89 c6                	mov    esi,eax
ffffffff80003cc5:	bf 38 20 00 00       	mov    edi,0x2038
ffffffff80003cca:	e8 d3 00 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003ccf:	be 01 00 00 00       	mov    esi,0x1
ffffffff80003cd4:	bf 3c 20 00 00       	mov    edi,0x203c
ffffffff80003cd9:	e8 c4 00 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003cde:	e8 30 fb ff ff       	call   ffffffff80003813 <ExitForceWake()>
ffffffff80003ce3:	48 8b 45 80          	mov    rax,QWORD PTR [rbp-0x80]
ffffffff80003ce7:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80003ceb:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80003cef:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffffffff80003cf3:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80003cf7:	c7 00 ef be 40 00    	mov    DWORD PTR [rax],0x40beef
ffffffff80003cfd:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80003d01:	48 8d 50 04          	lea    rdx,[rax+0x4]
ffffffff80003d05:	48 89 55 c0          	mov    QWORD PTR [rbp-0x40],rdx
ffffffff80003d09:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffffffff80003d0f:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80003d13:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
ffffffff80003d17:	48 8b 55 80          	mov    rdx,QWORD PTR [rbp-0x80]
ffffffff80003d1b:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80003d1f:	48 29 d0             	sub    rax,rdx
ffffffff80003d22:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax
ffffffff80003d25:	e8 66 fa ff ff       	call   ffffffff80003790 <EnterForceWake()>
ffffffff80003d2a:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
ffffffff80003d2d:	89 c6                	mov    esi,eax
ffffffff80003d2f:	bf 30 20 00 00       	mov    edi,0x2030
ffffffff80003d34:	e8 69 00 00 00       	call   ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>
ffffffff80003d39:	e8 d5 fa ff ff       	call   ffffffff80003813 <ExitForceWake()>
ffffffff80003d3e:	bf 94 20 00 00       	mov    edi,0x2094
ffffffff80003d43:	e8 d9 f6 ff ff       	call   ffffffff80003421 <ReadIgpu32(unsigned int)>
ffffffff80003d48:	89 c6                	mov    esi,eax
ffffffff80003d4a:	48 c7 c7 5c 8e 00 80 	mov    rdi,0xffffffff80008e5c
ffffffff80003d51:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80003d56:	e8 ee 07 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80003d5b:	c9                   	leave  
ffffffff80003d5c:	c3                   	ret    

ffffffff80003d5d <Utils::outw(unsigned short, unsigned short)>:
ffffffff80003d5d:	f3 0f 1e fa          	endbr64 
ffffffff80003d61:	55                   	push   rbp
ffffffff80003d62:	48 89 e5             	mov    rbp,rsp
ffffffff80003d65:	48 83 ec 08          	sub    rsp,0x8
ffffffff80003d69:	89 fa                	mov    edx,edi
ffffffff80003d6b:	89 f0                	mov    eax,esi
ffffffff80003d6d:	66 89 55 fc          	mov    WORD PTR [rbp-0x4],dx
ffffffff80003d71:	66 89 45 f8          	mov    WORD PTR [rbp-0x8],ax
ffffffff80003d75:	0f b7 45 f8          	movzx  eax,WORD PTR [rbp-0x8]
ffffffff80003d79:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80003d7d:	66 ef                	out    dx,ax
ffffffff80003d7f:	90                   	nop
ffffffff80003d80:	c9                   	leave  
ffffffff80003d81:	c3                   	ret    

ffffffff80003d82 <Utils::outd(unsigned short, unsigned int)>:
ffffffff80003d82:	f3 0f 1e fa          	endbr64 
ffffffff80003d86:	55                   	push   rbp
ffffffff80003d87:	48 89 e5             	mov    rbp,rsp
ffffffff80003d8a:	48 83 ec 08          	sub    rsp,0x8
ffffffff80003d8e:	89 f8                	mov    eax,edi
ffffffff80003d90:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80003d93:	66 89 45 fc          	mov    WORD PTR [rbp-0x4],ax
ffffffff80003d97:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80003d9a:	0f b7 55 fc          	movzx  edx,WORD PTR [rbp-0x4]
ffffffff80003d9e:	ef                   	out    dx,eax
ffffffff80003d9f:	90                   	nop
ffffffff80003da0:	c9                   	leave  
ffffffff80003da1:	c3                   	ret    

ffffffff80003da2 <WriteIgpu32(unsigned int, unsigned int)>:
ffffffff80003da2:	f3 0f 1e fa          	endbr64 
ffffffff80003da6:	55                   	push   rbp
ffffffff80003da7:	48 89 e5             	mov    rbp,rsp
ffffffff80003daa:	48 83 ec 08          	sub    rsp,0x8
ffffffff80003dae:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80003db1:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80003db4:	48 8b 15 e5 73 00 00 	mov    rdx,QWORD PTR [rip+0x73e5]        # ffffffff8000b1a0 <iobase>
ffffffff80003dbb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003dbe:	c1 e8 02             	shr    eax,0x2
ffffffff80003dc1:	89 c0                	mov    eax,eax
ffffffff80003dc3:	48 c1 e0 02          	shl    rax,0x2
ffffffff80003dc7:	48 01 c2             	add    rdx,rax
ffffffff80003dca:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80003dcd:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80003dcf:	90                   	nop
ffffffff80003dd0:	c9                   	leave  
ffffffff80003dd1:	c3                   	ret    

ffffffff80003dd2 <WriteIgpu64(unsigned int, unsigned long)>:
ffffffff80003dd2:	f3 0f 1e fa          	endbr64 
ffffffff80003dd6:	55                   	push   rbp
ffffffff80003dd7:	48 89 e5             	mov    rbp,rsp
ffffffff80003dda:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003dde:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80003de1:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80003de5:	48 8b 15 b4 73 00 00 	mov    rdx,QWORD PTR [rip+0x73b4]        # ffffffff8000b1a0 <iobase>
ffffffff80003dec:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003def:	c1 e8 02             	shr    eax,0x2
ffffffff80003df2:	89 c0                	mov    eax,eax
ffffffff80003df4:	48 c1 e0 02          	shl    rax,0x2
ffffffff80003df8:	48 01 c2             	add    rdx,rax
ffffffff80003dfb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80003dff:	48 89 02             	mov    QWORD PTR [rdx],rax
ffffffff80003e02:	90                   	nop
ffffffff80003e03:	c9                   	leave  
ffffffff80003e04:	c3                   	ret    
ffffffff80003e05:	90                   	nop

ffffffff80003e06 <DisplayInfo::DisplayInfo()>:
ffffffff80003e06:	f3 0f 1e fa          	endbr64 
ffffffff80003e0a:	55                   	push   rbp
ffffffff80003e0b:	48 89 e5             	mov    rbp,rsp
ffffffff80003e0e:	48 83 ec 08          	sub    rsp,0x8
ffffffff80003e12:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80003e16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003e1a:	c6 40 04 00          	mov    BYTE PTR [rax+0x4],0x0
ffffffff80003e1e:	90                   	nop
ffffffff80003e1f:	c9                   	leave  
ffffffff80003e20:	c3                   	ret    

ffffffff80003e21 <InitCom0()>:
ffffffff80003e21:	f3 0f 1e fa          	endbr64 
ffffffff80003e25:	55                   	push   rbp
ffffffff80003e26:	48 89 e5             	mov    rbp,rsp
ffffffff80003e29:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003e2e:	bf f9 03 00 00       	mov    edi,0x3f9
ffffffff80003e33:	e8 f0 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003e38:	be 80 00 00 00       	mov    esi,0x80
ffffffff80003e3d:	bf fb 03 00 00       	mov    edi,0x3fb
ffffffff80003e42:	e8 e1 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003e47:	be 03 00 00 00       	mov    esi,0x3
ffffffff80003e4c:	bf f8 03 00 00       	mov    edi,0x3f8
ffffffff80003e51:	e8 d2 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003e56:	be 00 00 00 00       	mov    esi,0x0
ffffffff80003e5b:	bf f9 03 00 00       	mov    edi,0x3f9
ffffffff80003e60:	e8 c3 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003e65:	be 03 00 00 00       	mov    esi,0x3
ffffffff80003e6a:	bf fb 03 00 00       	mov    edi,0x3fb
ffffffff80003e6f:	e8 b4 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003e74:	be c7 00 00 00       	mov    esi,0xc7
ffffffff80003e79:	bf fa 03 00 00       	mov    edi,0x3fa
ffffffff80003e7e:	e8 a5 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003e83:	be 0b 00 00 00       	mov    esi,0xb
ffffffff80003e88:	bf fc 03 00 00       	mov    edi,0x3fc
ffffffff80003e8d:	e8 96 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003e92:	be 0f 00 00 00       	mov    esi,0xf
ffffffff80003e97:	bf fc 03 00 00       	mov    edi,0x3fc
ffffffff80003e9c:	e8 87 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003ea1:	90                   	nop
ffffffff80003ea2:	5d                   	pop    rbp
ffffffff80003ea3:	c3                   	ret    

ffffffff80003ea4 <putc_com0(char)>:
ffffffff80003ea4:	f3 0f 1e fa          	endbr64 
ffffffff80003ea8:	55                   	push   rbp
ffffffff80003ea9:	48 89 e5             	mov    rbp,rsp
ffffffff80003eac:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003eb0:	89 f8                	mov    eax,edi
ffffffff80003eb2:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
ffffffff80003eb5:	0f b6 45 fc          	movzx  eax,BYTE PTR [rbp-0x4]
ffffffff80003eb9:	0f b6 c0             	movzx  eax,al
ffffffff80003ebc:	89 c6                	mov    esi,eax
ffffffff80003ebe:	bf f8 03 00 00       	mov    edi,0x3f8
ffffffff80003ec3:	e8 60 f2 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80003ec8:	90                   	nop
ffffffff80003ec9:	c9                   	leave  
ffffffff80003eca:	c3                   	ret    

ffffffff80003ecb <puts_com0(char const*)>:
ffffffff80003ecb:	f3 0f 1e fa          	endbr64 
ffffffff80003ecf:	55                   	push   rbp
ffffffff80003ed0:	48 89 e5             	mov    rbp,rsp
ffffffff80003ed3:	48 83 ec 10          	sub    rsp,0x10
ffffffff80003ed7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80003edb:	eb 19                	jmp    ffffffff80003ef6 <puts_com0(char const*)+0x2b>
ffffffff80003edd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003ee1:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80003ee5:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80003ee9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003eec:	0f be c0             	movsx  eax,al
ffffffff80003eef:	89 c7                	mov    edi,eax
ffffffff80003ef1:	e8 ae ff ff ff       	call   ffffffff80003ea4 <putc_com0(char)>
ffffffff80003ef6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80003efa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80003efd:	84 c0                	test   al,al
ffffffff80003eff:	75 dc                	jne    ffffffff80003edd <puts_com0(char const*)+0x12>
ffffffff80003f01:	90                   	nop
ffffffff80003f02:	90                   	nop
ffffffff80003f03:	c9                   	leave  
ffffffff80003f04:	c3                   	ret    

ffffffff80003f05 <itoa(long, int)>:
ffffffff80003f05:	f3 0f 1e fa          	endbr64 
ffffffff80003f09:	55                   	push   rbp
ffffffff80003f0a:	48 89 e5             	mov    rbp,rsp
ffffffff80003f0d:	48 83 ec 20          	sub    rsp,0x20
ffffffff80003f11:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80003f15:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80003f18:	c7 45 fc 3e 00 00 00 	mov    DWORD PTR [rbp-0x4],0x3e
ffffffff80003f1f:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80003f24:	75 44                	jne    ffffffff80003f6a <itoa(long, int)+0x65>
ffffffff80003f26:	48 c7 c0 68 8e 00 80 	mov    rax,0xffffffff80008e68
ffffffff80003f2d:	eb 56                	jmp    ffffffff80003f85 <itoa(long, int)+0x80>
ffffffff80003f2f:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003f32:	48 63 c8             	movsxd rcx,eax
ffffffff80003f35:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003f39:	48 99                	cqo    
ffffffff80003f3b:	48 f7 f9             	idiv   rcx
ffffffff80003f3e:	48 89 d0             	mov    rax,rdx
ffffffff80003f41:	0f b6 90 6a 8e 00 80 	movzx  edx,BYTE PTR [rax-0x7fff7196]
ffffffff80003f48:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003f4b:	48 98                	cdqe   
ffffffff80003f4d:	88 90 60 b2 00 80    	mov    BYTE PTR [rax-0x7fff4da0],dl
ffffffff80003f53:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffffffff80003f57:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003f5a:	48 63 f0             	movsxd rsi,eax
ffffffff80003f5d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003f61:	48 99                	cqo    
ffffffff80003f63:	48 f7 fe             	idiv   rsi
ffffffff80003f66:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80003f6a:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80003f6f:	74 06                	je     ffffffff80003f77 <itoa(long, int)+0x72>
ffffffff80003f71:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffffffff80003f75:	75 b8                	jne    ffffffff80003f2f <itoa(long, int)+0x2a>
ffffffff80003f77:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003f7a:	83 c0 01             	add    eax,0x1
ffffffff80003f7d:	48 98                	cdqe   
ffffffff80003f7f:	48 05 60 b2 00 80    	add    rax,0xffffffff8000b260
ffffffff80003f85:	c9                   	leave  
ffffffff80003f86:	c3                   	ret    

ffffffff80003f87 <utoa(unsigned long, int)>:
ffffffff80003f87:	f3 0f 1e fa          	endbr64 
ffffffff80003f8b:	55                   	push   rbp
ffffffff80003f8c:	48 89 e5             	mov    rbp,rsp
ffffffff80003f8f:	48 83 ec 20          	sub    rsp,0x20
ffffffff80003f93:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80003f97:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80003f9a:	c7 45 fc 3e 00 00 00 	mov    DWORD PTR [rbp-0x4],0x3e
ffffffff80003fa1:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80003fa6:	75 4a                	jne    ffffffff80003ff2 <utoa(unsigned long, int)+0x6b>
ffffffff80003fa8:	48 c7 c0 68 8e 00 80 	mov    rax,0xffffffff80008e68
ffffffff80003faf:	eb 5c                	jmp    ffffffff8000400d <utoa(unsigned long, int)+0x86>
ffffffff80003fb1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003fb4:	48 63 c8             	movsxd rcx,eax
ffffffff80003fb7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003fbb:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003fc0:	48 f7 f1             	div    rcx
ffffffff80003fc3:	48 89 d0             	mov    rax,rdx
ffffffff80003fc6:	0f b6 90 6a 8e 00 80 	movzx  edx,BYTE PTR [rax-0x7fff7196]
ffffffff80003fcd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80003fd0:	48 98                	cdqe   
ffffffff80003fd2:	88 90 a0 b2 00 80    	mov    BYTE PTR [rax-0x7fff4d60],dl
ffffffff80003fd8:	83 6d fc 01          	sub    DWORD PTR [rbp-0x4],0x1
ffffffff80003fdc:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80003fdf:	48 63 f0             	movsxd rsi,eax
ffffffff80003fe2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80003fe6:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80003feb:	48 f7 f6             	div    rsi
ffffffff80003fee:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80003ff2:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80003ff7:	74 06                	je     ffffffff80003fff <utoa(unsigned long, int)+0x78>
ffffffff80003ff9:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
ffffffff80003ffd:	75 b2                	jne    ffffffff80003fb1 <utoa(unsigned long, int)+0x2a>
ffffffff80003fff:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004002:	83 c0 01             	add    eax,0x1
ffffffff80004005:	48 98                	cdqe   
ffffffff80004007:	48 05 a0 b2 00 80    	add    rax,0xffffffff8000b2a0
ffffffff8000400d:	c9                   	leave  
ffffffff8000400e:	c3                   	ret    

ffffffff8000400f <PutPixel(int, int, unsigned char, unsigned char, unsigned char)>:
ffffffff8000400f:	f3 0f 1e fa          	endbr64 
ffffffff80004013:	55                   	push   rbp
ffffffff80004014:	48 89 e5             	mov    rbp,rsp
ffffffff80004017:	48 83 ec 38          	sub    rsp,0x38
ffffffff8000401b:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi
ffffffff8000401e:	89 75 d8             	mov    DWORD PTR [rbp-0x28],esi
ffffffff80004021:	89 c8                	mov    eax,ecx
ffffffff80004023:	44 89 c1             	mov    ecx,r8d
ffffffff80004026:	88 55 d4             	mov    BYTE PTR [rbp-0x2c],dl
ffffffff80004029:	88 45 d0             	mov    BYTE PTR [rbp-0x30],al
ffffffff8000402c:	89 c8                	mov    eax,ecx
ffffffff8000402e:	88 45 cc             	mov    BYTE PTR [rbp-0x34],al
ffffffff80004031:	0f b6 55 d4          	movzx  edx,BYTE PTR [rbp-0x2c]
ffffffff80004035:	48 8b 05 14 72 00 00 	mov    rax,QWORD PTR [rip+0x7214]        # ffffffff8000b250 <chosen_fb>
ffffffff8000403c:	0f b6 40 24          	movzx  eax,BYTE PTR [rax+0x24]
ffffffff80004040:	0f b6 c0             	movzx  eax,al
ffffffff80004043:	89 c1                	mov    ecx,eax
ffffffff80004045:	d3 e2                	shl    edx,cl
ffffffff80004047:	89 d0                	mov    eax,edx
ffffffff80004049:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000404c:	0f b6 55 d0          	movzx  edx,BYTE PTR [rbp-0x30]
ffffffff80004050:	48 8b 05 f9 71 00 00 	mov    rax,QWORD PTR [rip+0x71f9]        # ffffffff8000b250 <chosen_fb>
ffffffff80004057:	0f b6 40 26          	movzx  eax,BYTE PTR [rax+0x26]
ffffffff8000405b:	0f b6 c0             	movzx  eax,al
ffffffff8000405e:	89 c1                	mov    ecx,eax
ffffffff80004060:	d3 e2                	shl    edx,cl
ffffffff80004062:	89 d0                	mov    eax,edx
ffffffff80004064:	09 45 fc             	or     DWORD PTR [rbp-0x4],eax
ffffffff80004067:	0f b6 55 cc          	movzx  edx,BYTE PTR [rbp-0x34]
ffffffff8000406b:	48 8b 05 de 71 00 00 	mov    rax,QWORD PTR [rip+0x71de]        # ffffffff8000b250 <chosen_fb>
ffffffff80004072:	0f b6 40 28          	movzx  eax,BYTE PTR [rax+0x28]
ffffffff80004076:	0f b6 c0             	movzx  eax,al
ffffffff80004079:	89 c1                	mov    ecx,eax
ffffffff8000407b:	d3 e2                	shl    edx,cl
ffffffff8000407d:	89 d0                	mov    eax,edx
ffffffff8000407f:	09 45 fc             	or     DWORD PTR [rbp-0x4],eax
ffffffff80004082:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff80004085:	48 63 d0             	movsxd rdx,eax
ffffffff80004088:	48 8b 05 c1 71 00 00 	mov    rax,QWORD PTR [rip+0x71c1]        # ffffffff8000b250 <chosen_fb>
ffffffff8000408f:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80004093:	48 c1 e8 02          	shr    rax,0x2
ffffffff80004097:	48 0f af d0          	imul   rdx,rax
ffffffff8000409b:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff8000409e:	48 98                	cdqe   
ffffffff800040a0:	48 01 d0             	add    rax,rdx
ffffffff800040a3:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff800040a7:	48 8b 05 9a 71 00 00 	mov    rax,QWORD PTR [rip+0x719a]        # ffffffff8000b248 <fb_address>
ffffffff800040ae:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800040b2:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800040b6:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
ffffffff800040bd:	00 
ffffffff800040be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800040c2:	48 01 c2             	add    rdx,rax
ffffffff800040c5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800040c8:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff800040ca:	90                   	nop
ffffffff800040cb:	c9                   	leave  
ffffffff800040cc:	c3                   	ret    

ffffffff800040cd <Screen::GetFramebuffer()>:
ffffffff800040cd:	f3 0f 1e fa          	endbr64 
ffffffff800040d1:	55                   	push   rbp
ffffffff800040d2:	48 89 e5             	mov    rbp,rsp
ffffffff800040d5:	48 8b 05 6c 71 00 00 	mov    rax,QWORD PTR [rip+0x716c]        # ffffffff8000b248 <fb_address>
ffffffff800040dc:	5d                   	pop    rbp
ffffffff800040dd:	c3                   	ret    

ffffffff800040de <putc(char)>:
ffffffff800040de:	f3 0f 1e fa          	endbr64 
ffffffff800040e2:	55                   	push   rbp
ffffffff800040e3:	48 89 e5             	mov    rbp,rsp
ffffffff800040e6:	48 83 ec 40          	sub    rsp,0x40
ffffffff800040ea:	89 f8                	mov    eax,edi
ffffffff800040ec:	88 45 cc             	mov    BYTE PTR [rbp-0x34],al
ffffffff800040ef:	0f be 45 cc          	movsx  eax,BYTE PTR [rbp-0x34]
ffffffff800040f3:	89 c7                	mov    edi,eax
ffffffff800040f5:	e8 aa fd ff ff       	call   ffffffff80003ea4 <putc_com0(char)>
ffffffff800040fa:	80 7d cc 0a          	cmp    BYTE PTR [rbp-0x34],0xa
ffffffff800040fe:	75 1e                	jne    ffffffff8000411e <putc(char)+0x40>
ffffffff80004100:	8b 05 56 71 00 00    	mov    eax,DWORD PTR [rip+0x7156]        # ffffffff8000b25c <y>
ffffffff80004106:	83 c0 01             	add    eax,0x1
ffffffff80004109:	89 05 4d 71 00 00    	mov    DWORD PTR [rip+0x714d],eax        # ffffffff8000b25c <y>
ffffffff8000410f:	c7 05 3f 71 00 00 00 	mov    DWORD PTR [rip+0x713f],0x0        # ffffffff8000b258 <x>
ffffffff80004116:	00 00 00 
ffffffff80004119:	e9 55 01 00 00       	jmp    ffffffff80004273 <putc(char)+0x195>
ffffffff8000411e:	80 7d cc 09          	cmp    BYTE PTR [rbp-0x34],0x9
ffffffff80004122:	75 32                	jne    ffffffff80004156 <putc(char)+0x78>
ffffffff80004124:	8b 05 2e 71 00 00    	mov    eax,DWORD PTR [rip+0x712e]        # ffffffff8000b258 <x>
ffffffff8000412a:	83 c0 01             	add    eax,0x1
ffffffff8000412d:	89 05 25 71 00 00    	mov    DWORD PTR [rip+0x7125],eax        # ffffffff8000b258 <x>
ffffffff80004133:	eb 0f                	jmp    ffffffff80004144 <putc(char)+0x66>
ffffffff80004135:	8b 05 1d 71 00 00    	mov    eax,DWORD PTR [rip+0x711d]        # ffffffff8000b258 <x>
ffffffff8000413b:	83 c0 01             	add    eax,0x1
ffffffff8000413e:	89 05 14 71 00 00    	mov    DWORD PTR [rip+0x7114],eax        # ffffffff8000b258 <x>
ffffffff80004144:	8b 05 0e 71 00 00    	mov    eax,DWORD PTR [rip+0x710e]        # ffffffff8000b258 <x>
ffffffff8000414a:	83 e0 03             	and    eax,0x3
ffffffff8000414d:	85 c0                	test   eax,eax
ffffffff8000414f:	75 e4                	jne    ffffffff80004135 <putc(char)+0x57>
ffffffff80004151:	e9 1d 01 00 00       	jmp    ffffffff80004273 <putc(char)+0x195>
ffffffff80004156:	0f be 45 cc          	movsx  eax,BYTE PTR [rbp-0x34]
ffffffff8000415a:	48 98                	cdqe   
ffffffff8000415c:	48 c1 e0 03          	shl    rax,0x3
ffffffff80004160:	48 05 40 a8 00 80    	add    rax,0xffffffff8000a840
ffffffff80004166:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff8000416a:	8b 05 e8 70 00 00    	mov    eax,DWORD PTR [rip+0x70e8]        # ffffffff8000b258 <x>
ffffffff80004170:	c1 e0 03             	shl    eax,0x3
ffffffff80004173:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff80004176:	8b 05 e0 70 00 00    	mov    eax,DWORD PTR [rip+0x70e0]        # ffffffff8000b25c <y>
ffffffff8000417c:	c1 e0 03             	shl    eax,0x3
ffffffff8000417f:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80004182:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80004185:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80004188:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff8000418b:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff8000418e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffffffff80004195:	e9 8e 00 00 00       	jmp    ffffffff80004228 <putc(char)+0x14a>
ffffffff8000419a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
ffffffff800041a1:	eb 71                	jmp    ffffffff80004214 <putc(char)+0x136>
ffffffff800041a3:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff800041a6:	48 63 d0             	movsxd rdx,eax
ffffffff800041a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800041ad:	48 01 d0             	add    rax,rdx
ffffffff800041b0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800041b3:	0f b6 d0             	movzx  edx,al
ffffffff800041b6:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
ffffffff800041b9:	89 c1                	mov    ecx,eax
ffffffff800041bb:	d3 fa                	sar    edx,cl
ffffffff800041bd:	89 d0                	mov    eax,edx
ffffffff800041bf:	83 e0 01             	and    eax,0x1
ffffffff800041c2:	85 c0                	test   eax,eax
ffffffff800041c4:	0f 95 c0             	setne  al
ffffffff800041c7:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff800041ca:	80 7d df 00          	cmp    BYTE PTR [rbp-0x21],0x0
ffffffff800041ce:	74 1f                	je     ffffffff800041ef <putc(char)+0x111>
ffffffff800041d0:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
ffffffff800041d3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800041d6:	41 b8 ff 00 00 00    	mov    r8d,0xff
ffffffff800041dc:	b9 ff 00 00 00       	mov    ecx,0xff
ffffffff800041e1:	ba ff 00 00 00       	mov    edx,0xff
ffffffff800041e6:	89 c7                	mov    edi,eax
ffffffff800041e8:	e8 22 fe ff ff       	call   ffffffff8000400f <PutPixel(int, int, unsigned char, unsigned char, unsigned char)>
ffffffff800041ed:	eb 1d                	jmp    ffffffff8000420c <putc(char)+0x12e>
ffffffff800041ef:	8b 75 f8             	mov    esi,DWORD PTR [rbp-0x8]
ffffffff800041f2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800041f5:	41 b8 00 00 00 00    	mov    r8d,0x0
ffffffff800041fb:	b9 00 00 00 00       	mov    ecx,0x0
ffffffff80004200:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80004205:	89 c7                	mov    edi,eax
ffffffff80004207:	e8 03 fe ff ff       	call   ffffffff8000400f <PutPixel(int, int, unsigned char, unsigned char, unsigned char)>
ffffffff8000420c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80004210:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
ffffffff80004214:	83 7d f0 07          	cmp    DWORD PTR [rbp-0x10],0x7
ffffffff80004218:	7e 89                	jle    ffffffff800041a3 <putc(char)+0xc5>
ffffffff8000421a:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
ffffffff8000421e:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80004221:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80004224:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
ffffffff80004228:	83 7d f4 07          	cmp    DWORD PTR [rbp-0xc],0x7
ffffffff8000422c:	0f 8e 68 ff ff ff    	jle    ffffffff8000419a <putc(char)+0xbc>
ffffffff80004232:	8b 05 20 70 00 00    	mov    eax,DWORD PTR [rip+0x7020]        # ffffffff8000b258 <x>
ffffffff80004238:	83 c0 01             	add    eax,0x1
ffffffff8000423b:	89 05 17 70 00 00    	mov    DWORD PTR [rip+0x7017],eax        # ffffffff8000b258 <x>
ffffffff80004241:	8b 05 11 70 00 00    	mov    eax,DWORD PTR [rip+0x7011]        # ffffffff8000b258 <x>
ffffffff80004247:	48 63 d0             	movsxd rdx,eax
ffffffff8000424a:	48 8b 05 ff 6f 00 00 	mov    rax,QWORD PTR [rip+0x6fff]        # ffffffff8000b250 <chosen_fb>
ffffffff80004251:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004255:	48 39 c2             	cmp    rdx,rax
ffffffff80004258:	75 19                	jne    ffffffff80004273 <putc(char)+0x195>
ffffffff8000425a:	c7 05 f4 6f 00 00 00 	mov    DWORD PTR [rip+0x6ff4],0x0        # ffffffff8000b258 <x>
ffffffff80004261:	00 00 00 
ffffffff80004264:	8b 05 f2 6f 00 00    	mov    eax,DWORD PTR [rip+0x6ff2]        # ffffffff8000b25c <y>
ffffffff8000426a:	83 c0 01             	add    eax,0x1
ffffffff8000426d:	89 05 e9 6f 00 00    	mov    DWORD PTR [rip+0x6fe9],eax        # ffffffff8000b25c <y>
ffffffff80004273:	90                   	nop
ffffffff80004274:	c9                   	leave  
ffffffff80004275:	c3                   	ret    

ffffffff80004276 <puts(char const*)>:
ffffffff80004276:	f3 0f 1e fa          	endbr64 
ffffffff8000427a:	55                   	push   rbp
ffffffff8000427b:	48 89 e5             	mov    rbp,rsp
ffffffff8000427e:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004282:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004286:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff8000428d:	eb 1d                	jmp    ffffffff800042ac <puts(char const*)+0x36>
ffffffff8000428f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004293:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80004297:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff8000429b:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8000429e:	0f be c0             	movsx  eax,al
ffffffff800042a1:	89 c7                	mov    edi,eax
ffffffff800042a3:	e8 36 fe ff ff       	call   ffffffff800040de <putc(char)>
ffffffff800042a8:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff800042ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800042b0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800042b3:	84 c0                	test   al,al
ffffffff800042b5:	75 d8                	jne    ffffffff8000428f <puts(char const*)+0x19>
ffffffff800042b7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800042ba:	c9                   	leave  
ffffffff800042bb:	c3                   	ret    

ffffffff800042bc <vprintf(char const*, __va_list_tag*)>:
ffffffff800042bc:	f3 0f 1e fa          	endbr64 
ffffffff800042c0:	55                   	push   rbp
ffffffff800042c1:	48 89 e5             	mov    rbp,rsp
ffffffff800042c4:	48 83 ec 30          	sub    rsp,0x30
ffffffff800042c8:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800042cc:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
ffffffff800042d0:	e9 5e 02 00 00       	jmp    ffffffff80004533 <vprintf(char const*, __va_list_tag*)+0x277>
ffffffff800042d5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800042d9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800042dc:	3c 25                	cmp    al,0x25
ffffffff800042de:	0f 85 36 02 00 00    	jne    ffffffff8000451a <vprintf(char const*, __va_list_tag*)+0x25e>
ffffffff800042e4:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
ffffffff800042e9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800042ed:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800042f0:	0f be c0             	movsx  eax,al
ffffffff800042f3:	83 e8 63             	sub    eax,0x63
ffffffff800042f6:	83 f8 15             	cmp    eax,0x15
ffffffff800042f9:	0f 87 f2 01 00 00    	ja     ffffffff800044f1 <vprintf(char const*, __va_list_tag*)+0x235>
ffffffff800042ff:	89 c0                	mov    eax,eax
ffffffff80004301:	48 8b 04 c5 98 8e 00 	mov    rax,QWORD PTR [rax*8-0x7fff7168]
ffffffff80004308:	80 
ffffffff80004309:	3e ff e0             	notrack jmp rax
ffffffff8000430c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004310:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004312:	83 f8 2f             	cmp    eax,0x2f
ffffffff80004315:	77 24                	ja     ffffffff8000433b <vprintf(char const*, __va_list_tag*)+0x7f>
ffffffff80004317:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000431b:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff8000431f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004323:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004325:	89 c0                	mov    eax,eax
ffffffff80004327:	48 01 d0             	add    rax,rdx
ffffffff8000432a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000432e:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff80004330:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff80004333:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80004337:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff80004339:	eb 14                	jmp    ffffffff8000434f <vprintf(char const*, __va_list_tag*)+0x93>
ffffffff8000433b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000433f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004343:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff80004347:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000434b:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff8000434f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004352:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80004356:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000435a:	be 10 00 00 00       	mov    esi,0x10
ffffffff8000435f:	48 89 c7             	mov    rdi,rax
ffffffff80004362:	e8 20 fc ff ff       	call   ffffffff80003f87 <utoa(unsigned long, int)>
ffffffff80004367:	48 89 c7             	mov    rdi,rax
ffffffff8000436a:	e8 07 ff ff ff       	call   ffffffff80004276 <puts(char const*)>
ffffffff8000436f:	e9 9f 01 00 00       	jmp    ffffffff80004513 <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff80004374:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004378:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000437a:	83 f8 2f             	cmp    eax,0x2f
ffffffff8000437d:	77 24                	ja     ffffffff800043a3 <vprintf(char const*, __va_list_tag*)+0xe7>
ffffffff8000437f:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004383:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80004387:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000438b:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000438d:	89 c0                	mov    eax,eax
ffffffff8000438f:	48 01 d0             	add    rax,rdx
ffffffff80004392:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80004396:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff80004398:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff8000439b:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000439f:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff800043a1:	eb 14                	jmp    ffffffff800043b7 <vprintf(char const*, __va_list_tag*)+0xfb>
ffffffff800043a3:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800043a7:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800043ab:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff800043af:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800043b3:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff800043b7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800043ba:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff800043be:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800043c2:	48 89 c7             	mov    rdi,rax
ffffffff800043c5:	e8 ac fe ff ff       	call   ffffffff80004276 <puts(char const*)>
ffffffff800043ca:	e9 44 01 00 00       	jmp    ffffffff80004513 <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff800043cf:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800043d3:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800043d5:	83 f8 2f             	cmp    eax,0x2f
ffffffff800043d8:	77 24                	ja     ffffffff800043fe <vprintf(char const*, __va_list_tag*)+0x142>
ffffffff800043da:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800043de:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff800043e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800043e6:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800043e8:	89 c0                	mov    eax,eax
ffffffff800043ea:	48 01 d0             	add    rax,rdx
ffffffff800043ed:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800043f1:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff800043f3:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff800043f6:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800043fa:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff800043fc:	eb 14                	jmp    ffffffff80004412 <vprintf(char const*, __va_list_tag*)+0x156>
ffffffff800043fe:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004402:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004406:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff8000440a:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff8000440e:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff80004412:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004414:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
ffffffff80004417:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000441a:	48 98                	cdqe   
ffffffff8000441c:	be 0a 00 00 00       	mov    esi,0xa
ffffffff80004421:	48 89 c7             	mov    rdi,rax
ffffffff80004424:	e8 dc fa ff ff       	call   ffffffff80003f05 <itoa(long, int)>
ffffffff80004429:	48 89 c7             	mov    rdi,rax
ffffffff8000442c:	e8 45 fe ff ff       	call   ffffffff80004276 <puts(char const*)>
ffffffff80004431:	e9 dd 00 00 00       	jmp    ffffffff80004513 <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff80004436:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000443a:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000443c:	83 f8 2f             	cmp    eax,0x2f
ffffffff8000443f:	77 24                	ja     ffffffff80004465 <vprintf(char const*, __va_list_tag*)+0x1a9>
ffffffff80004441:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004445:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff80004449:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000444d:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000444f:	89 c0                	mov    eax,eax
ffffffff80004451:	48 01 d0             	add    rax,rdx
ffffffff80004454:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80004458:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff8000445a:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff8000445d:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80004461:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff80004463:	eb 14                	jmp    ffffffff80004479 <vprintf(char const*, __va_list_tag*)+0x1bd>
ffffffff80004465:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004469:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000446d:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff80004471:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff80004475:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff80004479:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000447b:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
ffffffff8000447e:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
ffffffff80004481:	48 98                	cdqe   
ffffffff80004483:	be 0a 00 00 00       	mov    esi,0xa
ffffffff80004488:	48 89 c7             	mov    rdi,rax
ffffffff8000448b:	e8 f7 fa ff ff       	call   ffffffff80003f87 <utoa(unsigned long, int)>
ffffffff80004490:	48 89 c7             	mov    rdi,rax
ffffffff80004493:	e8 de fd ff ff       	call   ffffffff80004276 <puts(char const*)>
ffffffff80004498:	eb 79                	jmp    ffffffff80004513 <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff8000449a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff8000449e:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800044a0:	83 f8 2f             	cmp    eax,0x2f
ffffffff800044a3:	77 24                	ja     ffffffff800044c9 <vprintf(char const*, __va_list_tag*)+0x20d>
ffffffff800044a5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800044a9:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff800044ad:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800044b1:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800044b3:	89 c0                	mov    eax,eax
ffffffff800044b5:	48 01 d0             	add    rax,rdx
ffffffff800044b8:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800044bc:	8b 12                	mov    edx,DWORD PTR [rdx]
ffffffff800044be:	8d 4a 08             	lea    ecx,[rdx+0x8]
ffffffff800044c1:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800044c5:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff800044c7:	eb 14                	jmp    ffffffff800044dd <vprintf(char const*, __va_list_tag*)+0x221>
ffffffff800044c9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff800044cd:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800044d1:	48 8d 48 08          	lea    rcx,[rax+0x8]
ffffffff800044d5:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
ffffffff800044d9:	48 89 4a 08          	mov    QWORD PTR [rdx+0x8],rcx
ffffffff800044dd:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff800044df:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff800044e2:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff800044e5:	0f be c0             	movsx  eax,al
ffffffff800044e8:	89 c7                	mov    edi,eax
ffffffff800044ea:	e8 ef fb ff ff       	call   ffffffff800040de <putc(char)>
ffffffff800044ef:	eb 22                	jmp    ffffffff80004513 <vprintf(char const*, __va_list_tag*)+0x257>
ffffffff800044f1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800044f5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff800044f8:	0f be c0             	movsx  eax,al
ffffffff800044fb:	89 c6                	mov    esi,eax
ffffffff800044fd:	48 c7 c7 7b 8e 00 80 	mov    rdi,0xffffffff80008e7b
ffffffff80004504:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004509:	e8 3b 00 00 00       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff8000450e:	e8 56 cd ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80004513:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
ffffffff80004518:	eb 19                	jmp    ffffffff80004533 <vprintf(char const*, __va_list_tag*)+0x277>
ffffffff8000451a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff8000451e:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80004522:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80004526:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80004529:	0f be c0             	movsx  eax,al
ffffffff8000452c:	89 c7                	mov    edi,eax
ffffffff8000452e:	e8 ab fb ff ff       	call   ffffffff800040de <putc(char)>
ffffffff80004533:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80004537:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff8000453a:	84 c0                	test   al,al
ffffffff8000453c:	0f 85 93 fd ff ff    	jne    ffffffff800042d5 <vprintf(char const*, __va_list_tag*)+0x19>
ffffffff80004542:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004547:	c9                   	leave  
ffffffff80004548:	c3                   	ret    

ffffffff80004549 <_printf(char const*, ...)>:
ffffffff80004549:	f3 0f 1e fa          	endbr64 
ffffffff8000454d:	55                   	push   rbp
ffffffff8000454e:	48 89 e5             	mov    rbp,rsp
ffffffff80004551:	48 83 ec 60          	sub    rsp,0x60
ffffffff80004555:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
ffffffff80004559:	48 89 75 d8          	mov    QWORD PTR [rbp-0x28],rsi
ffffffff8000455d:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff80004561:	48 89 4d e8          	mov    QWORD PTR [rbp-0x18],rcx
ffffffff80004565:	4c 89 45 f0          	mov    QWORD PTR [rbp-0x10],r8
ffffffff80004569:	4c 89 4d f8          	mov    QWORD PTR [rbp-0x8],r9
ffffffff8000456d:	48 c7 c7 40 b2 00 80 	mov    rdi,0xffffffff8000b240
ffffffff80004574:	e8 4b 01 00 00       	call   ffffffff800046c4 <spinlock::lock()>
ffffffff80004579:	c7 45 b0 08 00 00 00 	mov    DWORD PTR [rbp-0x50],0x8
ffffffff80004580:	48 8d 45 10          	lea    rax,[rbp+0x10]
ffffffff80004584:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
ffffffff80004588:	48 8d 45 d0          	lea    rax,[rbp-0x30]
ffffffff8000458c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
ffffffff80004590:	48 8d 55 b0          	lea    rdx,[rbp-0x50]
ffffffff80004594:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80004598:	48 89 d6             	mov    rsi,rdx
ffffffff8000459b:	48 89 c7             	mov    rdi,rax
ffffffff8000459e:	e8 19 fd ff ff       	call   ffffffff800042bc <vprintf(char const*, __va_list_tag*)>
ffffffff800045a3:	89 45 cc             	mov    DWORD PTR [rbp-0x34],eax
ffffffff800045a6:	48 c7 c7 40 b2 00 80 	mov    rdi,0xffffffff8000b240
ffffffff800045ad:	e8 44 01 00 00       	call   ffffffff800046f6 <spinlock::unlock()>
ffffffff800045b2:	8b 45 cc             	mov    eax,DWORD PTR [rbp-0x34]
ffffffff800045b5:	c9                   	leave  
ffffffff800045b6:	c3                   	ret    

ffffffff800045b7 <Screen::Initialize()>:
ffffffff800045b7:	f3 0f 1e fa          	endbr64 
ffffffff800045bb:	55                   	push   rbp
ffffffff800045bc:	48 89 e5             	mov    rbp,rsp
ffffffff800045bf:	48 83 ec 10          	sub    rsp,0x10
ffffffff800045c3:	48 c7 45 f8 68 ac 00 	mov    QWORD PTR [rbp-0x8],0xffffffff8000ac68
ffffffff800045ca:	80 
ffffffff800045cb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800045cf:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800045d2:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800045d6:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800045d9:	48 89 05 70 6c 00 00 	mov    QWORD PTR [rip+0x6c70],rax        # ffffffff8000b250 <chosen_fb>
ffffffff800045e0:	48 8b 05 69 6c 00 00 	mov    rax,QWORD PTR [rip+0x6c69]        # ffffffff8000b250 <chosen_fb>
ffffffff800045e7:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800045ea:	48 89 05 57 6c 00 00 	mov    QWORD PTR [rip+0x6c57],rax        # ffffffff8000b248 <fb_address>
ffffffff800045f1:	48 8b 05 58 6c 00 00 	mov    rax,QWORD PTR [rip+0x6c58]        # ffffffff8000b250 <chosen_fb>
ffffffff800045f8:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff800045fc:	48 8b 05 4d 6c 00 00 	mov    rax,QWORD PTR [rip+0x6c4d]        # ffffffff8000b250 <chosen_fb>
ffffffff80004603:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004607:	48 8b 05 3a 6c 00 00 	mov    rax,QWORD PTR [rip+0x6c3a]        # ffffffff8000b248 <fb_address>
ffffffff8000460e:	48 89 c6             	mov    rsi,rax
ffffffff80004611:	48 c7 c7 48 8f 00 80 	mov    rdi,0xffffffff80008f48
ffffffff80004618:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000461d:	e8 27 ff ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80004622:	48 c7 c7 68 8f 00 80 	mov    rdi,0xffffffff80008f68
ffffffff80004629:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000462e:	e8 16 ff ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80004633:	48 8b 05 16 6c 00 00 	mov    rax,QWORD PTR [rip+0x6c16]        # ffffffff8000b250 <chosen_fb>
ffffffff8000463a:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffffffff8000463e:	48 85 c0             	test   rax,rax
ffffffff80004641:	75 11                	jne    ffffffff80004654 <Screen::Initialize()+0x9d>
ffffffff80004643:	48 c7 c7 8c 8f 00 80 	mov    rdi,0xffffffff80008f8c
ffffffff8000464a:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000464f:	e8 f5 fe ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80004654:	90                   	nop
ffffffff80004655:	c9                   	leave  
ffffffff80004656:	c3                   	ret    

ffffffff80004657 <__static_initialization_and_destruction_0(int, int)>:
ffffffff80004657:	f3 0f 1e fa          	endbr64 
ffffffff8000465b:	55                   	push   rbp
ffffffff8000465c:	48 89 e5             	mov    rbp,rsp
ffffffff8000465f:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004663:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80004666:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80004669:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff8000466d:	75 15                	jne    ffffffff80004684 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff8000466f:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80004676:	75 0c                	jne    ffffffff80004684 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80004678:	48 c7 c7 40 b2 00 80 	mov    rdi,0xffffffff8000b240
ffffffff8000467f:	e8 1c 00 00 00       	call   ffffffff800046a0 <spinlock::spinlock()>
ffffffff80004684:	90                   	nop
ffffffff80004685:	c9                   	leave  
ffffffff80004686:	c3                   	ret    

ffffffff80004687 <_GLOBAL__sub_I_font8x8_basic>:
ffffffff80004687:	f3 0f 1e fa          	endbr64 
ffffffff8000468b:	55                   	push   rbp
ffffffff8000468c:	48 89 e5             	mov    rbp,rsp
ffffffff8000468f:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80004694:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80004699:	e8 b9 ff ff ff       	call   ffffffff80004657 <__static_initialization_and_destruction_0(int, int)>
ffffffff8000469e:	5d                   	pop    rbp
ffffffff8000469f:	c3                   	ret    

ffffffff800046a0 <spinlock::spinlock()>:
ffffffff800046a0:	f3 0f 1e fa          	endbr64 
ffffffff800046a4:	55                   	push   rbp
ffffffff800046a5:	48 89 e5             	mov    rbp,rsp
ffffffff800046a8:	48 83 ec 10          	sub    rsp,0x10
ffffffff800046ac:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800046b0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800046b4:	be 00 00 00 00       	mov    esi,0x0
ffffffff800046b9:	48 89 c7             	mov    rdi,rax
ffffffff800046bc:	e8 59 00 00 00       	call   ffffffff8000471a <atomic::atomic<int>::atomic(int)>
ffffffff800046c1:	90                   	nop
ffffffff800046c2:	c9                   	leave  
ffffffff800046c3:	c3                   	ret    

ffffffff800046c4 <spinlock::lock()>:
ffffffff800046c4:	f3 0f 1e fa          	endbr64 
ffffffff800046c8:	55                   	push   rbp
ffffffff800046c9:	48 89 e5             	mov    rbp,rsp
ffffffff800046cc:	48 83 ec 10          	sub    rsp,0x10
ffffffff800046d0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800046d4:	90                   	nop
ffffffff800046d5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800046d9:	ba 01 00 00 00       	mov    edx,0x1
ffffffff800046de:	be 00 00 00 00       	mov    esi,0x0
ffffffff800046e3:	48 89 c7             	mov    rdi,rax
ffffffff800046e6:	e8 4f 00 00 00       	call   ffffffff8000473a <atomic::atomic<int>::compare_exchange(int, int)>
ffffffff800046eb:	83 f0 01             	xor    eax,0x1
ffffffff800046ee:	84 c0                	test   al,al
ffffffff800046f0:	75 e3                	jne    ffffffff800046d5 <spinlock::lock()+0x11>
ffffffff800046f2:	90                   	nop
ffffffff800046f3:	90                   	nop
ffffffff800046f4:	c9                   	leave  
ffffffff800046f5:	c3                   	ret    

ffffffff800046f6 <spinlock::unlock()>:
ffffffff800046f6:	f3 0f 1e fa          	endbr64 
ffffffff800046fa:	55                   	push   rbp
ffffffff800046fb:	48 89 e5             	mov    rbp,rsp
ffffffff800046fe:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004702:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80004706:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000470a:	be 00 00 00 00       	mov    esi,0x0
ffffffff8000470f:	48 89 c7             	mov    rdi,rax
ffffffff80004712:	e8 5d 00 00 00       	call   ffffffff80004774 <atomic::atomic<int>::store(int)>
ffffffff80004717:	90                   	nop
ffffffff80004718:	c9                   	leave  
ffffffff80004719:	c3                   	ret    

ffffffff8000471a <atomic::atomic<int>::atomic(int)>:
ffffffff8000471a:	f3 0f 1e fa          	endbr64 
ffffffff8000471e:	55                   	push   rbp
ffffffff8000471f:	48 89 e5             	mov    rbp,rsp
ffffffff80004722:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004726:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff8000472a:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff8000472d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004731:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80004734:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80004736:	90                   	nop
ffffffff80004737:	c9                   	leave  
ffffffff80004738:	c3                   	ret    
ffffffff80004739:	90                   	nop

ffffffff8000473a <atomic::atomic<int>::compare_exchange(int, int)>:
ffffffff8000473a:	f3 0f 1e fa          	endbr64 
ffffffff8000473e:	55                   	push   rbp
ffffffff8000473f:	48 89 e5             	mov    rbp,rsp
ffffffff80004742:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004746:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000474a:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff8000474d:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80004750:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80004753:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80004756:	8b 4d e0             	mov    ecx,DWORD PTR [rbp-0x20]
ffffffff80004759:	48 8b 75 e8          	mov    rsi,QWORD PTR [rbp-0x18]
ffffffff8000475d:	48 8d 55 fc          	lea    rdx,[rbp-0x4]
ffffffff80004761:	8b 02                	mov    eax,DWORD PTR [rdx]
ffffffff80004763:	f0 0f b1 0e          	lock cmpxchg DWORD PTR [rsi],ecx
ffffffff80004767:	89 c1                	mov    ecx,eax
ffffffff80004769:	0f 94 c0             	sete   al
ffffffff8000476c:	84 c0                	test   al,al
ffffffff8000476e:	75 02                	jne    ffffffff80004772 <atomic::atomic<int>::compare_exchange(int, int)+0x38>
ffffffff80004770:	89 0a                	mov    DWORD PTR [rdx],ecx
ffffffff80004772:	c9                   	leave  
ffffffff80004773:	c3                   	ret    

ffffffff80004774 <atomic::atomic<int>::store(int)>:
ffffffff80004774:	f3 0f 1e fa          	endbr64 
ffffffff80004778:	55                   	push   rbp
ffffffff80004779:	48 89 e5             	mov    rbp,rsp
ffffffff8000477c:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004780:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80004784:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80004787:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff8000478a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000478e:	87 10                	xchg   DWORD PTR [rax],edx
ffffffff80004790:	90                   	nop
ffffffff80004791:	c9                   	leave  
ffffffff80004792:	c3                   	ret    

ffffffff80004793 <HPET::SetupHPET()>:
ffffffff80004793:	f3 0f 1e fa          	endbr64 
ffffffff80004797:	55                   	push   rbp
ffffffff80004798:	48 89 e5             	mov    rbp,rsp
ffffffff8000479b:	48 c7 c7 a0 8f 00 80 	mov    rdi,0xffffffff80008fa0
ffffffff800047a2:	e8 be 13 00 00       	call   ffffffff80005b65 <ACPI::FindTable(char const*)>
ffffffff800047a7:	48 89 05 32 6b 00 00 	mov    QWORD PTR [rip+0x6b32],rax        # ffffffff8000b2e0 <hpetTable>
ffffffff800047ae:	48 8b 05 2b 6b 00 00 	mov    rax,QWORD PTR [rip+0x6b2b]        # ffffffff8000b2e0 <hpetTable>
ffffffff800047b5:	48 85 c0             	test   rax,rax
ffffffff800047b8:	75 1b                	jne    ffffffff800047d5 <HPET::SetupHPET()+0x42>
ffffffff800047ba:	48 8b 05 1f 6b 00 00 	mov    rax,QWORD PTR [rip+0x6b1f]        # ffffffff8000b2e0 <hpetTable>
ffffffff800047c1:	48 89 c6             	mov    rsi,rax
ffffffff800047c4:	48 c7 c7 a8 8f 00 80 	mov    rdi,0xffffffff80008fa8
ffffffff800047cb:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800047d0:	e8 74 fd ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800047d5:	48 8b 05 04 6b 00 00 	mov    rax,QWORD PTR [rip+0x6b04]        # ffffffff8000b2e0 <hpetTable>
ffffffff800047dc:	48 8b 40 2c          	mov    rax,QWORD PTR [rax+0x2c]
ffffffff800047e0:	48 89 c6             	mov    rsi,rax
ffffffff800047e3:	48 c7 c7 d1 8f 00 80 	mov    rdi,0xffffffff80008fd1
ffffffff800047ea:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800047ef:	e8 55 fd ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800047f4:	48 8b 05 e5 6a 00 00 	mov    rax,QWORD PTR [rip+0x6ae5]        # ffffffff8000b2e0 <hpetTable>
ffffffff800047fb:	48 8b 48 2c          	mov    rcx,QWORD PTR [rax+0x2c]
ffffffff800047ff:	48 8b 05 62 5f 00 00 	mov    rax,QWORD PTR [rip+0x5f62]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80004806:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8000480a:	48 8b 05 cf 6a 00 00 	mov    rax,QWORD PTR [rip+0x6acf]        # ffffffff8000b2e0 <hpetTable>
ffffffff80004811:	48 01 ca             	add    rdx,rcx
ffffffff80004814:	48 89 50 2c          	mov    QWORD PTR [rax+0x2c],rdx
ffffffff80004818:	48 8b 05 c1 6a 00 00 	mov    rax,QWORD PTR [rip+0x6ac1]        # ffffffff8000b2e0 <hpetTable>
ffffffff8000481f:	48 8b 40 2c          	mov    rax,QWORD PTR [rax+0x2c]
ffffffff80004823:	48 89 05 be 6a 00 00 	mov    QWORD PTR [rip+0x6abe],rax        # ffffffff8000b2e8 <hpetRegs>
ffffffff8000482a:	48 8b 05 b7 6a 00 00 	mov    rax,QWORD PTR [rip+0x6ab7]        # ffffffff8000b2e8 <hpetRegs>
ffffffff80004831:	48 c7 80 f0 00 00 00 	mov    QWORD PTR [rax+0xf0],0x0
ffffffff80004838:	00 00 00 00 
ffffffff8000483c:	48 8b 05 a5 6a 00 00 	mov    rax,QWORD PTR [rip+0x6aa5]        # ffffffff8000b2e8 <hpetRegs>
ffffffff80004843:	48 c7 40 10 01 00 00 	mov    QWORD PTR [rax+0x10],0x1
ffffffff8000484a:	00 
ffffffff8000484b:	90                   	nop
ffffffff8000484c:	5d                   	pop    rbp
ffffffff8000484d:	c3                   	ret    

ffffffff8000484e <msleep(unsigned long)>:
ffffffff8000484e:	f3 0f 1e fa          	endbr64 
ffffffff80004852:	55                   	push   rbp
ffffffff80004853:	48 89 e5             	mov    rbp,rsp
ffffffff80004856:	48 83 ec 18          	sub    rsp,0x18
ffffffff8000485a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000485e:	48 8b 05 83 6a 00 00 	mov    rax,QWORD PTR [rip+0x6a83]        # ffffffff8000b2e8 <hpetRegs>
ffffffff80004865:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004868:	48 c1 e8 20          	shr    rax,0x20
ffffffff8000486c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000486f:	48 8b 05 72 6a 00 00 	mov    rax,QWORD PTR [rip+0x6a72]        # ffffffff8000b2e8 <hpetRegs>
ffffffff80004876:	48 8b 88 f0 00 00 00 	mov    rcx,QWORD PTR [rax+0xf0]
ffffffff8000487d:	8b 75 fc             	mov    esi,DWORD PTR [rbp-0x4]
ffffffff80004880:	48 b8 00 10 a5 d4 e8 	movabs rax,0xe8d4a51000
ffffffff80004887:	00 00 00 
ffffffff8000488a:	48 99                	cqo    
ffffffff8000488c:	48 f7 fe             	idiv   rsi
ffffffff8000488f:	48 0f af 45 e8       	imul   rax,QWORD PTR [rbp-0x18]
ffffffff80004894:	48 01 c8             	add    rax,rcx
ffffffff80004897:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000489b:	eb 02                	jmp    ffffffff8000489f <msleep(unsigned long)+0x51>
ffffffff8000489d:	f3 90                	pause  
ffffffff8000489f:	48 8b 05 42 6a 00 00 	mov    rax,QWORD PTR [rip+0x6a42]        # ffffffff8000b2e8 <hpetRegs>
ffffffff800048a6:	48 8b 90 f0 00 00 00 	mov    rdx,QWORD PTR [rax+0xf0]
ffffffff800048ad:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff800048b1:	48 39 c2             	cmp    rdx,rax
ffffffff800048b4:	0f 92 c0             	setb   al
ffffffff800048b7:	84 c0                	test   al,al
ffffffff800048b9:	75 e2                	jne    ffffffff8000489d <msleep(unsigned long)+0x4f>
ffffffff800048bb:	90                   	nop
ffffffff800048bc:	90                   	nop
ffffffff800048bd:	c9                   	leave  
ffffffff800048be:	c3                   	ret    
ffffffff800048bf:	90                   	nop

ffffffff800048c0 <Scheduler::AddThread(unsigned long, bool)>:
ffffffff800048c0:	f3 0f 1e fa          	endbr64 
ffffffff800048c4:	55                   	push   rbp
ffffffff800048c5:	48 89 e5             	mov    rbp,rsp
ffffffff800048c8:	53                   	push   rbx
ffffffff800048c9:	48 83 ec 28          	sub    rsp,0x28
ffffffff800048cd:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
ffffffff800048d1:	89 f0                	mov    eax,esi
ffffffff800048d3:	88 45 d4             	mov    BYTE PTR [rbp-0x2c],al
ffffffff800048d6:	48 c7 c7 f0 b2 00 80 	mov    rdi,0xffffffff8000b2f0
ffffffff800048dd:	e8 e2 fd ff ff       	call   ffffffff800046c4 <spinlock::lock()>
ffffffff800048e2:	bf c8 00 00 00       	mov    edi,0xc8
ffffffff800048e7:	e8 49 c2 ff ff       	call   ffffffff80000b35 <operator new(unsigned long)>
ffffffff800048ec:	48 89 c3             	mov    rbx,rax
ffffffff800048ef:	0f b6 55 d4          	movzx  edx,BYTE PTR [rbp-0x2c]
ffffffff800048f3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff800048f7:	48 89 c6             	mov    rsi,rax
ffffffff800048fa:	48 89 df             	mov    rdi,rbx
ffffffff800048fd:	e8 c6 03 00 00       	call   ffffffff80004cc8 <Thread::Thread(unsigned long, bool)>
ffffffff80004902:	48 89 5d e8          	mov    QWORD PTR [rbp-0x18],rbx
ffffffff80004906:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8000490a:	8b 05 e4 69 00 00    	mov    eax,DWORD PTR [rip+0x69e4]        # ffffffff8000b2f4 <curPid>
ffffffff80004910:	8d 48 01             	lea    ecx,[rax+0x1]
ffffffff80004913:	89 0d db 69 00 00    	mov    DWORD PTR [rip+0x69db],ecx        # ffffffff8000b2f4 <curPid>
ffffffff80004919:	89 c6                	mov    esi,eax
ffffffff8000491b:	48 89 d7             	mov    rdi,rdx
ffffffff8000491e:	e8 35 03 00 00       	call   ffffffff80004c58 <Thread::SetPID(int)>
ffffffff80004923:	8b 05 cf 69 00 00    	mov    eax,DWORD PTR [rip+0x69cf]        # ffffffff8000b2f8 <curCpuCore>
ffffffff80004929:	48 63 d0             	movsxd rdx,eax
ffffffff8000492c:	48 89 d0             	mov    rax,rdx
ffffffff8000492f:	48 01 c0             	add    rax,rax
ffffffff80004932:	48 01 d0             	add    rax,rdx
ffffffff80004935:	48 c1 e0 04          	shl    rax,0x4
ffffffff80004939:	48 05 00 b3 00 80    	add    rax,0xffffffff8000b300
ffffffff8000493f:	48 83 c0 08          	add    rax,0x8
ffffffff80004943:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80004947:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000494b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000494e:	48 85 c0             	test   rax,rax
ffffffff80004951:	75 0b                	jne    ffffffff8000495e <Scheduler::AddThread(unsigned long, bool)+0x9e>
ffffffff80004953:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004957:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff8000495b:	48 89 10             	mov    QWORD PTR [rax],rdx
ffffffff8000495e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004962:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004966:	48 85 c0             	test   rax,rax
ffffffff80004969:	74 13                	je     ffffffff8000497e <Scheduler::AddThread(unsigned long, bool)+0xbe>
ffffffff8000496b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000496f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004973:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80004977:	48 89 90 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],rdx
ffffffff8000497e:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004982:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80004986:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
ffffffff8000498a:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff8000498e:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80004991:	8d 50 01             	lea    edx,[rax+0x1]
ffffffff80004994:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80004998:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
ffffffff8000499b:	8b 05 57 69 00 00    	mov    eax,DWORD PTR [rip+0x6957]        # ffffffff8000b2f8 <curCpuCore>
ffffffff800049a1:	83 c0 01             	add    eax,0x1
ffffffff800049a4:	89 05 4e 69 00 00    	mov    DWORD PTR [rip+0x694e],eax        # ffffffff8000b2f8 <curCpuCore>
ffffffff800049aa:	8b 05 48 69 00 00    	mov    eax,DWORD PTR [rip+0x6948]        # ffffffff8000b2f8 <curCpuCore>
ffffffff800049b0:	48 63 d0             	movsxd rdx,eax
ffffffff800049b3:	48 8b 05 8e 64 00 00 	mov    rax,QWORD PTR [rip+0x648e]        # ffffffff8000ae48 <smp_req+0x28>
ffffffff800049ba:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800049be:	48 39 c2             	cmp    rdx,rax
ffffffff800049c1:	75 0a                	jne    ffffffff800049cd <Scheduler::AddThread(unsigned long, bool)+0x10d>
ffffffff800049c3:	c7 05 2b 69 00 00 00 	mov    DWORD PTR [rip+0x692b],0x0        # ffffffff8000b2f8 <curCpuCore>
ffffffff800049ca:	00 00 00 
ffffffff800049cd:	48 c7 c7 f0 b2 00 80 	mov    rdi,0xffffffff8000b2f0
ffffffff800049d4:	e8 1d fd ff ff       	call   ffffffff800046f6 <spinlock::unlock()>
ffffffff800049d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800049dd:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800049e1:	c9                   	leave  
ffffffff800049e2:	c3                   	ret    

ffffffff800049e3 <GetNextThread(unsigned long)>:
ffffffff800049e3:	f3 0f 1e fa          	endbr64 
ffffffff800049e7:	55                   	push   rbp
ffffffff800049e8:	48 89 e5             	mov    rbp,rsp
ffffffff800049eb:	48 83 ec 18          	sub    rsp,0x18
ffffffff800049ef:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800049f3:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff800049f7:	48 89 d0             	mov    rax,rdx
ffffffff800049fa:	48 01 c0             	add    rax,rax
ffffffff800049fd:	48 01 d0             	add    rax,rdx
ffffffff80004a00:	48 c1 e0 04          	shl    rax,0x4
ffffffff80004a04:	48 05 00 b3 00 80    	add    rax,0xffffffff8000b300
ffffffff80004a0a:	48 83 c0 08          	add    rax,0x8
ffffffff80004a0e:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80004a12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a16:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
ffffffff80004a19:	85 c0                	test   eax,eax
ffffffff80004a1b:	75 07                	jne    ffffffff80004a24 <GetNextThread(unsigned long)+0x41>
ffffffff80004a1d:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004a22:	eb 72                	jmp    ffffffff80004a96 <GetNextThread(unsigned long)+0xb3>
ffffffff80004a24:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a28:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004a2c:	48 85 c0             	test   rax,rax
ffffffff80004a2f:	75 19                	jne    ffffffff80004a4a <GetNextThread(unsigned long)+0x67>
ffffffff80004a31:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a35:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80004a38:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a3c:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80004a40:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a44:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004a48:	eb 4c                	jmp    ffffffff80004a96 <GetNextThread(unsigned long)+0xb3>
ffffffff80004a4a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a4e:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004a52:	48 8b 80 c0 00 00 00 	mov    rax,QWORD PTR [rax+0xc0]
ffffffff80004a59:	48 85 c0             	test   rax,rax
ffffffff80004a5c:	74 21                	je     ffffffff80004a7f <GetNextThread(unsigned long)+0x9c>
ffffffff80004a5e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a62:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004a66:	48 8b 90 c0 00 00 00 	mov    rdx,QWORD PTR [rax+0xc0]
ffffffff80004a6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a71:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80004a75:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a79:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004a7d:	eb 17                	jmp    ffffffff80004a96 <GetNextThread(unsigned long)+0xb3>
ffffffff80004a7f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a83:	48 8b 10             	mov    rdx,QWORD PTR [rax]
ffffffff80004a86:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a8a:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
ffffffff80004a8e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004a92:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004a96:	c9                   	leave  
ffffffff80004a97:	c3                   	ret    

ffffffff80004a98 <Scheduler::Schedule(SavedRegs*)>:
ffffffff80004a98:	f3 0f 1e fa          	endbr64 
ffffffff80004a9c:	55                   	push   rbp
ffffffff80004a9d:	48 89 e5             	mov    rbp,rsp
ffffffff80004aa0:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004aa4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004aa8:	e8 12 06 00 00       	call   ffffffff800050bf <GetCurCPU()>
ffffffff80004aad:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80004ab1:	48 c7 c7 f0 b2 00 80 	mov    rdi,0xffffffff8000b2f0
ffffffff80004ab8:	e8 07 fc ff ff       	call   ffffffff800046c4 <spinlock::lock()>
ffffffff80004abd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004ac1:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80004ac5:	48 85 c0             	test   rax,rax
ffffffff80004ac8:	74 1d                	je     ffffffff80004ae7 <Scheduler::Schedule(SavedRegs*)+0x4f>
ffffffff80004aca:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004ace:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff80004ad2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004ad6:	48 89 c6             	mov    rsi,rax
ffffffff80004ad9:	b8 16 00 00 00       	mov    eax,0x16
ffffffff80004ade:	48 89 d7             	mov    rdi,rdx
ffffffff80004ae1:	48 89 c1             	mov    rcx,rax
ffffffff80004ae4:	f3 48 a5             	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
ffffffff80004ae7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004aeb:	8b 40 28             	mov    eax,DWORD PTR [rax+0x28]
ffffffff80004aee:	48 98                	cdqe   
ffffffff80004af0:	48 89 c7             	mov    rdi,rax
ffffffff80004af3:	e8 eb fe ff ff       	call   ffffffff800049e3 <GetNextThread(unsigned long)>
ffffffff80004af8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80004afc:	48 c7 c7 f0 b2 00 80 	mov    rdi,0xffffffff8000b2f0
ffffffff80004b03:	e8 ee fb ff ff       	call   ffffffff800046f6 <spinlock::unlock()>
ffffffff80004b08:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
ffffffff80004b0d:	74 3c                	je     ffffffff80004b4b <Scheduler::Schedule(SavedRegs*)+0xb3>
ffffffff80004b0f:	e8 f3 14 00 00       	call   ffffffff80006007 <LAPIC::EOI()>
ffffffff80004b14:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004b18:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80004b1c:	48 8b 92 b0 00 00 00 	mov    rdx,QWORD PTR [rdx+0xb0]
ffffffff80004b23:	48 89 c4             	mov    rsp,rax
ffffffff80004b26:	48 89 d0             	mov    rax,rdx
ffffffff80004b29:	41 5f                	pop    r15
ffffffff80004b2b:	41 5e                	pop    r14
ffffffff80004b2d:	41 5d                	pop    r13
ffffffff80004b2f:	41 5c                	pop    r12
ffffffff80004b31:	41 5b                	pop    r11
ffffffff80004b33:	41 5a                	pop    r10
ffffffff80004b35:	41 59                	pop    r9
ffffffff80004b37:	41 58                	pop    r8
ffffffff80004b39:	5d                   	pop    rbp
ffffffff80004b3a:	5f                   	pop    rdi
ffffffff80004b3b:	5e                   	pop    rsi
ffffffff80004b3c:	5a                   	pop    rdx
ffffffff80004b3d:	59                   	pop    rcx
ffffffff80004b3e:	5b                   	pop    rbx
ffffffff80004b3f:	0f 22 d8             	mov    cr3,rax
ffffffff80004b42:	58                   	pop    rax
ffffffff80004b43:	48 83 c4 10          	add    rsp,0x10
ffffffff80004b47:	48 cf                	iretq  
ffffffff80004b49:	eb 01                	jmp    ffffffff80004b4c <Scheduler::Schedule(SavedRegs*)+0xb4>
ffffffff80004b4b:	90                   	nop
ffffffff80004b4c:	c9                   	leave  
ffffffff80004b4d:	c3                   	ret    

ffffffff80004b4e <Scheduler::Initialize()>:
ffffffff80004b4e:	f3 0f 1e fa          	endbr64 
ffffffff80004b52:	55                   	push   rbp
ffffffff80004b53:	48 89 e5             	mov    rbp,rsp
ffffffff80004b56:	48 83 ec 20          	sub    rsp,0x20
ffffffff80004b5a:	48 c7 c7 f0 b2 00 80 	mov    rdi,0xffffffff8000b2f0
ffffffff80004b61:	e8 90 fb ff ff       	call   ffffffff800046f6 <spinlock::unlock()>
ffffffff80004b66:	48 c7 45 f0 48 ae 00 	mov    QWORD PTR [rbp-0x10],0xffffffff8000ae48
ffffffff80004b6d:	80 
ffffffff80004b6e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff80004b75:	eb 7a                	jmp    ffffffff80004bf1 <Scheduler::Initialize()+0xa3>
ffffffff80004b77:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004b7b:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004b7e:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff80004b82:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004b85:	48 98                	cdqe   
ffffffff80004b87:	48 c1 e0 03          	shl    rax,0x3
ffffffff80004b8b:	48 01 d0             	add    rax,rdx
ffffffff80004b8e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004b91:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80004b93:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff80004b96:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80004b99:	48 89 d0             	mov    rax,rdx
ffffffff80004b9c:	48 01 c0             	add    rax,rax
ffffffff80004b9f:	48 01 d0             	add    rax,rdx
ffffffff80004ba2:	48 c1 e0 04          	shl    rax,0x4
ffffffff80004ba6:	48 05 18 b3 00 80    	add    rax,0xffffffff8000b318
ffffffff80004bac:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80004bb3:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80004bb6:	48 89 d0             	mov    rax,rdx
ffffffff80004bb9:	48 01 c0             	add    rax,rax
ffffffff80004bbc:	48 01 d0             	add    rax,rdx
ffffffff80004bbf:	48 c1 e0 04          	shl    rax,0x4
ffffffff80004bc3:	48 05 08 b3 00 80    	add    rax,0xffffffff8000b308
ffffffff80004bc9:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80004bd0:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff80004bd3:	48 89 d0             	mov    rax,rdx
ffffffff80004bd6:	48 01 c0             	add    rax,rax
ffffffff80004bd9:	48 01 d0             	add    rax,rdx
ffffffff80004bdc:	48 c1 e0 04          	shl    rax,0x4
ffffffff80004be0:	48 05 10 b3 00 80    	add    rax,0xffffffff8000b310
ffffffff80004be6:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
ffffffff80004bed:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80004bf1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80004bf4:	48 63 d0             	movsxd rdx,eax
ffffffff80004bf7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80004bfb:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004bfe:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004c02:	48 39 c2             	cmp    rdx,rax
ffffffff80004c05:	0f 82 6c ff ff ff    	jb     ffffffff80004b77 <Scheduler::Initialize()+0x29>
ffffffff80004c0b:	90                   	nop
ffffffff80004c0c:	90                   	nop
ffffffff80004c0d:	c9                   	leave  
ffffffff80004c0e:	c3                   	ret    

ffffffff80004c0f <__static_initialization_and_destruction_0(int, int)>:
ffffffff80004c0f:	f3 0f 1e fa          	endbr64 
ffffffff80004c13:	55                   	push   rbp
ffffffff80004c14:	48 89 e5             	mov    rbp,rsp
ffffffff80004c17:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004c1b:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80004c1e:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80004c21:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80004c25:	75 15                	jne    ffffffff80004c3c <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80004c27:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80004c2e:	75 0c                	jne    ffffffff80004c3c <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80004c30:	48 c7 c7 f0 b2 00 80 	mov    rdi,0xffffffff8000b2f0
ffffffff80004c37:	e8 64 fa ff ff       	call   ffffffff800046a0 <spinlock::spinlock()>
ffffffff80004c3c:	90                   	nop
ffffffff80004c3d:	c9                   	leave  
ffffffff80004c3e:	c3                   	ret    

ffffffff80004c3f <_GLOBAL__sub_I_sched_mutex>:
ffffffff80004c3f:	f3 0f 1e fa          	endbr64 
ffffffff80004c43:	55                   	push   rbp
ffffffff80004c44:	48 89 e5             	mov    rbp,rsp
ffffffff80004c47:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80004c4c:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80004c51:	e8 b9 ff ff ff       	call   ffffffff80004c0f <__static_initialization_and_destruction_0(int, int)>
ffffffff80004c56:	5d                   	pop    rbp
ffffffff80004c57:	c3                   	ret    

ffffffff80004c58 <Thread::SetPID(int)>:
ffffffff80004c58:	f3 0f 1e fa          	endbr64 
ffffffff80004c5c:	55                   	push   rbp
ffffffff80004c5d:	48 89 e5             	mov    rbp,rsp
ffffffff80004c60:	48 83 ec 10          	sub    rsp,0x10
ffffffff80004c64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80004c68:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
ffffffff80004c6b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004c6f:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80004c72:	89 90 b8 00 00 00    	mov    DWORD PTR [rax+0xb8],edx
ffffffff80004c78:	90                   	nop
ffffffff80004c79:	c9                   	leave  
ffffffff80004c7a:	c3                   	ret    
ffffffff80004c7b:	90                   	nop

ffffffff80004c7c <memset(void*, int, unsigned long)>:
ffffffff80004c7c:	55                   	push   rbp
ffffffff80004c7d:	48 89 e5             	mov    rbp,rsp
ffffffff80004c80:	48 83 ec 28          	sub    rsp,0x28
ffffffff80004c84:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80004c88:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
ffffffff80004c8b:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80004c8f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004c93:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80004c97:	eb 13                	jmp    ffffffff80004cac <memset(void*, int, unsigned long)+0x30>
ffffffff80004c99:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff80004c9c:	89 c1                	mov    ecx,eax
ffffffff80004c9e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80004ca2:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80004ca6:	48 89 55 f8          	mov    QWORD PTR [rbp-0x8],rdx
ffffffff80004caa:	88 08                	mov    BYTE PTR [rax],cl
ffffffff80004cac:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80004cb0:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80004cb4:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80004cb8:	48 85 c0             	test   rax,rax
ffffffff80004cbb:	0f 95 c0             	setne  al
ffffffff80004cbe:	84 c0                	test   al,al
ffffffff80004cc0:	75 d7                	jne    ffffffff80004c99 <memset(void*, int, unsigned long)+0x1d>
ffffffff80004cc2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80004cc6:	c9                   	leave  
ffffffff80004cc7:	c3                   	ret    

ffffffff80004cc8 <Thread::Thread(unsigned long, bool)>:
ffffffff80004cc8:	f3 0f 1e fa          	endbr64 
ffffffff80004ccc:	55                   	push   rbp
ffffffff80004ccd:	48 89 e5             	mov    rbp,rsp
ffffffff80004cd0:	53                   	push   rbx
ffffffff80004cd1:	48 81 ec 98 00 00 00 	sub    rsp,0x98
ffffffff80004cd8:	48 89 bd 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],rdi
ffffffff80004cdf:	48 89 b5 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],rsi
ffffffff80004ce6:	89 d0                	mov    eax,edx
ffffffff80004ce8:	88 85 6c ff ff ff    	mov    BYTE PTR [rbp-0x94],al
ffffffff80004cee:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004cf5:	ba b0 00 00 00       	mov    edx,0xb0
ffffffff80004cfa:	be 00 00 00 00       	mov    esi,0x0
ffffffff80004cff:	48 89 c7             	mov    rdi,rax
ffffffff80004d02:	e8 75 ff ff ff       	call   ffffffff80004c7c <memset(void*, int, unsigned long)>
ffffffff80004d07:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004d0e:	48 8b 95 70 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x90]
ffffffff80004d15:	48 89 90 88 00 00 00 	mov    QWORD PTR [rax+0x88],rdx
ffffffff80004d1c:	80 bd 6c ff ff ff 00 	cmp    BYTE PTR [rbp-0x94],0x0
ffffffff80004d23:	74 07                	je     ffffffff80004d2c <Thread::Thread(unsigned long, bool)+0x64>
ffffffff80004d25:	ba 1b 00 00 00       	mov    edx,0x1b
ffffffff80004d2a:	eb 05                	jmp    ffffffff80004d31 <Thread::Thread(unsigned long, bool)+0x69>
ffffffff80004d2c:	ba 08 00 00 00       	mov    edx,0x8
ffffffff80004d31:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004d38:	48 89 90 90 00 00 00 	mov    QWORD PTR [rax+0x90],rdx
ffffffff80004d3f:	80 bd 6c ff ff ff 00 	cmp    BYTE PTR [rbp-0x94],0x0
ffffffff80004d46:	74 07                	je     ffffffff80004d4f <Thread::Thread(unsigned long, bool)+0x87>
ffffffff80004d48:	ba 23 00 00 00       	mov    edx,0x23
ffffffff80004d4d:	eb 05                	jmp    ffffffff80004d54 <Thread::Thread(unsigned long, bool)+0x8c>
ffffffff80004d4f:	ba 10 00 00 00       	mov    edx,0x10
ffffffff80004d54:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004d5b:	48 89 90 a8 00 00 00 	mov    QWORD PTR [rax+0xa8],rdx
ffffffff80004d62:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004d69:	48 bb 00 00 01 00 00 	movabs rbx,0xffffa00000010000
ffffffff80004d70:	a0 ff ff 
ffffffff80004d73:	48 89 98 a0 00 00 00 	mov    QWORD PTR [rax+0xa0],rbx
ffffffff80004d7a:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004d81:	48 c7 80 98 00 00 00 	mov    QWORD PTR [rax+0x98],0x202
ffffffff80004d88:	02 02 00 00 
ffffffff80004d8c:	c7 45 a4 00 00 01 00 	mov    DWORD PTR [rbp-0x5c],0x10000
ffffffff80004d93:	c7 45 a0 00 10 00 00 	mov    DWORD PTR [rbp-0x60],0x1000
ffffffff80004d9a:	8b 45 a4             	mov    eax,DWORD PTR [rbp-0x5c]
ffffffff80004d9d:	89 45 9c             	mov    DWORD PTR [rbp-0x64],eax
ffffffff80004da0:	8b 45 a0             	mov    eax,DWORD PTR [rbp-0x60]
ffffffff80004da3:	89 45 98             	mov    DWORD PTR [rbp-0x68],eax
ffffffff80004da6:	8b 45 98             	mov    eax,DWORD PTR [rbp-0x68]
ffffffff80004da9:	8d 50 ff             	lea    edx,[rax-0x1]
ffffffff80004dac:	8b 45 9c             	mov    eax,DWORD PTR [rbp-0x64]
ffffffff80004daf:	01 d0                	add    eax,edx
ffffffff80004db1:	99                   	cdq    
ffffffff80004db2:	f7 7d 98             	idiv   DWORD PTR [rbp-0x68]
ffffffff80004db5:	0f af 45 a0          	imul   eax,DWORD PTR [rbp-0x60]
ffffffff80004db9:	48 98                	cdqe   
ffffffff80004dbb:	48 89 c7             	mov    rdi,rax
ffffffff80004dbe:	e8 04 c3 ff ff       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff80004dc3:	48 89 45 90          	mov    QWORD PTR [rbp-0x70],rax
ffffffff80004dc7:	48 8b 05 9a 59 00 00 	mov    rax,QWORD PTR [rip+0x599a]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80004dce:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004dd2:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80004dd6:	48 01 d0             	add    rax,rdx
ffffffff80004dd9:	48 89 c6             	mov    rsi,rax
ffffffff80004ddc:	48 c7 c7 f8 8f 00 80 	mov    rdi,0xffffffff80008ff8
ffffffff80004de3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80004de8:	e8 5c f7 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80004ded:	48 c7 45 d8 00 00 00 	mov    QWORD PTR [rbp-0x28],0x0
ffffffff80004df4:	00 
ffffffff80004df5:	eb 21                	jmp    ffffffff80004e18 <Thread::Thread(unsigned long, bool)+0x150>
ffffffff80004df7:	48 8b 05 6a 59 00 00 	mov    rax,QWORD PTR [rip+0x596a]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80004dfe:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004e02:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
ffffffff80004e06:	48 01 c2             	add    rdx,rax
ffffffff80004e09:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80004e0d:	48 01 d0             	add    rax,rdx
ffffffff80004e10:	c6 00 00             	mov    BYTE PTR [rax],0x0
ffffffff80004e13:	48 83 45 d8 01       	add    QWORD PTR [rbp-0x28],0x1
ffffffff80004e18:	48 81 7d d8 ff ff 00 	cmp    QWORD PTR [rbp-0x28],0xffff
ffffffff80004e1f:	00 
ffffffff80004e20:	76 d5                	jbe    ffffffff80004df7 <Thread::Thread(unsigned long, bool)+0x12f>
ffffffff80004e22:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80004e27:	e8 9b c2 ff ff       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff80004e2c:	48 8b 95 78 ff ff ff 	mov    rdx,QWORD PTR [rbp-0x88]
ffffffff80004e33:	48 89 82 b0 00 00 00 	mov    QWORD PTR [rdx+0xb0],rax
ffffffff80004e3a:	48 c7 45 d0 00 00 00 	mov    QWORD PTR [rbp-0x30],0x0
ffffffff80004e41:	00 
ffffffff80004e42:	eb 2e                	jmp    ffffffff80004e72 <Thread::Thread(unsigned long, bool)+0x1aa>
ffffffff80004e44:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004e4b:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff80004e52:	48 89 c2             	mov    rdx,rax
ffffffff80004e55:	48 8b 05 0c 59 00 00 	mov    rax,QWORD PTR [rip+0x590c]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80004e5c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004e60:	48 01 c2             	add    rdx,rax
ffffffff80004e63:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
ffffffff80004e67:	48 01 d0             	add    rax,rdx
ffffffff80004e6a:	c6 00 00             	mov    BYTE PTR [rax],0x0
ffffffff80004e6d:	48 83 45 d0 01       	add    QWORD PTR [rbp-0x30],0x1
ffffffff80004e72:	48 81 7d d0 ff 0f 00 	cmp    QWORD PTR [rbp-0x30],0xfff
ffffffff80004e79:	00 
ffffffff80004e7a:	76 c8                	jbe    ffffffff80004e44 <Thread::Thread(unsigned long, bool)+0x17c>
ffffffff80004e7c:	48 c7 45 c8 00 00 00 	mov    QWORD PTR [rbp-0x38],0x0
ffffffff80004e83:	00 
ffffffff80004e84:	eb 48                	jmp    ffffffff80004ece <Thread::Thread(unsigned long, bool)+0x206>
ffffffff80004e86:	48 8b 05 1b 59 00 00 	mov    rax,QWORD PTR [rip+0x591b]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff80004e8d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80004e91:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80004e95:	48 01 c2             	add    rdx,rax
ffffffff80004e98:	48 8b 05 09 59 00 00 	mov    rax,QWORD PTR [rip+0x5909]        # ffffffff8000a7a8 <kernel_addr+0x28>
ffffffff80004e9f:	48 8b 48 10          	mov    rcx,QWORD PTR [rax+0x10]
ffffffff80004ea3:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
ffffffff80004ea7:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffffffff80004eab:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004eb2:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff80004eb9:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80004ebe:	48 89 c7             	mov    rdi,rax
ffffffff80004ec1:	e8 2e c5 ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80004ec6:	48 81 45 c8 00 10 00 	add    QWORD PTR [rbp-0x38],0x1000
ffffffff80004ecd:	00 
ffffffff80004ece:	48 8b 05 13 59 00 00 	mov    rax,QWORD PTR [rip+0x5913]        # ffffffff8000a7e8 <kernel_file+0x28>
ffffffff80004ed5:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004ed9:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004edd:	48 39 45 c8          	cmp    QWORD PTR [rbp-0x38],rax
ffffffff80004ee1:	72 a3                	jb     ffffffff80004e86 <Thread::Thread(unsigned long, bool)+0x1be>
ffffffff80004ee3:	48 8b 05 3e 58 00 00 	mov    rax,QWORD PTR [rip+0x583e]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80004eea:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004eee:	48 89 45 88          	mov    QWORD PTR [rbp-0x78],rax
ffffffff80004ef2:	48 c7 45 e8 00 00 00 	mov    QWORD PTR [rbp-0x18],0x0
ffffffff80004ef9:	00 
ffffffff80004efa:	48 c7 45 e0 00 00 00 	mov    QWORD PTR [rbp-0x20],0x0
ffffffff80004f01:	00 
ffffffff80004f02:	48 c7 45 c0 00 00 00 	mov    QWORD PTR [rbp-0x40],0x0
ffffffff80004f09:	00 
ffffffff80004f0a:	eb 63                	jmp    ffffffff80004f6f <Thread::Thread(unsigned long, bool)+0x2a7>
ffffffff80004f0c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80004f10:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80004f17:	00 
ffffffff80004f18:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80004f1c:	48 01 d0             	add    rax,rdx
ffffffff80004f1f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004f22:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff80004f26:	48 83 f8 07          	cmp    rax,0x7
ffffffff80004f2a:	75 3d                	jne    ffffffff80004f69 <Thread::Thread(unsigned long, bool)+0x2a1>
ffffffff80004f2c:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80004f30:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80004f37:	00 
ffffffff80004f38:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80004f3c:	48 01 d0             	add    rax,rdx
ffffffff80004f3f:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004f42:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004f45:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80004f49:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
ffffffff80004f4d:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
ffffffff80004f54:	00 
ffffffff80004f55:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
ffffffff80004f59:	48 01 d0             	add    rax,rdx
ffffffff80004f5c:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80004f5f:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004f63:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
ffffffff80004f67:	eb 17                	jmp    ffffffff80004f80 <Thread::Thread(unsigned long, bool)+0x2b8>
ffffffff80004f69:	90                   	nop
ffffffff80004f6a:	48 83 45 c0 01       	add    QWORD PTR [rbp-0x40],0x1
ffffffff80004f6f:	48 8b 05 b2 57 00 00 	mov    rax,QWORD PTR [rip+0x57b2]        # ffffffff8000a728 <mmap_req+0x28>
ffffffff80004f76:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80004f7a:	48 39 45 c0          	cmp    QWORD PTR [rbp-0x40],rax
ffffffff80004f7e:	72 8c                	jb     ffffffff80004f0c <Thread::Thread(unsigned long, bool)+0x244>
ffffffff80004f80:	48 c7 45 b8 00 00 00 	mov    QWORD PTR [rbp-0x48],0x0
ffffffff80004f87:	00 
ffffffff80004f88:	eb 42                	jmp    ffffffff80004fcc <Thread::Thread(unsigned long, bool)+0x304>
ffffffff80004f8a:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
ffffffff80004f8e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80004f92:	48 8d 1c 02          	lea    rbx,[rdx+rax*1]
ffffffff80004f96:	e8 32 f1 ff ff       	call   ffffffff800040cd <Screen::GetFramebuffer()>
ffffffff80004f9b:	48 89 c2             	mov    rdx,rax
ffffffff80004f9e:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80004fa2:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff80004fa6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80004fad:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff80004fb4:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff80004fb9:	48 89 da             	mov    rdx,rbx
ffffffff80004fbc:	48 89 c7             	mov    rdi,rax
ffffffff80004fbf:	e8 30 c4 ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80004fc4:	48 81 45 b8 00 10 00 	add    QWORD PTR [rbp-0x48],0x1000
ffffffff80004fcb:	00 
ffffffff80004fcc:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
ffffffff80004fd0:	48 3b 45 e0          	cmp    rax,QWORD PTR [rbp-0x20]
ffffffff80004fd4:	72 b4                	jb     ffffffff80004f8a <Thread::Thread(unsigned long, bool)+0x2c2>
ffffffff80004fd6:	48 c7 45 b0 00 00 00 	mov    QWORD PTR [rbp-0x50],0x0
ffffffff80004fdd:	00 
ffffffff80004fde:	eb 40                	jmp    ffffffff80005020 <Thread::Thread(unsigned long, bool)+0x358>
ffffffff80004fe0:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
ffffffff80004fe4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80004fe8:	48 01 c2             	add    rdx,rax
ffffffff80004feb:	48 b9 00 00 00 00 00 	movabs rcx,0xffffa00000000000
ffffffff80004ff2:	a0 ff ff 
ffffffff80004ff5:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
ffffffff80004ff9:	48 8d 34 01          	lea    rsi,[rcx+rax*1]
ffffffff80004ffd:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80005004:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff8000500b:	b9 07 00 00 00       	mov    ecx,0x7
ffffffff80005010:	48 89 c7             	mov    rdi,rax
ffffffff80005013:	e8 dc c3 ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80005018:	48 81 45 b0 00 10 00 	add    QWORD PTR [rbp-0x50],0x1000
ffffffff8000501f:	00 
ffffffff80005020:	48 81 7d b0 ff ff 00 	cmp    QWORD PTR [rbp-0x50],0xffff
ffffffff80005027:	00 
ffffffff80005028:	76 b6                	jbe    ffffffff80004fe0 <Thread::Thread(unsigned long, bool)+0x318>
ffffffff8000502a:	48 c7 45 a8 00 00 00 	mov    QWORD PTR [rbp-0x58],0x0
ffffffff80005031:	00 
ffffffff80005032:	eb 3a                	jmp    ffffffff8000506e <Thread::Thread(unsigned long, bool)+0x3a6>
ffffffff80005034:	48 8b 05 2d 57 00 00 	mov    rax,QWORD PTR [rip+0x572d]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff8000503b:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff8000503f:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
ffffffff80005043:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
ffffffff80005047:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff8000504e:	48 8b 80 b0 00 00 00 	mov    rax,QWORD PTR [rax+0xb0]
ffffffff80005055:	48 8b 55 a8          	mov    rdx,QWORD PTR [rbp-0x58]
ffffffff80005059:	b9 03 00 00 00       	mov    ecx,0x3
ffffffff8000505e:	48 89 c7             	mov    rdi,rax
ffffffff80005061:	e8 8e c3 ff ff       	call   ffffffff800013f4 <VirtualMemory::MapPage(PML4Table*, unsigned long, unsigned long, unsigned long)>
ffffffff80005066:	48 81 45 a8 00 10 00 	add    QWORD PTR [rbp-0x58],0x1000
ffffffff8000506d:	00 
ffffffff8000506e:	b8 ff ff ff ff       	mov    eax,0xffffffff
ffffffff80005073:	48 39 45 a8          	cmp    QWORD PTR [rbp-0x58],rax
ffffffff80005077:	76 bb                	jbe    ffffffff80005034 <Thread::Thread(unsigned long, bool)+0x36c>
ffffffff80005079:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
ffffffff80005080:	48 c7 80 c0 00 00 00 	mov    QWORD PTR [rax+0xc0],0x0
ffffffff80005087:	00 00 00 00 
ffffffff8000508b:	90                   	nop
ffffffff8000508c:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff80005090:	c9                   	leave  
ffffffff80005091:	c3                   	ret    

ffffffff80005092 <Utils::rdmsr(unsigned long)>:
ffffffff80005092:	55                   	push   rbp
ffffffff80005093:	48 89 e5             	mov    rbp,rsp
ffffffff80005096:	48 83 ec 18          	sub    rsp,0x18
ffffffff8000509a:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff8000509e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800050a2:	48 89 c1             	mov    rcx,rax
ffffffff800050a5:	0f 32                	rdmsr  
ffffffff800050a7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800050aa:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
ffffffff800050ad:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800050b0:	48 c1 e0 20          	shl    rax,0x20
ffffffff800050b4:	48 89 c2             	mov    rdx,rax
ffffffff800050b7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800050ba:	48 09 d0             	or     rax,rdx
ffffffff800050bd:	c9                   	leave  
ffffffff800050be:	c3                   	ret    

ffffffff800050bf <GetCurCPU()>:
ffffffff800050bf:	f3 0f 1e fa          	endbr64 
ffffffff800050c3:	55                   	push   rbp
ffffffff800050c4:	48 89 e5             	mov    rbp,rsp
ffffffff800050c7:	b8 02 01 00 c0       	mov    eax,0xc0000102
ffffffff800050cc:	48 89 c7             	mov    rdi,rax
ffffffff800050cf:	e8 be ff ff ff       	call   ffffffff80005092 <Utils::rdmsr(unsigned long)>
ffffffff800050d4:	5d                   	pop    rbp
ffffffff800050d5:	c3                   	ret    

ffffffff800050d6 <__static_initialization_and_destruction_0(int, int)>:
ffffffff800050d6:	f3 0f 1e fa          	endbr64 
ffffffff800050da:	55                   	push   rbp
ffffffff800050db:	48 89 e5             	mov    rbp,rsp
ffffffff800050de:	41 54                	push   r12
ffffffff800050e0:	53                   	push   rbx
ffffffff800050e1:	48 83 ec 10          	sub    rsp,0x10
ffffffff800050e5:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff800050e8:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff800050eb:	83 7d ec 01          	cmp    DWORD PTR [rbp-0x14],0x1
ffffffff800050ef:	75 5d                	jne    ffffffff8000514e <__static_initialization_and_destruction_0(int, int)+0x78>
ffffffff800050f1:	81 7d e8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x18],0xffff
ffffffff800050f8:	75 54                	jne    ffffffff8000514e <__static_initialization_and_destruction_0(int, int)+0x78>
ffffffff800050fa:	48 c7 c0 00 b3 00 80 	mov    rax,0xffffffff8000b300
ffffffff80005101:	41 bc ff 00 00 00    	mov    r12d,0xff
ffffffff80005107:	48 89 c3             	mov    rbx,rax
ffffffff8000510a:	eb 3d                	jmp    ffffffff80005149 <__static_initialization_and_destruction_0(int, int)+0x73>
ffffffff8000510c:	48 c7 03 00 00 00 00 	mov    QWORD PTR [rbx],0x0
ffffffff80005113:	48 c7 43 08 00 00 00 	mov    QWORD PTR [rbx+0x8],0x0
ffffffff8000511a:	00 
ffffffff8000511b:	48 c7 43 10 00 00 00 	mov    QWORD PTR [rbx+0x10],0x0
ffffffff80005122:	00 
ffffffff80005123:	48 c7 43 18 00 00 00 	mov    QWORD PTR [rbx+0x18],0x0
ffffffff8000512a:	00 
ffffffff8000512b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [rbx+0x20],0x0
ffffffff80005132:	c7 43 28 00 00 00 00 	mov    DWORD PTR [rbx+0x28],0x0
ffffffff80005139:	48 89 df             	mov    rdi,rbx
ffffffff8000513c:	e8 4f 00 00 00       	call   ffffffff80005190 <CPU::CPU()>
ffffffff80005141:	48 83 c3 30          	add    rbx,0x30
ffffffff80005145:	49 83 ec 01          	sub    r12,0x1
ffffffff80005149:	4d 85 e4             	test   r12,r12
ffffffff8000514c:	79 be                	jns    ffffffff8000510c <__static_initialization_and_destruction_0(int, int)+0x36>
ffffffff8000514e:	90                   	nop
ffffffff8000514f:	48 83 c4 10          	add    rsp,0x10
ffffffff80005153:	5b                   	pop    rbx
ffffffff80005154:	41 5c                	pop    r12
ffffffff80005156:	5d                   	pop    rbp
ffffffff80005157:	c3                   	ret    

ffffffff80005158 <_GLOBAL__sub_I__Z9GetCurCPUv>:
ffffffff80005158:	f3 0f 1e fa          	endbr64 
ffffffff8000515c:	55                   	push   rbp
ffffffff8000515d:	48 89 e5             	mov    rbp,rsp
ffffffff80005160:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80005165:	bf 01 00 00 00       	mov    edi,0x1
ffffffff8000516a:	e8 67 ff ff ff       	call   ffffffff800050d6 <__static_initialization_and_destruction_0(int, int)>
ffffffff8000516f:	5d                   	pop    rbp
ffffffff80005170:	c3                   	ret    
ffffffff80005171:	90                   	nop

ffffffff80005172 <TaskQueue::TaskQueue()>:
ffffffff80005172:	f3 0f 1e fa          	endbr64 
ffffffff80005176:	55                   	push   rbp
ffffffff80005177:	48 89 e5             	mov    rbp,rsp
ffffffff8000517a:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000517e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80005182:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005186:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
ffffffff8000518d:	90                   	nop
ffffffff8000518e:	c9                   	leave  
ffffffff8000518f:	c3                   	ret    

ffffffff80005190 <CPU::CPU()>:
ffffffff80005190:	f3 0f 1e fa          	endbr64 
ffffffff80005194:	55                   	push   rbp
ffffffff80005195:	48 89 e5             	mov    rbp,rsp
ffffffff80005198:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000519c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800051a0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800051a4:	48 83 c0 08          	add    rax,0x8
ffffffff800051a8:	48 89 c7             	mov    rdi,rax
ffffffff800051ab:	e8 c2 ff ff ff       	call   ffffffff80005172 <TaskQueue::TaskQueue()>
ffffffff800051b0:	90                   	nop
ffffffff800051b1:	c9                   	leave  
ffffffff800051b2:	c3                   	ret    

ffffffff800051b3 <Utils::ReadCr0()>:
ffffffff800051b3:	55                   	push   rbp
ffffffff800051b4:	48 89 e5             	mov    rbp,rsp
ffffffff800051b7:	48 83 ec 10          	sub    rsp,0x10
ffffffff800051bb:	0f 20 c0             	mov    rax,cr0
ffffffff800051be:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800051c1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800051c4:	c9                   	leave  
ffffffff800051c5:	c3                   	ret    

ffffffff800051c6 <Utils::WriteCr0(unsigned int)>:
ffffffff800051c6:	55                   	push   rbp
ffffffff800051c7:	48 89 e5             	mov    rbp,rsp
ffffffff800051ca:	48 83 ec 08          	sub    rsp,0x8
ffffffff800051ce:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800051d1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800051d4:	0f 22 c0             	mov    cr0,rax
ffffffff800051d7:	90                   	nop
ffffffff800051d8:	c9                   	leave  
ffffffff800051d9:	c3                   	ret    

ffffffff800051da <Utils::ReadCr4()>:
ffffffff800051da:	55                   	push   rbp
ffffffff800051db:	48 89 e5             	mov    rbp,rsp
ffffffff800051de:	48 83 ec 10          	sub    rsp,0x10
ffffffff800051e2:	0f 20 e0             	mov    rax,cr4
ffffffff800051e5:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800051e8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800051eb:	c9                   	leave  
ffffffff800051ec:	c3                   	ret    

ffffffff800051ed <Utils::WriteCr4(unsigned int)>:
ffffffff800051ed:	55                   	push   rbp
ffffffff800051ee:	48 89 e5             	mov    rbp,rsp
ffffffff800051f1:	48 83 ec 08          	sub    rsp,0x8
ffffffff800051f5:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800051f8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800051fb:	0f 22 e0             	mov    cr4,rax
ffffffff800051fe:	90                   	nop
ffffffff800051ff:	c9                   	leave  
ffffffff80005200:	c3                   	ret    

ffffffff80005201 <Features::DetectAndInit()>:
ffffffff80005201:	f3 0f 1e fa          	endbr64 
ffffffff80005205:	55                   	push   rbp
ffffffff80005206:	48 89 e5             	mov    rbp,rsp
ffffffff80005209:	53                   	push   rbx
ffffffff8000520a:	48 83 ec 28          	sub    rsp,0x28
ffffffff8000520e:	b8 01 00 00 00       	mov    eax,0x1
ffffffff80005213:	0f a2                	cpuid  
ffffffff80005215:	89 de                	mov    esi,ebx
ffffffff80005217:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff8000521a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff8000521d:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
ffffffff80005220:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff80005223:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff80005226:	25 00 00 00 02       	and    eax,0x2000000
ffffffff8000522b:	85 c0                	test   eax,eax
ffffffff8000522d:	75 16                	jne    ffffffff80005245 <Features::DetectAndInit()+0x44>
ffffffff8000522f:	48 c7 c7 18 90 00 80 	mov    rdi,0xffffffff80009018
ffffffff80005236:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000523b:	e8 09 f3 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005240:	e8 24 c0 ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80005245:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
ffffffff80005248:	25 00 00 00 04       	and    eax,0x4000000
ffffffff8000524d:	85 c0                	test   eax,eax
ffffffff8000524f:	75 16                	jne    ffffffff80005267 <Features::DetectAndInit()+0x66>
ffffffff80005251:	48 c7 c7 48 90 00 80 	mov    rdi,0xffffffff80009048
ffffffff80005258:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000525d:	e8 e7 f2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005262:	e8 02 c0 ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80005267:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
ffffffff8000526a:	83 e0 01             	and    eax,0x1
ffffffff8000526d:	85 c0                	test   eax,eax
ffffffff8000526f:	75 16                	jne    ffffffff80005287 <Features::DetectAndInit()+0x86>
ffffffff80005271:	48 c7 c7 80 90 00 80 	mov    rdi,0xffffffff80009080
ffffffff80005278:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000527d:	e8 c7 f2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005282:	e8 e2 bf ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80005287:	b8 07 00 00 00       	mov    eax,0x7
ffffffff8000528c:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80005291:	89 d1                	mov    ecx,edx
ffffffff80005293:	0f a2                	cpuid  
ffffffff80005295:	89 de                	mov    esi,ebx
ffffffff80005297:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
ffffffff8000529a:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
ffffffff8000529d:	89 4d e4             	mov    DWORD PTR [rbp-0x1c],ecx
ffffffff800052a0:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
ffffffff800052a3:	e8 0b ff ff ff       	call   ffffffff800051b3 <Utils::ReadCr0()>
ffffffff800052a8:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
ffffffff800052ab:	83 65 dc fb          	and    DWORD PTR [rbp-0x24],0xfffffffb
ffffffff800052af:	83 4d dc 02          	or     DWORD PTR [rbp-0x24],0x2
ffffffff800052b3:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
ffffffff800052b6:	89 c7                	mov    edi,eax
ffffffff800052b8:	e8 09 ff ff ff       	call   ffffffff800051c6 <Utils::WriteCr0(unsigned int)>
ffffffff800052bd:	e8 18 ff ff ff       	call   ffffffff800051da <Utils::ReadCr4()>
ffffffff800052c2:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff800052c5:	81 4d d8 00 06 04 00 	or     DWORD PTR [rbp-0x28],0x40600
ffffffff800052cc:	8b 45 d8             	mov    eax,DWORD PTR [rbp-0x28]
ffffffff800052cf:	89 c7                	mov    edi,eax
ffffffff800052d1:	e8 17 ff ff ff       	call   ffffffff800051ed <Utils::WriteCr4(unsigned int)>
ffffffff800052d6:	48 c7 c7 b1 90 00 80 	mov    rdi,0xffffffff800090b1
ffffffff800052dd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800052e2:	e8 62 f2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800052e7:	db e3                	fninit 
ffffffff800052e9:	48 c7 c7 be 90 00 80 	mov    rdi,0xffffffff800090be
ffffffff800052f0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800052f5:	e8 4f f2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800052fa:	90                   	nop
ffffffff800052fb:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
ffffffff800052ff:	c9                   	leave  
ffffffff80005300:	c3                   	ret    

ffffffff80005301 <Utils::ReadCr2()>:
ffffffff80005301:	55                   	push   rbp
ffffffff80005302:	48 89 e5             	mov    rbp,rsp
ffffffff80005305:	48 83 ec 10          	sub    rsp,0x10
ffffffff80005309:	0f 20 d0             	mov    rax,cr2
ffffffff8000530c:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff8000530f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005312:	c9                   	leave  
ffffffff80005313:	c3                   	ret    

ffffffff80005314 <SetIDTEntry(int, unsigned long, unsigned char, unsigned short, unsigned char, unsigned char)>:
ffffffff80005314:	f3 0f 1e fa          	endbr64 
ffffffff80005318:	55                   	push   rbp
ffffffff80005319:	48 89 e5             	mov    rbp,rsp
ffffffff8000531c:	48 83 ec 20          	sub    rsp,0x20
ffffffff80005320:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80005323:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff80005327:	89 c8                	mov    eax,ecx
ffffffff80005329:	44 89 c6             	mov    esi,r8d
ffffffff8000532c:	44 89 c9             	mov    ecx,r9d
ffffffff8000532f:	88 55 f8             	mov    BYTE PTR [rbp-0x8],dl
ffffffff80005332:	66 89 45 ec          	mov    WORD PTR [rbp-0x14],ax
ffffffff80005336:	89 f0                	mov    eax,esi
ffffffff80005338:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
ffffffff8000533b:	89 c8                	mov    eax,ecx
ffffffff8000533d:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff80005340:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005344:	89 c2                	mov    edx,eax
ffffffff80005346:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005349:	48 98                	cdqe   
ffffffff8000534b:	48 c1 e0 04          	shl    rax,0x4
ffffffff8000534f:	48 05 00 eb 00 80    	add    rax,0xffffffff8000eb00
ffffffff80005355:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80005358:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000535c:	48 c1 e8 10          	shr    rax,0x10
ffffffff80005360:	89 c2                	mov    edx,eax
ffffffff80005362:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005365:	48 98                	cdqe   
ffffffff80005367:	48 c1 e0 04          	shl    rax,0x4
ffffffff8000536b:	48 05 06 eb 00 80    	add    rax,0xffffffff8000eb06
ffffffff80005371:	66 89 10             	mov    WORD PTR [rax],dx
ffffffff80005374:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005378:	48 c1 e8 20          	shr    rax,0x20
ffffffff8000537c:	89 c2                	mov    edx,eax
ffffffff8000537e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005381:	48 98                	cdqe   
ffffffff80005383:	48 c1 e0 04          	shl    rax,0x4
ffffffff80005387:	48 05 08 eb 00 80    	add    rax,0xffffffff8000eb08
ffffffff8000538d:	89 10                	mov    DWORD PTR [rax],edx
ffffffff8000538f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005392:	48 98                	cdqe   
ffffffff80005394:	48 c1 e0 04          	shl    rax,0x4
ffffffff80005398:	48 8d 90 04 eb 00 80 	lea    rdx,[rax-0x7fff14fc]
ffffffff8000539f:	0f b6 45 f8          	movzx  eax,BYTE PTR [rbp-0x8]
ffffffff800053a3:	88 02                	mov    BYTE PTR [rdx],al
ffffffff800053a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [rbp-0x1c]
ffffffff800053a9:	c1 e0 05             	shl    eax,0x5
ffffffff800053ac:	0a 45 e8             	or     al,BYTE PTR [rbp-0x18]
ffffffff800053af:	83 c8 80             	or     eax,0xffffff80
ffffffff800053b2:	89 c2                	mov    edx,eax
ffffffff800053b4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800053b7:	48 98                	cdqe   
ffffffff800053b9:	48 c1 e0 04          	shl    rax,0x4
ffffffff800053bd:	48 05 05 eb 00 80    	add    rax,0xffffffff8000eb05
ffffffff800053c3:	88 10                	mov    BYTE PTR [rax],dl
ffffffff800053c5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800053c8:	48 98                	cdqe   
ffffffff800053ca:	48 c1 e0 04          	shl    rax,0x4
ffffffff800053ce:	48 8d 90 02 eb 00 80 	lea    rdx,[rax-0x7fff14fe]
ffffffff800053d5:	0f b7 45 ec          	movzx  eax,WORD PTR [rbp-0x14]
ffffffff800053d9:	66 89 02             	mov    WORD PTR [rdx],ax
ffffffff800053dc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800053df:	48 98                	cdqe   
ffffffff800053e1:	48 c1 e0 04          	shl    rax,0x4
ffffffff800053e5:	48 05 0c eb 00 80    	add    rax,0xffffffff8000eb0c
ffffffff800053eb:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
ffffffff800053f1:	90                   	nop
ffffffff800053f2:	c9                   	leave  
ffffffff800053f3:	c3                   	ret    

ffffffff800053f4 <interrupt_handler>:
ffffffff800053f4:	f3 0f 1e fa          	endbr64 
ffffffff800053f8:	55                   	push   rbp
ffffffff800053f9:	48 89 e5             	mov    rbp,rsp
ffffffff800053fc:	48 83 ec 20          	sub    rsp,0x20
ffffffff80005400:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80005404:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005408:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff8000540c:	48 83 f8 1f          	cmp    rax,0x1f
ffffffff80005410:	0f 87 b0 01 00 00    	ja     ffffffff800055c6 <interrupt_handler+0x1d2>
ffffffff80005416:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000541a:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff8000541e:	48 8b 04 c5 80 ac 00 	mov    rax,QWORD PTR [rax*8-0x7fff5380]
ffffffff80005425:	80 
ffffffff80005426:	48 89 c6             	mov    rsi,rax
ffffffff80005429:	48 c7 c7 d0 92 00 80 	mov    rdi,0xffffffff800092d0
ffffffff80005430:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005435:	e8 0f f1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff8000543a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000543e:	48 8b 70 58          	mov    rsi,QWORD PTR [rax+0x58]
ffffffff80005442:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005446:	48 8b 48 60          	mov    rcx,QWORD PTR [rax+0x60]
ffffffff8000544a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000544e:	48 8b 50 68          	mov    rdx,QWORD PTR [rax+0x68]
ffffffff80005452:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005456:	48 8b 40 70          	mov    rax,QWORD PTR [rax+0x70]
ffffffff8000545a:	49 89 f0             	mov    r8,rsi
ffffffff8000545d:	48 89 c6             	mov    rsi,rax
ffffffff80005460:	48 c7 c7 f8 92 00 80 	mov    rdi,0xffffffff800092f8
ffffffff80005467:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000546c:	e8 d8 f0 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005471:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005475:	48 8b b0 a0 00 00 00 	mov    rsi,QWORD PTR [rax+0xa0]
ffffffff8000547c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005480:	48 8b 48 40          	mov    rcx,QWORD PTR [rax+0x40]
ffffffff80005484:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005488:	48 8b 50 48          	mov    rdx,QWORD PTR [rax+0x48]
ffffffff8000548c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005490:	48 8b 40 50          	mov    rax,QWORD PTR [rax+0x50]
ffffffff80005494:	49 89 f0             	mov    r8,rsi
ffffffff80005497:	48 89 c6             	mov    rsi,rax
ffffffff8000549a:	48 c7 c7 20 93 00 80 	mov    rdi,0xffffffff80009320
ffffffff800054a1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800054a6:	e8 9e f0 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800054ab:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054af:	48 8b 70 20          	mov    rsi,QWORD PTR [rax+0x20]
ffffffff800054b3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054b7:	48 8b 48 28          	mov    rcx,QWORD PTR [rax+0x28]
ffffffff800054bb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054bf:	48 8b 50 30          	mov    rdx,QWORD PTR [rax+0x30]
ffffffff800054c3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054c7:	48 8b 40 38          	mov    rax,QWORD PTR [rax+0x38]
ffffffff800054cb:	49 89 f0             	mov    r8,rsi
ffffffff800054ce:	48 89 c6             	mov    rsi,rax
ffffffff800054d1:	48 c7 c7 48 93 00 80 	mov    rdi,0xffffffff80009348
ffffffff800054d8:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800054dd:	e8 67 f0 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800054e2:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054e6:	48 8b 30             	mov    rsi,QWORD PTR [rax]
ffffffff800054e9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054ed:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
ffffffff800054f1:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054f5:	48 8b 50 10          	mov    rdx,QWORD PTR [rax+0x10]
ffffffff800054f9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800054fd:	48 8b 40 18          	mov    rax,QWORD PTR [rax+0x18]
ffffffff80005501:	49 89 f0             	mov    r8,rsi
ffffffff80005504:	48 89 c6             	mov    rsi,rax
ffffffff80005507:	48 c7 c7 70 93 00 80 	mov    rdi,0xffffffff80009370
ffffffff8000550e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005513:	e8 31 f0 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005518:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff8000551c:	48 8b 90 80 00 00 00 	mov    rdx,QWORD PTR [rax+0x80]
ffffffff80005523:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005527:	48 8b 80 88 00 00 00 	mov    rax,QWORD PTR [rax+0x88]
ffffffff8000552e:	48 89 c6             	mov    rsi,rax
ffffffff80005531:	48 c7 c7 98 93 00 80 	mov    rdi,0xffffffff80009398
ffffffff80005538:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000553d:	e8 07 f0 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005542:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005546:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff8000554a:	48 83 f8 0e          	cmp    rax,0xe
ffffffff8000554e:	75 18                	jne    ffffffff80005568 <interrupt_handler+0x174>
ffffffff80005550:	e8 ac fd ff ff       	call   ffffffff80005301 <Utils::ReadCr2()>
ffffffff80005555:	89 c6                	mov    esi,eax
ffffffff80005557:	48 c7 c7 c2 93 00 80 	mov    rdi,0xffffffff800093c2
ffffffff8000555e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005563:	e8 e1 ef ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005568:	48 c7 c7 cc 93 00 80 	mov    rdi,0xffffffff800093cc
ffffffff8000556f:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005574:	e8 d0 ef ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005579:	48 89 e8             	mov    rax,rbp
ffffffff8000557c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80005580:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
ffffffff80005587:	eb 2b                	jmp    ffffffff800055b4 <interrupt_handler+0x1c0>
ffffffff80005589:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000558d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80005591:	48 89 c6             	mov    rsi,rax
ffffffff80005594:	48 c7 c7 da 93 00 80 	mov    rdi,0xffffffff800093da
ffffffff8000559b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800055a0:	e8 a4 ef ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800055a5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff800055a9:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff800055ac:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff800055b0:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
ffffffff800055b4:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
ffffffff800055b9:	74 06                	je     ffffffff800055c1 <interrupt_handler+0x1cd>
ffffffff800055bb:	83 7d f4 09          	cmp    DWORD PTR [rbp-0xc],0x9
ffffffff800055bf:	76 c8                	jbe    ffffffff80005589 <interrupt_handler+0x195>
ffffffff800055c1:	e8 a3 bc ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff800055c6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800055ca:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff800055ce:	48 8b 04 c5 00 e3 00 	mov    rax,QWORD PTR [rax*8-0x7fff1d00]
ffffffff800055d5:	80 
ffffffff800055d6:	48 85 c0             	test   rax,rax
ffffffff800055d9:	75 21                	jne    ffffffff800055fc <interrupt_handler+0x208>
ffffffff800055db:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff800055df:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff800055e3:	48 89 c6             	mov    rsi,rax
ffffffff800055e6:	48 c7 c7 e8 93 00 80 	mov    rdi,0xffffffff800093e8
ffffffff800055ed:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800055f2:	e8 52 ef ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800055f7:	e8 6d bc ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff800055fc:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005600:	48 8b 40 78          	mov    rax,QWORD PTR [rax+0x78]
ffffffff80005604:	48 8b 14 c5 00 e3 00 	mov    rdx,QWORD PTR [rax*8-0x7fff1d00]
ffffffff8000560b:	80 
ffffffff8000560c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005610:	48 89 c7             	mov    rdi,rax
ffffffff80005613:	ff d2                	call   rdx
ffffffff80005615:	c9                   	leave  
ffffffff80005616:	c3                   	ret    

ffffffff80005617 <IDT::Initialize()>:
ffffffff80005617:	f3 0f 1e fa          	endbr64 
ffffffff8000561b:	55                   	push   rbp
ffffffff8000561c:	48 89 e5             	mov    rbp,rsp
ffffffff8000561f:	48 83 ec 10          	sub    rsp,0x10
ffffffff80005623:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
ffffffff8000562a:	eb 34                	jmp    ffffffff80005660 <IDT::Initialize()+0x49>
ffffffff8000562c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000562f:	48 98                	cdqe   
ffffffff80005631:	48 8b 04 c5 01 71 00 	mov    rax,QWORD PTR [rax*8-0x7fff8eff]
ffffffff80005638:	80 
ffffffff80005639:	48 89 c6             	mov    rsi,rax
ffffffff8000563c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000563f:	41 b9 00 00 00 00    	mov    r9d,0x0
ffffffff80005645:	41 b8 0e 00 00 00    	mov    r8d,0xe
ffffffff8000564b:	b9 08 00 00 00       	mov    ecx,0x8
ffffffff80005650:	ba 00 00 00 00       	mov    edx,0x0
ffffffff80005655:	89 c7                	mov    edi,eax
ffffffff80005657:	e8 b8 fc ff ff       	call   ffffffff80005314 <SetIDTEntry(int, unsigned long, unsigned char, unsigned short, unsigned char, unsigned char)>
ffffffff8000565c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
ffffffff80005660:	81 7d fc ff 00 00 00 	cmp    DWORD PTR [rbp-0x4],0xff
ffffffff80005667:	7e c3                	jle    ffffffff8000562c <IDT::Initialize()+0x15>
ffffffff80005669:	48 c7 c0 00 eb 00 80 	mov    rax,0xffffffff8000eb00
ffffffff80005670:	48 89 05 8b a4 00 00 	mov    QWORD PTR [rip+0xa48b],rax        # ffffffff8000fb02 <idtr+0x2>
ffffffff80005677:	66 c7 05 80 a4 00 00 	mov    WORD PTR [rip+0xa480],0xfff        # ffffffff8000fb00 <idtr>
ffffffff8000567e:	ff 0f 
ffffffff80005680:	48 c7 c0 00 fb 00 80 	mov    rax,0xffffffff8000fb00
ffffffff80005687:	48 89 c7             	mov    rdi,rax
ffffffff8000568a:	e8 72 22 00 00       	call   ffffffff80007901 <LoadIdt>
ffffffff8000568f:	fb                   	sti    
ffffffff80005690:	90                   	nop
ffffffff80005691:	c9                   	leave  
ffffffff80005692:	c3                   	ret    

ffffffff80005693 <IDT::AddHandler(int, SavedRegs* (*)(SavedRegs*))>:
ffffffff80005693:	f3 0f 1e fa          	endbr64 
ffffffff80005697:	55                   	push   rbp
ffffffff80005698:	48 89 e5             	mov    rbp,rsp
ffffffff8000569b:	48 83 ec 10          	sub    rsp,0x10
ffffffff8000569f:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff800056a2:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
ffffffff800056a6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800056a9:	48 98                	cdqe   
ffffffff800056ab:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff800056af:	48 89 14 c5 00 e3 00 	mov    QWORD PTR [rax*8-0x7fff1d00],rdx
ffffffff800056b6:	80 
ffffffff800056b7:	90                   	nop
ffffffff800056b8:	c9                   	leave  
ffffffff800056b9:	c3                   	ret    

ffffffff800056ba <GDT::SetupGdt(int)>:
ffffffff800056ba:	f3 0f 1e fa          	endbr64 
ffffffff800056be:	55                   	push   rbp
ffffffff800056bf:	48 89 e5             	mov    rbp,rsp
ffffffff800056c2:	48 83 ec 20          	sub    rsp,0x20
ffffffff800056c6:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff800056c9:	48 c7 c7 20 fb 00 80 	mov    rdi,0xffffffff8000fb20
ffffffff800056d0:	e8 ef ef ff ff       	call   ffffffff800046c4 <spinlock::lock()>
ffffffff800056d5:	bf 04 00 00 00       	mov    edi,0x4
ffffffff800056da:	e8 e8 b9 ff ff       	call   ffffffff800010c7 <PhysicalMemory::alloc(unsigned long)>
ffffffff800056df:	48 89 c2             	mov    rdx,rax
ffffffff800056e2:	48 8b 05 7f 50 00 00 	mov    rax,QWORD PTR [rip+0x507f]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff800056e9:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff800056ed:	48 01 d0             	add    rax,rdx
ffffffff800056f0:	48 8d 88 00 40 00 00 	lea    rcx,[rax+0x4000]
ffffffff800056f7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800056fa:	48 63 d0             	movsxd rdx,eax
ffffffff800056fd:	48 89 d0             	mov    rax,rdx
ffffffff80005700:	48 01 c0             	add    rax,rax
ffffffff80005703:	48 01 d0             	add    rax,rdx
ffffffff80005706:	48 c1 e0 02          	shl    rax,0x2
ffffffff8000570a:	48 01 d0             	add    rax,rdx
ffffffff8000570d:	48 c1 e0 03          	shl    rax,0x3
ffffffff80005711:	48 05 a0 fb 00 80    	add    rax,0xffffffff8000fba0
ffffffff80005717:	48 89 48 04          	mov    QWORD PTR [rax+0x4],rcx
ffffffff8000571b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff8000571e:	48 63 d0             	movsxd rdx,eax
ffffffff80005721:	48 89 d0             	mov    rax,rdx
ffffffff80005724:	48 01 c0             	add    rax,rax
ffffffff80005727:	48 01 d0             	add    rax,rdx
ffffffff8000572a:	48 c1 e0 02          	shl    rax,0x2
ffffffff8000572e:	48 01 d0             	add    rax,rdx
ffffffff80005731:	48 c1 e0 03          	shl    rax,0x3
ffffffff80005735:	48 05 06 fc 00 80    	add    rax,0xffffffff8000fc06
ffffffff8000573b:	66 c7 00 68 00       	mov    WORD PTR [rax],0x68
ffffffff80005740:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff80005743:	48 63 d0             	movsxd rdx,eax
ffffffff80005746:	48 89 d0             	mov    rax,rdx
ffffffff80005749:	48 01 c0             	add    rax,rax
ffffffff8000574c:	48 01 d0             	add    rax,rdx
ffffffff8000574f:	48 c1 e0 02          	shl    rax,0x2
ffffffff80005753:	48 01 d0             	add    rax,rdx
ffffffff80005756:	48 c1 e0 03          	shl    rax,0x3
ffffffff8000575a:	48 05 a0 fb 00 80    	add    rax,0xffffffff8000fba0
ffffffff80005760:	48 8b 40 04          	mov    rax,QWORD PTR [rax+0x4]
ffffffff80005764:	48 2d 00 40 00 00    	sub    rax,0x4000
ffffffff8000576a:	48 89 c6             	mov    rsi,rax
ffffffff8000576d:	48 c7 c7 10 94 00 80 	mov    rdi,0xffffffff80009410
ffffffff80005774:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005779:	e8 cb ed ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff8000577e:	c6 05 c0 a3 00 00 00 	mov    BYTE PTR [rip+0xa3c0],0x0        # ffffffff8000fb45 <gdt+0x5>
ffffffff80005785:	66 c7 05 b4 a3 00 00 	mov    WORD PTR [rip+0xa3b4],0x0        # ffffffff8000fb42 <gdt+0x2>
ffffffff8000578c:	00 00 
ffffffff8000578e:	c6 05 af a3 00 00 00 	mov    BYTE PTR [rip+0xa3af],0x0        # ffffffff8000fb44 <gdt+0x4>
ffffffff80005795:	c6 05 ab a3 00 00 00 	mov    BYTE PTR [rip+0xa3ab],0x0        # ffffffff8000fb47 <gdt+0x7>
ffffffff8000579c:	0f b6 05 a3 a3 00 00 	movzx  eax,BYTE PTR [rip+0xa3a3]        # ffffffff8000fb46 <gdt+0x6>
ffffffff800057a3:	83 e0 0f             	and    eax,0xf
ffffffff800057a6:	88 05 9a a3 00 00    	mov    BYTE PTR [rip+0xa39a],al        # ffffffff8000fb46 <gdt+0x6>
ffffffff800057ac:	66 c7 05 8b a3 00 00 	mov    WORD PTR [rip+0xa38b],0x0        # ffffffff8000fb40 <gdt>
ffffffff800057b3:	00 00 
ffffffff800057b5:	0f b6 05 8a a3 00 00 	movzx  eax,BYTE PTR [rip+0xa38a]        # ffffffff8000fb46 <gdt+0x6>
ffffffff800057bc:	83 e0 f0             	and    eax,0xfffffff0
ffffffff800057bf:	88 05 81 a3 00 00    	mov    BYTE PTR [rip+0xa381],al        # ffffffff8000fb46 <gdt+0x6>
ffffffff800057c5:	c6 05 81 a3 00 00 9a 	mov    BYTE PTR [rip+0xa381],0x9a        # ffffffff8000fb4d <gdt+0xd>
ffffffff800057cc:	66 c7 05 75 a3 00 00 	mov    WORD PTR [rip+0xa375],0x0        # ffffffff8000fb4a <gdt+0xa>
ffffffff800057d3:	00 00 
ffffffff800057d5:	c6 05 70 a3 00 00 00 	mov    BYTE PTR [rip+0xa370],0x0        # ffffffff8000fb4c <gdt+0xc>
ffffffff800057dc:	c6 05 6c a3 00 00 00 	mov    BYTE PTR [rip+0xa36c],0x0        # ffffffff8000fb4f <gdt+0xf>
ffffffff800057e3:	0f b6 05 64 a3 00 00 	movzx  eax,BYTE PTR [rip+0xa364]        # ffffffff8000fb4e <gdt+0xe>
ffffffff800057ea:	83 e0 0f             	and    eax,0xf
ffffffff800057ed:	83 c8 a0             	or     eax,0xffffffa0
ffffffff800057f0:	88 05 58 a3 00 00    	mov    BYTE PTR [rip+0xa358],al        # ffffffff8000fb4e <gdt+0xe>
ffffffff800057f6:	66 c7 05 49 a3 00 00 	mov    WORD PTR [rip+0xa349],0xffff        # ffffffff8000fb48 <gdt+0x8>
ffffffff800057fd:	ff ff 
ffffffff800057ff:	0f b6 05 48 a3 00 00 	movzx  eax,BYTE PTR [rip+0xa348]        # ffffffff8000fb4e <gdt+0xe>
ffffffff80005806:	83 c8 0f             	or     eax,0xf
ffffffff80005809:	88 05 3f a3 00 00    	mov    BYTE PTR [rip+0xa33f],al        # ffffffff8000fb4e <gdt+0xe>
ffffffff8000580f:	c6 05 3f a3 00 00 92 	mov    BYTE PTR [rip+0xa33f],0x92        # ffffffff8000fb55 <gdt+0x15>
ffffffff80005816:	66 c7 05 33 a3 00 00 	mov    WORD PTR [rip+0xa333],0x0        # ffffffff8000fb52 <gdt+0x12>
ffffffff8000581d:	00 00 
ffffffff8000581f:	c6 05 2e a3 00 00 00 	mov    BYTE PTR [rip+0xa32e],0x0        # ffffffff8000fb54 <gdt+0x14>
ffffffff80005826:	c6 05 2a a3 00 00 00 	mov    BYTE PTR [rip+0xa32a],0x0        # ffffffff8000fb57 <gdt+0x17>
ffffffff8000582d:	0f b6 05 22 a3 00 00 	movzx  eax,BYTE PTR [rip+0xa322]        # ffffffff8000fb56 <gdt+0x16>
ffffffff80005834:	83 e0 0f             	and    eax,0xf
ffffffff80005837:	83 c8 c0             	or     eax,0xffffffc0
ffffffff8000583a:	88 05 16 a3 00 00    	mov    BYTE PTR [rip+0xa316],al        # ffffffff8000fb56 <gdt+0x16>
ffffffff80005840:	66 c7 05 07 a3 00 00 	mov    WORD PTR [rip+0xa307],0xffff        # ffffffff8000fb50 <gdt+0x10>
ffffffff80005847:	ff ff 
ffffffff80005849:	0f b6 05 06 a3 00 00 	movzx  eax,BYTE PTR [rip+0xa306]        # ffffffff8000fb56 <gdt+0x16>
ffffffff80005850:	83 c8 0f             	or     eax,0xf
ffffffff80005853:	88 05 fd a2 00 00    	mov    BYTE PTR [rip+0xa2fd],al        # ffffffff8000fb56 <gdt+0x16>
ffffffff80005859:	c6 05 fd a2 00 00 fa 	mov    BYTE PTR [rip+0xa2fd],0xfa        # ffffffff8000fb5d <gdt+0x1d>
ffffffff80005860:	66 c7 05 f1 a2 00 00 	mov    WORD PTR [rip+0xa2f1],0x0        # ffffffff8000fb5a <gdt+0x1a>
ffffffff80005867:	00 00 
ffffffff80005869:	c6 05 ec a2 00 00 00 	mov    BYTE PTR [rip+0xa2ec],0x0        # ffffffff8000fb5c <gdt+0x1c>
ffffffff80005870:	c6 05 e8 a2 00 00 00 	mov    BYTE PTR [rip+0xa2e8],0x0        # ffffffff8000fb5f <gdt+0x1f>
ffffffff80005877:	0f b6 05 e0 a2 00 00 	movzx  eax,BYTE PTR [rip+0xa2e0]        # ffffffff8000fb5e <gdt+0x1e>
ffffffff8000587e:	83 e0 0f             	and    eax,0xf
ffffffff80005881:	83 c8 a0             	or     eax,0xffffffa0
ffffffff80005884:	88 05 d4 a2 00 00    	mov    BYTE PTR [rip+0xa2d4],al        # ffffffff8000fb5e <gdt+0x1e>
ffffffff8000588a:	66 c7 05 c5 a2 00 00 	mov    WORD PTR [rip+0xa2c5],0xffff        # ffffffff8000fb58 <gdt+0x18>
ffffffff80005891:	ff ff 
ffffffff80005893:	0f b6 05 c4 a2 00 00 	movzx  eax,BYTE PTR [rip+0xa2c4]        # ffffffff8000fb5e <gdt+0x1e>
ffffffff8000589a:	83 c8 0f             	or     eax,0xf
ffffffff8000589d:	88 05 bb a2 00 00    	mov    BYTE PTR [rip+0xa2bb],al        # ffffffff8000fb5e <gdt+0x1e>
ffffffff800058a3:	c6 05 bb a2 00 00 f2 	mov    BYTE PTR [rip+0xa2bb],0xf2        # ffffffff8000fb65 <gdt+0x25>
ffffffff800058aa:	66 c7 05 af a2 00 00 	mov    WORD PTR [rip+0xa2af],0x0        # ffffffff8000fb62 <gdt+0x22>
ffffffff800058b1:	00 00 
ffffffff800058b3:	c6 05 aa a2 00 00 00 	mov    BYTE PTR [rip+0xa2aa],0x0        # ffffffff8000fb64 <gdt+0x24>
ffffffff800058ba:	c6 05 a6 a2 00 00 00 	mov    BYTE PTR [rip+0xa2a6],0x0        # ffffffff8000fb67 <gdt+0x27>
ffffffff800058c1:	0f b6 05 9e a2 00 00 	movzx  eax,BYTE PTR [rip+0xa29e]        # ffffffff8000fb66 <gdt+0x26>
ffffffff800058c8:	83 e0 0f             	and    eax,0xf
ffffffff800058cb:	83 c8 c0             	or     eax,0xffffffc0
ffffffff800058ce:	88 05 92 a2 00 00    	mov    BYTE PTR [rip+0xa292],al        # ffffffff8000fb66 <gdt+0x26>
ffffffff800058d4:	66 c7 05 83 a2 00 00 	mov    WORD PTR [rip+0xa283],0xffff        # ffffffff8000fb60 <gdt+0x20>
ffffffff800058db:	ff ff 
ffffffff800058dd:	0f b6 05 82 a2 00 00 	movzx  eax,BYTE PTR [rip+0xa282]        # ffffffff8000fb66 <gdt+0x26>
ffffffff800058e4:	83 c8 0f             	or     eax,0xf
ffffffff800058e7:	88 05 79 a2 00 00    	mov    BYTE PTR [rip+0xa279],al        # ffffffff8000fb66 <gdt+0x26>
ffffffff800058ed:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800058f0:	48 63 d0             	movsxd rdx,eax
ffffffff800058f3:	48 89 d0             	mov    rax,rdx
ffffffff800058f6:	48 01 c0             	add    rax,rax
ffffffff800058f9:	48 01 d0             	add    rax,rdx
ffffffff800058fc:	48 c1 e0 02          	shl    rax,0x2
ffffffff80005900:	48 01 d0             	add    rax,rdx
ffffffff80005903:	48 c1 e0 03          	shl    rax,0x3
ffffffff80005907:	48 05 a0 fb 00 80    	add    rax,0xffffffff8000fba0
ffffffff8000590d:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80005911:	66 c7 45 f6 68 00    	mov    WORD PTR [rbp-0xa],0x68
ffffffff80005917:	c6 05 4f a2 00 00 89 	mov    BYTE PTR [rip+0xa24f],0x89        # ffffffff8000fb6d <gdt+0x2d>
ffffffff8000591e:	0f b6 05 49 a2 00 00 	movzx  eax,BYTE PTR [rip+0xa249]        # ffffffff8000fb6e <gdt+0x2e>
ffffffff80005925:	83 e0 0f             	and    eax,0xf
ffffffff80005928:	88 05 40 a2 00 00    	mov    BYTE PTR [rip+0xa240],al        # ffffffff8000fb6e <gdt+0x2e>
ffffffff8000592e:	c7 05 3c a2 00 00 00 	mov    DWORD PTR [rip+0xa23c],0x0        # ffffffff8000fb74 <gdt+0x34>
ffffffff80005935:	00 00 00 
ffffffff80005938:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000593c:	66 89 05 27 a2 00 00 	mov    WORD PTR [rip+0xa227],ax        # ffffffff8000fb6a <gdt+0x2a>
ffffffff80005943:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005947:	48 c1 e8 10          	shr    rax,0x10
ffffffff8000594b:	88 05 1b a2 00 00    	mov    BYTE PTR [rip+0xa21b],al        # ffffffff8000fb6c <gdt+0x2c>
ffffffff80005951:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005955:	48 c1 e8 18          	shr    rax,0x18
ffffffff80005959:	88 05 10 a2 00 00    	mov    BYTE PTR [rip+0xa210],al        # ffffffff8000fb6f <gdt+0x2f>
ffffffff8000595f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005963:	48 c1 e8 20          	shr    rax,0x20
ffffffff80005967:	89 05 03 a2 00 00    	mov    DWORD PTR [rip+0xa203],eax        # ffffffff8000fb70 <gdt+0x30>
ffffffff8000596d:	0f b7 45 f6          	movzx  eax,WORD PTR [rbp-0xa]
ffffffff80005971:	66 89 05 f0 a1 00 00 	mov    WORD PTR [rip+0xa1f0],ax        # ffffffff8000fb68 <gdt+0x28>
ffffffff80005978:	0f b6 05 ef a1 00 00 	movzx  eax,BYTE PTR [rip+0xa1ef]        # ffffffff8000fb6e <gdt+0x2e>
ffffffff8000597f:	83 e0 f0             	and    eax,0xfffffff0
ffffffff80005982:	88 05 e6 a1 00 00    	mov    BYTE PTR [rip+0xa1e6],al        # ffffffff8000fb6e <gdt+0x2e>
ffffffff80005988:	48 c7 c0 40 fb 00 80 	mov    rax,0xffffffff8000fb40
ffffffff8000598f:	48 89 05 e4 a1 00 00 	mov    QWORD PTR [rip+0xa1e4],rax        # ffffffff8000fb7a <gdtr+0x2>
ffffffff80005996:	66 c7 05 d9 a1 00 00 	mov    WORD PTR [rip+0xa1d9],0x37        # ffffffff8000fb78 <gdtr>
ffffffff8000599d:	37 00 
ffffffff8000599f:	48 c7 c0 78 fb 00 80 	mov    rax,0xffffffff8000fb78
ffffffff800059a6:	48 89 c7             	mov    rdi,rax
ffffffff800059a9:	e8 62 1f 00 00       	call   ffffffff80007910 <LoadGdt>
ffffffff800059ae:	b8 28 00 00 00       	mov    eax,0x28
ffffffff800059b3:	0f 00 d8             	ltr    ax
ffffffff800059b6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800059b9:	48 63 d0             	movsxd rdx,eax
ffffffff800059bc:	48 89 d0             	mov    rax,rdx
ffffffff800059bf:	48 01 c0             	add    rax,rax
ffffffff800059c2:	48 01 d0             	add    rax,rdx
ffffffff800059c5:	48 c1 e0 02          	shl    rax,0x2
ffffffff800059c9:	48 01 d0             	add    rax,rdx
ffffffff800059cc:	48 c1 e0 03          	shl    rax,0x3
ffffffff800059d0:	48 8d 88 a0 fb 00 80 	lea    rcx,[rax-0x7fff0460]
ffffffff800059d7:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800059da:	48 63 d0             	movsxd rdx,eax
ffffffff800059dd:	48 89 d0             	mov    rax,rdx
ffffffff800059e0:	48 01 c0             	add    rax,rax
ffffffff800059e3:	48 01 d0             	add    rax,rdx
ffffffff800059e6:	48 c1 e0 04          	shl    rax,0x4
ffffffff800059ea:	48 05 00 b3 00 80    	add    rax,0xffffffff8000b300
ffffffff800059f0:	48 89 08             	mov    QWORD PTR [rax],rcx
ffffffff800059f3:	48 c7 c7 20 fb 00 80 	mov    rdi,0xffffffff8000fb20
ffffffff800059fa:	e8 f7 ec ff ff       	call   ffffffff800046f6 <spinlock::unlock()>
ffffffff800059ff:	90                   	nop
ffffffff80005a00:	c9                   	leave  
ffffffff80005a01:	c3                   	ret    

ffffffff80005a02 <__static_initialization_and_destruction_0(int, int)>:
ffffffff80005a02:	f3 0f 1e fa          	endbr64 
ffffffff80005a06:	55                   	push   rbp
ffffffff80005a07:	48 89 e5             	mov    rbp,rsp
ffffffff80005a0a:	48 83 ec 10          	sub    rsp,0x10
ffffffff80005a0e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80005a11:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80005a14:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff80005a18:	75 15                	jne    ffffffff80005a2f <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80005a1a:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80005a21:	75 0c                	jne    ffffffff80005a2f <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80005a23:	48 c7 c7 20 fb 00 80 	mov    rdi,0xffffffff8000fb20
ffffffff80005a2a:	e8 71 ec ff ff       	call   ffffffff800046a0 <spinlock::spinlock()>
ffffffff80005a2f:	90                   	nop
ffffffff80005a30:	c9                   	leave  
ffffffff80005a31:	c3                   	ret    

ffffffff80005a32 <_GLOBAL__sub_I_stack_size>:
ffffffff80005a32:	f3 0f 1e fa          	endbr64 
ffffffff80005a36:	55                   	push   rbp
ffffffff80005a37:	48 89 e5             	mov    rbp,rsp
ffffffff80005a3a:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80005a3f:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80005a44:	e8 b9 ff ff ff       	call   ffffffff80005a02 <__static_initialization_and_destruction_0(int, int)>
ffffffff80005a49:	5d                   	pop    rbp
ffffffff80005a4a:	c3                   	ret    

ffffffff80005a4b <PIC::RemapAndDisable()>:
ffffffff80005a4b:	f3 0f 1e fa          	endbr64 
ffffffff80005a4f:	55                   	push   rbp
ffffffff80005a50:	48 89 e5             	mov    rbp,rsp
ffffffff80005a53:	be 11 00 00 00       	mov    esi,0x11
ffffffff80005a58:	bf 20 00 00 00       	mov    edi,0x20
ffffffff80005a5d:	e8 c6 d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005a62:	be 11 00 00 00       	mov    esi,0x11
ffffffff80005a67:	bf a0 00 00 00       	mov    edi,0xa0
ffffffff80005a6c:	e8 b7 d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005a71:	be 20 00 00 00       	mov    esi,0x20
ffffffff80005a76:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80005a7b:	e8 a8 d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005a80:	be 28 00 00 00       	mov    esi,0x28
ffffffff80005a85:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80005a8a:	e8 99 d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005a8f:	be 04 00 00 00       	mov    esi,0x4
ffffffff80005a94:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80005a99:	e8 8a d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005a9e:	be 02 00 00 00       	mov    esi,0x2
ffffffff80005aa3:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80005aa8:	e8 7b d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005aad:	be 01 00 00 00       	mov    esi,0x1
ffffffff80005ab2:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80005ab7:	e8 6c d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005abc:	be 01 00 00 00       	mov    esi,0x1
ffffffff80005ac1:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80005ac6:	e8 5d d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005acb:	be ff 00 00 00       	mov    esi,0xff
ffffffff80005ad0:	bf 21 00 00 00       	mov    edi,0x21
ffffffff80005ad5:	e8 4e d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005ada:	be ff 00 00 00       	mov    esi,0xff
ffffffff80005adf:	bf a1 00 00 00       	mov    edi,0xa1
ffffffff80005ae4:	e8 3f d6 ff ff       	call   ffffffff80003128 <Utils::outb(unsigned short, unsigned char)>
ffffffff80005ae9:	90                   	nop
ffffffff80005aea:	5d                   	pop    rbp
ffffffff80005aeb:	c3                   	ret    

ffffffff80005aec <strncmp(char const*, char const*, unsigned long)>:
ffffffff80005aec:	55                   	push   rbp
ffffffff80005aed:	48 89 e5             	mov    rbp,rsp
ffffffff80005af0:	48 83 ec 28          	sub    rsp,0x28
ffffffff80005af4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80005af8:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80005afc:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80005b00:	eb 46                	jmp    ffffffff80005b48 <strncmp(char const*, char const*, unsigned long)+0x5c>
ffffffff80005b02:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005b06:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80005b0a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
ffffffff80005b0e:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005b11:	88 45 ff             	mov    BYTE PTR [rbp-0x1],al
ffffffff80005b14:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80005b18:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80005b1c:	48 89 55 e0          	mov    QWORD PTR [rbp-0x20],rdx
ffffffff80005b20:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005b23:	88 45 fe             	mov    BYTE PTR [rbp-0x2],al
ffffffff80005b26:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80005b2a:	3a 45 fe             	cmp    al,BYTE PTR [rbp-0x2]
ffffffff80005b2d:	74 0c                	je     ffffffff80005b3b <strncmp(char const*, char const*, unsigned long)+0x4f>
ffffffff80005b2f:	0f b6 45 ff          	movzx  eax,BYTE PTR [rbp-0x1]
ffffffff80005b33:	0f b6 55 fe          	movzx  edx,BYTE PTR [rbp-0x2]
ffffffff80005b37:	29 d0                	sub    eax,edx
ffffffff80005b39:	eb 28                	jmp    ffffffff80005b63 <strncmp(char const*, char const*, unsigned long)+0x77>
ffffffff80005b3b:	80 7d ff 00          	cmp    BYTE PTR [rbp-0x1],0x0
ffffffff80005b3f:	75 07                	jne    ffffffff80005b48 <strncmp(char const*, char const*, unsigned long)+0x5c>
ffffffff80005b41:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005b46:	eb 1b                	jmp    ffffffff80005b63 <strncmp(char const*, char const*, unsigned long)+0x77>
ffffffff80005b48:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
ffffffff80005b4c:	48 8d 50 ff          	lea    rdx,[rax-0x1]
ffffffff80005b50:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
ffffffff80005b54:	48 85 c0             	test   rax,rax
ffffffff80005b57:	0f 95 c0             	setne  al
ffffffff80005b5a:	84 c0                	test   al,al
ffffffff80005b5c:	75 a4                	jne    ffffffff80005b02 <strncmp(char const*, char const*, unsigned long)+0x16>
ffffffff80005b5e:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005b63:	c9                   	leave  
ffffffff80005b64:	c3                   	ret    

ffffffff80005b65 <ACPI::FindTable(char const*)>:
ffffffff80005b65:	f3 0f 1e fa          	endbr64 
ffffffff80005b69:	55                   	push   rbp
ffffffff80005b6a:	48 89 e5             	mov    rbp,rsp
ffffffff80005b6d:	48 83 ec 18          	sub    rsp,0x18
ffffffff80005b71:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80005b75:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80005b7c:	00 
ffffffff80005b7d:	eb 53                	jmp    ffffffff80005bd2 <ACPI::FindTable(char const*)+0x6d>
ffffffff80005b7f:	48 8b 05 1a 08 01 00 	mov    rax,QWORD PTR [rip+0x1081a]        # ffffffff800163a0 <rsdt>
ffffffff80005b86:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
ffffffff80005b8a:	48 83 c2 08          	add    rdx,0x8
ffffffff80005b8e:	8b 44 90 04          	mov    eax,DWORD PTR [rax+rdx*4+0x4]
ffffffff80005b92:	89 c2                	mov    edx,eax
ffffffff80005b94:	48 8b 05 cd 4b 00 00 	mov    rax,QWORD PTR [rip+0x4bcd]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80005b9b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80005b9f:	48 01 d0             	add    rax,rdx
ffffffff80005ba2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80005ba6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005baa:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80005bae:	ba 04 00 00 00       	mov    edx,0x4
ffffffff80005bb3:	48 89 ce             	mov    rsi,rcx
ffffffff80005bb6:	48 89 c7             	mov    rdi,rax
ffffffff80005bb9:	e8 2e ff ff ff       	call   ffffffff80005aec <strncmp(char const*, char const*, unsigned long)>
ffffffff80005bbe:	85 c0                	test   eax,eax
ffffffff80005bc0:	0f 94 c0             	sete   al
ffffffff80005bc3:	84 c0                	test   al,al
ffffffff80005bc5:	74 06                	je     ffffffff80005bcd <ACPI::FindTable(char const*)+0x68>
ffffffff80005bc7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005bcb:	eb 24                	jmp    ffffffff80005bf1 <ACPI::FindTable(char const*)+0x8c>
ffffffff80005bcd:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff80005bd2:	48 8b 05 c7 07 01 00 	mov    rax,QWORD PTR [rip+0x107c7]        # ffffffff800163a0 <rsdt>
ffffffff80005bd9:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff80005bdc:	89 c0                	mov    eax,eax
ffffffff80005bde:	48 83 e8 24          	sub    rax,0x24
ffffffff80005be2:	48 c1 e8 02          	shr    rax,0x2
ffffffff80005be6:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80005bea:	72 93                	jb     ffffffff80005b7f <ACPI::FindTable(char const*)+0x1a>
ffffffff80005bec:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005bf1:	c9                   	leave  
ffffffff80005bf2:	c3                   	ret    

ffffffff80005bf3 <ParseAPIC()>:
ffffffff80005bf3:	f3 0f 1e fa          	endbr64 
ffffffff80005bf7:	55                   	push   rbp
ffffffff80005bf8:	48 89 e5             	mov    rbp,rsp
ffffffff80005bfb:	48 83 ec 30          	sub    rsp,0x30
ffffffff80005bff:	48 c7 c7 38 94 00 80 	mov    rdi,0xffffffff80009438
ffffffff80005c06:	e8 5a ff ff ff       	call   ffffffff80005b65 <ACPI::FindTable(char const*)>
ffffffff80005c0b:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80005c0f:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005c13:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
ffffffff80005c17:	48 83 7d e8 00       	cmp    QWORD PTR [rbp-0x18],0x0
ffffffff80005c1c:	75 16                	jne    ffffffff80005c34 <ParseAPIC()+0x41>
ffffffff80005c1e:	48 c7 c7 3d 94 00 80 	mov    rdi,0xffffffff8000943d
ffffffff80005c25:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005c2a:	e8 1a e9 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005c2f:	e9 6b 01 00 00       	jmp    ffffffff80005d9f <ParseAPIC()+0x1ac>
ffffffff80005c34:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005c38:	48 83 c0 24          	add    rax,0x24
ffffffff80005c3c:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80005c3e:	89 05 64 07 01 00    	mov    DWORD PTR [rip+0x10764],eax        # ffffffff800163a8 <lapic_addr>
ffffffff80005c44:	48 c7 45 f8 2c 00 00 	mov    QWORD PTR [rbp-0x8],0x2c
ffffffff80005c4b:	00 
ffffffff80005c4c:	e9 3b 01 00 00       	jmp    ffffffff80005d8c <ParseAPIC()+0x199>
ffffffff80005c51:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005c55:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005c59:	48 01 d0             	add    rax,rdx
ffffffff80005c5c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005c5f:	88 45 e7             	mov    BYTE PTR [rbp-0x19],al
ffffffff80005c62:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005c66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005c6a:	48 01 d0             	add    rax,rdx
ffffffff80005c6d:	48 83 c0 01          	add    rax,0x1
ffffffff80005c71:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005c74:	88 45 e6             	mov    BYTE PTR [rbp-0x1a],al
ffffffff80005c77:	0f b6 45 e7          	movzx  eax,BYTE PTR [rbp-0x19]
ffffffff80005c7b:	83 f8 02             	cmp    eax,0x2
ffffffff80005c7e:	0f 84 9a 00 00 00    	je     ffffffff80005d1e <ParseAPIC()+0x12b>
ffffffff80005c84:	83 f8 02             	cmp    eax,0x2
ffffffff80005c87:	0f 8f f7 00 00 00    	jg     ffffffff80005d84 <ParseAPIC()+0x191>
ffffffff80005c8d:	85 c0                	test   eax,eax
ffffffff80005c8f:	74 0a                	je     ffffffff80005c9b <ParseAPIC()+0xa8>
ffffffff80005c91:	83 f8 01             	cmp    eax,0x1
ffffffff80005c94:	74 49                	je     ffffffff80005cdf <ParseAPIC()+0xec>
ffffffff80005c96:	e9 e9 00 00 00       	jmp    ffffffff80005d84 <ParseAPIC()+0x191>
ffffffff80005c9b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005c9f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005ca3:	48 01 d0             	add    rax,rdx
ffffffff80005ca6:	48 83 c0 02          	add    rax,0x2
ffffffff80005caa:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005cad:	88 45 d3             	mov    BYTE PTR [rbp-0x2d],al
ffffffff80005cb0:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005cb4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005cb8:	48 01 d0             	add    rax,rdx
ffffffff80005cbb:	48 83 c0 03          	add    rax,0x3
ffffffff80005cbf:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005cc2:	88 45 d2             	mov    BYTE PTR [rbp-0x2e],al
ffffffff80005cc5:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005cc9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005ccd:	48 01 d0             	add    rax,rdx
ffffffff80005cd0:	48 83 c0 04          	add    rax,0x4
ffffffff80005cd4:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005cd7:	88 45 d1             	mov    BYTE PTR [rbp-0x2f],al
ffffffff80005cda:	e9 a5 00 00 00       	jmp    ffffffff80005d84 <ParseAPIC()+0x191>
ffffffff80005cdf:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005ce3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005ce7:	48 01 d0             	add    rax,rdx
ffffffff80005cea:	48 83 c0 02          	add    rax,0x2
ffffffff80005cee:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005cf1:	88 45 df             	mov    BYTE PTR [rbp-0x21],al
ffffffff80005cf4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005cf8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005cfc:	48 01 d0             	add    rax,rdx
ffffffff80005cff:	48 83 c0 04          	add    rax,0x4
ffffffff80005d03:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80005d05:	89 45 d8             	mov    DWORD PTR [rbp-0x28],eax
ffffffff80005d08:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005d0c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005d10:	48 01 d0             	add    rax,rdx
ffffffff80005d13:	48 83 c0 08          	add    rax,0x8
ffffffff80005d17:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80005d19:	89 45 d4             	mov    DWORD PTR [rbp-0x2c],eax
ffffffff80005d1c:	eb 66                	jmp    ffffffff80005d84 <ParseAPIC()+0x191>
ffffffff80005d1e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005d22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005d26:	48 01 d0             	add    rax,rdx
ffffffff80005d29:	48 83 c0 02          	add    rax,0x2
ffffffff80005d2d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005d30:	88 45 e5             	mov    BYTE PTR [rbp-0x1b],al
ffffffff80005d33:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005d37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005d3b:	48 01 d0             	add    rax,rdx
ffffffff80005d3e:	48 83 c0 03          	add    rax,0x3
ffffffff80005d42:	0f b6 00             	movzx  eax,BYTE PTR [rax]
ffffffff80005d45:	88 45 e4             	mov    BYTE PTR [rbp-0x1c],al
ffffffff80005d48:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
ffffffff80005d4c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005d50:	48 01 d0             	add    rax,rdx
ffffffff80005d53:	48 83 c0 04          	add    rax,0x4
ffffffff80005d57:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80005d59:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
ffffffff80005d5c:	48 8b 05 5d 0e 01 00 	mov    rax,QWORD PTR [rip+0x10e5d]        # ffffffff80016bc0 <numGSIs>
ffffffff80005d63:	48 8d 50 01          	lea    rdx,[rax+0x1]
ffffffff80005d67:	48 89 15 52 0e 01 00 	mov    QWORD PTR [rip+0x10e52],rdx        # ffffffff80016bc0 <numGSIs>
ffffffff80005d6e:	0f b6 55 e4          	movzx  edx,BYTE PTR [rbp-0x1c]
ffffffff80005d72:	88 14 c5 c0 63 01 80 	mov    BYTE PTR [rax*8-0x7ffe9c40],dl
ffffffff80005d79:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
ffffffff80005d7c:	89 14 c5 c4 63 01 80 	mov    DWORD PTR [rax*8-0x7ffe9c3c],edx
ffffffff80005d83:	90                   	nop
ffffffff80005d84:	0f b6 45 e6          	movzx  eax,BYTE PTR [rbp-0x1a]
ffffffff80005d88:	48 01 45 f8          	add    QWORD PTR [rbp-0x8],rax
ffffffff80005d8c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005d90:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
ffffffff80005d93:	89 c0                	mov    eax,eax
ffffffff80005d95:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff80005d99:	0f 82 b2 fe ff ff    	jb     ffffffff80005c51 <ParseAPIC()+0x5e>
ffffffff80005d9f:	c9                   	leave  
ffffffff80005da0:	c3                   	ret    

ffffffff80005da1 <ACPI::ParseTables()>:
ffffffff80005da1:	f3 0f 1e fa          	endbr64 
ffffffff80005da5:	55                   	push   rbp
ffffffff80005da6:	48 89 e5             	mov    rbp,rsp
ffffffff80005da9:	48 83 ec 10          	sub    rsp,0x10
ffffffff80005dad:	48 8b 05 34 50 00 00 	mov    rax,QWORD PTR [rip+0x5034]        # ffffffff8000ade8 <rsdp+0x28>
ffffffff80005db4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80005db8:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
ffffffff80005dbc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005dc0:	48 89 c6             	mov    rsi,rax
ffffffff80005dc3:	48 c7 c7 5b 94 00 80 	mov    rdi,0xffffffff8000945b
ffffffff80005dca:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005dcf:	e8 75 e7 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005dd4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005dd8:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff80005ddc:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005de0:	ba 08 00 00 00       	mov    edx,0x8
ffffffff80005de5:	48 c7 c6 6c 94 00 80 	mov    rsi,0xffffffff8000946c
ffffffff80005dec:	48 89 c7             	mov    rdi,rax
ffffffff80005def:	e8 f8 fc ff ff       	call   ffffffff80005aec <strncmp(char const*, char const*, unsigned long)>
ffffffff80005df4:	85 c0                	test   eax,eax
ffffffff80005df6:	0f 95 c0             	setne  al
ffffffff80005df9:	84 c0                	test   al,al
ffffffff80005dfb:	74 16                	je     ffffffff80005e13 <ACPI::ParseTables()+0x72>
ffffffff80005dfd:	48 c7 c7 78 94 00 80 	mov    rdi,0xffffffff80009478
ffffffff80005e04:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005e09:	e8 3b e7 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005e0e:	e8 56 b4 ff ff       	call   ffffffff80001269 <Utils::HaltCatchFire()>
ffffffff80005e13:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80005e17:	8b 40 10             	mov    eax,DWORD PTR [rax+0x10]
ffffffff80005e1a:	89 c2                	mov    edx,eax
ffffffff80005e1c:	48 8b 05 45 49 00 00 	mov    rax,QWORD PTR [rip+0x4945]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80005e23:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80005e27:	48 01 d0             	add    rax,rdx
ffffffff80005e2a:	48 89 05 6f 05 01 00 	mov    QWORD PTR [rip+0x1056f],rax        # ffffffff800163a0 <rsdt>
ffffffff80005e31:	e8 bd fd ff ff       	call   ffffffff80005bf3 <ParseAPIC()>
ffffffff80005e36:	90                   	nop
ffffffff80005e37:	c9                   	leave  
ffffffff80005e38:	c3                   	ret    

ffffffff80005e39 <Utils::wrmsr(unsigned long, unsigned long)>:
ffffffff80005e39:	55                   	push   rbp
ffffffff80005e3a:	48 89 e5             	mov    rbp,rsp
ffffffff80005e3d:	48 83 ec 20          	sub    rsp,0x20
ffffffff80005e41:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80005e45:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff80005e49:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80005e4d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80005e50:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff80005e54:	48 c1 e8 20          	shr    rax,0x20
ffffffff80005e58:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff80005e5b:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff80005e5f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005e62:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff80005e65:	0f 30                	wrmsr  
ffffffff80005e67:	90                   	nop
ffffffff80005e68:	c9                   	leave  
ffffffff80005e69:	c3                   	ret    

ffffffff80005e6a <Utils::rdmsr(unsigned long)>:
ffffffff80005e6a:	55                   	push   rbp
ffffffff80005e6b:	48 89 e5             	mov    rbp,rsp
ffffffff80005e6e:	48 83 ec 18          	sub    rsp,0x18
ffffffff80005e72:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff80005e76:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
ffffffff80005e7a:	48 89 c1             	mov    rcx,rax
ffffffff80005e7d:	0f 32                	rdmsr  
ffffffff80005e7f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80005e82:	89 55 f8             	mov    DWORD PTR [rbp-0x8],edx
ffffffff80005e85:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80005e88:	48 c1 e0 20          	shl    rax,0x20
ffffffff80005e8c:	48 89 c2             	mov    rdx,rax
ffffffff80005e8f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005e92:	48 09 d0             	or     rax,rdx
ffffffff80005e95:	c9                   	leave  
ffffffff80005e96:	c3                   	ret    

ffffffff80005e97 <LAPIC::Initialize()>:
ffffffff80005e97:	f3 0f 1e fa          	endbr64 
ffffffff80005e9b:	55                   	push   rbp
ffffffff80005e9c:	48 89 e5             	mov    rbp,rsp
ffffffff80005e9f:	bf 1b 00 00 00       	mov    edi,0x1b
ffffffff80005ea4:	e8 c1 ff ff ff       	call   ffffffff80005e6a <Utils::rdmsr(unsigned long)>
ffffffff80005ea9:	80 cc 08             	or     ah,0x8
ffffffff80005eac:	48 89 c6             	mov    rsi,rax
ffffffff80005eaf:	bf 1b 00 00 00       	mov    edi,0x1b
ffffffff80005eb4:	e8 80 ff ff ff       	call   ffffffff80005e39 <Utils::wrmsr(unsigned long, unsigned long)>
ffffffff80005eb9:	be ff 01 00 00       	mov    esi,0x1ff
ffffffff80005ebe:	bf f0 00 00 00       	mov    edi,0xf0
ffffffff80005ec3:	e8 d9 00 00 00       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80005ec8:	90                   	nop
ffffffff80005ec9:	5d                   	pop    rbp
ffffffff80005eca:	c3                   	ret    

ffffffff80005ecb <HandleTick(SavedRegs*)>:
ffffffff80005ecb:	f3 0f 1e fa          	endbr64 
ffffffff80005ecf:	55                   	push   rbp
ffffffff80005ed0:	48 89 e5             	mov    rbp,rsp
ffffffff80005ed3:	48 83 ec 10          	sub    rsp,0x10
ffffffff80005ed7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff80005edb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005edf:	48 89 c7             	mov    rdi,rax
ffffffff80005ee2:	e8 b1 eb ff ff       	call   ffffffff80004a98 <Scheduler::Schedule(SavedRegs*)>
ffffffff80005ee7:	e8 1b 01 00 00       	call   ffffffff80006007 <LAPIC::EOI()>
ffffffff80005eec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80005ef0:	c9                   	leave  
ffffffff80005ef1:	c3                   	ret    

ffffffff80005ef2 <LAPIC::InitTimer(bool)>:
ffffffff80005ef2:	f3 0f 1e fa          	endbr64 
ffffffff80005ef6:	55                   	push   rbp
ffffffff80005ef7:	48 89 e5             	mov    rbp,rsp
ffffffff80005efa:	48 83 ec 20          	sub    rsp,0x20
ffffffff80005efe:	89 f8                	mov    eax,edi
ffffffff80005f00:	88 45 ec             	mov    BYTE PTR [rbp-0x14],al
ffffffff80005f03:	be 03 00 00 00       	mov    esi,0x3
ffffffff80005f08:	bf e0 03 00 00       	mov    edi,0x3e0
ffffffff80005f0d:	e8 8f 00 00 00       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80005f12:	be ff ff ff ff       	mov    esi,0xffffffff
ffffffff80005f17:	bf 80 03 00 00       	mov    edi,0x380
ffffffff80005f1c:	e8 80 00 00 00       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80005f21:	bf 0a 00 00 00       	mov    edi,0xa
ffffffff80005f26:	e8 23 e9 ff ff       	call   ffffffff8000484e <msleep(unsigned long)>
ffffffff80005f2b:	be 00 00 01 00       	mov    esi,0x10000
ffffffff80005f30:	bf 20 03 00 00       	mov    edi,0x320
ffffffff80005f35:	e8 67 00 00 00       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80005f3a:	bf 90 03 00 00       	mov    edi,0x390
ffffffff80005f3f:	e8 95 00 00 00       	call   ffffffff80005fd9 <LAPIC::ReadReg(unsigned int)>
ffffffff80005f44:	f7 d0                	not    eax
ffffffff80005f46:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff80005f49:	be 20 00 02 00       	mov    esi,0x20020
ffffffff80005f4e:	bf 20 03 00 00       	mov    edi,0x320
ffffffff80005f53:	e8 49 00 00 00       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80005f58:	be 03 00 00 00       	mov    esi,0x3
ffffffff80005f5d:	bf e0 03 00 00       	mov    edi,0x3e0
ffffffff80005f62:	e8 3a 00 00 00       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80005f67:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005f6a:	89 c6                	mov    esi,eax
ffffffff80005f6c:	bf 80 03 00 00       	mov    edi,0x380
ffffffff80005f71:	e8 2b 00 00 00       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80005f76:	80 7d ec 00          	cmp    BYTE PTR [rbp-0x14],0x0
ffffffff80005f7a:	74 11                	je     ffffffff80005f8d <LAPIC::InitTimer(bool)+0x9b>
ffffffff80005f7c:	48 c7 c6 cb 5e 00 80 	mov    rsi,0xffffffff80005ecb
ffffffff80005f83:	bf 20 00 00 00       	mov    edi,0x20
ffffffff80005f88:	e8 06 f7 ff ff       	call   ffffffff80005693 <IDT::AddHandler(int, SavedRegs* (*)(SavedRegs*))>
ffffffff80005f8d:	48 c7 c7 a0 94 00 80 	mov    rdi,0xffffffff800094a0
ffffffff80005f94:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80005f99:	e8 ab e5 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80005f9e:	90                   	nop
ffffffff80005f9f:	c9                   	leave  
ffffffff80005fa0:	c3                   	ret    

ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>:
ffffffff80005fa1:	f3 0f 1e fa          	endbr64 
ffffffff80005fa5:	55                   	push   rbp
ffffffff80005fa6:	48 89 e5             	mov    rbp,rsp
ffffffff80005fa9:	48 83 ec 08          	sub    rsp,0x8
ffffffff80005fad:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80005fb0:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80005fb3:	48 8b 05 ae 47 00 00 	mov    rax,QWORD PTR [rip+0x47ae]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80005fba:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80005fbe:	48 8b 05 e3 03 01 00 	mov    rax,QWORD PTR [rip+0x103e3]        # ffffffff800163a8 <lapic_addr>
ffffffff80005fc5:	48 01 c2             	add    rdx,rax
ffffffff80005fc8:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80005fcb:	48 01 d0             	add    rax,rdx
ffffffff80005fce:	48 89 c2             	mov    rdx,rax
ffffffff80005fd1:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80005fd4:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff80005fd6:	90                   	nop
ffffffff80005fd7:	c9                   	leave  
ffffffff80005fd8:	c3                   	ret    

ffffffff80005fd9 <LAPIC::ReadReg(unsigned int)>:
ffffffff80005fd9:	f3 0f 1e fa          	endbr64 
ffffffff80005fdd:	55                   	push   rbp
ffffffff80005fde:	48 89 e5             	mov    rbp,rsp
ffffffff80005fe1:	48 83 ec 08          	sub    rsp,0x8
ffffffff80005fe5:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80005fe8:	48 8b 05 79 47 00 00 	mov    rax,QWORD PTR [rip+0x4779]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80005fef:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
ffffffff80005ff3:	48 8b 05 ae 03 01 00 	mov    rax,QWORD PTR [rip+0x103ae]        # ffffffff800163a8 <lapic_addr>
ffffffff80005ffa:	48 01 c2             	add    rdx,rax
ffffffff80005ffd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80006000:	48 01 d0             	add    rax,rdx
ffffffff80006003:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80006005:	c9                   	leave  
ffffffff80006006:	c3                   	ret    

ffffffff80006007 <LAPIC::EOI()>:
ffffffff80006007:	f3 0f 1e fa          	endbr64 
ffffffff8000600b:	55                   	push   rbp
ffffffff8000600c:	48 89 e5             	mov    rbp,rsp
ffffffff8000600f:	be 00 00 00 00       	mov    esi,0x0
ffffffff80006014:	bf b0 00 00 00       	mov    edi,0xb0
ffffffff80006019:	e8 83 ff ff ff       	call   ffffffff80005fa1 <LAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff8000601e:	90                   	nop
ffffffff8000601f:	5d                   	pop    rbp
ffffffff80006020:	c3                   	ret    

ffffffff80006021 <IOAPIC::ReadReg(unsigned int)>:
ffffffff80006021:	f3 0f 1e fa          	endbr64 
ffffffff80006025:	55                   	push   rbp
ffffffff80006026:	48 89 e5             	mov    rbp,rsp
ffffffff80006029:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000602d:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80006030:	48 8b 05 31 47 00 00 	mov    rax,QWORD PTR [rip+0x4731]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80006037:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000603b:	ba 00 00 c0 fe       	mov    edx,0xfec00000
ffffffff80006040:	48 01 d0             	add    rax,rdx
ffffffff80006043:	48 89 c2             	mov    rdx,rax
ffffffff80006046:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80006049:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff8000604b:	48 8b 05 16 47 00 00 	mov    rax,QWORD PTR [rip+0x4716]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80006052:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff80006056:	ba 10 00 c0 fe       	mov    edx,0xfec00010
ffffffff8000605b:	48 01 d0             	add    rax,rdx
ffffffff8000605e:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80006060:	c9                   	leave  
ffffffff80006061:	c3                   	ret    

ffffffff80006062 <IOAPIC::WriteReg(unsigned int, unsigned int)>:
ffffffff80006062:	f3 0f 1e fa          	endbr64 
ffffffff80006066:	55                   	push   rbp
ffffffff80006067:	48 89 e5             	mov    rbp,rsp
ffffffff8000606a:	48 83 ec 08          	sub    rsp,0x8
ffffffff8000606e:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80006071:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80006074:	48 8b 05 ed 46 00 00 	mov    rax,QWORD PTR [rip+0x46ed]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff8000607b:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000607f:	ba 00 00 c0 fe       	mov    edx,0xfec00000
ffffffff80006084:	48 01 d0             	add    rax,rdx
ffffffff80006087:	48 89 c2             	mov    rdx,rax
ffffffff8000608a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff8000608d:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff8000608f:	48 8b 05 d2 46 00 00 	mov    rax,QWORD PTR [rip+0x46d2]        # ffffffff8000a768 <hhdm_req+0x28>
ffffffff80006096:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
ffffffff8000609a:	ba 10 00 c0 fe       	mov    edx,0xfec00010
ffffffff8000609f:	48 01 d0             	add    rax,rdx
ffffffff800060a2:	48 89 c2             	mov    rdx,rax
ffffffff800060a5:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800060a8:	89 02                	mov    DWORD PTR [rdx],eax
ffffffff800060aa:	90                   	nop
ffffffff800060ab:	c9                   	leave  
ffffffff800060ac:	c3                   	ret    

ffffffff800060ad <RedirectGSI(unsigned int, unsigned char)>:
ffffffff800060ad:	f3 0f 1e fa          	endbr64 
ffffffff800060b1:	55                   	push   rbp
ffffffff800060b2:	48 89 e5             	mov    rbp,rsp
ffffffff800060b5:	48 83 ec 20          	sub    rsp,0x20
ffffffff800060b9:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
ffffffff800060bc:	89 f0                	mov    eax,esi
ffffffff800060be:	88 45 e8             	mov    BYTE PTR [rbp-0x18],al
ffffffff800060c1:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
ffffffff800060c5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
ffffffff800060c8:	89 c6                	mov    esi,eax
ffffffff800060ca:	48 c7 c7 b9 94 00 80 	mov    rdi,0xffffffff800094b9
ffffffff800060d1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800060d6:	e8 6e e4 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800060db:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
ffffffff800060de:	83 c0 08             	add    eax,0x8
ffffffff800060e1:	01 c0                	add    eax,eax
ffffffff800060e3:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800060e6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800060e9:	83 c0 01             	add    eax,0x1
ffffffff800060ec:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800060ef:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff800060f2:	89 c7                	mov    edi,eax
ffffffff800060f4:	e8 28 ff ff ff       	call   ffffffff80006021 <IOAPIC::ReadReg(unsigned int)>
ffffffff800060f9:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
ffffffff800060fc:	81 65 f4 ff ff ff 00 	and    DWORD PTR [rbp-0xc],0xffffff
ffffffff80006103:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80006108:	e8 14 ff ff ff       	call   ffffffff80006021 <IOAPIC::ReadReg(unsigned int)>
ffffffff8000610d:	c1 e0 18             	shl    eax,0x18
ffffffff80006110:	09 45 f4             	or     DWORD PTR [rbp-0xc],eax
ffffffff80006113:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
ffffffff80006116:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
ffffffff80006119:	89 d6                	mov    esi,edx
ffffffff8000611b:	89 c7                	mov    edi,eax
ffffffff8000611d:	e8 40 ff ff ff       	call   ffffffff80006062 <IOAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80006122:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80006125:	89 c7                	mov    edi,eax
ffffffff80006127:	e8 f5 fe ff ff       	call   ffffffff80006021 <IOAPIC::ReadReg(unsigned int)>
ffffffff8000612c:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
ffffffff8000612f:	81 65 f0 ff ff fe ff 	and    DWORD PTR [rbp-0x10],0xfffeffff
ffffffff80006136:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [rbp-0x10],0xfffff7ff
ffffffff8000613d:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [rbp-0x10],0xfffff8ff
ffffffff80006144:	81 65 f0 00 ff ff ff 	and    DWORD PTR [rbp-0x10],0xffffff00
ffffffff8000614b:	0f b6 45 e8          	movzx  eax,BYTE PTR [rbp-0x18]
ffffffff8000614f:	09 45 f0             	or     DWORD PTR [rbp-0x10],eax
ffffffff80006152:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
ffffffff80006155:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff80006158:	89 d6                	mov    esi,edx
ffffffff8000615a:	89 c7                	mov    edi,eax
ffffffff8000615c:	e8 01 ff ff ff       	call   ffffffff80006062 <IOAPIC::WriteReg(unsigned int, unsigned int)>
ffffffff80006161:	90                   	nop
ffffffff80006162:	c9                   	leave  
ffffffff80006163:	c3                   	ret    

ffffffff80006164 <IOAPIC::Initialize()>:
ffffffff80006164:	f3 0f 1e fa          	endbr64 
ffffffff80006168:	55                   	push   rbp
ffffffff80006169:	48 89 e5             	mov    rbp,rsp
ffffffff8000616c:	48 83 ec 10          	sub    rsp,0x10
ffffffff80006170:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff80006177:	00 
ffffffff80006178:	eb 28                	jmp    ffffffff800061a2 <IOAPIC::Initialize()+0x3e>
ffffffff8000617a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000617e:	0f b6 04 c5 c0 63 01 	movzx  eax,BYTE PTR [rax*8-0x7ffe9c40]
ffffffff80006185:	80 
ffffffff80006186:	0f b6 d0             	movzx  edx,al
ffffffff80006189:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000618d:	8b 04 c5 c4 63 01 80 	mov    eax,DWORD PTR [rax*8-0x7ffe9c3c]
ffffffff80006194:	89 d6                	mov    esi,edx
ffffffff80006196:	89 c7                	mov    edi,eax
ffffffff80006198:	e8 10 ff ff ff       	call   ffffffff800060ad <RedirectGSI(unsigned int, unsigned char)>
ffffffff8000619d:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff800061a2:	48 8b 05 17 0a 01 00 	mov    rax,QWORD PTR [rip+0x10a17]        # ffffffff80016bc0 <numGSIs>
ffffffff800061a9:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff800061ad:	72 cb                	jb     ffffffff8000617a <IOAPIC::Initialize()+0x16>
ffffffff800061af:	90                   	nop
ffffffff800061b0:	90                   	nop
ffffffff800061b1:	c9                   	leave  
ffffffff800061b2:	c3                   	ret    

ffffffff800061b3 <Utils::wrmsr(unsigned long, unsigned long)>:
ffffffff800061b3:	55                   	push   rbp
ffffffff800061b4:	48 89 e5             	mov    rbp,rsp
ffffffff800061b7:	48 83 ec 20          	sub    rsp,0x20
ffffffff800061bb:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
ffffffff800061bf:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
ffffffff800061c3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800061c7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
ffffffff800061ca:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
ffffffff800061ce:	48 c1 e8 20          	shr    rax,0x20
ffffffff800061d2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
ffffffff800061d5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
ffffffff800061d9:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
ffffffff800061dc:	8b 55 f8             	mov    edx,DWORD PTR [rbp-0x8]
ffffffff800061df:	0f 30                	wrmsr  
ffffffff800061e1:	90                   	nop
ffffffff800061e2:	c9                   	leave  
ffffffff800061e3:	c3                   	ret    

ffffffff800061e4 <start_ap(limine_smp_info*)>:
ffffffff800061e4:	f3 0f 1e fa          	endbr64 
ffffffff800061e8:	55                   	push   rbp
ffffffff800061e9:	48 89 e5             	mov    rbp,rsp
ffffffff800061ec:	48 83 ec 10          	sub    rsp,0x10
ffffffff800061f0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
ffffffff800061f4:	48 c7 c7 e0 ab 01 80 	mov    rdi,0xffffffff8001abe0
ffffffff800061fb:	e8 c4 e4 ff ff       	call   ffffffff800046c4 <spinlock::lock()>
ffffffff80006200:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80006204:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff80006206:	89 c7                	mov    edi,eax
ffffffff80006208:	e8 ad f4 ff ff       	call   ffffffff800056ba <GDT::SetupGdt(int)>
ffffffff8000620d:	e8 05 f4 ff ff       	call   ffffffff80005617 <IDT::Initialize()>
ffffffff80006212:	e8 91 b6 ff ff       	call   ffffffff800018a8 <VirtualMemory::SwapToKernelPT()>
ffffffff80006217:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000621b:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000621d:	89 c2                	mov    edx,eax
ffffffff8000621f:	48 89 d0             	mov    rax,rdx
ffffffff80006222:	48 01 c0             	add    rax,rax
ffffffff80006225:	48 01 d0             	add    rax,rdx
ffffffff80006228:	48 c1 e0 04          	shl    rax,0x4
ffffffff8000622c:	48 05 00 b3 00 80    	add    rax,0xffffffff8000b300
ffffffff80006232:	48 89 c6             	mov    rsi,rax
ffffffff80006235:	b8 02 01 00 c0       	mov    eax,0xc0000102
ffffffff8000623a:	48 89 c7             	mov    rdi,rax
ffffffff8000623d:	e8 71 ff ff ff       	call   ffffffff800061b3 <Utils::wrmsr(unsigned long, unsigned long)>
ffffffff80006242:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80006246:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff80006248:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff8000624c:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000624e:	89 c1                	mov    ecx,eax
ffffffff80006250:	48 89 c8             	mov    rax,rcx
ffffffff80006253:	48 01 c0             	add    rax,rax
ffffffff80006256:	48 01 c8             	add    rax,rcx
ffffffff80006259:	48 c1 e0 04          	shl    rax,0x4
ffffffff8000625d:	48 05 28 b3 00 80    	add    rax,0xffffffff8000b328
ffffffff80006263:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80006265:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80006269:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000626b:	89 c6                	mov    esi,eax
ffffffff8000626d:	48 c7 c7 e0 94 00 80 	mov    rdi,0xffffffff800094e0
ffffffff80006274:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80006279:	e8 cb e2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff8000627e:	e8 14 fc ff ff       	call   ffffffff80005e97 <LAPIC::Initialize()>
ffffffff80006283:	bf 00 00 00 00       	mov    edi,0x0
ffffffff80006288:	e8 65 fc ff ff       	call   ffffffff80005ef2 <LAPIC::InitTimer(bool)>
ffffffff8000628d:	48 8b 05 6c 4b 00 00 	mov    rax,QWORD PTR [rip+0x4b6c]        # ffffffff8000ae00 <cpus_arrived>
ffffffff80006294:	48 83 c0 01          	add    rax,0x1
ffffffff80006298:	48 89 05 61 4b 00 00 	mov    QWORD PTR [rip+0x4b61],rax        # ffffffff8000ae00 <cpus_arrived>
ffffffff8000629f:	48 c7 c7 e0 ab 01 80 	mov    rdi,0xffffffff8001abe0
ffffffff800062a6:	e8 4b e4 ff ff       	call   ffffffff800046f6 <spinlock::unlock()>
ffffffff800062ab:	e8 8f 02 00 00       	call   ffffffff8000653f <Utils::Halt()>
ffffffff800062b0:	90                   	nop
ffffffff800062b1:	c9                   	leave  
ffffffff800062b2:	c3                   	ret    

ffffffff800062b3 <BspKernelThread()>:
ffffffff800062b3:	f3 0f 1e fa          	endbr64 
ffffffff800062b7:	55                   	push   rbp
ffffffff800062b8:	48 89 e5             	mov    rbp,rsp
ffffffff800062bb:	48 c7 c7 f6 94 00 80 	mov    rdi,0xffffffff800094f6
ffffffff800062c2:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800062c7:	e8 7d e2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800062cc:	48 c7 c7 11 95 00 80 	mov    rdi,0xffffffff80009511
ffffffff800062d3:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800062d8:	e8 6c e2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800062dd:	e8 1e 9d ff ff       	call   ffffffff80000000 <VFS::Initialize()>
ffffffff800062e2:	f4                   	hlt    
ffffffff800062e3:	eb fd                	jmp    ffffffff800062e2 <BspKernelThread()+0x2f>

ffffffff800062e5 <kernel_entry>:
ffffffff800062e5:	f3 0f 1e fa          	endbr64 
ffffffff800062e9:	55                   	push   rbp
ffffffff800062ea:	48 89 e5             	mov    rbp,rsp
ffffffff800062ed:	48 83 ec 10          	sub    rsp,0x10
ffffffff800062f1:	e8 c1 e2 ff ff       	call   ffffffff800045b7 <Screen::Initialize()>
ffffffff800062f6:	48 c7 c7 28 95 00 80 	mov    rdi,0xffffffff80009528
ffffffff800062fd:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80006302:	e8 42 e2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006307:	48 c7 c2 7e 95 00 80 	mov    rdx,0xffffffff8000957e
ffffffff8000630e:	48 c7 c6 85 95 00 80 	mov    rsi,0xffffffff80009585
ffffffff80006315:	48 c7 c7 8b 95 00 80 	mov    rdi,0xffffffff8000958b
ffffffff8000631c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80006321:	e8 23 e2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006326:	e8 ec f2 ff ff       	call   ffffffff80005617 <IDT::Initialize()>
ffffffff8000632b:	48 c7 c7 a8 95 00 80 	mov    rdi,0xffffffff800095a8
ffffffff80006332:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80006337:	e8 0d e2 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff8000633c:	e8 0a f7 ff ff       	call   ffffffff80005a4b <PIC::RemapAndDisable()>
ffffffff80006341:	48 c7 c7 d0 95 00 80 	mov    rdi,0xffffffff800095d0
ffffffff80006348:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000634d:	e8 f7 e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006352:	48 c7 c7 f3 95 00 80 	mov    rdi,0xffffffff800095f3
ffffffff80006359:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000635e:	e8 e6 e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006363:	e8 26 a9 ff ff       	call   ffffffff80000c8e <PhysicalMemory::Initialize()>
ffffffff80006368:	bf 00 00 00 00       	mov    edi,0x0
ffffffff8000636d:	e8 48 f3 ff ff       	call   ffffffff800056ba <GDT::SetupGdt(int)>
ffffffff80006372:	48 c7 c7 18 96 00 80 	mov    rdi,0xffffffff80009618
ffffffff80006379:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000637e:	e8 c6 e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006383:	48 c7 c7 3c 96 00 80 	mov    rdi,0xffffffff8000963c
ffffffff8000638a:	b8 00 00 00 00       	mov    eax,0x0
ffffffff8000638f:	e8 b5 e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006394:	e8 70 b2 ff ff       	call   ffffffff80001609 <VirtualMemory::Initialize()>
ffffffff80006399:	48 c7 c7 59 96 00 80 	mov    rdi,0xffffffff80009659
ffffffff800063a0:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800063a5:	e8 9f e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800063aa:	e8 f2 f9 ff ff       	call   ffffffff80005da1 <ACPI::ParseTables()>
ffffffff800063af:	48 c7 c7 6e 96 00 80 	mov    rdi,0xffffffff8000966e
ffffffff800063b6:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800063bb:	e8 89 e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800063c0:	e8 d2 fa ff ff       	call   ffffffff80005e97 <LAPIC::Initialize()>
ffffffff800063c5:	e8 9a fd ff ff       	call   ffffffff80006164 <IOAPIC::Initialize()>
ffffffff800063ca:	48 c7 c7 81 96 00 80 	mov    rdi,0xffffffff80009681
ffffffff800063d1:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800063d6:	e8 6e e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800063db:	e8 6e e7 ff ff       	call   ffffffff80004b4e <Scheduler::Initialize()>
ffffffff800063e0:	48 c7 c0 b3 62 00 80 	mov    rax,0xffffffff800062b3
ffffffff800063e7:	be 00 00 00 00       	mov    esi,0x0
ffffffff800063ec:	48 89 c7             	mov    rdi,rax
ffffffff800063ef:	e8 cc e4 ff ff       	call   ffffffff800048c0 <Scheduler::AddThread(unsigned long, bool)>
ffffffff800063f4:	e8 9a e3 ff ff       	call   ffffffff80004793 <HPET::SetupHPET()>
ffffffff800063f9:	fa                   	cli    
ffffffff800063fa:	bf 01 00 00 00       	mov    edi,0x1
ffffffff800063ff:	e8 ee fa ff ff       	call   ffffffff80005ef2 <LAPIC::InitTimer(bool)>
ffffffff80006404:	48 c7 c7 99 96 00 80 	mov    rdi,0xffffffff80009699
ffffffff8000640b:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80006410:	e8 34 e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006415:	48 c7 c7 ac 96 00 80 	mov    rdi,0xffffffff800096ac
ffffffff8000641c:	b8 00 00 00 00       	mov    eax,0x0
ffffffff80006421:	e8 23 e1 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff80006426:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
ffffffff8000642d:	00 
ffffffff8000642e:	e9 94 00 00 00       	jmp    ffffffff800064c7 <kernel_entry+0x1e2>
ffffffff80006433:	48 8b 05 0e 4a 00 00 	mov    rax,QWORD PTR [rip+0x4a0e]        # ffffffff8000ae48 <smp_req+0x28>
ffffffff8000643a:	48 8b 50 18          	mov    rdx,QWORD PTR [rax+0x18]
ffffffff8000643e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
ffffffff80006442:	48 c1 e0 03          	shl    rax,0x3
ffffffff80006446:	48 01 d0             	add    rax,rdx
ffffffff80006449:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
ffffffff8000644d:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80006451:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80006454:	8b 50 04             	mov    edx,DWORD PTR [rax+0x4]
ffffffff80006457:	48 8b 05 ea 49 00 00 	mov    rax,QWORD PTR [rip+0x49ea]        # ffffffff8000ae48 <smp_req+0x28>
ffffffff8000645e:	8b 40 0c             	mov    eax,DWORD PTR [rax+0xc]
ffffffff80006461:	39 c2                	cmp    edx,eax
ffffffff80006463:	0f 94 c0             	sete   al
ffffffff80006466:	84 c0                	test   al,al
ffffffff80006468:	74 58                	je     ffffffff800064c2 <kernel_entry+0x1dd>
ffffffff8000646a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff8000646e:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff80006471:	8b 10                	mov    edx,DWORD PTR [rax]
ffffffff80006473:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80006477:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000647a:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000647c:	89 c1                	mov    ecx,eax
ffffffff8000647e:	48 89 c8             	mov    rax,rcx
ffffffff80006481:	48 01 c0             	add    rax,rax
ffffffff80006484:	48 01 c8             	add    rax,rcx
ffffffff80006487:	48 c1 e0 04          	shl    rax,0x4
ffffffff8000648b:	48 05 28 b3 00 80    	add    rax,0xffffffff8000b328
ffffffff80006491:	89 10                	mov    DWORD PTR [rax],edx
ffffffff80006493:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
ffffffff80006497:	48 8b 00             	mov    rax,QWORD PTR [rax]
ffffffff8000649a:	8b 00                	mov    eax,DWORD PTR [rax]
ffffffff8000649c:	89 c2                	mov    edx,eax
ffffffff8000649e:	48 89 d0             	mov    rax,rdx
ffffffff800064a1:	48 01 c0             	add    rax,rax
ffffffff800064a4:	48 01 d0             	add    rax,rdx
ffffffff800064a7:	48 c1 e0 04          	shl    rax,0x4
ffffffff800064ab:	48 05 00 b3 00 80    	add    rax,0xffffffff8000b300
ffffffff800064b1:	48 89 c6             	mov    rsi,rax
ffffffff800064b4:	b8 02 01 00 c0       	mov    eax,0xc0000102
ffffffff800064b9:	48 89 c7             	mov    rdi,rax
ffffffff800064bc:	e8 f2 fc ff ff       	call   ffffffff800061b3 <Utils::wrmsr(unsigned long, unsigned long)>
ffffffff800064c1:	90                   	nop
ffffffff800064c2:	48 83 45 f8 01       	add    QWORD PTR [rbp-0x8],0x1
ffffffff800064c7:	48 8b 05 7a 49 00 00 	mov    rax,QWORD PTR [rip+0x497a]        # ffffffff8000ae48 <smp_req+0x28>
ffffffff800064ce:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
ffffffff800064d2:	48 39 45 f8          	cmp    QWORD PTR [rbp-0x8],rax
ffffffff800064d6:	0f 92 c0             	setb   al
ffffffff800064d9:	84 c0                	test   al,al
ffffffff800064db:	0f 85 52 ff ff ff    	jne    ffffffff80006433 <kernel_entry+0x14e>
ffffffff800064e1:	48 c7 c7 bf 96 00 80 	mov    rdi,0xffffffff800096bf
ffffffff800064e8:	b8 00 00 00 00       	mov    eax,0x0
ffffffff800064ed:	e8 57 e0 ff ff       	call   ffffffff80004549 <_printf(char const*, ...)>
ffffffff800064f2:	fb                   	sti    
ffffffff800064f3:	f4                   	hlt    
ffffffff800064f4:	eb fd                	jmp    ffffffff800064f3 <kernel_entry+0x20e>

ffffffff800064f6 <__static_initialization_and_destruction_0(int, int)>:
ffffffff800064f6:	f3 0f 1e fa          	endbr64 
ffffffff800064fa:	55                   	push   rbp
ffffffff800064fb:	48 89 e5             	mov    rbp,rsp
ffffffff800064fe:	48 83 ec 10          	sub    rsp,0x10
ffffffff80006502:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
ffffffff80006505:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
ffffffff80006508:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
ffffffff8000650c:	75 15                	jne    ffffffff80006523 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff8000650e:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
ffffffff80006515:	75 0c                	jne    ffffffff80006523 <__static_initialization_and_destruction_0(int, int)+0x2d>
ffffffff80006517:	48 c7 c7 e0 ab 01 80 	mov    rdi,0xffffffff8001abe0
ffffffff8000651e:	e8 7d e1 ff ff       	call   ffffffff800046a0 <spinlock::spinlock()>
ffffffff80006523:	90                   	nop
ffffffff80006524:	c9                   	leave  
ffffffff80006525:	c3                   	ret    

ffffffff80006526 <_GLOBAL__sub_I_kernel_stack>:
ffffffff80006526:	f3 0f 1e fa          	endbr64 
ffffffff8000652a:	55                   	push   rbp
ffffffff8000652b:	48 89 e5             	mov    rbp,rsp
ffffffff8000652e:	be ff ff 00 00       	mov    esi,0xffff
ffffffff80006533:	bf 01 00 00 00       	mov    edi,0x1
ffffffff80006538:	e8 b9 ff ff ff       	call   ffffffff800064f6 <__static_initialization_and_destruction_0(int, int)>
ffffffff8000653d:	5d                   	pop    rbp
ffffffff8000653e:	c3                   	ret    

ffffffff8000653f <Utils::Halt()>:
ffffffff8000653f:	f3 0f 1e fa          	endbr64 
ffffffff80006543:	55                   	push   rbp
ffffffff80006544:	48 89 e5             	mov    rbp,rsp
ffffffff80006547:	f4                   	hlt    
ffffffff80006548:	eb fd                	jmp    ffffffff80006547 <Utils::Halt()+0x8>
ffffffff8000654a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

ffffffff80006550 <EnableAvx>:
ffffffff80006550:	50                   	push   rax
ffffffff80006551:	51                   	push   rcx
ffffffff80006552:	52                   	push   rdx
ffffffff80006553:	48 31 c9             	xor    rcx,rcx
ffffffff80006556:	0f 01 d0             	xgetbv 
ffffffff80006559:	83 c8 07             	or     eax,0x7
ffffffff8000655c:	0f 01 d1             	xsetbv 
ffffffff8000655f:	5a                   	pop    rdx
ffffffff80006560:	59                   	pop    rcx
ffffffff80006561:	58                   	pop    rax
ffffffff80006562:	c3                   	ret    
ffffffff80006563:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000656a:	00 00 00 
ffffffff8000656d:	0f 1f 00             	nop    DWORD PTR [rax]

ffffffff80006570 <isr_common>:
ffffffff80006570:	50                   	push   rax
ffffffff80006571:	53                   	push   rbx
ffffffff80006572:	51                   	push   rcx
ffffffff80006573:	52                   	push   rdx
ffffffff80006574:	56                   	push   rsi
ffffffff80006575:	57                   	push   rdi
ffffffff80006576:	55                   	push   rbp
ffffffff80006577:	41 50                	push   r8
ffffffff80006579:	41 51                	push   r9
ffffffff8000657b:	41 52                	push   r10
ffffffff8000657d:	41 53                	push   r11
ffffffff8000657f:	41 54                	push   r12
ffffffff80006581:	41 55                	push   r13
ffffffff80006583:	41 56                	push   r14
ffffffff80006585:	41 57                	push   r15
ffffffff80006587:	48 89 e7             	mov    rdi,rsp
ffffffff8000658a:	e8 65 ee ff ff       	call   ffffffff800053f4 <interrupt_handler>
ffffffff8000658f:	48 89 c4             	mov    rsp,rax
ffffffff80006592:	41 5f                	pop    r15
ffffffff80006594:	41 5e                	pop    r14
ffffffff80006596:	41 5d                	pop    r13
ffffffff80006598:	41 5c                	pop    r12
ffffffff8000659a:	41 5b                	pop    r11
ffffffff8000659c:	41 5a                	pop    r10
ffffffff8000659e:	41 59                	pop    r9
ffffffff800065a0:	41 58                	pop    r8
ffffffff800065a2:	5d                   	pop    rbp
ffffffff800065a3:	5f                   	pop    rdi
ffffffff800065a4:	5e                   	pop    rsi
ffffffff800065a5:	5a                   	pop    rdx
ffffffff800065a6:	59                   	pop    rcx
ffffffff800065a7:	5b                   	pop    rbx
ffffffff800065a8:	58                   	pop    rax
ffffffff800065a9:	48 83 c4 10          	add    rsp,0x10
ffffffff800065ad:	fb                   	sti    
ffffffff800065ae:	48 cf                	iretq  

ffffffff800065b0 <isr_0>:
ffffffff800065b0:	6a 00                	push   0x0
ffffffff800065b2:	6a 00                	push   0x0
ffffffff800065b4:	fc                   	cld    
ffffffff800065b5:	eb b9                	jmp    ffffffff80006570 <isr_common>

ffffffff800065b7 <isr_1>:
ffffffff800065b7:	6a 00                	push   0x0
ffffffff800065b9:	6a 01                	push   0x1
ffffffff800065bb:	fc                   	cld    
ffffffff800065bc:	eb b2                	jmp    ffffffff80006570 <isr_common>

ffffffff800065be <isr_2>:
ffffffff800065be:	6a 00                	push   0x0
ffffffff800065c0:	6a 02                	push   0x2
ffffffff800065c2:	fc                   	cld    
ffffffff800065c3:	eb ab                	jmp    ffffffff80006570 <isr_common>

ffffffff800065c5 <isr_3>:
ffffffff800065c5:	6a 00                	push   0x0
ffffffff800065c7:	6a 03                	push   0x3
ffffffff800065c9:	fc                   	cld    
ffffffff800065ca:	eb a4                	jmp    ffffffff80006570 <isr_common>

ffffffff800065cc <isr_4>:
ffffffff800065cc:	6a 00                	push   0x0
ffffffff800065ce:	6a 04                	push   0x4
ffffffff800065d0:	fc                   	cld    
ffffffff800065d1:	eb 9d                	jmp    ffffffff80006570 <isr_common>

ffffffff800065d3 <isr_5>:
ffffffff800065d3:	6a 00                	push   0x0
ffffffff800065d5:	6a 05                	push   0x5
ffffffff800065d7:	fc                   	cld    
ffffffff800065d8:	eb 96                	jmp    ffffffff80006570 <isr_common>

ffffffff800065da <isr_6>:
ffffffff800065da:	6a 00                	push   0x0
ffffffff800065dc:	6a 06                	push   0x6
ffffffff800065de:	fc                   	cld    
ffffffff800065df:	eb 8f                	jmp    ffffffff80006570 <isr_common>

ffffffff800065e1 <isr_7>:
ffffffff800065e1:	6a 00                	push   0x0
ffffffff800065e3:	6a 07                	push   0x7
ffffffff800065e5:	fc                   	cld    
ffffffff800065e6:	eb 88                	jmp    ffffffff80006570 <isr_common>

ffffffff800065e8 <isr_8>:
ffffffff800065e8:	6a 08                	push   0x8
ffffffff800065ea:	fc                   	cld    
ffffffff800065eb:	eb 83                	jmp    ffffffff80006570 <isr_common>

ffffffff800065ed <isr_9>:
ffffffff800065ed:	6a 00                	push   0x0
ffffffff800065ef:	6a 09                	push   0x9
ffffffff800065f1:	fc                   	cld    
ffffffff800065f2:	e9 79 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800065f7 <isr_10>:
ffffffff800065f7:	6a 0a                	push   0xa
ffffffff800065f9:	fc                   	cld    
ffffffff800065fa:	e9 71 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800065ff <isr_11>:
ffffffff800065ff:	6a 0b                	push   0xb
ffffffff80006601:	fc                   	cld    
ffffffff80006602:	e9 69 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006607 <isr_12>:
ffffffff80006607:	6a 0c                	push   0xc
ffffffff80006609:	fc                   	cld    
ffffffff8000660a:	e9 61 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000660f <isr_13>:
ffffffff8000660f:	6a 0d                	push   0xd
ffffffff80006611:	fc                   	cld    
ffffffff80006612:	e9 59 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006617 <isr_14>:
ffffffff80006617:	6a 0e                	push   0xe
ffffffff80006619:	fc                   	cld    
ffffffff8000661a:	e9 51 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000661f <isr_15>:
ffffffff8000661f:	6a 00                	push   0x0
ffffffff80006621:	6a 0f                	push   0xf
ffffffff80006623:	fc                   	cld    
ffffffff80006624:	e9 47 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006629 <isr_16>:
ffffffff80006629:	6a 00                	push   0x0
ffffffff8000662b:	6a 10                	push   0x10
ffffffff8000662d:	fc                   	cld    
ffffffff8000662e:	e9 3d ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006633 <isr_17>:
ffffffff80006633:	6a 11                	push   0x11
ffffffff80006635:	fc                   	cld    
ffffffff80006636:	e9 35 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000663b <isr_18>:
ffffffff8000663b:	6a 00                	push   0x0
ffffffff8000663d:	6a 12                	push   0x12
ffffffff8000663f:	fc                   	cld    
ffffffff80006640:	e9 2b ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006645 <isr_19>:
ffffffff80006645:	6a 00                	push   0x0
ffffffff80006647:	6a 13                	push   0x13
ffffffff80006649:	fc                   	cld    
ffffffff8000664a:	e9 21 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000664f <isr_20>:
ffffffff8000664f:	6a 00                	push   0x0
ffffffff80006651:	6a 14                	push   0x14
ffffffff80006653:	fc                   	cld    
ffffffff80006654:	e9 17 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006659 <isr_21>:
ffffffff80006659:	6a 15                	push   0x15
ffffffff8000665b:	fc                   	cld    
ffffffff8000665c:	e9 0f ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006661 <isr_22>:
ffffffff80006661:	6a 00                	push   0x0
ffffffff80006663:	6a 16                	push   0x16
ffffffff80006665:	fc                   	cld    
ffffffff80006666:	e9 05 ff ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000666b <isr_23>:
ffffffff8000666b:	6a 00                	push   0x0
ffffffff8000666d:	6a 17                	push   0x17
ffffffff8000666f:	fc                   	cld    
ffffffff80006670:	e9 fb fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006675 <isr_24>:
ffffffff80006675:	6a 00                	push   0x0
ffffffff80006677:	6a 18                	push   0x18
ffffffff80006679:	fc                   	cld    
ffffffff8000667a:	e9 f1 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000667f <isr_25>:
ffffffff8000667f:	6a 00                	push   0x0
ffffffff80006681:	6a 19                	push   0x19
ffffffff80006683:	fc                   	cld    
ffffffff80006684:	e9 e7 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006689 <isr_26>:
ffffffff80006689:	6a 00                	push   0x0
ffffffff8000668b:	6a 1a                	push   0x1a
ffffffff8000668d:	fc                   	cld    
ffffffff8000668e:	e9 dd fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006693 <isr_27>:
ffffffff80006693:	6a 00                	push   0x0
ffffffff80006695:	6a 1b                	push   0x1b
ffffffff80006697:	fc                   	cld    
ffffffff80006698:	e9 d3 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000669d <isr_28>:
ffffffff8000669d:	6a 00                	push   0x0
ffffffff8000669f:	6a 1c                	push   0x1c
ffffffff800066a1:	fc                   	cld    
ffffffff800066a2:	e9 c9 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066a7 <isr_29>:
ffffffff800066a7:	6a 1d                	push   0x1d
ffffffff800066a9:	fc                   	cld    
ffffffff800066aa:	e9 c1 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066af <isr_30>:
ffffffff800066af:	6a 1e                	push   0x1e
ffffffff800066b1:	fc                   	cld    
ffffffff800066b2:	e9 b9 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066b7 <isr_31>:
ffffffff800066b7:	6a 00                	push   0x0
ffffffff800066b9:	6a 1f                	push   0x1f
ffffffff800066bb:	fc                   	cld    
ffffffff800066bc:	e9 af fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066c1 <isr_32>:
ffffffff800066c1:	6a 00                	push   0x0
ffffffff800066c3:	6a 20                	push   0x20
ffffffff800066c5:	fc                   	cld    
ffffffff800066c6:	e9 a5 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066cb <isr_33>:
ffffffff800066cb:	6a 00                	push   0x0
ffffffff800066cd:	6a 21                	push   0x21
ffffffff800066cf:	fc                   	cld    
ffffffff800066d0:	e9 9b fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066d5 <isr_34>:
ffffffff800066d5:	6a 00                	push   0x0
ffffffff800066d7:	6a 22                	push   0x22
ffffffff800066d9:	fc                   	cld    
ffffffff800066da:	e9 91 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066df <isr_35>:
ffffffff800066df:	6a 00                	push   0x0
ffffffff800066e1:	6a 23                	push   0x23
ffffffff800066e3:	fc                   	cld    
ffffffff800066e4:	e9 87 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066e9 <isr_36>:
ffffffff800066e9:	6a 00                	push   0x0
ffffffff800066eb:	6a 24                	push   0x24
ffffffff800066ed:	fc                   	cld    
ffffffff800066ee:	e9 7d fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066f3 <isr_37>:
ffffffff800066f3:	6a 00                	push   0x0
ffffffff800066f5:	6a 25                	push   0x25
ffffffff800066f7:	fc                   	cld    
ffffffff800066f8:	e9 73 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800066fd <isr_38>:
ffffffff800066fd:	6a 00                	push   0x0
ffffffff800066ff:	6a 26                	push   0x26
ffffffff80006701:	fc                   	cld    
ffffffff80006702:	e9 69 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006707 <isr_39>:
ffffffff80006707:	6a 00                	push   0x0
ffffffff80006709:	6a 27                	push   0x27
ffffffff8000670b:	fc                   	cld    
ffffffff8000670c:	e9 5f fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006711 <isr_40>:
ffffffff80006711:	6a 00                	push   0x0
ffffffff80006713:	6a 28                	push   0x28
ffffffff80006715:	fc                   	cld    
ffffffff80006716:	e9 55 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000671b <isr_41>:
ffffffff8000671b:	6a 00                	push   0x0
ffffffff8000671d:	6a 29                	push   0x29
ffffffff8000671f:	fc                   	cld    
ffffffff80006720:	e9 4b fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006725 <isr_42>:
ffffffff80006725:	6a 00                	push   0x0
ffffffff80006727:	6a 2a                	push   0x2a
ffffffff80006729:	fc                   	cld    
ffffffff8000672a:	e9 41 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000672f <isr_43>:
ffffffff8000672f:	6a 00                	push   0x0
ffffffff80006731:	6a 2b                	push   0x2b
ffffffff80006733:	fc                   	cld    
ffffffff80006734:	e9 37 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006739 <isr_44>:
ffffffff80006739:	6a 00                	push   0x0
ffffffff8000673b:	6a 2c                	push   0x2c
ffffffff8000673d:	fc                   	cld    
ffffffff8000673e:	e9 2d fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006743 <isr_45>:
ffffffff80006743:	6a 00                	push   0x0
ffffffff80006745:	6a 2d                	push   0x2d
ffffffff80006747:	fc                   	cld    
ffffffff80006748:	e9 23 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000674d <isr_46>:
ffffffff8000674d:	6a 00                	push   0x0
ffffffff8000674f:	6a 2e                	push   0x2e
ffffffff80006751:	fc                   	cld    
ffffffff80006752:	e9 19 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006757 <isr_47>:
ffffffff80006757:	6a 00                	push   0x0
ffffffff80006759:	6a 2f                	push   0x2f
ffffffff8000675b:	fc                   	cld    
ffffffff8000675c:	e9 0f fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006761 <isr_48>:
ffffffff80006761:	6a 00                	push   0x0
ffffffff80006763:	6a 30                	push   0x30
ffffffff80006765:	fc                   	cld    
ffffffff80006766:	e9 05 fe ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000676b <isr_49>:
ffffffff8000676b:	6a 00                	push   0x0
ffffffff8000676d:	6a 31                	push   0x31
ffffffff8000676f:	fc                   	cld    
ffffffff80006770:	e9 fb fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006775 <isr_50>:
ffffffff80006775:	6a 00                	push   0x0
ffffffff80006777:	6a 32                	push   0x32
ffffffff80006779:	fc                   	cld    
ffffffff8000677a:	e9 f1 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000677f <isr_51>:
ffffffff8000677f:	6a 00                	push   0x0
ffffffff80006781:	6a 33                	push   0x33
ffffffff80006783:	fc                   	cld    
ffffffff80006784:	e9 e7 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006789 <isr_52>:
ffffffff80006789:	6a 00                	push   0x0
ffffffff8000678b:	6a 34                	push   0x34
ffffffff8000678d:	fc                   	cld    
ffffffff8000678e:	e9 dd fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006793 <isr_53>:
ffffffff80006793:	6a 00                	push   0x0
ffffffff80006795:	6a 35                	push   0x35
ffffffff80006797:	fc                   	cld    
ffffffff80006798:	e9 d3 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000679d <isr_54>:
ffffffff8000679d:	6a 00                	push   0x0
ffffffff8000679f:	6a 36                	push   0x36
ffffffff800067a1:	fc                   	cld    
ffffffff800067a2:	e9 c9 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067a7 <isr_55>:
ffffffff800067a7:	6a 00                	push   0x0
ffffffff800067a9:	6a 37                	push   0x37
ffffffff800067ab:	fc                   	cld    
ffffffff800067ac:	e9 bf fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067b1 <isr_56>:
ffffffff800067b1:	6a 00                	push   0x0
ffffffff800067b3:	6a 38                	push   0x38
ffffffff800067b5:	fc                   	cld    
ffffffff800067b6:	e9 b5 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067bb <isr_57>:
ffffffff800067bb:	6a 00                	push   0x0
ffffffff800067bd:	6a 39                	push   0x39
ffffffff800067bf:	fc                   	cld    
ffffffff800067c0:	e9 ab fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067c5 <isr_58>:
ffffffff800067c5:	6a 00                	push   0x0
ffffffff800067c7:	6a 3a                	push   0x3a
ffffffff800067c9:	fc                   	cld    
ffffffff800067ca:	e9 a1 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067cf <isr_59>:
ffffffff800067cf:	6a 00                	push   0x0
ffffffff800067d1:	6a 3b                	push   0x3b
ffffffff800067d3:	fc                   	cld    
ffffffff800067d4:	e9 97 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067d9 <isr_60>:
ffffffff800067d9:	6a 00                	push   0x0
ffffffff800067db:	6a 3c                	push   0x3c
ffffffff800067dd:	fc                   	cld    
ffffffff800067de:	e9 8d fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067e3 <isr_61>:
ffffffff800067e3:	6a 00                	push   0x0
ffffffff800067e5:	6a 3d                	push   0x3d
ffffffff800067e7:	fc                   	cld    
ffffffff800067e8:	e9 83 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067ed <isr_62>:
ffffffff800067ed:	6a 00                	push   0x0
ffffffff800067ef:	6a 3e                	push   0x3e
ffffffff800067f1:	fc                   	cld    
ffffffff800067f2:	e9 79 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800067f7 <isr_63>:
ffffffff800067f7:	6a 00                	push   0x0
ffffffff800067f9:	6a 3f                	push   0x3f
ffffffff800067fb:	fc                   	cld    
ffffffff800067fc:	e9 6f fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006801 <isr_64>:
ffffffff80006801:	6a 00                	push   0x0
ffffffff80006803:	6a 40                	push   0x40
ffffffff80006805:	fc                   	cld    
ffffffff80006806:	e9 65 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000680b <isr_65>:
ffffffff8000680b:	6a 00                	push   0x0
ffffffff8000680d:	6a 41                	push   0x41
ffffffff8000680f:	fc                   	cld    
ffffffff80006810:	e9 5b fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006815 <isr_66>:
ffffffff80006815:	6a 00                	push   0x0
ffffffff80006817:	6a 42                	push   0x42
ffffffff80006819:	fc                   	cld    
ffffffff8000681a:	e9 51 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000681f <isr_67>:
ffffffff8000681f:	6a 00                	push   0x0
ffffffff80006821:	6a 43                	push   0x43
ffffffff80006823:	fc                   	cld    
ffffffff80006824:	e9 47 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006829 <isr_68>:
ffffffff80006829:	6a 00                	push   0x0
ffffffff8000682b:	6a 44                	push   0x44
ffffffff8000682d:	fc                   	cld    
ffffffff8000682e:	e9 3d fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006833 <isr_69>:
ffffffff80006833:	6a 00                	push   0x0
ffffffff80006835:	6a 45                	push   0x45
ffffffff80006837:	fc                   	cld    
ffffffff80006838:	e9 33 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000683d <isr_70>:
ffffffff8000683d:	6a 00                	push   0x0
ffffffff8000683f:	6a 46                	push   0x46
ffffffff80006841:	fc                   	cld    
ffffffff80006842:	e9 29 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006847 <isr_71>:
ffffffff80006847:	6a 00                	push   0x0
ffffffff80006849:	6a 47                	push   0x47
ffffffff8000684b:	fc                   	cld    
ffffffff8000684c:	e9 1f fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006851 <isr_72>:
ffffffff80006851:	6a 00                	push   0x0
ffffffff80006853:	6a 48                	push   0x48
ffffffff80006855:	fc                   	cld    
ffffffff80006856:	e9 15 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000685b <isr_73>:
ffffffff8000685b:	6a 00                	push   0x0
ffffffff8000685d:	6a 49                	push   0x49
ffffffff8000685f:	fc                   	cld    
ffffffff80006860:	e9 0b fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006865 <isr_74>:
ffffffff80006865:	6a 00                	push   0x0
ffffffff80006867:	6a 4a                	push   0x4a
ffffffff80006869:	fc                   	cld    
ffffffff8000686a:	e9 01 fd ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000686f <isr_75>:
ffffffff8000686f:	6a 00                	push   0x0
ffffffff80006871:	6a 4b                	push   0x4b
ffffffff80006873:	fc                   	cld    
ffffffff80006874:	e9 f7 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006879 <isr_76>:
ffffffff80006879:	6a 00                	push   0x0
ffffffff8000687b:	6a 4c                	push   0x4c
ffffffff8000687d:	fc                   	cld    
ffffffff8000687e:	e9 ed fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006883 <isr_77>:
ffffffff80006883:	6a 00                	push   0x0
ffffffff80006885:	6a 4d                	push   0x4d
ffffffff80006887:	fc                   	cld    
ffffffff80006888:	e9 e3 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000688d <isr_78>:
ffffffff8000688d:	6a 00                	push   0x0
ffffffff8000688f:	6a 4e                	push   0x4e
ffffffff80006891:	fc                   	cld    
ffffffff80006892:	e9 d9 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006897 <isr_79>:
ffffffff80006897:	6a 00                	push   0x0
ffffffff80006899:	6a 4f                	push   0x4f
ffffffff8000689b:	fc                   	cld    
ffffffff8000689c:	e9 cf fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068a1 <isr_80>:
ffffffff800068a1:	6a 00                	push   0x0
ffffffff800068a3:	6a 50                	push   0x50
ffffffff800068a5:	fc                   	cld    
ffffffff800068a6:	e9 c5 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068ab <isr_81>:
ffffffff800068ab:	6a 00                	push   0x0
ffffffff800068ad:	6a 51                	push   0x51
ffffffff800068af:	fc                   	cld    
ffffffff800068b0:	e9 bb fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068b5 <isr_82>:
ffffffff800068b5:	6a 00                	push   0x0
ffffffff800068b7:	6a 52                	push   0x52
ffffffff800068b9:	fc                   	cld    
ffffffff800068ba:	e9 b1 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068bf <isr_83>:
ffffffff800068bf:	6a 00                	push   0x0
ffffffff800068c1:	6a 53                	push   0x53
ffffffff800068c3:	fc                   	cld    
ffffffff800068c4:	e9 a7 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068c9 <isr_84>:
ffffffff800068c9:	6a 00                	push   0x0
ffffffff800068cb:	6a 54                	push   0x54
ffffffff800068cd:	fc                   	cld    
ffffffff800068ce:	e9 9d fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068d3 <isr_85>:
ffffffff800068d3:	6a 00                	push   0x0
ffffffff800068d5:	6a 55                	push   0x55
ffffffff800068d7:	fc                   	cld    
ffffffff800068d8:	e9 93 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068dd <isr_86>:
ffffffff800068dd:	6a 00                	push   0x0
ffffffff800068df:	6a 56                	push   0x56
ffffffff800068e1:	fc                   	cld    
ffffffff800068e2:	e9 89 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068e7 <isr_87>:
ffffffff800068e7:	6a 00                	push   0x0
ffffffff800068e9:	6a 57                	push   0x57
ffffffff800068eb:	fc                   	cld    
ffffffff800068ec:	e9 7f fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068f1 <isr_88>:
ffffffff800068f1:	6a 00                	push   0x0
ffffffff800068f3:	6a 58                	push   0x58
ffffffff800068f5:	fc                   	cld    
ffffffff800068f6:	e9 75 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800068fb <isr_89>:
ffffffff800068fb:	6a 00                	push   0x0
ffffffff800068fd:	6a 59                	push   0x59
ffffffff800068ff:	fc                   	cld    
ffffffff80006900:	e9 6b fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006905 <isr_90>:
ffffffff80006905:	6a 00                	push   0x0
ffffffff80006907:	6a 5a                	push   0x5a
ffffffff80006909:	fc                   	cld    
ffffffff8000690a:	e9 61 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000690f <isr_91>:
ffffffff8000690f:	6a 00                	push   0x0
ffffffff80006911:	6a 5b                	push   0x5b
ffffffff80006913:	fc                   	cld    
ffffffff80006914:	e9 57 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006919 <isr_92>:
ffffffff80006919:	6a 00                	push   0x0
ffffffff8000691b:	6a 5c                	push   0x5c
ffffffff8000691d:	fc                   	cld    
ffffffff8000691e:	e9 4d fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006923 <isr_93>:
ffffffff80006923:	6a 00                	push   0x0
ffffffff80006925:	6a 5d                	push   0x5d
ffffffff80006927:	fc                   	cld    
ffffffff80006928:	e9 43 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000692d <isr_94>:
ffffffff8000692d:	6a 00                	push   0x0
ffffffff8000692f:	6a 5e                	push   0x5e
ffffffff80006931:	fc                   	cld    
ffffffff80006932:	e9 39 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006937 <isr_95>:
ffffffff80006937:	6a 00                	push   0x0
ffffffff80006939:	6a 5f                	push   0x5f
ffffffff8000693b:	fc                   	cld    
ffffffff8000693c:	e9 2f fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006941 <isr_96>:
ffffffff80006941:	6a 00                	push   0x0
ffffffff80006943:	6a 60                	push   0x60
ffffffff80006945:	fc                   	cld    
ffffffff80006946:	e9 25 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000694b <isr_97>:
ffffffff8000694b:	6a 00                	push   0x0
ffffffff8000694d:	6a 61                	push   0x61
ffffffff8000694f:	fc                   	cld    
ffffffff80006950:	e9 1b fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006955 <isr_98>:
ffffffff80006955:	6a 00                	push   0x0
ffffffff80006957:	6a 62                	push   0x62
ffffffff80006959:	fc                   	cld    
ffffffff8000695a:	e9 11 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000695f <isr_99>:
ffffffff8000695f:	6a 00                	push   0x0
ffffffff80006961:	6a 63                	push   0x63
ffffffff80006963:	fc                   	cld    
ffffffff80006964:	e9 07 fc ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006969 <isr_100>:
ffffffff80006969:	6a 00                	push   0x0
ffffffff8000696b:	6a 64                	push   0x64
ffffffff8000696d:	fc                   	cld    
ffffffff8000696e:	e9 fd fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006973 <isr_101>:
ffffffff80006973:	6a 00                	push   0x0
ffffffff80006975:	6a 65                	push   0x65
ffffffff80006977:	fc                   	cld    
ffffffff80006978:	e9 f3 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000697d <isr_102>:
ffffffff8000697d:	6a 00                	push   0x0
ffffffff8000697f:	6a 66                	push   0x66
ffffffff80006981:	fc                   	cld    
ffffffff80006982:	e9 e9 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006987 <isr_103>:
ffffffff80006987:	6a 00                	push   0x0
ffffffff80006989:	6a 67                	push   0x67
ffffffff8000698b:	fc                   	cld    
ffffffff8000698c:	e9 df fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006991 <isr_104>:
ffffffff80006991:	6a 00                	push   0x0
ffffffff80006993:	6a 68                	push   0x68
ffffffff80006995:	fc                   	cld    
ffffffff80006996:	e9 d5 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000699b <isr_105>:
ffffffff8000699b:	6a 00                	push   0x0
ffffffff8000699d:	6a 69                	push   0x69
ffffffff8000699f:	fc                   	cld    
ffffffff800069a0:	e9 cb fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069a5 <isr_106>:
ffffffff800069a5:	6a 00                	push   0x0
ffffffff800069a7:	6a 6a                	push   0x6a
ffffffff800069a9:	fc                   	cld    
ffffffff800069aa:	e9 c1 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069af <isr_107>:
ffffffff800069af:	6a 00                	push   0x0
ffffffff800069b1:	6a 6b                	push   0x6b
ffffffff800069b3:	fc                   	cld    
ffffffff800069b4:	e9 b7 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069b9 <isr_108>:
ffffffff800069b9:	6a 00                	push   0x0
ffffffff800069bb:	6a 6c                	push   0x6c
ffffffff800069bd:	fc                   	cld    
ffffffff800069be:	e9 ad fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069c3 <isr_109>:
ffffffff800069c3:	6a 00                	push   0x0
ffffffff800069c5:	6a 6d                	push   0x6d
ffffffff800069c7:	fc                   	cld    
ffffffff800069c8:	e9 a3 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069cd <isr_110>:
ffffffff800069cd:	6a 00                	push   0x0
ffffffff800069cf:	6a 6e                	push   0x6e
ffffffff800069d1:	fc                   	cld    
ffffffff800069d2:	e9 99 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069d7 <isr_111>:
ffffffff800069d7:	6a 00                	push   0x0
ffffffff800069d9:	6a 6f                	push   0x6f
ffffffff800069db:	fc                   	cld    
ffffffff800069dc:	e9 8f fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069e1 <isr_112>:
ffffffff800069e1:	6a 00                	push   0x0
ffffffff800069e3:	6a 70                	push   0x70
ffffffff800069e5:	fc                   	cld    
ffffffff800069e6:	e9 85 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069eb <isr_113>:
ffffffff800069eb:	6a 00                	push   0x0
ffffffff800069ed:	6a 71                	push   0x71
ffffffff800069ef:	fc                   	cld    
ffffffff800069f0:	e9 7b fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069f5 <isr_114>:
ffffffff800069f5:	6a 00                	push   0x0
ffffffff800069f7:	6a 72                	push   0x72
ffffffff800069f9:	fc                   	cld    
ffffffff800069fa:	e9 71 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800069ff <isr_115>:
ffffffff800069ff:	6a 00                	push   0x0
ffffffff80006a01:	6a 73                	push   0x73
ffffffff80006a03:	fc                   	cld    
ffffffff80006a04:	e9 67 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a09 <isr_116>:
ffffffff80006a09:	6a 00                	push   0x0
ffffffff80006a0b:	6a 74                	push   0x74
ffffffff80006a0d:	fc                   	cld    
ffffffff80006a0e:	e9 5d fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a13 <isr_117>:
ffffffff80006a13:	6a 00                	push   0x0
ffffffff80006a15:	6a 75                	push   0x75
ffffffff80006a17:	fc                   	cld    
ffffffff80006a18:	e9 53 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a1d <isr_118>:
ffffffff80006a1d:	6a 00                	push   0x0
ffffffff80006a1f:	6a 76                	push   0x76
ffffffff80006a21:	fc                   	cld    
ffffffff80006a22:	e9 49 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a27 <isr_119>:
ffffffff80006a27:	6a 00                	push   0x0
ffffffff80006a29:	6a 77                	push   0x77
ffffffff80006a2b:	fc                   	cld    
ffffffff80006a2c:	e9 3f fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a31 <isr_120>:
ffffffff80006a31:	6a 00                	push   0x0
ffffffff80006a33:	6a 78                	push   0x78
ffffffff80006a35:	fc                   	cld    
ffffffff80006a36:	e9 35 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a3b <isr_121>:
ffffffff80006a3b:	6a 00                	push   0x0
ffffffff80006a3d:	6a 79                	push   0x79
ffffffff80006a3f:	fc                   	cld    
ffffffff80006a40:	e9 2b fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a45 <isr_122>:
ffffffff80006a45:	6a 00                	push   0x0
ffffffff80006a47:	6a 7a                	push   0x7a
ffffffff80006a49:	fc                   	cld    
ffffffff80006a4a:	e9 21 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a4f <isr_123>:
ffffffff80006a4f:	6a 00                	push   0x0
ffffffff80006a51:	6a 7b                	push   0x7b
ffffffff80006a53:	fc                   	cld    
ffffffff80006a54:	e9 17 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a59 <isr_124>:
ffffffff80006a59:	6a 00                	push   0x0
ffffffff80006a5b:	6a 7c                	push   0x7c
ffffffff80006a5d:	fc                   	cld    
ffffffff80006a5e:	e9 0d fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a63 <isr_125>:
ffffffff80006a63:	6a 00                	push   0x0
ffffffff80006a65:	6a 7d                	push   0x7d
ffffffff80006a67:	fc                   	cld    
ffffffff80006a68:	e9 03 fb ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a6d <isr_126>:
ffffffff80006a6d:	6a 00                	push   0x0
ffffffff80006a6f:	6a 7e                	push   0x7e
ffffffff80006a71:	fc                   	cld    
ffffffff80006a72:	e9 f9 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a77 <isr_127>:
ffffffff80006a77:	6a 00                	push   0x0
ffffffff80006a79:	6a 7f                	push   0x7f
ffffffff80006a7b:	fc                   	cld    
ffffffff80006a7c:	e9 ef fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a81 <isr_128>:
ffffffff80006a81:	6a 00                	push   0x0
ffffffff80006a83:	68 80 00 00 00       	push   0x80
ffffffff80006a88:	fc                   	cld    
ffffffff80006a89:	e9 e2 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a8e <isr_129>:
ffffffff80006a8e:	6a 00                	push   0x0
ffffffff80006a90:	68 81 00 00 00       	push   0x81
ffffffff80006a95:	fc                   	cld    
ffffffff80006a96:	e9 d5 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006a9b <isr_130>:
ffffffff80006a9b:	6a 00                	push   0x0
ffffffff80006a9d:	68 82 00 00 00       	push   0x82
ffffffff80006aa2:	fc                   	cld    
ffffffff80006aa3:	e9 c8 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006aa8 <isr_131>:
ffffffff80006aa8:	6a 00                	push   0x0
ffffffff80006aaa:	68 83 00 00 00       	push   0x83
ffffffff80006aaf:	fc                   	cld    
ffffffff80006ab0:	e9 bb fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ab5 <isr_132>:
ffffffff80006ab5:	6a 00                	push   0x0
ffffffff80006ab7:	68 84 00 00 00       	push   0x84
ffffffff80006abc:	fc                   	cld    
ffffffff80006abd:	e9 ae fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ac2 <isr_133>:
ffffffff80006ac2:	6a 00                	push   0x0
ffffffff80006ac4:	68 85 00 00 00       	push   0x85
ffffffff80006ac9:	fc                   	cld    
ffffffff80006aca:	e9 a1 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006acf <isr_134>:
ffffffff80006acf:	6a 00                	push   0x0
ffffffff80006ad1:	68 86 00 00 00       	push   0x86
ffffffff80006ad6:	fc                   	cld    
ffffffff80006ad7:	e9 94 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006adc <isr_135>:
ffffffff80006adc:	6a 00                	push   0x0
ffffffff80006ade:	68 87 00 00 00       	push   0x87
ffffffff80006ae3:	fc                   	cld    
ffffffff80006ae4:	e9 87 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ae9 <isr_136>:
ffffffff80006ae9:	6a 00                	push   0x0
ffffffff80006aeb:	68 88 00 00 00       	push   0x88
ffffffff80006af0:	fc                   	cld    
ffffffff80006af1:	e9 7a fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006af6 <isr_137>:
ffffffff80006af6:	6a 00                	push   0x0
ffffffff80006af8:	68 89 00 00 00       	push   0x89
ffffffff80006afd:	fc                   	cld    
ffffffff80006afe:	e9 6d fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b03 <isr_138>:
ffffffff80006b03:	6a 00                	push   0x0
ffffffff80006b05:	68 8a 00 00 00       	push   0x8a
ffffffff80006b0a:	fc                   	cld    
ffffffff80006b0b:	e9 60 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b10 <isr_139>:
ffffffff80006b10:	6a 00                	push   0x0
ffffffff80006b12:	68 8b 00 00 00       	push   0x8b
ffffffff80006b17:	fc                   	cld    
ffffffff80006b18:	e9 53 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b1d <isr_140>:
ffffffff80006b1d:	6a 00                	push   0x0
ffffffff80006b1f:	68 8c 00 00 00       	push   0x8c
ffffffff80006b24:	fc                   	cld    
ffffffff80006b25:	e9 46 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b2a <isr_141>:
ffffffff80006b2a:	6a 00                	push   0x0
ffffffff80006b2c:	68 8d 00 00 00       	push   0x8d
ffffffff80006b31:	fc                   	cld    
ffffffff80006b32:	e9 39 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b37 <isr_142>:
ffffffff80006b37:	6a 00                	push   0x0
ffffffff80006b39:	68 8e 00 00 00       	push   0x8e
ffffffff80006b3e:	fc                   	cld    
ffffffff80006b3f:	e9 2c fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b44 <isr_143>:
ffffffff80006b44:	6a 00                	push   0x0
ffffffff80006b46:	68 8f 00 00 00       	push   0x8f
ffffffff80006b4b:	fc                   	cld    
ffffffff80006b4c:	e9 1f fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b51 <isr_144>:
ffffffff80006b51:	6a 00                	push   0x0
ffffffff80006b53:	68 90 00 00 00       	push   0x90
ffffffff80006b58:	fc                   	cld    
ffffffff80006b59:	e9 12 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b5e <isr_145>:
ffffffff80006b5e:	6a 00                	push   0x0
ffffffff80006b60:	68 91 00 00 00       	push   0x91
ffffffff80006b65:	fc                   	cld    
ffffffff80006b66:	e9 05 fa ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b6b <isr_146>:
ffffffff80006b6b:	6a 00                	push   0x0
ffffffff80006b6d:	68 92 00 00 00       	push   0x92
ffffffff80006b72:	fc                   	cld    
ffffffff80006b73:	e9 f8 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b78 <isr_147>:
ffffffff80006b78:	6a 00                	push   0x0
ffffffff80006b7a:	68 93 00 00 00       	push   0x93
ffffffff80006b7f:	fc                   	cld    
ffffffff80006b80:	e9 eb f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b85 <isr_148>:
ffffffff80006b85:	6a 00                	push   0x0
ffffffff80006b87:	68 94 00 00 00       	push   0x94
ffffffff80006b8c:	fc                   	cld    
ffffffff80006b8d:	e9 de f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b92 <isr_149>:
ffffffff80006b92:	6a 00                	push   0x0
ffffffff80006b94:	68 95 00 00 00       	push   0x95
ffffffff80006b99:	fc                   	cld    
ffffffff80006b9a:	e9 d1 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006b9f <isr_150>:
ffffffff80006b9f:	6a 00                	push   0x0
ffffffff80006ba1:	68 96 00 00 00       	push   0x96
ffffffff80006ba6:	fc                   	cld    
ffffffff80006ba7:	e9 c4 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006bac <isr_151>:
ffffffff80006bac:	6a 00                	push   0x0
ffffffff80006bae:	68 97 00 00 00       	push   0x97
ffffffff80006bb3:	fc                   	cld    
ffffffff80006bb4:	e9 b7 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006bb9 <isr_152>:
ffffffff80006bb9:	6a 00                	push   0x0
ffffffff80006bbb:	68 98 00 00 00       	push   0x98
ffffffff80006bc0:	fc                   	cld    
ffffffff80006bc1:	e9 aa f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006bc6 <isr_153>:
ffffffff80006bc6:	6a 00                	push   0x0
ffffffff80006bc8:	68 99 00 00 00       	push   0x99
ffffffff80006bcd:	fc                   	cld    
ffffffff80006bce:	e9 9d f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006bd3 <isr_154>:
ffffffff80006bd3:	6a 00                	push   0x0
ffffffff80006bd5:	68 9a 00 00 00       	push   0x9a
ffffffff80006bda:	fc                   	cld    
ffffffff80006bdb:	e9 90 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006be0 <isr_155>:
ffffffff80006be0:	6a 00                	push   0x0
ffffffff80006be2:	68 9b 00 00 00       	push   0x9b
ffffffff80006be7:	fc                   	cld    
ffffffff80006be8:	e9 83 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006bed <isr_156>:
ffffffff80006bed:	6a 00                	push   0x0
ffffffff80006bef:	68 9c 00 00 00       	push   0x9c
ffffffff80006bf4:	fc                   	cld    
ffffffff80006bf5:	e9 76 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006bfa <isr_157>:
ffffffff80006bfa:	6a 00                	push   0x0
ffffffff80006bfc:	68 9d 00 00 00       	push   0x9d
ffffffff80006c01:	fc                   	cld    
ffffffff80006c02:	e9 69 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c07 <isr_158>:
ffffffff80006c07:	6a 00                	push   0x0
ffffffff80006c09:	68 9e 00 00 00       	push   0x9e
ffffffff80006c0e:	fc                   	cld    
ffffffff80006c0f:	e9 5c f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c14 <isr_159>:
ffffffff80006c14:	6a 00                	push   0x0
ffffffff80006c16:	68 9f 00 00 00       	push   0x9f
ffffffff80006c1b:	fc                   	cld    
ffffffff80006c1c:	e9 4f f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c21 <isr_160>:
ffffffff80006c21:	6a 00                	push   0x0
ffffffff80006c23:	68 a0 00 00 00       	push   0xa0
ffffffff80006c28:	fc                   	cld    
ffffffff80006c29:	e9 42 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c2e <isr_161>:
ffffffff80006c2e:	6a 00                	push   0x0
ffffffff80006c30:	68 a1 00 00 00       	push   0xa1
ffffffff80006c35:	fc                   	cld    
ffffffff80006c36:	e9 35 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c3b <isr_162>:
ffffffff80006c3b:	6a 00                	push   0x0
ffffffff80006c3d:	68 a2 00 00 00       	push   0xa2
ffffffff80006c42:	fc                   	cld    
ffffffff80006c43:	e9 28 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c48 <isr_163>:
ffffffff80006c48:	6a 00                	push   0x0
ffffffff80006c4a:	68 a3 00 00 00       	push   0xa3
ffffffff80006c4f:	fc                   	cld    
ffffffff80006c50:	e9 1b f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c55 <isr_164>:
ffffffff80006c55:	6a 00                	push   0x0
ffffffff80006c57:	68 a4 00 00 00       	push   0xa4
ffffffff80006c5c:	fc                   	cld    
ffffffff80006c5d:	e9 0e f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c62 <isr_165>:
ffffffff80006c62:	6a 00                	push   0x0
ffffffff80006c64:	68 a5 00 00 00       	push   0xa5
ffffffff80006c69:	fc                   	cld    
ffffffff80006c6a:	e9 01 f9 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c6f <isr_166>:
ffffffff80006c6f:	6a 00                	push   0x0
ffffffff80006c71:	68 a6 00 00 00       	push   0xa6
ffffffff80006c76:	fc                   	cld    
ffffffff80006c77:	e9 f4 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c7c <isr_167>:
ffffffff80006c7c:	6a 00                	push   0x0
ffffffff80006c7e:	68 a7 00 00 00       	push   0xa7
ffffffff80006c83:	fc                   	cld    
ffffffff80006c84:	e9 e7 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c89 <isr_168>:
ffffffff80006c89:	6a 00                	push   0x0
ffffffff80006c8b:	68 a8 00 00 00       	push   0xa8
ffffffff80006c90:	fc                   	cld    
ffffffff80006c91:	e9 da f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006c96 <isr_169>:
ffffffff80006c96:	6a 00                	push   0x0
ffffffff80006c98:	68 a9 00 00 00       	push   0xa9
ffffffff80006c9d:	fc                   	cld    
ffffffff80006c9e:	e9 cd f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ca3 <isr_170>:
ffffffff80006ca3:	6a 00                	push   0x0
ffffffff80006ca5:	68 aa 00 00 00       	push   0xaa
ffffffff80006caa:	fc                   	cld    
ffffffff80006cab:	e9 c0 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006cb0 <isr_171>:
ffffffff80006cb0:	6a 00                	push   0x0
ffffffff80006cb2:	68 ab 00 00 00       	push   0xab
ffffffff80006cb7:	fc                   	cld    
ffffffff80006cb8:	e9 b3 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006cbd <isr_172>:
ffffffff80006cbd:	6a 00                	push   0x0
ffffffff80006cbf:	68 ac 00 00 00       	push   0xac
ffffffff80006cc4:	fc                   	cld    
ffffffff80006cc5:	e9 a6 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006cca <isr_173>:
ffffffff80006cca:	6a 00                	push   0x0
ffffffff80006ccc:	68 ad 00 00 00       	push   0xad
ffffffff80006cd1:	fc                   	cld    
ffffffff80006cd2:	e9 99 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006cd7 <isr_174>:
ffffffff80006cd7:	6a 00                	push   0x0
ffffffff80006cd9:	68 ae 00 00 00       	push   0xae
ffffffff80006cde:	fc                   	cld    
ffffffff80006cdf:	e9 8c f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ce4 <isr_175>:
ffffffff80006ce4:	6a 00                	push   0x0
ffffffff80006ce6:	68 af 00 00 00       	push   0xaf
ffffffff80006ceb:	fc                   	cld    
ffffffff80006cec:	e9 7f f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006cf1 <isr_176>:
ffffffff80006cf1:	6a 00                	push   0x0
ffffffff80006cf3:	68 b0 00 00 00       	push   0xb0
ffffffff80006cf8:	fc                   	cld    
ffffffff80006cf9:	e9 72 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006cfe <isr_177>:
ffffffff80006cfe:	6a 00                	push   0x0
ffffffff80006d00:	68 b1 00 00 00       	push   0xb1
ffffffff80006d05:	fc                   	cld    
ffffffff80006d06:	e9 65 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d0b <isr_178>:
ffffffff80006d0b:	6a 00                	push   0x0
ffffffff80006d0d:	68 b2 00 00 00       	push   0xb2
ffffffff80006d12:	fc                   	cld    
ffffffff80006d13:	e9 58 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d18 <isr_179>:
ffffffff80006d18:	6a 00                	push   0x0
ffffffff80006d1a:	68 b3 00 00 00       	push   0xb3
ffffffff80006d1f:	fc                   	cld    
ffffffff80006d20:	e9 4b f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d25 <isr_180>:
ffffffff80006d25:	6a 00                	push   0x0
ffffffff80006d27:	68 b4 00 00 00       	push   0xb4
ffffffff80006d2c:	fc                   	cld    
ffffffff80006d2d:	e9 3e f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d32 <isr_181>:
ffffffff80006d32:	6a 00                	push   0x0
ffffffff80006d34:	68 b5 00 00 00       	push   0xb5
ffffffff80006d39:	fc                   	cld    
ffffffff80006d3a:	e9 31 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d3f <isr_182>:
ffffffff80006d3f:	6a 00                	push   0x0
ffffffff80006d41:	68 b6 00 00 00       	push   0xb6
ffffffff80006d46:	fc                   	cld    
ffffffff80006d47:	e9 24 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d4c <isr_183>:
ffffffff80006d4c:	6a 00                	push   0x0
ffffffff80006d4e:	68 b7 00 00 00       	push   0xb7
ffffffff80006d53:	fc                   	cld    
ffffffff80006d54:	e9 17 f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d59 <isr_184>:
ffffffff80006d59:	6a 00                	push   0x0
ffffffff80006d5b:	68 b8 00 00 00       	push   0xb8
ffffffff80006d60:	fc                   	cld    
ffffffff80006d61:	e9 0a f8 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d66 <isr_185>:
ffffffff80006d66:	6a 00                	push   0x0
ffffffff80006d68:	68 b9 00 00 00       	push   0xb9
ffffffff80006d6d:	fc                   	cld    
ffffffff80006d6e:	e9 fd f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d73 <isr_186>:
ffffffff80006d73:	6a 00                	push   0x0
ffffffff80006d75:	68 ba 00 00 00       	push   0xba
ffffffff80006d7a:	fc                   	cld    
ffffffff80006d7b:	e9 f0 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d80 <isr_187>:
ffffffff80006d80:	6a 00                	push   0x0
ffffffff80006d82:	68 bb 00 00 00       	push   0xbb
ffffffff80006d87:	fc                   	cld    
ffffffff80006d88:	e9 e3 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d8d <isr_188>:
ffffffff80006d8d:	6a 00                	push   0x0
ffffffff80006d8f:	68 bc 00 00 00       	push   0xbc
ffffffff80006d94:	fc                   	cld    
ffffffff80006d95:	e9 d6 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006d9a <isr_189>:
ffffffff80006d9a:	6a 00                	push   0x0
ffffffff80006d9c:	68 bd 00 00 00       	push   0xbd
ffffffff80006da1:	fc                   	cld    
ffffffff80006da2:	e9 c9 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006da7 <isr_190>:
ffffffff80006da7:	6a 00                	push   0x0
ffffffff80006da9:	68 be 00 00 00       	push   0xbe
ffffffff80006dae:	fc                   	cld    
ffffffff80006daf:	e9 bc f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006db4 <isr_191>:
ffffffff80006db4:	6a 00                	push   0x0
ffffffff80006db6:	68 bf 00 00 00       	push   0xbf
ffffffff80006dbb:	fc                   	cld    
ffffffff80006dbc:	e9 af f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006dc1 <isr_192>:
ffffffff80006dc1:	6a 00                	push   0x0
ffffffff80006dc3:	68 c0 00 00 00       	push   0xc0
ffffffff80006dc8:	fc                   	cld    
ffffffff80006dc9:	e9 a2 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006dce <isr_193>:
ffffffff80006dce:	6a 00                	push   0x0
ffffffff80006dd0:	68 c1 00 00 00       	push   0xc1
ffffffff80006dd5:	fc                   	cld    
ffffffff80006dd6:	e9 95 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ddb <isr_194>:
ffffffff80006ddb:	6a 00                	push   0x0
ffffffff80006ddd:	68 c2 00 00 00       	push   0xc2
ffffffff80006de2:	fc                   	cld    
ffffffff80006de3:	e9 88 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006de8 <isr_195>:
ffffffff80006de8:	6a 00                	push   0x0
ffffffff80006dea:	68 c3 00 00 00       	push   0xc3
ffffffff80006def:	fc                   	cld    
ffffffff80006df0:	e9 7b f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006df5 <isr_196>:
ffffffff80006df5:	6a 00                	push   0x0
ffffffff80006df7:	68 c4 00 00 00       	push   0xc4
ffffffff80006dfc:	fc                   	cld    
ffffffff80006dfd:	e9 6e f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e02 <isr_197>:
ffffffff80006e02:	6a 00                	push   0x0
ffffffff80006e04:	68 c5 00 00 00       	push   0xc5
ffffffff80006e09:	fc                   	cld    
ffffffff80006e0a:	e9 61 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e0f <isr_198>:
ffffffff80006e0f:	6a 00                	push   0x0
ffffffff80006e11:	68 c6 00 00 00       	push   0xc6
ffffffff80006e16:	fc                   	cld    
ffffffff80006e17:	e9 54 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e1c <isr_199>:
ffffffff80006e1c:	6a 00                	push   0x0
ffffffff80006e1e:	68 c7 00 00 00       	push   0xc7
ffffffff80006e23:	fc                   	cld    
ffffffff80006e24:	e9 47 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e29 <isr_200>:
ffffffff80006e29:	6a 00                	push   0x0
ffffffff80006e2b:	68 c8 00 00 00       	push   0xc8
ffffffff80006e30:	fc                   	cld    
ffffffff80006e31:	e9 3a f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e36 <isr_201>:
ffffffff80006e36:	6a 00                	push   0x0
ffffffff80006e38:	68 c9 00 00 00       	push   0xc9
ffffffff80006e3d:	fc                   	cld    
ffffffff80006e3e:	e9 2d f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e43 <isr_202>:
ffffffff80006e43:	6a 00                	push   0x0
ffffffff80006e45:	68 ca 00 00 00       	push   0xca
ffffffff80006e4a:	fc                   	cld    
ffffffff80006e4b:	e9 20 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e50 <isr_203>:
ffffffff80006e50:	6a 00                	push   0x0
ffffffff80006e52:	68 cb 00 00 00       	push   0xcb
ffffffff80006e57:	fc                   	cld    
ffffffff80006e58:	e9 13 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e5d <isr_204>:
ffffffff80006e5d:	6a 00                	push   0x0
ffffffff80006e5f:	68 cc 00 00 00       	push   0xcc
ffffffff80006e64:	fc                   	cld    
ffffffff80006e65:	e9 06 f7 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e6a <isr_205>:
ffffffff80006e6a:	6a 00                	push   0x0
ffffffff80006e6c:	68 cd 00 00 00       	push   0xcd
ffffffff80006e71:	fc                   	cld    
ffffffff80006e72:	e9 f9 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e77 <isr_206>:
ffffffff80006e77:	6a 00                	push   0x0
ffffffff80006e79:	68 ce 00 00 00       	push   0xce
ffffffff80006e7e:	fc                   	cld    
ffffffff80006e7f:	e9 ec f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e84 <isr_207>:
ffffffff80006e84:	6a 00                	push   0x0
ffffffff80006e86:	68 cf 00 00 00       	push   0xcf
ffffffff80006e8b:	fc                   	cld    
ffffffff80006e8c:	e9 df f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e91 <isr_208>:
ffffffff80006e91:	6a 00                	push   0x0
ffffffff80006e93:	68 d0 00 00 00       	push   0xd0
ffffffff80006e98:	fc                   	cld    
ffffffff80006e99:	e9 d2 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006e9e <isr_209>:
ffffffff80006e9e:	6a 00                	push   0x0
ffffffff80006ea0:	68 d1 00 00 00       	push   0xd1
ffffffff80006ea5:	fc                   	cld    
ffffffff80006ea6:	e9 c5 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006eab <isr_210>:
ffffffff80006eab:	6a 00                	push   0x0
ffffffff80006ead:	68 d2 00 00 00       	push   0xd2
ffffffff80006eb2:	fc                   	cld    
ffffffff80006eb3:	e9 b8 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006eb8 <isr_211>:
ffffffff80006eb8:	6a 00                	push   0x0
ffffffff80006eba:	68 d3 00 00 00       	push   0xd3
ffffffff80006ebf:	fc                   	cld    
ffffffff80006ec0:	e9 ab f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ec5 <isr_212>:
ffffffff80006ec5:	6a 00                	push   0x0
ffffffff80006ec7:	68 d4 00 00 00       	push   0xd4
ffffffff80006ecc:	fc                   	cld    
ffffffff80006ecd:	e9 9e f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ed2 <isr_213>:
ffffffff80006ed2:	6a 00                	push   0x0
ffffffff80006ed4:	68 d5 00 00 00       	push   0xd5
ffffffff80006ed9:	fc                   	cld    
ffffffff80006eda:	e9 91 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006edf <isr_214>:
ffffffff80006edf:	6a 00                	push   0x0
ffffffff80006ee1:	68 d6 00 00 00       	push   0xd6
ffffffff80006ee6:	fc                   	cld    
ffffffff80006ee7:	e9 84 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006eec <isr_215>:
ffffffff80006eec:	6a 00                	push   0x0
ffffffff80006eee:	68 d7 00 00 00       	push   0xd7
ffffffff80006ef3:	fc                   	cld    
ffffffff80006ef4:	e9 77 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ef9 <isr_216>:
ffffffff80006ef9:	6a 00                	push   0x0
ffffffff80006efb:	68 d8 00 00 00       	push   0xd8
ffffffff80006f00:	fc                   	cld    
ffffffff80006f01:	e9 6a f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f06 <isr_217>:
ffffffff80006f06:	6a 00                	push   0x0
ffffffff80006f08:	68 d9 00 00 00       	push   0xd9
ffffffff80006f0d:	fc                   	cld    
ffffffff80006f0e:	e9 5d f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f13 <isr_218>:
ffffffff80006f13:	6a 00                	push   0x0
ffffffff80006f15:	68 da 00 00 00       	push   0xda
ffffffff80006f1a:	fc                   	cld    
ffffffff80006f1b:	e9 50 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f20 <isr_219>:
ffffffff80006f20:	6a 00                	push   0x0
ffffffff80006f22:	68 db 00 00 00       	push   0xdb
ffffffff80006f27:	fc                   	cld    
ffffffff80006f28:	e9 43 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f2d <isr_220>:
ffffffff80006f2d:	6a 00                	push   0x0
ffffffff80006f2f:	68 dc 00 00 00       	push   0xdc
ffffffff80006f34:	fc                   	cld    
ffffffff80006f35:	e9 36 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f3a <isr_221>:
ffffffff80006f3a:	6a 00                	push   0x0
ffffffff80006f3c:	68 dd 00 00 00       	push   0xdd
ffffffff80006f41:	fc                   	cld    
ffffffff80006f42:	e9 29 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f47 <isr_222>:
ffffffff80006f47:	6a 00                	push   0x0
ffffffff80006f49:	68 de 00 00 00       	push   0xde
ffffffff80006f4e:	fc                   	cld    
ffffffff80006f4f:	e9 1c f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f54 <isr_223>:
ffffffff80006f54:	6a 00                	push   0x0
ffffffff80006f56:	68 df 00 00 00       	push   0xdf
ffffffff80006f5b:	fc                   	cld    
ffffffff80006f5c:	e9 0f f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f61 <isr_224>:
ffffffff80006f61:	6a 00                	push   0x0
ffffffff80006f63:	68 e0 00 00 00       	push   0xe0
ffffffff80006f68:	fc                   	cld    
ffffffff80006f69:	e9 02 f6 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f6e <isr_225>:
ffffffff80006f6e:	6a 00                	push   0x0
ffffffff80006f70:	68 e1 00 00 00       	push   0xe1
ffffffff80006f75:	fc                   	cld    
ffffffff80006f76:	e9 f5 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f7b <isr_226>:
ffffffff80006f7b:	6a 00                	push   0x0
ffffffff80006f7d:	68 e2 00 00 00       	push   0xe2
ffffffff80006f82:	fc                   	cld    
ffffffff80006f83:	e9 e8 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f88 <isr_227>:
ffffffff80006f88:	6a 00                	push   0x0
ffffffff80006f8a:	68 e3 00 00 00       	push   0xe3
ffffffff80006f8f:	fc                   	cld    
ffffffff80006f90:	e9 db f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006f95 <isr_228>:
ffffffff80006f95:	6a 00                	push   0x0
ffffffff80006f97:	68 e4 00 00 00       	push   0xe4
ffffffff80006f9c:	fc                   	cld    
ffffffff80006f9d:	e9 ce f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006fa2 <isr_229>:
ffffffff80006fa2:	6a 00                	push   0x0
ffffffff80006fa4:	68 e5 00 00 00       	push   0xe5
ffffffff80006fa9:	fc                   	cld    
ffffffff80006faa:	e9 c1 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006faf <isr_230>:
ffffffff80006faf:	6a 00                	push   0x0
ffffffff80006fb1:	68 e6 00 00 00       	push   0xe6
ffffffff80006fb6:	fc                   	cld    
ffffffff80006fb7:	e9 b4 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006fbc <isr_231>:
ffffffff80006fbc:	6a 00                	push   0x0
ffffffff80006fbe:	68 e7 00 00 00       	push   0xe7
ffffffff80006fc3:	fc                   	cld    
ffffffff80006fc4:	e9 a7 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006fc9 <isr_232>:
ffffffff80006fc9:	6a 00                	push   0x0
ffffffff80006fcb:	68 e8 00 00 00       	push   0xe8
ffffffff80006fd0:	fc                   	cld    
ffffffff80006fd1:	e9 9a f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006fd6 <isr_233>:
ffffffff80006fd6:	6a 00                	push   0x0
ffffffff80006fd8:	68 e9 00 00 00       	push   0xe9
ffffffff80006fdd:	fc                   	cld    
ffffffff80006fde:	e9 8d f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006fe3 <isr_234>:
ffffffff80006fe3:	6a 00                	push   0x0
ffffffff80006fe5:	68 ea 00 00 00       	push   0xea
ffffffff80006fea:	fc                   	cld    
ffffffff80006feb:	e9 80 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ff0 <isr_235>:
ffffffff80006ff0:	6a 00                	push   0x0
ffffffff80006ff2:	68 eb 00 00 00       	push   0xeb
ffffffff80006ff7:	fc                   	cld    
ffffffff80006ff8:	e9 73 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80006ffd <isr_236>:
ffffffff80006ffd:	6a 00                	push   0x0
ffffffff80006fff:	68 ec 00 00 00       	push   0xec
ffffffff80007004:	fc                   	cld    
ffffffff80007005:	e9 66 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000700a <isr_237>:
ffffffff8000700a:	6a 00                	push   0x0
ffffffff8000700c:	68 ed 00 00 00       	push   0xed
ffffffff80007011:	fc                   	cld    
ffffffff80007012:	e9 59 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007017 <isr_238>:
ffffffff80007017:	6a 00                	push   0x0
ffffffff80007019:	68 ee 00 00 00       	push   0xee
ffffffff8000701e:	fc                   	cld    
ffffffff8000701f:	e9 4c f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007024 <isr_239>:
ffffffff80007024:	6a 00                	push   0x0
ffffffff80007026:	68 ef 00 00 00       	push   0xef
ffffffff8000702b:	fc                   	cld    
ffffffff8000702c:	e9 3f f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007031 <isr_240>:
ffffffff80007031:	6a 00                	push   0x0
ffffffff80007033:	68 f0 00 00 00       	push   0xf0
ffffffff80007038:	fc                   	cld    
ffffffff80007039:	e9 32 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000703e <isr_241>:
ffffffff8000703e:	6a 00                	push   0x0
ffffffff80007040:	68 f1 00 00 00       	push   0xf1
ffffffff80007045:	fc                   	cld    
ffffffff80007046:	e9 25 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000704b <isr_242>:
ffffffff8000704b:	6a 00                	push   0x0
ffffffff8000704d:	68 f2 00 00 00       	push   0xf2
ffffffff80007052:	fc                   	cld    
ffffffff80007053:	e9 18 f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007058 <isr_243>:
ffffffff80007058:	6a 00                	push   0x0
ffffffff8000705a:	68 f3 00 00 00       	push   0xf3
ffffffff8000705f:	fc                   	cld    
ffffffff80007060:	e9 0b f5 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007065 <isr_244>:
ffffffff80007065:	6a 00                	push   0x0
ffffffff80007067:	68 f4 00 00 00       	push   0xf4
ffffffff8000706c:	fc                   	cld    
ffffffff8000706d:	e9 fe f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007072 <isr_245>:
ffffffff80007072:	6a 00                	push   0x0
ffffffff80007074:	68 f5 00 00 00       	push   0xf5
ffffffff80007079:	fc                   	cld    
ffffffff8000707a:	e9 f1 f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000707f <isr_246>:
ffffffff8000707f:	6a 00                	push   0x0
ffffffff80007081:	68 f6 00 00 00       	push   0xf6
ffffffff80007086:	fc                   	cld    
ffffffff80007087:	e9 e4 f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff8000708c <isr_247>:
ffffffff8000708c:	6a 00                	push   0x0
ffffffff8000708e:	68 f7 00 00 00       	push   0xf7
ffffffff80007093:	fc                   	cld    
ffffffff80007094:	e9 d7 f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007099 <isr_248>:
ffffffff80007099:	6a 00                	push   0x0
ffffffff8000709b:	68 f8 00 00 00       	push   0xf8
ffffffff800070a0:	fc                   	cld    
ffffffff800070a1:	e9 ca f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800070a6 <isr_249>:
ffffffff800070a6:	6a 00                	push   0x0
ffffffff800070a8:	68 f9 00 00 00       	push   0xf9
ffffffff800070ad:	fc                   	cld    
ffffffff800070ae:	e9 bd f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800070b3 <isr_250>:
ffffffff800070b3:	6a 00                	push   0x0
ffffffff800070b5:	68 fa 00 00 00       	push   0xfa
ffffffff800070ba:	fc                   	cld    
ffffffff800070bb:	e9 b0 f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800070c0 <isr_251>:
ffffffff800070c0:	6a 00                	push   0x0
ffffffff800070c2:	68 fb 00 00 00       	push   0xfb
ffffffff800070c7:	fc                   	cld    
ffffffff800070c8:	e9 a3 f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800070cd <isr_252>:
ffffffff800070cd:	6a 00                	push   0x0
ffffffff800070cf:	68 fc 00 00 00       	push   0xfc
ffffffff800070d4:	fc                   	cld    
ffffffff800070d5:	e9 96 f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800070da <isr_253>:
ffffffff800070da:	6a 00                	push   0x0
ffffffff800070dc:	68 fd 00 00 00       	push   0xfd
ffffffff800070e1:	fc                   	cld    
ffffffff800070e2:	e9 89 f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800070e7 <isr_254>:
ffffffff800070e7:	6a 00                	push   0x0
ffffffff800070e9:	68 fe 00 00 00       	push   0xfe
ffffffff800070ee:	fc                   	cld    
ffffffff800070ef:	e9 7c f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff800070f4 <isr_255>:
ffffffff800070f4:	6a 00                	push   0x0
ffffffff800070f6:	68 ff 00 00 00       	push   0xff
ffffffff800070fb:	fc                   	cld    
ffffffff800070fc:	e9 6f f4 ff ff       	jmp    ffffffff80006570 <isr_common>

ffffffff80007101 <isr_table>:
ffffffff80007101:	b0 65                	mov    al,0x65
ffffffff80007103:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007109:	b7 65                	mov    bh,0x65
ffffffff8000710b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007111:	be 65 00 80 ff       	mov    esi,0xff800065
ffffffff80007116:	ff                   	(bad)  
ffffffff80007117:	ff                   	(bad)  
ffffffff80007118:	ff c5                	inc    ebp
ffffffff8000711a:	65 00 80 ff ff ff ff 	add    BYTE PTR gs:[rax-0x1],al
ffffffff80007121:	cc                   	int3   
ffffffff80007122:	65 00 80 ff ff ff ff 	add    BYTE PTR gs:[rax-0x1],al
ffffffff80007129:	d3 65 00             	shl    DWORD PTR [rbp+0x0],cl
ffffffff8000712c:	80 ff ff             	cmp    bh,0xff
ffffffff8000712f:	ff                   	(bad)  
ffffffff80007130:	ff                   	(bad)  
ffffffff80007131:	da 65 00             	fisub  DWORD PTR [rbp+0x0]
ffffffff80007134:	80 ff ff             	cmp    bh,0xff
ffffffff80007137:	ff                   	(bad)  
ffffffff80007138:	ff e1                	jmp    rcx
ffffffff8000713a:	65 00 80 ff ff ff ff 	add    BYTE PTR gs:[rax-0x1],al
ffffffff80007141:	e8 65 00 80 ff       	call   ffffffff7f8071ab <VFS::Initialize()-0x7f8e55>
ffffffff80007146:	ff                   	(bad)  
ffffffff80007147:	ff                   	(bad)  
ffffffff80007148:	ff                   	(bad)  
ffffffff80007149:	ed                   	in     eax,dx
ffffffff8000714a:	65 00 80 ff ff ff ff 	add    BYTE PTR gs:[rax-0x1],al
ffffffff80007151:	f7 65 00             	mul    DWORD PTR [rbp+0x0]
ffffffff80007154:	80 ff ff             	cmp    bh,0xff
ffffffff80007157:	ff                   	(bad)  
ffffffff80007158:	ff                   	(bad)  
ffffffff80007159:	ff 65 00             	jmp    QWORD PTR [rbp+0x0]
ffffffff8000715c:	80 ff ff             	cmp    bh,0xff
ffffffff8000715f:	ff                   	(bad)  
ffffffff80007160:	ff 07                	inc    DWORD PTR [rdi]
ffffffff80007162:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007169:	0f 66 00             	pcmpgtd mm0,QWORD PTR [rax]
ffffffff8000716c:	80 ff ff             	cmp    bh,0xff
ffffffff8000716f:	ff                   	(bad)  
ffffffff80007170:	ff 17                	call   QWORD PTR [rdi]
ffffffff80007172:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007179:	1f                   	(bad)  
ffffffff8000717a:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007181:	29 66 00             	sub    DWORD PTR [rsi+0x0],esp
ffffffff80007184:	80 ff ff             	cmp    bh,0xff
ffffffff80007187:	ff                   	(bad)  
ffffffff80007188:	ff 33                	push   QWORD PTR [rbx]
ffffffff8000718a:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007191:	3b 66 00             	cmp    esp,DWORD PTR [rsi+0x0]
ffffffff80007194:	80 ff ff             	cmp    bh,0xff
ffffffff80007197:	ff                   	(bad)  
ffffffff80007198:	ff 45 66             	inc    DWORD PTR [rbp+0x66]
ffffffff8000719b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800071a1:	4f                   	rex.WRXB
ffffffff800071a2:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff800071a9:	59                   	pop    rcx
ffffffff800071aa:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff800071b1:	61                   	(bad)  
ffffffff800071b2:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff800071b9:	6b 66 00 80          	imul   esp,DWORD PTR [rsi+0x0],0xffffff80
ffffffff800071bd:	ff                   	(bad)  
ffffffff800071be:	ff                   	(bad)  
ffffffff800071bf:	ff                   	(bad)  
ffffffff800071c0:	ff 75 66             	push   QWORD PTR [rbp+0x66]
ffffffff800071c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800071c9:	7f 66                	jg     ffffffff80007231 <isr_table+0x130>
ffffffff800071cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800071d1:	89 66 00             	mov    DWORD PTR [rsi+0x0],esp
ffffffff800071d4:	80 ff ff             	cmp    bh,0xff
ffffffff800071d7:	ff                   	(bad)  
ffffffff800071d8:	ff 93 66 00 80 ff    	call   QWORD PTR [rbx-0x7fff9a]
ffffffff800071de:	ff                   	(bad)  
ffffffff800071df:	ff                   	(bad)  
ffffffff800071e0:	ff 9d 66 00 80 ff    	call   FWORD PTR [rbp-0x7fff9a]
ffffffff800071e6:	ff                   	(bad)  
ffffffff800071e7:	ff                   	(bad)  
ffffffff800071e8:	ff a7 66 00 80 ff    	jmp    QWORD PTR [rdi-0x7fff9a]
ffffffff800071ee:	ff                   	(bad)  
ffffffff800071ef:	ff                   	(bad)  
ffffffff800071f0:	ff af 66 00 80 ff    	jmp    FWORD PTR [rdi-0x7fff9a]
ffffffff800071f6:	ff                   	(bad)  
ffffffff800071f7:	ff                   	(bad)  
ffffffff800071f8:	ff b7 66 00 80 ff    	push   QWORD PTR [rdi-0x7fff9a]
ffffffff800071fe:	ff                   	(bad)  
ffffffff800071ff:	ff                   	(bad)  
ffffffff80007200:	ff c1                	inc    ecx
ffffffff80007202:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007209:	cb                   	retf   
ffffffff8000720a:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007211:	d5                   	(bad)  
ffffffff80007212:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007219:	df 66 00             	fbld   TBYTE PTR [rsi+0x0]
ffffffff8000721c:	80 ff ff             	cmp    bh,0xff
ffffffff8000721f:	ff                   	(bad)  
ffffffff80007220:	ff                   	(bad)  
ffffffff80007221:	e9 66 00 80 ff       	jmp    ffffffff7f80728c <VFS::Initialize()-0x7f8d74>
ffffffff80007226:	ff                   	(bad)  
ffffffff80007227:	ff                   	(bad)  
ffffffff80007228:	ff f3                	push   rbx
ffffffff8000722a:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007231:	fd                   	std    
ffffffff80007232:	66 00 80 ff ff ff ff 	data16 add BYTE PTR [rax-0x1],al
ffffffff80007239:	07                   	(bad)  
ffffffff8000723a:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff80007241:	11 67 00             	adc    DWORD PTR [rdi+0x0],esp
ffffffff80007244:	80 ff ff             	cmp    bh,0xff
ffffffff80007247:	ff                   	(bad)  
ffffffff80007248:	ff 1b                	call   FWORD PTR [rbx]
ffffffff8000724a:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff80007251:	25 67 00 80 ff       	and    eax,0xff800067
ffffffff80007256:	ff                   	(bad)  
ffffffff80007257:	ff                   	(bad)  
ffffffff80007258:	ff 2f                	jmp    FWORD PTR [rdi]
ffffffff8000725a:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff80007261:	39 67 00             	cmp    DWORD PTR [rdi+0x0],esp
ffffffff80007264:	80 ff ff             	cmp    bh,0xff
ffffffff80007267:	ff                   	(bad)  
ffffffff80007268:	ff 43 67             	inc    DWORD PTR [rbx+0x67]
ffffffff8000726b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007271:	4d                   	rex.WRB
ffffffff80007272:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff80007279:	57                   	push   rdi
ffffffff8000727a:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff80007281:	61                   	(bad)  
ffffffff80007282:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff80007289:	6b 67 00 80          	imul   esp,DWORD PTR [rdi+0x0],0xffffff80
ffffffff8000728d:	ff                   	(bad)  
ffffffff8000728e:	ff                   	(bad)  
ffffffff8000728f:	ff                   	(bad)  
ffffffff80007290:	ff 75 67             	push   QWORD PTR [rbp+0x67]
ffffffff80007293:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007299:	7f 67                	jg     ffffffff80007302 <isr_table+0x201>
ffffffff8000729b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800072a1:	89 67 00             	mov    DWORD PTR [rdi+0x0],esp
ffffffff800072a4:	80 ff ff             	cmp    bh,0xff
ffffffff800072a7:	ff                   	(bad)  
ffffffff800072a8:	ff 93 67 00 80 ff    	call   QWORD PTR [rbx-0x7fff99]
ffffffff800072ae:	ff                   	(bad)  
ffffffff800072af:	ff                   	(bad)  
ffffffff800072b0:	ff 9d 67 00 80 ff    	call   FWORD PTR [rbp-0x7fff99]
ffffffff800072b6:	ff                   	(bad)  
ffffffff800072b7:	ff                   	(bad)  
ffffffff800072b8:	ff a7 67 00 80 ff    	jmp    QWORD PTR [rdi-0x7fff99]
ffffffff800072be:	ff                   	(bad)  
ffffffff800072bf:	ff                   	(bad)  
ffffffff800072c0:	ff b1 67 00 80 ff    	push   QWORD PTR [rcx-0x7fff99]
ffffffff800072c6:	ff                   	(bad)  
ffffffff800072c7:	ff                   	(bad)  
ffffffff800072c8:	ff                   	(bad)  
ffffffff800072c9:	bb 67 00 80 ff       	mov    ebx,0xff800067
ffffffff800072ce:	ff                   	(bad)  
ffffffff800072cf:	ff                   	(bad)  
ffffffff800072d0:	ff c5                	inc    ebp
ffffffff800072d2:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff800072d9:	cf                   	iret   
ffffffff800072da:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff800072e1:	d9 67 00             	fldenv [rdi+0x0]
ffffffff800072e4:	80 ff ff             	cmp    bh,0xff
ffffffff800072e7:	ff                   	(bad)  
ffffffff800072e8:	ff e3                	jmp    rbx
ffffffff800072ea:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff800072f1:	ed                   	in     eax,dx
ffffffff800072f2:	67 00 80 ff ff ff ff 	add    BYTE PTR [eax-0x1],al
ffffffff800072f9:	f7 67 00             	mul    DWORD PTR [rdi+0x0]
ffffffff800072fc:	80 ff ff             	cmp    bh,0xff
ffffffff800072ff:	ff                   	(bad)  
ffffffff80007300:	ff 01                	inc    DWORD PTR [rcx]
ffffffff80007302:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff80007307:	ff                   	(bad)  
ffffffff80007308:	ff 0b                	dec    DWORD PTR [rbx]
ffffffff8000730a:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff8000730f:	ff                   	(bad)  
ffffffff80007310:	ff 15 68 00 80 ff    	call   QWORD PTR [rip+0xffffffffff800068]        # ffffffff7f80737e <VFS::Initialize()-0x7f8c82>
ffffffff80007316:	ff                   	(bad)  
ffffffff80007317:	ff                   	(bad)  
ffffffff80007318:	ff 1f                	call   FWORD PTR [rdi]
ffffffff8000731a:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff8000731f:	ff                   	(bad)  
ffffffff80007320:	ff 29                	jmp    FWORD PTR [rcx]
ffffffff80007322:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff80007327:	ff                   	(bad)  
ffffffff80007328:	ff 33                	push   QWORD PTR [rbx]
ffffffff8000732a:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff8000732f:	ff                   	(bad)  
ffffffff80007330:	ff                   	(bad)  
ffffffff80007331:	3d 68 00 80 ff       	cmp    eax,0xff800068
ffffffff80007336:	ff                   	(bad)  
ffffffff80007337:	ff                   	(bad)  
ffffffff80007338:	ff 47 68             	inc    DWORD PTR [rdi+0x68]
ffffffff8000733b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007341:	51                   	push   rcx
ffffffff80007342:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff80007347:	ff                   	(bad)  
ffffffff80007348:	ff 5b 68             	call   FWORD PTR [rbx+0x68]
ffffffff8000734b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007351:	65 68 00 80 ff ff    	gs push 0xffffffffffff8000
ffffffff80007357:	ff                   	(bad)  
ffffffff80007358:	ff 6f 68             	jmp    FWORD PTR [rdi+0x68]
ffffffff8000735b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007361:	79 68                	jns    ffffffff800073cb <isr_table+0x2ca>
ffffffff80007363:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007369:	83 68 00 80          	sub    DWORD PTR [rax+0x0],0xffffff80
ffffffff8000736d:	ff                   	(bad)  
ffffffff8000736e:	ff                   	(bad)  
ffffffff8000736f:	ff                   	(bad)  
ffffffff80007370:	ff 8d 68 00 80 ff    	dec    DWORD PTR [rbp-0x7fff98]
ffffffff80007376:	ff                   	(bad)  
ffffffff80007377:	ff                   	(bad)  
ffffffff80007378:	ff 97 68 00 80 ff    	call   QWORD PTR [rdi-0x7fff98]
ffffffff8000737e:	ff                   	(bad)  
ffffffff8000737f:	ff                   	(bad)  
ffffffff80007380:	ff a1 68 00 80 ff    	jmp    QWORD PTR [rcx-0x7fff98]
ffffffff80007386:	ff                   	(bad)  
ffffffff80007387:	ff                   	(bad)  
ffffffff80007388:	ff ab 68 00 80 ff    	jmp    FWORD PTR [rbx-0x7fff98]
ffffffff8000738e:	ff                   	(bad)  
ffffffff8000738f:	ff                   	(bad)  
ffffffff80007390:	ff b5 68 00 80 ff    	push   QWORD PTR [rbp-0x7fff98]
ffffffff80007396:	ff                   	(bad)  
ffffffff80007397:	ff                   	(bad)  
ffffffff80007398:	ff                   	(bad)  
ffffffff80007399:	bf 68 00 80 ff       	mov    edi,0xff800068
ffffffff8000739e:	ff                   	(bad)  
ffffffff8000739f:	ff                   	(bad)  
ffffffff800073a0:	ff c9                	dec    ecx
ffffffff800073a2:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff800073a7:	ff                   	(bad)  
ffffffff800073a8:	ff d3                	call   rbx
ffffffff800073aa:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff800073af:	ff                   	(bad)  
ffffffff800073b0:	ff                   	(bad)  
ffffffff800073b1:	dd 68 00             	(bad)  [rax+0x0]
ffffffff800073b4:	80 ff ff             	cmp    bh,0xff
ffffffff800073b7:	ff                   	(bad)  
ffffffff800073b8:	ff e7                	jmp    rdi
ffffffff800073ba:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff800073bf:	ff                   	(bad)  
ffffffff800073c0:	ff f1                	push   rcx
ffffffff800073c2:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff800073c7:	ff                   	(bad)  
ffffffff800073c8:	ff                   	(bad)  
ffffffff800073c9:	fb                   	sti    
ffffffff800073ca:	68 00 80 ff ff       	push   0xffffffffffff8000
ffffffff800073cf:	ff                   	(bad)  
ffffffff800073d0:	ff 05 69 00 80 ff    	inc    DWORD PTR [rip+0xffffffffff800069]        # ffffffff7f80743f <VFS::Initialize()-0x7f8bc1>
ffffffff800073d6:	ff                   	(bad)  
ffffffff800073d7:	ff                   	(bad)  
ffffffff800073d8:	ff 0f                	dec    DWORD PTR [rdi]
ffffffff800073da:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800073e0:	ff 19                	call   FWORD PTR [rcx]
ffffffff800073e2:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800073e8:	ff 23                	jmp    QWORD PTR [rbx]
ffffffff800073ea:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800073f0:	ff 2d 69 00 80 ff    	jmp    FWORD PTR [rip+0xffffffffff800069]        # ffffffff7f80745f <VFS::Initialize()-0x7f8ba1>
ffffffff800073f6:	ff                   	(bad)  
ffffffff800073f7:	ff                   	(bad)  
ffffffff800073f8:	ff 37                	push   QWORD PTR [rdi]
ffffffff800073fa:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007400:	ff 41 69             	inc    DWORD PTR [rcx+0x69]
ffffffff80007403:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007409:	4b 69 00 80 ff ff ff 	rex.WXB imul rax,QWORD PTR [r8],0xffffffffffffff80
ffffffff80007410:	ff 55 69             	call   QWORD PTR [rbp+0x69]
ffffffff80007413:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007419:	5f                   	pop    rdi
ffffffff8000741a:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007420:	ff 69 69             	jmp    FWORD PTR [rcx+0x69]
ffffffff80007423:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007429:	73 69                	jae    ffffffff80007494 <isr_table+0x393>
ffffffff8000742b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007431:	7d 69                	jge    ffffffff8000749c <isr_table+0x39b>
ffffffff80007433:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007439:	87 69 00             	xchg   DWORD PTR [rcx+0x0],ebp
ffffffff8000743c:	80 ff ff             	cmp    bh,0xff
ffffffff8000743f:	ff                   	(bad)  
ffffffff80007440:	ff 91 69 00 80 ff    	call   QWORD PTR [rcx-0x7fff97]
ffffffff80007446:	ff                   	(bad)  
ffffffff80007447:	ff                   	(bad)  
ffffffff80007448:	ff 9b 69 00 80 ff    	call   FWORD PTR [rbx-0x7fff97]
ffffffff8000744e:	ff                   	(bad)  
ffffffff8000744f:	ff                   	(bad)  
ffffffff80007450:	ff a5 69 00 80 ff    	jmp    QWORD PTR [rbp-0x7fff97]
ffffffff80007456:	ff                   	(bad)  
ffffffff80007457:	ff                   	(bad)  
ffffffff80007458:	ff af 69 00 80 ff    	jmp    FWORD PTR [rdi-0x7fff97]
ffffffff8000745e:	ff                   	(bad)  
ffffffff8000745f:	ff                   	(bad)  
ffffffff80007460:	ff                   	(bad)  
ffffffff80007461:	b9 69 00 80 ff       	mov    ecx,0xff800069
ffffffff80007466:	ff                   	(bad)  
ffffffff80007467:	ff                   	(bad)  
ffffffff80007468:	ff c3                	inc    ebx
ffffffff8000746a:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007470:	ff cd                	dec    ebp
ffffffff80007472:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007478:	ff d7                	call   rdi
ffffffff8000747a:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007480:	ff e1                	jmp    rcx
ffffffff80007482:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007488:	ff                   	(bad)  
ffffffff80007489:	eb 69                	jmp    ffffffff800074f4 <isr_table+0x3f3>
ffffffff8000748b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007491:	f5                   	cmc    
ffffffff80007492:	69 00 80 ff ff ff    	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007498:	ff                   	(bad)  
ffffffff80007499:	ff 69 00             	jmp    FWORD PTR [rcx+0x0]
ffffffff8000749c:	80 ff ff             	cmp    bh,0xff
ffffffff8000749f:	ff                   	(bad)  
ffffffff800074a0:	ff 09                	dec    DWORD PTR [rcx]
ffffffff800074a2:	6a 00                	push   0x0
ffffffff800074a4:	80 ff ff             	cmp    bh,0xff
ffffffff800074a7:	ff                   	(bad)  
ffffffff800074a8:	ff 13                	call   QWORD PTR [rbx]
ffffffff800074aa:	6a 00                	push   0x0
ffffffff800074ac:	80 ff ff             	cmp    bh,0xff
ffffffff800074af:	ff                   	(bad)  
ffffffff800074b0:	ff 1d 6a 00 80 ff    	call   FWORD PTR [rip+0xffffffffff80006a]        # ffffffff7f807520 <VFS::Initialize()-0x7f8ae0>
ffffffff800074b6:	ff                   	(bad)  
ffffffff800074b7:	ff                   	(bad)  
ffffffff800074b8:	ff 27                	jmp    QWORD PTR [rdi]
ffffffff800074ba:	6a 00                	push   0x0
ffffffff800074bc:	80 ff ff             	cmp    bh,0xff
ffffffff800074bf:	ff                   	(bad)  
ffffffff800074c0:	ff 31                	push   QWORD PTR [rcx]
ffffffff800074c2:	6a 00                	push   0x0
ffffffff800074c4:	80 ff ff             	cmp    bh,0xff
ffffffff800074c7:	ff                   	(bad)  
ffffffff800074c8:	ff                   	(bad)  
ffffffff800074c9:	3b 6a 00             	cmp    ebp,DWORD PTR [rdx+0x0]
ffffffff800074cc:	80 ff ff             	cmp    bh,0xff
ffffffff800074cf:	ff                   	(bad)  
ffffffff800074d0:	ff 45 6a             	inc    DWORD PTR [rbp+0x6a]
ffffffff800074d3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800074d9:	4f 6a 00             	rex.WRXB push 0x0
ffffffff800074dc:	80 ff ff             	cmp    bh,0xff
ffffffff800074df:	ff                   	(bad)  
ffffffff800074e0:	ff 59 6a             	call   FWORD PTR [rcx+0x6a]
ffffffff800074e3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800074e9:	63 6a 00             	movsxd ebp,DWORD PTR [rdx+0x0]
ffffffff800074ec:	80 ff ff             	cmp    bh,0xff
ffffffff800074ef:	ff                   	(bad)  
ffffffff800074f0:	ff 6d 6a             	jmp    FWORD PTR [rbp+0x6a]
ffffffff800074f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800074f9:	77 6a                	ja     ffffffff80007565 <isr_table+0x464>
ffffffff800074fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007501:	81 6a 00 80 ff ff ff 	sub    DWORD PTR [rdx+0x0],0xffffff80
ffffffff80007508:	ff 8e 6a 00 80 ff    	dec    DWORD PTR [rsi-0x7fff96]
ffffffff8000750e:	ff                   	(bad)  
ffffffff8000750f:	ff                   	(bad)  
ffffffff80007510:	ff 9b 6a 00 80 ff    	call   FWORD PTR [rbx-0x7fff96]
ffffffff80007516:	ff                   	(bad)  
ffffffff80007517:	ff                   	(bad)  
ffffffff80007518:	ff a8 6a 00 80 ff    	jmp    FWORD PTR [rax-0x7fff96]
ffffffff8000751e:	ff                   	(bad)  
ffffffff8000751f:	ff                   	(bad)  
ffffffff80007520:	ff b5 6a 00 80 ff    	push   QWORD PTR [rbp-0x7fff96]
ffffffff80007526:	ff                   	(bad)  
ffffffff80007527:	ff                   	(bad)  
ffffffff80007528:	ff c2                	inc    edx
ffffffff8000752a:	6a 00                	push   0x0
ffffffff8000752c:	80 ff ff             	cmp    bh,0xff
ffffffff8000752f:	ff                   	(bad)  
ffffffff80007530:	ff cf                	dec    edi
ffffffff80007532:	6a 00                	push   0x0
ffffffff80007534:	80 ff ff             	cmp    bh,0xff
ffffffff80007537:	ff                   	(bad)  
ffffffff80007538:	ff                   	(bad)  
ffffffff80007539:	dc 6a 00             	fsubr  QWORD PTR [rdx+0x0]
ffffffff8000753c:	80 ff ff             	cmp    bh,0xff
ffffffff8000753f:	ff                   	(bad)  
ffffffff80007540:	ff                   	(bad)  
ffffffff80007541:	e9 6a 00 80 ff       	jmp    ffffffff7f8075b0 <VFS::Initialize()-0x7f8a50>
ffffffff80007546:	ff                   	(bad)  
ffffffff80007547:	ff                   	(bad)  
ffffffff80007548:	ff f6                	push   rsi
ffffffff8000754a:	6a 00                	push   0x0
ffffffff8000754c:	80 ff ff             	cmp    bh,0xff
ffffffff8000754f:	ff                   	(bad)  
ffffffff80007550:	ff 03                	inc    DWORD PTR [rbx]
ffffffff80007552:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007555:	ff                   	(bad)  
ffffffff80007556:	ff                   	(bad)  
ffffffff80007557:	ff                   	(bad)  
ffffffff80007558:	ff 10                	call   QWORD PTR [rax]
ffffffff8000755a:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff8000755d:	ff                   	(bad)  
ffffffff8000755e:	ff                   	(bad)  
ffffffff8000755f:	ff                   	(bad)  
ffffffff80007560:	ff 1d 6b 00 80 ff    	call   FWORD PTR [rip+0xffffffffff80006b]        # ffffffff7f8075d1 <VFS::Initialize()-0x7f8a2f>
ffffffff80007566:	ff                   	(bad)  
ffffffff80007567:	ff                   	(bad)  
ffffffff80007568:	ff 2a                	jmp    FWORD PTR [rdx]
ffffffff8000756a:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff8000756d:	ff                   	(bad)  
ffffffff8000756e:	ff                   	(bad)  
ffffffff8000756f:	ff                   	(bad)  
ffffffff80007570:	ff 37                	push   QWORD PTR [rdi]
ffffffff80007572:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff80007575:	ff                   	(bad)  
ffffffff80007576:	ff                   	(bad)  
ffffffff80007577:	ff                   	(bad)  
ffffffff80007578:	ff 44 6b 00          	inc    DWORD PTR [rbx+rbp*2+0x0]
ffffffff8000757c:	80 ff ff             	cmp    bh,0xff
ffffffff8000757f:	ff                   	(bad)  
ffffffff80007580:	ff 51 6b             	call   QWORD PTR [rcx+0x6b]
ffffffff80007583:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007589:	5e                   	pop    rsi
ffffffff8000758a:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff8000758d:	ff                   	(bad)  
ffffffff8000758e:	ff                   	(bad)  
ffffffff8000758f:	ff                   	(bad)  
ffffffff80007590:	ff 6b 6b             	jmp    FWORD PTR [rbx+0x6b]
ffffffff80007593:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007599:	78 6b                	js     ffffffff80007606 <isr_table+0x505>
ffffffff8000759b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800075a1:	85 6b 00             	test   DWORD PTR [rbx+0x0],ebp
ffffffff800075a4:	80 ff ff             	cmp    bh,0xff
ffffffff800075a7:	ff                   	(bad)  
ffffffff800075a8:	ff 92 6b 00 80 ff    	call   QWORD PTR [rdx-0x7fff95]
ffffffff800075ae:	ff                   	(bad)  
ffffffff800075af:	ff                   	(bad)  
ffffffff800075b0:	ff 9f 6b 00 80 ff    	call   FWORD PTR [rdi-0x7fff95]
ffffffff800075b6:	ff                   	(bad)  
ffffffff800075b7:	ff                   	(bad)  
ffffffff800075b8:	ff ac 6b 00 80 ff ff 	jmp    FWORD PTR [rbx+rbp*2-0x8000]
ffffffff800075bf:	ff                   	(bad)  
ffffffff800075c0:	ff                   	(bad)  
ffffffff800075c1:	b9 6b 00 80 ff       	mov    ecx,0xff80006b
ffffffff800075c6:	ff                   	(bad)  
ffffffff800075c7:	ff                   	(bad)  
ffffffff800075c8:	ff c6                	inc    esi
ffffffff800075ca:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800075cd:	ff                   	(bad)  
ffffffff800075ce:	ff                   	(bad)  
ffffffff800075cf:	ff                   	(bad)  
ffffffff800075d0:	ff d3                	call   rbx
ffffffff800075d2:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800075d5:	ff                   	(bad)  
ffffffff800075d6:	ff                   	(bad)  
ffffffff800075d7:	ff                   	(bad)  
ffffffff800075d8:	ff e0                	jmp    rax
ffffffff800075da:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800075dd:	ff                   	(bad)  
ffffffff800075de:	ff                   	(bad)  
ffffffff800075df:	ff                   	(bad)  
ffffffff800075e0:	ff                   	(bad)  
ffffffff800075e1:	ed                   	in     eax,dx
ffffffff800075e2:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800075e5:	ff                   	(bad)  
ffffffff800075e6:	ff                   	(bad)  
ffffffff800075e7:	ff                   	(bad)  
ffffffff800075e8:	ff                   	(bad)  
ffffffff800075e9:	fa                   	cli    
ffffffff800075ea:	6b 00 80             	imul   eax,DWORD PTR [rax],0xffffff80
ffffffff800075ed:	ff                   	(bad)  
ffffffff800075ee:	ff                   	(bad)  
ffffffff800075ef:	ff                   	(bad)  
ffffffff800075f0:	ff 07                	inc    DWORD PTR [rdi]
ffffffff800075f2:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff800075f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800075f9:	14 6c                	adc    al,0x6c
ffffffff800075fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007601:	21 6c 00 80          	and    DWORD PTR [rax+rax*1-0x80],ebp
ffffffff80007605:	ff                   	(bad)  
ffffffff80007606:	ff                   	(bad)  
ffffffff80007607:	ff                   	(bad)  
ffffffff80007608:	ff 2e                	jmp    FWORD PTR [rsi]
ffffffff8000760a:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff8000760b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007611:	3b 6c 00 80          	cmp    ebp,DWORD PTR [rax+rax*1-0x80]
ffffffff80007615:	ff                   	(bad)  
ffffffff80007616:	ff                   	(bad)  
ffffffff80007617:	ff                   	(bad)  
ffffffff80007618:	ff 48 6c             	dec    DWORD PTR [rax+0x6c]
ffffffff8000761b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007621:	55                   	push   rbp
ffffffff80007622:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff80007623:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007629:	62                   	(bad)  
ffffffff8000762a:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff8000762b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007631:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff80007632:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff80007633:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007639:	7c 6c                	jl     ffffffff800076a7 <isr_table+0x5a6>
ffffffff8000763b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007641:	89 6c 00 80          	mov    DWORD PTR [rax+rax*1-0x80],ebp
ffffffff80007645:	ff                   	(bad)  
ffffffff80007646:	ff                   	(bad)  
ffffffff80007647:	ff                   	(bad)  
ffffffff80007648:	ff 96 6c 00 80 ff    	call   QWORD PTR [rsi-0x7fff94]
ffffffff8000764e:	ff                   	(bad)  
ffffffff8000764f:	ff                   	(bad)  
ffffffff80007650:	ff a3 6c 00 80 ff    	jmp    QWORD PTR [rbx-0x7fff94]
ffffffff80007656:	ff                   	(bad)  
ffffffff80007657:	ff                   	(bad)  
ffffffff80007658:	ff b0 6c 00 80 ff    	push   QWORD PTR [rax-0x7fff94]
ffffffff8000765e:	ff                   	(bad)  
ffffffff8000765f:	ff                   	(bad)  
ffffffff80007660:	ff                   	(bad)  
ffffffff80007661:	bd 6c 00 80 ff       	mov    ebp,0xff80006c
ffffffff80007666:	ff                   	(bad)  
ffffffff80007667:	ff                   	(bad)  
ffffffff80007668:	ff ca                	dec    edx
ffffffff8000766a:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff8000766b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007671:	d7                   	xlat   BYTE PTR ds:[rbx]
ffffffff80007672:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff80007673:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007679:	e4 6c                	in     al,0x6c
ffffffff8000767b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007681:	f1                   	int1   
ffffffff80007682:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff80007683:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007689:	fe                   	(bad)  
ffffffff8000768a:	6c                   	ins    BYTE PTR es:[rdi],dx
ffffffff8000768b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007691:	0b 6d 00             	or     ebp,DWORD PTR [rbp+0x0]
ffffffff80007694:	80 ff ff             	cmp    bh,0xff
ffffffff80007697:	ff                   	(bad)  
ffffffff80007698:	ff 18                	call   FWORD PTR [rax]
ffffffff8000769a:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff8000769b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800076a1:	25 6d 00 80 ff       	and    eax,0xff80006d
ffffffff800076a6:	ff                   	(bad)  
ffffffff800076a7:	ff                   	(bad)  
ffffffff800076a8:	ff 32                	push   QWORD PTR [rdx]
ffffffff800076aa:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff800076ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800076b1:	3f                   	(bad)  
ffffffff800076b2:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff800076b3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800076b9:	4c 6d                	rex.WR ins DWORD PTR es:[rdi],dx
ffffffff800076bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800076c1:	59                   	pop    rcx
ffffffff800076c2:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff800076c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800076c9:	66 6d                	ins    WORD PTR es:[rdi],dx
ffffffff800076cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800076d1:	73 6d                	jae    ffffffff80007740 <isr_table+0x63f>
ffffffff800076d3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800076d9:	80 6d 00 80          	sub    BYTE PTR [rbp+0x0],0x80
ffffffff800076dd:	ff                   	(bad)  
ffffffff800076de:	ff                   	(bad)  
ffffffff800076df:	ff                   	(bad)  
ffffffff800076e0:	ff 8d 6d 00 80 ff    	dec    DWORD PTR [rbp-0x7fff93]
ffffffff800076e6:	ff                   	(bad)  
ffffffff800076e7:	ff                   	(bad)  
ffffffff800076e8:	ff 9a 6d 00 80 ff    	call   FWORD PTR [rdx-0x7fff93]
ffffffff800076ee:	ff                   	(bad)  
ffffffff800076ef:	ff                   	(bad)  
ffffffff800076f0:	ff a7 6d 00 80 ff    	jmp    QWORD PTR [rdi-0x7fff93]
ffffffff800076f6:	ff                   	(bad)  
ffffffff800076f7:	ff                   	(bad)  
ffffffff800076f8:	ff b4 6d 00 80 ff ff 	push   QWORD PTR [rbp+rbp*2-0x8000]
ffffffff800076ff:	ff                   	(bad)  
ffffffff80007700:	ff c1                	inc    ecx
ffffffff80007702:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff80007703:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007709:	ce                   	(bad)  
ffffffff8000770a:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff8000770b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007711:	db 6d 00             	fld    TBYTE PTR [rbp+0x0]
ffffffff80007714:	80 ff ff             	cmp    bh,0xff
ffffffff80007717:	ff                   	(bad)  
ffffffff80007718:	ff                   	(bad)  
ffffffff80007719:	e8 6d 00 80 ff       	call   ffffffff7f80778b <VFS::Initialize()-0x7f8875>
ffffffff8000771e:	ff                   	(bad)  
ffffffff8000771f:	ff                   	(bad)  
ffffffff80007720:	ff f5                	push   rbp
ffffffff80007722:	6d                   	ins    DWORD PTR es:[rdi],dx
ffffffff80007723:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007729:	02 6e 00             	add    ch,BYTE PTR [rsi+0x0]
ffffffff8000772c:	80 ff ff             	cmp    bh,0xff
ffffffff8000772f:	ff                   	(bad)  
ffffffff80007730:	ff 0f                	dec    DWORD PTR [rdi]
ffffffff80007732:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff80007733:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007739:	1c 6e                	sbb    al,0x6e
ffffffff8000773b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007741:	29 6e 00             	sub    DWORD PTR [rsi+0x0],ebp
ffffffff80007744:	80 ff ff             	cmp    bh,0xff
ffffffff80007747:	ff                   	(bad)  
ffffffff80007748:	ff 36                	push   QWORD PTR [rsi]
ffffffff8000774a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff8000774b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007751:	43 6e                	rex.XB outs dx,BYTE PTR ds:[rsi]
ffffffff80007753:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007759:	50                   	push   rax
ffffffff8000775a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff8000775b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007761:	5d                   	pop    rbp
ffffffff80007762:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff80007763:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007769:	6a 6e                	push   0x6e
ffffffff8000776b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007771:	77 6e                	ja     ffffffff800077e1 <isr_table+0x6e0>
ffffffff80007773:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007779:	84 6e 00             	test   BYTE PTR [rsi+0x0],ch
ffffffff8000777c:	80 ff ff             	cmp    bh,0xff
ffffffff8000777f:	ff                   	(bad)  
ffffffff80007780:	ff 91 6e 00 80 ff    	call   QWORD PTR [rcx-0x7fff92]
ffffffff80007786:	ff                   	(bad)  
ffffffff80007787:	ff                   	(bad)  
ffffffff80007788:	ff 9e 6e 00 80 ff    	call   FWORD PTR [rsi-0x7fff92]
ffffffff8000778e:	ff                   	(bad)  
ffffffff8000778f:	ff                   	(bad)  
ffffffff80007790:	ff ab 6e 00 80 ff    	jmp    FWORD PTR [rbx-0x7fff92]
ffffffff80007796:	ff                   	(bad)  
ffffffff80007797:	ff                   	(bad)  
ffffffff80007798:	ff                   	(bad)  
ffffffff80007799:	b8 6e 00 80 ff       	mov    eax,0xff80006e
ffffffff8000779e:	ff                   	(bad)  
ffffffff8000779f:	ff                   	(bad)  
ffffffff800077a0:	ff c5                	inc    ebp
ffffffff800077a2:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff800077a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800077a9:	d2 6e 00             	shr    BYTE PTR [rsi+0x0],cl
ffffffff800077ac:	80 ff ff             	cmp    bh,0xff
ffffffff800077af:	ff                   	(bad)  
ffffffff800077b0:	ff                   	(bad)  
ffffffff800077b1:	df 6e 00             	fild   QWORD PTR [rsi+0x0]
ffffffff800077b4:	80 ff ff             	cmp    bh,0xff
ffffffff800077b7:	ff                   	(bad)  
ffffffff800077b8:	ff                   	(bad)  
ffffffff800077b9:	ec                   	in     al,dx
ffffffff800077ba:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff800077bb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800077c1:	f9                   	stc    
ffffffff800077c2:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff800077c3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800077c9:	06                   	(bad)  
ffffffff800077ca:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff800077cb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800077d1:	13 6f 00             	adc    ebp,DWORD PTR [rdi+0x0]
ffffffff800077d4:	80 ff ff             	cmp    bh,0xff
ffffffff800077d7:	ff                   	(bad)  
ffffffff800077d8:	ff 20                	jmp    QWORD PTR [rax]
ffffffff800077da:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff800077db:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800077e1:	2d 6f 00 80 ff       	sub    eax,0xff80006f
ffffffff800077e6:	ff                   	(bad)  
ffffffff800077e7:	ff                   	(bad)  
ffffffff800077e8:	ff                   	(bad)  
ffffffff800077e9:	3a 6f 00             	cmp    ch,BYTE PTR [rdi+0x0]
ffffffff800077ec:	80 ff ff             	cmp    bh,0xff
ffffffff800077ef:	ff                   	(bad)  
ffffffff800077f0:	ff 47 6f             	inc    DWORD PTR [rdi+0x6f]
ffffffff800077f3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800077f9:	54                   	push   rsp
ffffffff800077fa:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff800077fb:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007801:	61                   	(bad)  
ffffffff80007802:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff80007803:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007809:	6e                   	outs   dx,BYTE PTR ds:[rsi]
ffffffff8000780a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff8000780b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007811:	7b 6f                	jnp    ffffffff80007882 <isr_table+0x781>
ffffffff80007813:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007819:	88 6f 00             	mov    BYTE PTR [rdi+0x0],ch
ffffffff8000781c:	80 ff ff             	cmp    bh,0xff
ffffffff8000781f:	ff                   	(bad)  
ffffffff80007820:	ff 95 6f 00 80 ff    	call   QWORD PTR [rbp-0x7fff91]
ffffffff80007826:	ff                   	(bad)  
ffffffff80007827:	ff                   	(bad)  
ffffffff80007828:	ff a2 6f 00 80 ff    	jmp    QWORD PTR [rdx-0x7fff91]
ffffffff8000782e:	ff                   	(bad)  
ffffffff8000782f:	ff                   	(bad)  
ffffffff80007830:	ff af 6f 00 80 ff    	jmp    FWORD PTR [rdi-0x7fff91]
ffffffff80007836:	ff                   	(bad)  
ffffffff80007837:	ff                   	(bad)  
ffffffff80007838:	ff                   	(bad)  
ffffffff80007839:	bc 6f 00 80 ff       	mov    esp,0xff80006f
ffffffff8000783e:	ff                   	(bad)  
ffffffff8000783f:	ff                   	(bad)  
ffffffff80007840:	ff c9                	dec    ecx
ffffffff80007842:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff80007843:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007849:	d6                   	(bad)  
ffffffff8000784a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff8000784b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007851:	e3 6f                	jrcxz  ffffffff800078c2 <isr_table+0x7c1>
ffffffff80007853:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007859:	f0 6f                	lock outs dx,DWORD PTR ds:[rsi]
ffffffff8000785b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007861:	fd                   	std    
ffffffff80007862:	6f                   	outs   dx,DWORD PTR ds:[rsi]
ffffffff80007863:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007869:	0a 70 00             	or     dh,BYTE PTR [rax+0x0]
ffffffff8000786c:	80 ff ff             	cmp    bh,0xff
ffffffff8000786f:	ff                   	(bad)  
ffffffff80007870:	ff 17                	call   QWORD PTR [rdi]
ffffffff80007872:	70 00                	jo     ffffffff80007874 <isr_table+0x773>
ffffffff80007874:	80 ff ff             	cmp    bh,0xff
ffffffff80007877:	ff                   	(bad)  
ffffffff80007878:	ff 24 70             	jmp    QWORD PTR [rax+rsi*2]
ffffffff8000787b:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007881:	31 70 00             	xor    DWORD PTR [rax+0x0],esi
ffffffff80007884:	80 ff ff             	cmp    bh,0xff
ffffffff80007887:	ff                   	(bad)  
ffffffff80007888:	ff                   	(bad)  
ffffffff80007889:	3e 70 00             	ds jo  ffffffff8000788c <isr_table+0x78b>
ffffffff8000788c:	80 ff ff             	cmp    bh,0xff
ffffffff8000788f:	ff                   	(bad)  
ffffffff80007890:	ff 4b 70             	dec    DWORD PTR [rbx+0x70]
ffffffff80007893:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff80007899:	58                   	pop    rax
ffffffff8000789a:	70 00                	jo     ffffffff8000789c <isr_table+0x79b>
ffffffff8000789c:	80 ff ff             	cmp    bh,0xff
ffffffff8000789f:	ff                   	(bad)  
ffffffff800078a0:	ff 65 70             	jmp    QWORD PTR [rbp+0x70]
ffffffff800078a3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800078a9:	72 70                	jb     ffffffff8000791b <LoadGdt+0xb>
ffffffff800078ab:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800078b1:	7f 70                	jg     ffffffff80007923 <LoadGdt+0x13>
ffffffff800078b3:	00 80 ff ff ff ff    	add    BYTE PTR [rax-0x1],al
ffffffff800078b9:	8c 70 00             	mov    WORD PTR [rax+0x0],?
ffffffff800078bc:	80 ff ff             	cmp    bh,0xff
ffffffff800078bf:	ff                   	(bad)  
ffffffff800078c0:	ff 99 70 00 80 ff    	call   FWORD PTR [rcx-0x7fff90]
ffffffff800078c6:	ff                   	(bad)  
ffffffff800078c7:	ff                   	(bad)  
ffffffff800078c8:	ff a6 70 00 80 ff    	jmp    QWORD PTR [rsi-0x7fff90]
ffffffff800078ce:	ff                   	(bad)  
ffffffff800078cf:	ff                   	(bad)  
ffffffff800078d0:	ff b3 70 00 80 ff    	push   QWORD PTR [rbx-0x7fff90]
ffffffff800078d6:	ff                   	(bad)  
ffffffff800078d7:	ff                   	(bad)  
ffffffff800078d8:	ff c0                	inc    eax
ffffffff800078da:	70 00                	jo     ffffffff800078dc <isr_table+0x7db>
ffffffff800078dc:	80 ff ff             	cmp    bh,0xff
ffffffff800078df:	ff                   	(bad)  
ffffffff800078e0:	ff cd                	dec    ebp
ffffffff800078e2:	70 00                	jo     ffffffff800078e4 <isr_table+0x7e3>
ffffffff800078e4:	80 ff ff             	cmp    bh,0xff
ffffffff800078e7:	ff                   	(bad)  
ffffffff800078e8:	ff                   	(bad)  
ffffffff800078e9:	da 70 00             	fidiv  DWORD PTR [rax+0x0]
ffffffff800078ec:	80 ff ff             	cmp    bh,0xff
ffffffff800078ef:	ff                   	(bad)  
ffffffff800078f0:	ff e7                	jmp    rdi
ffffffff800078f2:	70 00                	jo     ffffffff800078f4 <isr_table+0x7f3>
ffffffff800078f4:	80 ff ff             	cmp    bh,0xff
ffffffff800078f7:	ff                   	(bad)  
ffffffff800078f8:	ff f4                	push   rsp
ffffffff800078fa:	70 00                	jo     ffffffff800078fc <isr_table+0x7fb>
ffffffff800078fc:	80 ff ff             	cmp    bh,0xff
ffffffff800078ff:	ff                   	(bad)  
ffffffff80007900:	ff                   	.byte 0xff

ffffffff80007901 <LoadIdt>:
ffffffff80007901:	0f 01 1f             	lidt   [rdi]
ffffffff80007904:	c3                   	ret    
ffffffff80007905:	66 2e 0f 1f 84 00 00 	cs nop WORD PTR [rax+rax*1+0x0]
ffffffff8000790c:	00 00 00 
ffffffff8000790f:	90                   	nop

ffffffff80007910 <LoadGdt>:
ffffffff80007910:	0f 01 17             	lgdt   [rdi]
ffffffff80007913:	66 b8 10 00          	mov    ax,0x10
ffffffff80007917:	8e d8                	mov    ds,eax
ffffffff80007919:	8e c0                	mov    es,eax
ffffffff8000791b:	8e d0                	mov    ss,eax
ffffffff8000791d:	48 b8 2c 79 00 80 ff 	movabs rax,0xffffffff8000792c
ffffffff80007924:	ff ff ff 
ffffffff80007927:	6a 08                	push   0x8
ffffffff80007929:	50                   	push   rax
ffffffff8000792a:	48 cb                	retfq  

ffffffff8000792c <LoadGdt.trampoline>:
ffffffff8000792c:	c3                   	ret    
